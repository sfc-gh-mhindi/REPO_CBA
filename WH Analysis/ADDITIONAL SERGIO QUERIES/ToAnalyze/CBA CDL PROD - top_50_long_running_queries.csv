QUERY_ID,QUERY_ID_INT,QUERY_TEXT,QUERY_EXECUTION_TIME_SECONDS,PARTITIONS_SCANNED,PARTITIONS_TOTAL
01bef22e-3204-c93c-0000-c71d2d2e38c6,25,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        * EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",12635.390000,2009742,2009868
01beb037-3204-c1f6-0000-c71d2b43c762,1835,"create or replace temporary table Digital_Transactions as
select    
    b.fraudtype,
    b.DETECTION,
    b.case_detection,
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') as _B_ANY_CUST_FTP_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00') as _x_cif_recipient_new_date,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_BC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _L_BC_EVENT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SCM_RSK_HGH_DT, 38, 2), '1960-01-01 00:00:00') as _L_SCM_RSK_HGH_DT,
    _L_NC_RESPONSE_CODE,
    dtl_ex_0_20s_001 AS RECEIPT_NUM,
    (a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID,
    cmx_tran_id,
    hdr_activity_type,
    ssx_cust_num,
    chl_id_ob_userid,
    chl_id_pb_userid,
    dtl_ex_1_5s_01 as dmx_5byte_string_01,
    _a_cse_chg_dwl_ind AS DWL_change,
    dtl_ex_0_n_006 as Task_ID,
    dtl_ex_0_i_002 AS FTP_Indicator_1,
    rsp_ex_2_i_006 AS FTP_Indicator_2,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_SUM, 38, 2) as _X_CIF_RECIPIENT_SUM,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_SUM, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM,
    TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2) as _x_cif_recipient_new_cnt,
    TRY_TO_NUMBER(TGX_TRAN_AMT) AS TGX_TRAN_AMT,
    TRY_TO_NUMBER(_A_BTS_CUST_AGE, 38, 2)as _A_BTS_CUST_AGE,
    tgx_bank_name,
    tgx_bank_num,
    tgx_branch_id,
    tgx_acct_num,
    tgx_name,
    _L_ACCT_NUM,
    _L_BANK_NUM,
    _l_branch_id, 
    DTL_EX_3_80S_003 AS pmt_description_1,
    tgx_description AS pmt_description_2,
    TRY_TO_NUMBER(_L_SCM_RSK_HGH_SCR, 38, 2) as _L_SCM_RSK_HGH_SCR,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 4) as CERBERUS_SCORE_1,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 5) as CERBERUS_SCORE_2,
    TRY_TO_NUMBER(_L_CUST_SCAMRISK_SCORE, 38, 2) as _L_CUST_SCAMRISK_SCORE,
    TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE,
    TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_S,
    TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2) as _l_max_30d_mule_score,
    TRY_TO_NUMBER(_L_NUM_SESS_2H, 38, 2) as _L_NUM_SESS_2H,
    TRY_TO_NUMBER(_L_NUM_SESS_4H, 38, 2) as _L_NUM_SESS_4H,
    TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE,38,2) as _L_TRUST_NEW_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE,38,2) as _L_TRUST_UNUSED_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN,38,2) as _L_TRUST_PAYEE_HIGH_VLOC_IN,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT,38,2) as _L_TRUST_PAYEE_DORM_ACCT,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYER,
    TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev,38,2) as _l_rcnt_hi_scr_on_dev,
    TRY_TO_NUMBER(_B_RECIP_SUM_LONG, 38, 2) as _B_RECIP_SUM_LONG,
    TRY_TO_NUMBER(_B_RECIP_SUM_SHORT, 38, 2) as _B_RECIP_SUM_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_CNT_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_CNT_DATE,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_LONG, 38, 2) as _B_RECIP_FTP_CNT_LONG,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_SHORT, 38, 2) as _B_RECIP_FTP_CNT_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_SUM_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_SUM_DATE,
from LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
    on a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where mid_event_ts >= '20241201'
and mid_event_ts <= '20241215';",11628.728000,17206,674614
01be4f4b-3204-b365-0000-c71d2825b4ea,144400,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_CASE_TYPE_shroffpr as
SELECT
  a._L_PMT_AMT,
  a._A_CUST_AVG_ACCT_BAL,
  a._X_NPP_OUT_SUM_DATE,
  a._L_FINGERPRINT_3,
  Substr(_l_Fingerprint_3,16,1) as int_student_flag,
  Substr(_l_Fingerprint_3,10,2) as complaint_count,
  Substr(_l_Fingerprint_3,3,1) as home_loan,
  -- a._L_FINGERPRINT_4,
  Substr(_l_Fingerprint_4,1,3) as gamb_spend_1_3,
  Substr(_l_Fingerprint_4,4,3) as gamb_spend_4_6,
  Substr(_l_Fingerprint_4,7,3) as gamb_spend_7_9,
  Substr(_l_Fingerprint_4,10,2) as mule_score,
  a._L_FINGERPRINT_5,
  a._a_cust_os_ver,
  a._a_cust_os_name,
  a._A_2WAY_TYPE,
  a._A_AUTO_DEC_CP_PP_DT,
  a._A_BTS_BCH_SUM,
  a._A_BTS_CUST_AGE,
  a._A_CAPP_NOTIFY_OPT_OUT_DT,
  a._A_CLIENT_CITY_10,
  a._A_CURR_CAPP_DEVICE_CNT,
  a._A_CURR_NB_BROWSER_CNT,
  a._A_PREV_CAPP_DEVICE_CNT,
  a._A_Q,
  a._A_R,
  a._A_SCAMP1_MLW_DT,
  a._A_SCAMP2_MLW_DT,
  a._A_SCAMP5_MLW_DT,
  a._A_SCAMP7_MLW_DT,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
  a._L_PUSH_API_4,
  a._L_PUSH_API_DT_1,
  a._L_PUSH_API_DT_2,
  a._L_PUSH_API_DT_3,
  a._L_PUSH_API_DT_4,
  a._b_client_postcode_cnt_4,
  a._l_cntry_age,
  a._a_npp_in_unrelated_sum_24_1,
  a._x_ft_over5k_recip_cnt,
  a._b_recip_sum_aaa_short,
  a._l_clipb_event_cnt,
  a._x_cif_recipient_new_cnt,
  a._a_npp_in_unrelated_sum_24_2,
  a._b_npp_out_sum_1,
  a._l_acc_amt_1d,
  a._b_client_postcode_cnt_1,
  a._a_transport_reg_cnt_1,
  a._a_multi_cnt,
  a._l_m_l_4,
  a._a_prof_capp_device_nftp_1,
  a._n_ca_lgn_cnt_24h_1,
  a._x_name_match_cnt,
  a._n_capp_linked_cnt_2,
  a._a_prof_capp_device_cnt_5,
  a._a_prof_capp_device_cnt_4,
  a._b_list_rl1_scam_tp_cif,
  a._b_npp_blacklist_recip_flag,
  a._l_sess_cnt_web,
  a._n_100k_crypto_sum,
  a._n_crypto_recipient_sum,
  a._b_recip_sum_aaa_2,
  a._l_m_l_c,
  a._l_time_zone,
  a._b_client_postcode_sum_5,
  a._a_cust_npp_in_sum_aaa_1,
  a._l_ip_age,
  a._a_npp_inbound_sum_amt,
  a._x_ft_over5k_recip_sum,
  a._x_cif_sender_cnt,
  a._a_nb_logons_cnt_2,
  a._a_clc_ftp_amt,
  a._l_trvl_spd,
  a._n_2wp_tran_ind_1,
  a._b_recip_sum_long,
  a._a_crypto_mnthly_sum,
  a._x_t_2,
  a._a_gl_trf_acc_bal,
  a._l_sess_cnt_mob_browser,
  a._b_client_postcode_sum_1,
  a._l_score_3,
  a._n_noncrypto_sum,
  a._a_crd_crypto_proc_flg,
  a._b_npp_out_cnt_2,
  a._a_npp_out_cnt_2,
  a._a_sch_amt,
  a._a_p_l_3,
  a._n_100k_noncrypto_sum,
  a._b_npp_out_ftp_sum_1,
  a._l_sdid_cnt_1,
  a._b_client_postcode_sum_4,
  a._a_cust_npp_out_sum_aaa_long,
  a._i_cust_tran_sum_2,
  a._b_client_postcode_cnt_5,
  a._a_list_rl1_scam_cust_cif,
  a._n_mob_samsung_tran_sum_2,
  a._l_num_sess_2h,
  a._a_vpn_vps_ip_logon_count,
  a._n_mob_oth_tran_sum_3,
  a._x_t_5,
  a._a_geo_distance,
  a._x_name_match_ind,
  a._a_nb_logons_cnt_3,
  a._n_mob_oth_tran_sum_2,
  a._l_days_lst_dev_js,
  a._n_mob_samsung_tran_sum_1,
  a._a_ftp_sum_1,
  a._l_num_sess_4h,
  a._l_nc_match_name_conf,
  a._b_recip_sum_aaa_5,
  a._l_dpi_change,
  a._n_100k_crypto_cnt,
  a._b_recip_sum_1,
  a._n_capp_logons_cnt_3m,
  a._n_mob_apple_tran_sum_2,
  a._a_scam_risky_mcc_prelead_amt,
  a._l_m_l_3,
  a._x_cif_rec_cnt,
  a._n_nmchk_cnt,
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_proxy_type,
  a._l_lang_3,
  a._a_cif_establish_cust_pcode,
  a._b_crypto_risk,
  a._l_lang_1,
  a._a_mrisk_foreign_ip_cntry_code,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
  a.TGX_TRAN_AMT,
  a.TTS_TRAN_DATE_ALT,
  a.TTS_TRAN_TIME_ALT,
  c.*,
  CASE
    WHEN c.MULE_CATGORY IS NULL THEN 0
    ELSE 1
  END AS Target
from ( SELECT
      *
    FROM
      PRD_P01_DMN_FRAUMD.LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT
    WHERE
      TTS_TRAN_DATE_ALT BETWEEN '20240601'
      AND '20240801' and hdr_source = 'NPP INB' and ssx_cust_num <> 'Not Available') a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_CASE_TYPE_PEGA_VERENIIL_CUS AS c ON c.DTL_EX_0_20S_001 = a.DTL_EX_0_20S_001;",11118.110000,0,0
01bed758-3204-c558-0000-c71d2c69f096,207,select * from PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT where SSX_CUST_NUM = '20034469';,11065.471000,683683,683690
01bed529-3204-c556-0000-c71d2c5a4b7a,212,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_TAPI_SHROFFPR_VAL as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    OR c.BAD = 1 THEN 1
    ELSE 0
  END AS final_target,
  SSX_CUST_NUM,
  DTL_EX_0_20S_001,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 -- TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250602 and 20250715
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",11029.104000,682625,682645
01bea88e-3204-c1f7-0000-c71d2afc3752,6484,"SELECT count(1) AS ""COUNT(LITERAL())"" FROM ( SELECT ""CMX_TRAN_ID"" FROM ( SELECT ""CMX_TRAN_ID"" FROM TECHDS_CCA_SCORED_TEST_VAL_CNP_D011_V1) GROUP BY ""CMX_TRAN_ID"") LIMIT 1",10915.839000,256,256
01bee555-3204-c557-0000-c71d2ccd2996,202,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_SHROFFPR_VAL as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    -- OR c.BAD = 1 
    THEN 1
    ELSE 0
  END AS final_target,
  SSX_CUST_NUM,
  DTL_EX_0_20S_001,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 -- TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
-- left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250602 and 20250715
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",10840.065000,686080,686110
01bed52d-3204-c557-0000-c71d2c5a88c6,211,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_TAPI_SHROFFPR_oot as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    OR c.BAD = 1 THEN 1
    ELSE 0
  END AS final_target,
  SSX_CUST_NUM,
  DTL_EX_0_20S_001,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 -- TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250716 and 20250801
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",10721.478000,682752,682771
01beefcf-3204-c93a-0000-c71d2d1d3b32,2247,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905163819_scored_1 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it3_F2_xval_2day_all_20250905163819.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_NC_MATCH_NAME_CONF, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, REL_MNG, FA_1, NO_1, FP, GOVT_BENE, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_CNT_Q, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_RULE_DCLN_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_SUM_N, CUS_SUM_FINL_APRD_TRAN_SUM_N, CUS_SUM_FDP_RULE_TRIG_CNT_Q, CUS_SUM_DOMS_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_CNT_Q, CUS_SUM_PAY_PASS_TRAN_CNT_Q, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_CHIP_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_NTB_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CUS_MAX_C_2WAY_CRD_RULE_FLAG, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_RULE_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_APRD_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_FINL_APRD_TRAN_SUM_N, CRD_SUM_INCO_CVVA_SUM_N, CRD_SUM_FDP_RULE_TRIG_CNT_Q, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_CHIP_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CRD_SUM_CAPP_LOGN_CNT_Q, CRD_SUM_VIEW_CARD_DETL_CNT_Q, CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F, CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_DOMS_TRAN_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_CNT_Q, CMC_SUM_OSEA_TRAN_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_CNT_Q, CMC_SUM_PAY_PASS_TRAN_CNT_Q, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-07'
-- limit 870
);",10563.515000,7417,7417
01beaf83-3204-c1f3-0000-c71d2b3d8776,147769,"execute notebook ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""TEST_TE2RULES""()",10342.111000,0,0
01beefce-3204-c939-0000-c71d2d1d48aa,2249,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905163819_scored_0 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it3_F2_xval_2day_all_20250905163819.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_NC_MATCH_NAME_CONF, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, REL_MNG, FA_1, NO_1, FP, GOVT_BENE, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_CNT_Q, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_RULE_DCLN_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_SUM_N, CUS_SUM_FINL_APRD_TRAN_SUM_N, CUS_SUM_FDP_RULE_TRIG_CNT_Q, CUS_SUM_DOMS_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_CNT_Q, CUS_SUM_PAY_PASS_TRAN_CNT_Q, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_CHIP_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_NTB_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CUS_MAX_C_2WAY_CRD_RULE_FLAG, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_RULE_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_APRD_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_FINL_APRD_TRAN_SUM_N, CRD_SUM_INCO_CVVA_SUM_N, CRD_SUM_FDP_RULE_TRIG_CNT_Q, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_CHIP_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CRD_SUM_CAPP_LOGN_CNT_Q, CRD_SUM_VIEW_CARD_DETL_CNT_Q, CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F, CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_DOMS_TRAN_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_CNT_Q, CMC_SUM_OSEA_TRAN_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_CNT_Q, CMC_SUM_PAY_PASS_TRAN_CNT_Q, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) <= '2025-06-07'
-- limit 870
);",10332.292000,7417,7417
01be8a32-3204-bee3-0000-c71d2a00252e,538,"SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
,dtl_ex_0_20s_001
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,
        -- Blacklist and scam indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_acct,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl1_scam_tp_cif, '[^0-9.-]', '')), -1) as _b_list_rl1_scam_tp_cif,
        -- High-risk biller metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_recip_flag,
        -- NPP outbound transaction metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_sum_1,
        -- NPP first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_2,
        -- Other risk indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_open_listed_last_cif_2, '[^0-9.-]', '')), -1) as _b_open_listed_last_cif_2,
        -- Recipient first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_long, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_long,
        -- Recipient link sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_short,
        -- Recipient transaction sums (various time periods)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_4, '[^0-9.-]', '')), -1) as _b_recip_sum_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_7, '[^0-9.-]', '')), -1) as _b_recip_sum_7,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_today, '[^0-9.-]', '')), -1) as _b_recip_sum_today,
        -- Recipient AAA transaction sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_1, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_4, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_short,
        -- Fixed: _b_rfm_whitelist_ind (was incorrectly aliased)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_rfm_whitelist_ind, '[^0-9.-]', '')), -1) as _b_rfm_whitelist_ind,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_1d_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_1d_out,
        
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added

,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime",10232.726000,360431,664679
01bee553-3204-c554-0000-c71d2cccbc86,14174,select * from PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_SHROFFPR limit 1000;,10200.507000,1,1536
01be6355-3204-b99b-0000-c71d28c6959e,490,"SELECT
 CASE
   WHEN tts_tran_date_alt IS NULL OR TRIM(tts_tran_date_alt) = ''
     THEN 'NULL/blank'
   WHEN LENGTH(tts_tran_date_alt) = 8
        AND LENGTH(TRANSLATE(tts_tran_date_alt,'0123456789','')) = 0
     THEN 'YYYYMMDD'
   ELSE 'other'
 END AS date_format,
 MIN(tts_tran_date_alt) AS min_raw,
 MAX(tts_tran_date_alt) AS max_raw,
 COUNT(*) AS n
FROM PRD_P01_DMN_FRAUMD.LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT
WHERE hdr_source = 'NPP INB'
 AND ssx_cust_num <> 'Not Available'
 AND dtl_ex_0_20S_001 IS NOT NULL
GROUP BY 1
ORDER BY n DESC;",9902.448000,444291,2190394
01beec16-3204-c558-0000-c71d2cfdc962,30,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",9797.593000,2002471,2002479
01bec0f6-3204-c1f3-0000-c71d2bb91f8a,44,"CREATE OR REPLACE TEMPORARY TABLE LABMLFRD.NT_RETRO_SAMPLE_TMP AS (
    SELECT TOP 1000

        tran.*
    
        -- -- Retro output
        -- retr.TRAN_IDNN_BK AS TRAN_I,
        -- CAST(retr.MODL_SCOR_V, FLOAT) AS MODL_SCOR_V,
        
    
        -- -- Cards transaction
        -- tran.SSX_CUST_NUM, -- CIF
        -- tran.CHL_ID_CARD_NUM, --Card number
        -- tran.CHL_CT_TERM_OWNER_ID, --merchant ID
        -- tran.CHL_CT_ACQ_ID -- acquirer ID
    FROM
        LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
    INNER JOIN
        PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_RETRO_SCORES retr
    ON 
        retr.TRAN_IDNN_BK = TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066
)
;",9749.817000,1943056,1943056
01be6356-3204-b87d-0000-c71d28c6b12e,489,"SELECT
 SUM(CASE WHEN ssx_cust_num IS NULL OR ssx_cust_num = 'Not Available' THEN 1 ELSE 0 END) AS a_bad_cust,
 SUM(CASE WHEN tts_tran_date_alt IS NULL OR TRIM(tts_tran_date_alt) = '' THEN 1 ELSE 0 END) AS a_bad_date,
 SUM(CASE WHEN tts_tran_time_alt IS NULL OR TRIM(tts_tran_time_alt) = '' THEN 1 ELSE 0 END) AS a_bad_time
FROM PRD_P01_DMN_FRAUMD.LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT
WHERE hdr_source = 'NPP INB'
 AND dtl_ex_0_20S_001 IS NOT NULL;",9729.299000,444294,2190506
01beb052-3204-c1f5-0000-c71d2b44f6ee,17564,"select  TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
 from PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT limit 500;",9695.365000,1,673414
01be061f-3204-aca9-0000-c71d2609d136,334,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""DTL_EX_0_20S_001"" STRING(16777216), ""DTL_EX_1_5S_01"" STRING(16777216), ""TGX_TRAN_AMT"" STRING(16777216), ""HOUR"" BIGINT, ""_A_MARVIN_DIGI_DECISION_NUM"" STRING(16777216), ""LAG_A_MARVIN_DIGI_DECISION_NUM"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_BTS_MAX_SE_DT"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_CRD_ACTIONCODE_DT_1"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_LO_DT"" BIGINT, ""_A_CC_DT"" BIGINT, ""_A_CAPP_NOTIFY_OPT_OUT_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_3"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_NPP_FTP_DATE2"" BIGINT, ""_A_P_P_3"" BIGINT, ""_A_CRD_NPP_PAYMENT_DT"" BIGINT, ""_A_IS_IP_DT_3"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_5_2"" BIGINT, ""_A_ONLINE_PL_DT"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_DTL_HID_UNHID_ACCT_DT_PREV"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_SCAMP1_MLW_DT"" BIGINT, ""_A_SCAMP2_MLW_DT"" BIGINT, ""_A_SCAMP5_MLW_DT"" BIGINT, ""_A_SCAMP7_MLW_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP4_DT"" BIGINT, ""_A_NB_LASTLOGON_DT_3"" BIGINT, ""_A_AUTO_DEC_CP_PP_DT"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_INB_ALL_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_1"" BIGINT, ""_A_RETRIEVE_STMT_DETAILS_DT"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_NPP_WHITELIST_CUS_ACCT_DT"" BIGINT, ""_A_NPP_WHITELIST_PAYID_DT"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_BLACKLIST_PAYID_DT"" BIGINT, ""_A_NPP_INB_OFI_PAYID_DT"" BIGINT, ""_A_NPP_OUT_CBA_PAYID_DT"" BIGINT, ""_A_AUS_IP_ACTIVITY"" BIGINT, ""_A_CIF_ESTABLISH_DT"" BIGINT, ""_A_ECV_DOCUMENT_DT"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_CLIENT_POSTCODE_DT_2"" BIGINT, ""_A_CLIENT_PORT_DATE_1"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_OPEN_LAST_PAYER_CIF_DT_10"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_NPP_OUT_CNT_DATE"" BIGINT, ""_I_ALL_LOGONS_FDT"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_PUSH_API_DT_2"" BIGINT, ""_L_PUSH_API_DT_3"" BIGINT, ""_L_PUSH_API_DT_4"" BIGINT, ""_L_FIRST_RAT_DT"" BIGINT, ""_L_M_C_5"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_MOB_RAT_DT"" BIGINT, ""_L_IS_RAT_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_1701_DT_1"" BIGINT, ""_N_D_P_C"" BIGINT, ""_N_T_3"" BIGINT, ""_N_1601_DT"" BIGINT, ""_N_F_3"" BIGINT, ""_N_NB_MEDIUM_PRIORITY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_CUST_NB_DEVICE_DT"" BIGINT, ""_N_CUST_NB_FIRST_DEVICE_DT"" BIGINT, ""_N_HCE_ADD_CARD"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CAPP_REG_DT_3"" BIGINT, ""_N_CAPP_REG_DT_5"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_PASSWORD_TEMP"" BIGINT, ""_X_D_2"" BIGINT, ""_A_BTS_BIO_SE"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_ECV_COMMSEC_FLAG"" NUMBER(38, 2), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_ATM_WITHDRAWAL_SUM_AMT"" NUMBER(38, 2), ""_A_NPP_INBOUND_SUM_AMT"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_DISTANCE"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_FTP_SUM_1"" NUMBER(38, 2), ""_A_MULTI_CNT"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_3"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_P_N_3"" STRING(16777216), ""_A_P_N_C"" STRING(16777216), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_CUST_AVG_ACCT_BAL"" NUMBER(38, 2), ""_A_E"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_T"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_CAPP_REGISTRATIONS_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_2"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_DEVICE_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_LOGON_NB_IP_PC"" STRING(16777216), ""_A_CURR_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE"" STRING(16777216), ""_A_PREV_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE_MODEL"" STRING(16777216), ""_A_PROF_CAPP_DEVICE_2"" STRING(16777216), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_2"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_3"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_5"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_MODEL_1"" STRING(16777216), ""_A_VPN_VPS_IP_LOGON_COUNT"" NUMBER(38, 2), ""_A_CC_CASH_ADVANCE_AMT"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_CNT_2"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NPP_FTP_SUM"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_5"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_7"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_SHORT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_CIF_ESTABLISH_EMAIL"" STRING(16777216), ""_A_CIF_ESTABLISH_PHONE"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_CLIENT_POSTCODE_FTP_SUM_3"" NUMBER(38, 2), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_CITY_CNT_1"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_3"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_2"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_5"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_6"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_7"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_BVT_NUMERIC_1"" NUMBER(38, 2), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_LIST_RL1_SCAM_TP_CIF"" NUMBER(38, 2), ""_B_NPP_OUT_FTP_SUM_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_4"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_5"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_6"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_7"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_4"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_2"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_3"" NUMBER(38, 2), ""_I_ALL_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_2"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_3"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_3M"" NUMBER(38, 2), ""_I_CUST_NET_L_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_4"" NUMBER(38, 2), ""_I_CUST_NET_CNT_LONG"" NUMBER(38, 2), ""_L_SCM_RSK_SCR_2"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_DPI_CHANGE"" NUMBER(38, 2), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_PLUGIN_CNT"" NUMBER(38, 2), ""_L_RARE_SIM_CNTRY_CODE"" NUMBER(38, 2), ""_L_ROOTED_DEV"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_SDID_CNT_1"" NUMBER(38, 2), ""_L_SDID_CNT_3"" NUMBER(38, 2), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_MATCH_NAME"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BC_AO_SCORE"" NUMBER(38, 2), ""_L_BRANCH_ID"" STRING(16777216), ""_L_DRAG_N_DROP"" NUMBER(38, 2), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_RCNT_HI_SCR_ON_DEV"" NUMBER(38, 2), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SCORE_1"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_ACCUM_AMT_ANOM"" NUMBER(38, 2), ""_L_FRST_PROXY"" NUMBER(38, 2), ""_L_NEW_LANG"" NUMBER(38, 2), ""_L_SCRN_RES_ANOM"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_SCORE_4"" NUMBER(38, 2), ""_L_SCORE_5"" NUMBER(38, 2), ""_L_RAT_CHECK"" NUMBER(38, 2), ""_L_M_L_1"" NUMBER(38, 2), ""_L_M_L_4"" NUMBER(38, 2), ""_L_M_L_C"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_BC_SESS_ID"" STRING(16777216), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_BC_SCORE"" NUMBER(38, 2), ""_L_BROWSER_AGE"" NUMBER(38, 2), ""_L_CITY_AGE"" NUMBER(38, 2), ""_L_CLIPB_EVENT_CNT"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_IOS"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_JS"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_DOM_HAND_CH_ANOMALY"" NUMBER(38, 2), ""_L_FT_RAT_APP_INST"" NUMBER(38, 2), ""_L_G_CON_DEV"" NUMBER(38, 2), ""_L_IP_AGE"" NUMBER(38, 2), ""_L_IS_ACTIVE_CALL"" NUMBER(38, 2), ""_L_ISP_AGE"" NUMBER(38, 2), ""_L_KEY_MOUSE_ANOMALY"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_LGN_IMPORT_ANOMALY"" NUMBER(38, 2), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_MINS_LST_LGN_CAPPED"" NUMBER(38, 2), ""_L_MOUSE_CNT"" NUMBER(38, 2), ""_L_MOUSE_DOODL"" NUMBER(38, 2), ""_L_NEW_BROWSER"" NUMBER(38, 2), ""_L_NEW_BROWSER_ANOMALY"" NUMBER(38, 2), ""_L_NEW_MOB_APP_USER"" NUMBER(38, 2), ""_L_NEW_MOB_BROWSER_USER"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_ORIENT_EVENT_CNT"" NUMBER(38, 2), ""_L_OS_CH_ANOMALY"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PRIV_BROWSING_ANOMALY"" NUMBER(38, 2), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SCRN_W"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_SDK"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_SESS_ID"" STRING(16777216), ""_L_SIM_IP_CNTRY_MISMATCH"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOTAL_SESS_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_L_TYPE_PATTERNS_ANOMALY"" NUMBER(38, 2), ""_L_UID_AGE"" NUMBER(38, 2), ""_N_BC_CR_BC_1"" NUMBER(38, 2), ""_N_FTP_CNT_1"" NUMBER(38, 2), ""_N_5_RCNT_M100S_1"" STRING(16777216), ""_N_5_RCNT_M100S_2"" STRING(16777216), ""_N_MPS_MNDT_CNT_24H_1"" NUMBER(38, 2), ""_N_MOB_OTH_TRAN_SUM_1"" NUMBER(38, 2), ""_N_NB_LOGON_USER_AGENT"" STRING(16777216), ""_N_CA_DEVICE_PROFILE_1"" NUMBER(38, 2), ""_N_CA_DEVICE_PROFILE_3"" NUMBER(38, 2), ""_N_P20_7D_CNT_1"" NUMBER(38, 2), ""_N_CA_LGN_CNT_24H_1"" NUMBER(38, 2), ""_N_NMCHK_CNT"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_IND_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CLIENT_SSID_NAME_1"" STRING(16777216), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_CRYPTO_RECIPIENT_SUM"" NUMBER(38, 2), ""_N_RP_SES_IP_1"" NUMBER(38, 2), ""_N_MULTI_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_NB_SUM_TPT_4"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_H_1"" NUMBER(38, 2), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_OPEN_FTP_SUM_7D"" NUMBER(38, 2), ""_N_CAPP_BPAY_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_CIF_SENDER_SUM"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_IND"" NUMBER(38, 2), ""_X_FT_OVER5K_RECIP_CNT"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_T_1"" NUMBER(38, 2), ""_X_T_2"" NUMBER(38, 2), ""_X_T_3"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_1"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_3"" NUMBER(38, 2))    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            SSX_CUST_NUM,
            TTS_TRAN_DATE_ALT,
            DTL_EX_0_20S_001,
            DTL_EX_1_5S_01,
            TGX_TRAN_AMT,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _A_MARVIN_DIGI_DECISION_NUM,
            LAG(_A_MARVIN_DIGI_DECISION_NUM) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_A_MARVIN_DIGI_DECISION_NUM,
            	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_MAX_SE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CC_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CC_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CC_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_NOTIFY_OPT_OUT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_FTP_DATE2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_FTP_DATE2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_FTP_DATE2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_P_P_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_P_P_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_P_P_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_NPP_PAYMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_NPP_PAYMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_NPP_PAYMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IS_IP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ONLINE_PL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ONLINE_PL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ONLINE_PL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_HID_UNHID_ACCT_DT_PREV, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_HID_UNHID_ACCT_DT_PREV, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_HID_UNHID_ACCT_DT_PREV
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP1_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP2_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP5_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP7_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP4_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_LASTLOGON_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_LASTLOGON_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_LASTLOGON_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_AUTO_DEC_CP_PP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RETRIEVE_STMT_DETAILS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_CUS_ACCT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_CUS_ACCT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_WHITELIST_CUS_ACCT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_WHITELIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_BLACKLIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_BLACKLIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_BLACKLIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_OFI_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_CBA_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUS_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUS_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00'))
            END as _A_AUS_IP_ACTIVITY
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CIF_ESTABLISH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ECV_DOCUMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PORT_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PORT_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_PORT_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_10, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_10, 38, 2), '1960-01-01 00:00:00'))
            END as _B_OPEN_LAST_PAYER_CIF_DT_10
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00'))
            END as _I_ALL_LOGONS_FDT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_FIRST_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_C_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_C_5, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_C_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_MOB_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_MOB_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_MOB_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1701_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_D_P_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_T_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_T_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_T_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1601_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_F_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_F_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_F_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_MEDIUM_PRIORITY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_DEVICE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_DEVICE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_DEVICE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_FIRST_DEVICE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_FIRST_DEVICE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_FIRST_DEVICE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_HCE_ADD_CARD, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_HCE_ADD_CARD, 38, 2), '1960-01-01 00:00:00'))
            END as _N_HCE_ADD_CARD
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PASSWORD_TEMP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00'))
            END as _X_D_2
        
            ,             try_to_number(_a_bts_bio_se, 38, 2) as _a_bts_bio_se
            ,_A_BTS_BNFT
            ,try_to_number(_a_ecv_commsec_flag, 38, 2) as _a_ecv_commsec_flag
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,try_to_number(_a_atm_withdrawal_sum_amt, 38, 2) as _a_atm_withdrawal_sum_amt
            ,try_to_number(_a_npp_inbound_sum_amt, 38, 2) as _a_npp_inbound_sum_amt
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_distance, 38, 2) as _a_geo_distance
            ,_A_P_N_H
            ,try_to_number(_a_ftp_sum_1, 38, 2) as _a_ftp_sum_1
            ,try_to_number(_a_multi_cnt, 38, 2) as _a_multi_cnt
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_3, 38, 2) as _a_p_l_3
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,_A_P_N_3
            ,_A_P_N_C
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_cust_avg_acct_bal, 38, 2) as _a_cust_avg_acct_bal
            ,try_to_number(_a_e, 38, 2) as _a_e
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_t, 38, 2) as _a_t
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_capp_registrations_cnt_3, 38, 2) as _a_capp_registrations_cnt_3
            ,try_to_number(_a_nb_logons_cnt_2, 38, 2) as _a_nb_logons_cnt_2
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_DEVICE_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,_A_LOGON_NB_IP_PC
            ,try_to_number(_a_curr_capp_device_cnt, 38, 2) as _a_curr_capp_device_cnt
            ,_A_PREV_CAPP_DEVICE
            ,try_to_number(_a_prev_capp_device_cnt, 38, 2) as _a_prev_capp_device_cnt
            ,_A_PREV_CAPP_DEVICE_MODEL
            ,_A_PROF_CAPP_DEVICE_2
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,try_to_number(_a_prof_capp_device_cnt_2, 38, 2) as _a_prof_capp_device_cnt_2
            ,try_to_number(_a_prof_capp_device_cnt_3, 38, 2) as _a_prof_capp_device_cnt_3
            ,try_to_number(_a_prof_capp_device_cnt_5, 38, 2) as _a_prof_capp_device_cnt_5
            ,_A_PROF_CAPP_DEVICE_MODEL_1
            ,try_to_number(_a_vpn_vps_ip_logon_count, 38, 2) as _a_vpn_vps_ip_logon_count
            ,try_to_number(_a_cc_cash_advance_amt, 38, 2) as _a_cc_cash_advance_amt
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_nb_bpay_acct_cnt_2, 38, 2) as _a_nb_bpay_acct_cnt_2
            ,try_to_number(_a_nb_bpay_acct_sum_1, 38, 2) as _a_nb_bpay_acct_sum_1
            ,try_to_number(_a_npp_ftp_sum, 38, 2) as _a_npp_ftp_sum
            ,try_to_number(_a_cust_npp_out_sum_aaa_1, 38, 2) as _a_cust_npp_out_sum_aaa_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_5, 38, 2) as _a_cust_npp_out_sum_aaa_5
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_7, 38, 2) as _a_cust_sum_aaa_7
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_short, 38, 2) as _a_cust_sum_aaa_short
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_CIF_ESTABLISH_EMAIL
            ,_A_CIF_ESTABLISH_PHONE
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_client_postcode_ftp_sum_3, 38, 2) as _a_client_postcode_ftp_sum_3
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,try_to_number(_a_client_city_cnt_1, 38, 2) as _a_client_city_cnt_1
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_3
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_2, 38, 2) as _a_client_country_cnt_2
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_a_client_country_cnt_5, 38, 2) as _a_client_country_cnt_5
            ,try_to_number(_a_client_country_cnt_6, 38, 2) as _a_client_country_cnt_6
            ,try_to_number(_a_client_country_cnt_7, 38, 2) as _a_client_country_cnt_7
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_bvt_numeric_1, 38, 2) as _b_bvt_numeric_1
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_list_rl1_scam_tp_cif, 38, 2) as _b_list_rl1_scam_tp_cif
            ,try_to_number(_b_npp_out_ftp_sum_1, 38, 2) as _b_npp_out_ftp_sum_1
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_4, 38, 2) as _b_recip_sum_aaa_4
            ,try_to_number(_b_recip_sum_aaa_5, 38, 2) as _b_recip_sum_aaa_5
            ,try_to_number(_b_recip_sum_aaa_6, 38, 2) as _b_recip_sum_aaa_6
            ,try_to_number(_b_recip_sum_aaa_7, 38, 2) as _b_recip_sum_aaa_7
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_cnt_3, 38, 2) as _b_client_postcode_cnt_3
            ,try_to_number(_b_client_postcode_cnt_4, 38, 2) as _b_client_postcode_cnt_4
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_cust_tran_sum_1, 38, 2) as _i_cust_tran_sum_1
            ,try_to_number(_i_cust_tran_sum_2, 38, 2) as _i_cust_tran_sum_2
            ,try_to_number(_i_cust_tran_sum_3, 38, 2) as _i_cust_tran_sum_3
            ,try_to_number(_i_all_logons_cnt_1, 38, 2) as _i_all_logons_cnt_1
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,try_to_number(_i_capp_logons_perc_2, 38, 2) as _i_capp_logons_perc_2
            ,try_to_number(_i_capp_logons_perc_3, 38, 2) as _i_capp_logons_perc_3
            ,try_to_number(_i_capp_logons_perc_3m, 38, 2) as _i_capp_logons_perc_3m
            ,try_to_number(_i_cust_net_l_cnt_1, 38, 2) as _i_cust_net_l_cnt_1
            ,try_to_number(_i_cust_net_cnt_4, 38, 2) as _i_cust_net_cnt_4
            ,try_to_number(_i_cust_net_cnt_long, 38, 2) as _i_cust_net_cnt_long
            ,try_to_number(_l_scm_rsk_scr_2, 38, 2) as _l_scm_rsk_scr_2
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_dpi_change, 38, 2) as _l_dpi_change
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,try_to_number(_l_plugin_cnt, 38, 2) as _l_plugin_cnt
            ,try_to_number(_l_rare_sim_cntry_code, 38, 2) as _l_rare_sim_cntry_code
            ,try_to_number(_l_rooted_dev, 38, 2) as _l_rooted_dev
            ,_L_SDID_1
            ,try_to_number(_l_sdid_cnt_1, 38, 2) as _l_sdid_cnt_1
            ,try_to_number(_l_sdid_cnt_3, 38, 2) as _l_sdid_cnt_3
            ,_L_NC_ACCT_NUM
            ,_L_NC_MATCH_NAME
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,try_to_number(_l_bc_ao_score, 38, 2) as _l_bc_ao_score
            ,_L_BRANCH_ID
            ,try_to_number(_l_drag_n_drop, 38, 2) as _l_drag_n_drop
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_rcnt_hi_scr_on_dev, 38, 2) as _l_rcnt_hi_scr_on_dev
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_score_1, 38, 2) as _l_se_score_1
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_accum_amt_anom, 38, 2) as _l_accum_amt_anom
            ,try_to_number(_l_frst_proxy, 38, 2) as _l_frst_proxy
            ,try_to_number(_l_new_lang, 38, 2) as _l_new_lang
            ,try_to_number(_l_scrn_res_anom, 38, 2) as _l_scrn_res_anom
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_score_4, 38, 2) as _l_score_4
            ,try_to_number(_l_score_5, 38, 2) as _l_score_5
            ,try_to_number(_l_rat_check, 38, 2) as _l_rat_check
            ,try_to_number(_l_m_l_1, 38, 2) as _l_m_l_1
            ,try_to_number(_l_m_l_4, 38, 2) as _l_m_l_4
            ,try_to_number(_l_m_l_c, 38, 2) as _l_m_l_c
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,_L_BC_SESS_ID
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_bc_score, 38, 2) as _l_bc_score
            ,try_to_number(_l_browser_age, 38, 2) as _l_browser_age
            ,try_to_number(_l_city_age, 38, 2) as _l_city_age
            ,try_to_number(_l_clipb_event_cnt, 38, 2) as _l_clipb_event_cnt
            ,try_to_number(_l_days_lst_dev_ios, 38, 2) as _l_days_lst_dev_ios
            ,try_to_number(_l_days_lst_dev_js, 38, 2) as _l_days_lst_dev_js
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_dom_hand_ch_anomaly, 38, 2) as _l_dom_hand_ch_anomaly
            ,try_to_number(_l_ft_rat_app_inst, 38, 2) as _l_ft_rat_app_inst
            ,try_to_number(_l_g_con_dev, 38, 2) as _l_g_con_dev
            ,try_to_number(_l_ip_age, 38, 2) as _l_ip_age
            ,try_to_number(_l_is_active_call, 38, 2) as _l_is_active_call
            ,try_to_number(_l_isp_age, 38, 2) as _l_isp_age
            ,try_to_number(_l_key_mouse_anomaly, 38, 2) as _l_key_mouse_anomaly
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_lgn_import_anomaly, 38, 2) as _l_lgn_import_anomaly
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_mins_lst_lgn_capped, 38, 2) as _l_mins_lst_lgn_capped
            ,try_to_number(_l_mouse_cnt, 38, 2) as _l_mouse_cnt
            ,try_to_number(_l_mouse_doodl, 38, 2) as _l_mouse_doodl
            ,try_to_number(_l_new_browser, 38, 2) as _l_new_browser
            ,try_to_number(_l_new_browser_anomaly, 38, 2) as _l_new_browser_anomaly
            ,try_to_number(_l_new_mob_app_user, 38, 2) as _l_new_mob_app_user
            ,try_to_number(_l_new_mob_browser_user, 38, 2) as _l_new_mob_browser_user
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,try_to_number(_l_orient_event_cnt, 38, 2) as _l_orient_event_cnt
            ,try_to_number(_l_os_ch_anomaly, 38, 2) as _l_os_ch_anomaly
            ,_L_POLICY_NM
            ,try_to_number(_l_priv_browsing_anomaly, 38, 2) as _l_priv_browsing_anomaly
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_scrn_w, 38, 2) as _l_scrn_w
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_mob_sdk, 38, 2) as _l_sess_cnt_mob_sdk
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,_L_SESS_ID
            ,try_to_number(_l_sim_ip_cntry_mismatch, 38, 2) as _l_sim_ip_cntry_mismatch
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_total_sess_cnt, 38, 2) as _l_total_sess_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_l_type_patterns_anomaly, 38, 2) as _l_type_patterns_anomaly
            ,try_to_number(_l_uid_age, 38, 2) as _l_uid_age
            ,try_to_number(_n_bc_cr_bc_1, 38, 2) as _n_bc_cr_bc_1
            ,try_to_number(_n_ftp_cnt_1, 38, 2) as _n_ftp_cnt_1
            ,_N_5_RCNT_M100S_1
            ,_N_5_RCNT_M100S_2
            ,try_to_number(_n_mps_mndt_cnt_24h_1, 38, 2) as _n_mps_mndt_cnt_24h_1
            ,try_to_number(_n_mob_oth_tran_sum_1, 38, 2) as _n_mob_oth_tran_sum_1
            ,_N_NB_LOGON_USER_AGENT
            ,try_to_number(_n_ca_device_profile_1, 38, 2) as _n_ca_device_profile_1
            ,try_to_number(_n_ca_device_profile_3, 38, 2) as _n_ca_device_profile_3
            ,try_to_number(_n_p20_7d_cnt_1, 38, 2) as _n_p20_7d_cnt_1
            ,try_to_number(_n_ca_lgn_cnt_24h_1, 38, 2) as _n_ca_lgn_cnt_24h_1
            ,try_to_number(_n_nmchk_cnt, 38, 2) as _n_nmchk_cnt
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_ind_1, 38, 2) as _n_2wp_tran_ind_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,_N_CLIENT_SSID_NAME_1
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_crypto_recipient_sum, 38, 2) as _n_crypto_recipient_sum
            ,try_to_number(_n_rp_ses_ip_1, 38, 2) as _n_rp_ses_ip_1
            ,try_to_number(_n_multi_amt_1, 38, 2) as _n_multi_amt_1
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,try_to_number(_n_nb_sum_tpt_4, 38, 2) as _n_nb_sum_tpt_4
            ,_N_D_D_3
            ,try_to_number(_n_h_1, 38, 2) as _n_h_1
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_open_ftp_sum_7d, 38, 2) as _n_open_ftp_sum_7d
            ,try_to_number(_n_capp_bpay_cnt_1, 38, 2) as _n_capp_bpay_cnt_1
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_cif_sender_sum, 38, 2) as _x_cif_sender_sum
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_name_match_ind, 38, 2) as _x_name_match_ind
            ,try_to_number(_x_ft_over5k_recip_cnt, 38, 2) as _x_ft_over5k_recip_cnt
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_t_1, 38, 2) as _x_t_1
            ,try_to_number(_x_t_2, 38, 2) as _x_t_2
            ,try_to_number(_x_t_3, 38, 2) as _x_t_3
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_npp_out_sum_1, 38, 2) as _x_npp_out_sum_1
            ,try_to_number(_x_npp_out_sum_3, 38, 2) as _x_npp_out_sum_3
        FROM
            LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
        WHERE
            TTS_TRAN_DATE_ALT BETWEEN 20250724 AND 20250729
            AND COALESCE(TRY_CAST(TGX_TRAN_AMT AS DECIMAL(14,2)), 0) > 0 -- Exclude non-mon txns 
            AND DTL_EX_1_5S_01 IN ('C205N','C207N','C242N','C244N','C246N','N205N','N207N','N244N','N246N')-- NPP Outbound txn only
            AND SSX_CUST_NUM <> 'Not Available'
    )",9618.416000,634095,634097
01be05cd-3204-abe2-0000-c71d2606fada,338,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""DTL_EX_0_20S_001"" STRING(16777216), ""DTL_EX_1_5S_01"" STRING(16777216), ""TGX_TRAN_AMT"" STRING(16777216), ""HOUR"" BIGINT, ""_A_MARVIN_DIGI_DECISION_NUM"" STRING(16777216), ""LAG_A_MARVIN_DIGI_DECISION_NUM"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_BTS_MAX_SE_DT"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_CRD_ACTIONCODE_DT_1"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_LO_DT"" BIGINT, ""_A_CC_DT"" BIGINT, ""_A_CAPP_NOTIFY_OPT_OUT_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_3"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_NPP_FTP_DATE2"" BIGINT, ""_A_P_P_3"" BIGINT, ""_A_CRD_NPP_PAYMENT_DT"" BIGINT, ""_A_IS_IP_DT_3"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_5_2"" BIGINT, ""_A_ONLINE_PL_DT"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_DTL_HID_UNHID_ACCT_DT_PREV"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_SCAMP1_MLW_DT"" BIGINT, ""_A_SCAMP2_MLW_DT"" BIGINT, ""_A_SCAMP5_MLW_DT"" BIGINT, ""_A_SCAMP7_MLW_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP4_DT"" BIGINT, ""_A_NB_LASTLOGON_DT_3"" BIGINT, ""_A_AUTO_DEC_CP_PP_DT"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_INB_ALL_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_1"" BIGINT, ""_A_RETRIEVE_STMT_DETAILS_DT"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_NPP_WHITELIST_CUS_ACCT_DT"" BIGINT, ""_A_NPP_WHITELIST_PAYID_DT"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_BLACKLIST_PAYID_DT"" BIGINT, ""_A_NPP_INB_OFI_PAYID_DT"" BIGINT, ""_A_NPP_OUT_CBA_PAYID_DT"" BIGINT, ""_A_AUS_IP_ACTIVITY"" BIGINT, ""_A_CIF_ESTABLISH_DT"" BIGINT, ""_A_ECV_DOCUMENT_DT"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_CLIENT_POSTCODE_DT_2"" BIGINT, ""_A_CLIENT_PORT_DATE_1"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_OPEN_LAST_PAYER_CIF_DT_10"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_NPP_OUT_CNT_DATE"" BIGINT, ""_I_ALL_LOGONS_FDT"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_PUSH_API_DT_2"" BIGINT, ""_L_PUSH_API_DT_3"" BIGINT, ""_L_PUSH_API_DT_4"" BIGINT, ""_L_FIRST_RAT_DT"" BIGINT, ""_L_M_C_5"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_MOB_RAT_DT"" BIGINT, ""_L_IS_RAT_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_1701_DT_1"" BIGINT, ""_N_D_P_C"" BIGINT, ""_N_T_3"" BIGINT, ""_N_1601_DT"" BIGINT, ""_N_F_3"" BIGINT, ""_N_NB_MEDIUM_PRIORITY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_CUST_NB_DEVICE_DT"" BIGINT, ""_N_CUST_NB_FIRST_DEVICE_DT"" BIGINT, ""_N_HCE_ADD_CARD"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CAPP_REG_DT_3"" BIGINT, ""_N_CAPP_REG_DT_5"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_PASSWORD_TEMP"" BIGINT, ""_X_D_2"" BIGINT, ""_A_BTS_BIO_SE"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_ECV_COMMSEC_FLAG"" NUMBER(38, 2), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_ATM_WITHDRAWAL_SUM_AMT"" NUMBER(38, 2), ""_A_NPP_INBOUND_SUM_AMT"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_DISTANCE"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_FTP_SUM_1"" NUMBER(38, 2), ""_A_MULTI_CNT"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_3"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_P_N_3"" STRING(16777216), ""_A_P_N_C"" STRING(16777216), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_CUST_AVG_ACCT_BAL"" NUMBER(38, 2), ""_A_E"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_T"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_CAPP_REGISTRATIONS_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_2"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_DEVICE_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_LOGON_NB_IP_PC"" STRING(16777216), ""_A_CURR_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE"" STRING(16777216), ""_A_PREV_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE_MODEL"" STRING(16777216), ""_A_PROF_CAPP_DEVICE_2"" STRING(16777216), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_2"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_3"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_5"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_MODEL_1"" STRING(16777216), ""_A_VPN_VPS_IP_LOGON_COUNT"" NUMBER(38, 2), ""_A_CC_CASH_ADVANCE_AMT"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_CNT_2"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NPP_FTP_SUM"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_5"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_7"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_SHORT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_CIF_ESTABLISH_EMAIL"" STRING(16777216), ""_A_CIF_ESTABLISH_PHONE"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_CLIENT_POSTCODE_FTP_SUM_3"" NUMBER(38, 2), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_CITY_CNT_1"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_3"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_2"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_5"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_6"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_7"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_BVT_NUMERIC_1"" NUMBER(38, 2), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_LIST_RL1_SCAM_TP_CIF"" NUMBER(38, 2), ""_B_NPP_OUT_FTP_SUM_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_4"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_5"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_6"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_7"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_4"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_2"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_3"" NUMBER(38, 2), ""_I_ALL_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_2"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_3"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_3M"" NUMBER(38, 2), ""_I_CUST_NET_L_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_4"" NUMBER(38, 2), ""_I_CUST_NET_CNT_LONG"" NUMBER(38, 2), ""_L_SCM_RSK_SCR_2"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_DPI_CHANGE"" NUMBER(38, 2), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_PLUGIN_CNT"" NUMBER(38, 2), ""_L_RARE_SIM_CNTRY_CODE"" NUMBER(38, 2), ""_L_ROOTED_DEV"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_SDID_CNT_1"" NUMBER(38, 2), ""_L_SDID_CNT_3"" NUMBER(38, 2), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_MATCH_NAME"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BC_AO_SCORE"" NUMBER(38, 2), ""_L_BRANCH_ID"" STRING(16777216), ""_L_DRAG_N_DROP"" NUMBER(38, 2), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_RCNT_HI_SCR_ON_DEV"" NUMBER(38, 2), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SCORE_1"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_ACCUM_AMT_ANOM"" NUMBER(38, 2), ""_L_FRST_PROXY"" NUMBER(38, 2), ""_L_NEW_LANG"" NUMBER(38, 2), ""_L_SCRN_RES_ANOM"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_SCORE_4"" NUMBER(38, 2), ""_L_SCORE_5"" NUMBER(38, 2), ""_L_RAT_CHECK"" NUMBER(38, 2), ""_L_M_L_1"" NUMBER(38, 2), ""_L_M_L_4"" NUMBER(38, 2), ""_L_M_L_C"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_BC_SESS_ID"" STRING(16777216), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_BC_SCORE"" NUMBER(38, 2), ""_L_BROWSER_AGE"" NUMBER(38, 2), ""_L_CITY_AGE"" NUMBER(38, 2), ""_L_CLIPB_EVENT_CNT"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_IOS"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_JS"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_DOM_HAND_CH_ANOMALY"" NUMBER(38, 2), ""_L_FT_RAT_APP_INST"" NUMBER(38, 2), ""_L_G_CON_DEV"" NUMBER(38, 2), ""_L_IP_AGE"" NUMBER(38, 2), ""_L_IS_ACTIVE_CALL"" NUMBER(38, 2), ""_L_ISP_AGE"" NUMBER(38, 2), ""_L_KEY_MOUSE_ANOMALY"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_LGN_IMPORT_ANOMALY"" NUMBER(38, 2), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_MINS_LST_LGN_CAPPED"" NUMBER(38, 2), ""_L_MOUSE_CNT"" NUMBER(38, 2), ""_L_MOUSE_DOODL"" NUMBER(38, 2), ""_L_NEW_BROWSER"" NUMBER(38, 2), ""_L_NEW_BROWSER_ANOMALY"" NUMBER(38, 2), ""_L_NEW_MOB_APP_USER"" NUMBER(38, 2), ""_L_NEW_MOB_BROWSER_USER"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_ORIENT_EVENT_CNT"" NUMBER(38, 2), ""_L_OS_CH_ANOMALY"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PRIV_BROWSING_ANOMALY"" NUMBER(38, 2), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SCRN_W"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_SDK"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_SESS_ID"" STRING(16777216), ""_L_SIM_IP_CNTRY_MISMATCH"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOTAL_SESS_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_L_TYPE_PATTERNS_ANOMALY"" NUMBER(38, 2), ""_L_UID_AGE"" NUMBER(38, 2), ""_N_BC_CR_BC_1"" NUMBER(38, 2), ""_N_FTP_CNT_1"" NUMBER(38, 2), ""_N_5_RCNT_M100S_1"" STRING(16777216), ""_N_5_RCNT_M100S_2"" STRING(16777216), ""_N_MPS_MNDT_CNT_24H_1"" NUMBER(38, 2), ""_N_MOB_OTH_TRAN_SUM_1"" NUMBER(38, 2), ""_N_NB_LOGON_USER_AGENT"" STRING(16777216), ""_N_CA_DEVICE_PROFILE_1"" NUMBER(38, 2), ""_N_CA_DEVICE_PROFILE_3"" NUMBER(38, 2), ""_N_P20_7D_CNT_1"" NUMBER(38, 2), ""_N_CA_LGN_CNT_24H_1"" NUMBER(38, 2), ""_N_NMCHK_CNT"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_IND_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CLIENT_SSID_NAME_1"" STRING(16777216), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_CRYPTO_RECIPIENT_SUM"" NUMBER(38, 2), ""_N_RP_SES_IP_1"" NUMBER(38, 2), ""_N_MULTI_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_NB_SUM_TPT_4"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_H_1"" NUMBER(38, 2), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_OPEN_FTP_SUM_7D"" NUMBER(38, 2), ""_N_CAPP_BPAY_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_CIF_SENDER_SUM"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_IND"" NUMBER(38, 2), ""_X_FT_OVER5K_RECIP_CNT"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_T_1"" NUMBER(38, 2), ""_X_T_2"" NUMBER(38, 2), ""_X_T_3"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_1"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_3"" NUMBER(38, 2))    AS  SELECT  *  FROM (
    SELECT
        TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
        SSX_CUST_NUM,
        TTS_TRAN_DATE_ALT,
        DTL_EX_0_20S_001,
        DTL_EX_1_5S_01,
        TGX_TRAN_AMT,
        TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
        _A_MARVIN_DIGI_DECISION_NUM,
        LAG(_A_MARVIN_DIGI_DECISION_NUM) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_A_MARVIN_DIGI_DECISION_NUM,
        	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_MAX_SE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CC_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CC_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CC_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_NOTIFY_OPT_OUT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_FTP_DATE2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_FTP_DATE2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_FTP_DATE2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_P_P_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_P_P_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_P_P_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_NPP_PAYMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_NPP_PAYMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_NPP_PAYMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IS_IP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ONLINE_PL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ONLINE_PL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ONLINE_PL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_HID_UNHID_ACCT_DT_PREV, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_HID_UNHID_ACCT_DT_PREV, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_HID_UNHID_ACCT_DT_PREV
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP1_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP2_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP5_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP7_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP4_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_LASTLOGON_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_LASTLOGON_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_LASTLOGON_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_AUTO_DEC_CP_PP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RETRIEVE_STMT_DETAILS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_CUS_ACCT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_CUS_ACCT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_WHITELIST_CUS_ACCT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_WHITELIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_BLACKLIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_BLACKLIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_BLACKLIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_OFI_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_CBA_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUS_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUS_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00'))
            END as _A_AUS_IP_ACTIVITY
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CIF_ESTABLISH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ECV_DOCUMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PORT_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PORT_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_PORT_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_10, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_10, 38, 2), '1960-01-01 00:00:00'))
            END as _B_OPEN_LAST_PAYER_CIF_DT_10
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00'))
            END as _I_ALL_LOGONS_FDT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_FIRST_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_C_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_C_5, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_C_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_MOB_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_MOB_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_MOB_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1701_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_D_P_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_T_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_T_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_T_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1601_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_F_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_F_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_F_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_MEDIUM_PRIORITY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_DEVICE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_DEVICE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_DEVICE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_FIRST_DEVICE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_FIRST_DEVICE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_FIRST_DEVICE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_HCE_ADD_CARD, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_HCE_ADD_CARD, 38, 2), '1960-01-01 00:00:00'))
            END as _N_HCE_ADD_CARD
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PASSWORD_TEMP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00'))
            END as _X_D_2
        
        ,             try_to_number(_a_bts_bio_se, 38, 2) as _a_bts_bio_se
            ,_A_BTS_BNFT
            ,try_to_number(_a_ecv_commsec_flag, 38, 2) as _a_ecv_commsec_flag
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,try_to_number(_a_atm_withdrawal_sum_amt, 38, 2) as _a_atm_withdrawal_sum_amt
            ,try_to_number(_a_npp_inbound_sum_amt, 38, 2) as _a_npp_inbound_sum_amt
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_distance, 38, 2) as _a_geo_distance
            ,_A_P_N_H
            ,try_to_number(_a_ftp_sum_1, 38, 2) as _a_ftp_sum_1
            ,try_to_number(_a_multi_cnt, 38, 2) as _a_multi_cnt
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_3, 38, 2) as _a_p_l_3
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,_A_P_N_3
            ,_A_P_N_C
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_cust_avg_acct_bal, 38, 2) as _a_cust_avg_acct_bal
            ,try_to_number(_a_e, 38, 2) as _a_e
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_t, 38, 2) as _a_t
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_capp_registrations_cnt_3, 38, 2) as _a_capp_registrations_cnt_3
            ,try_to_number(_a_nb_logons_cnt_2, 38, 2) as _a_nb_logons_cnt_2
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_DEVICE_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,_A_LOGON_NB_IP_PC
            ,try_to_number(_a_curr_capp_device_cnt, 38, 2) as _a_curr_capp_device_cnt
            ,_A_PREV_CAPP_DEVICE
            ,try_to_number(_a_prev_capp_device_cnt, 38, 2) as _a_prev_capp_device_cnt
            ,_A_PREV_CAPP_DEVICE_MODEL
            ,_A_PROF_CAPP_DEVICE_2
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,try_to_number(_a_prof_capp_device_cnt_2, 38, 2) as _a_prof_capp_device_cnt_2
            ,try_to_number(_a_prof_capp_device_cnt_3, 38, 2) as _a_prof_capp_device_cnt_3
            ,try_to_number(_a_prof_capp_device_cnt_5, 38, 2) as _a_prof_capp_device_cnt_5
            ,_A_PROF_CAPP_DEVICE_MODEL_1
            ,try_to_number(_a_vpn_vps_ip_logon_count, 38, 2) as _a_vpn_vps_ip_logon_count
            ,try_to_number(_a_cc_cash_advance_amt, 38, 2) as _a_cc_cash_advance_amt
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_nb_bpay_acct_cnt_2, 38, 2) as _a_nb_bpay_acct_cnt_2
            ,try_to_number(_a_nb_bpay_acct_sum_1, 38, 2) as _a_nb_bpay_acct_sum_1
            ,try_to_number(_a_npp_ftp_sum, 38, 2) as _a_npp_ftp_sum
            ,try_to_number(_a_cust_npp_out_sum_aaa_1, 38, 2) as _a_cust_npp_out_sum_aaa_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_5, 38, 2) as _a_cust_npp_out_sum_aaa_5
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_7, 38, 2) as _a_cust_sum_aaa_7
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_short, 38, 2) as _a_cust_sum_aaa_short
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_CIF_ESTABLISH_EMAIL
            ,_A_CIF_ESTABLISH_PHONE
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_client_postcode_ftp_sum_3, 38, 2) as _a_client_postcode_ftp_sum_3
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,try_to_number(_a_client_city_cnt_1, 38, 2) as _a_client_city_cnt_1
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_3
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_2, 38, 2) as _a_client_country_cnt_2
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_a_client_country_cnt_5, 38, 2) as _a_client_country_cnt_5
            ,try_to_number(_a_client_country_cnt_6, 38, 2) as _a_client_country_cnt_6
            ,try_to_number(_a_client_country_cnt_7, 38, 2) as _a_client_country_cnt_7
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_bvt_numeric_1, 38, 2) as _b_bvt_numeric_1
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_list_rl1_scam_tp_cif, 38, 2) as _b_list_rl1_scam_tp_cif
            ,try_to_number(_b_npp_out_ftp_sum_1, 38, 2) as _b_npp_out_ftp_sum_1
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_4, 38, 2) as _b_recip_sum_aaa_4
            ,try_to_number(_b_recip_sum_aaa_5, 38, 2) as _b_recip_sum_aaa_5
            ,try_to_number(_b_recip_sum_aaa_6, 38, 2) as _b_recip_sum_aaa_6
            ,try_to_number(_b_recip_sum_aaa_7, 38, 2) as _b_recip_sum_aaa_7
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_cnt_3, 38, 2) as _b_client_postcode_cnt_3
            ,try_to_number(_b_client_postcode_cnt_4, 38, 2) as _b_client_postcode_cnt_4
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_cust_tran_sum_1, 38, 2) as _i_cust_tran_sum_1
            ,try_to_number(_i_cust_tran_sum_2, 38, 2) as _i_cust_tran_sum_2
            ,try_to_number(_i_cust_tran_sum_3, 38, 2) as _i_cust_tran_sum_3
            ,try_to_number(_i_all_logons_cnt_1, 38, 2) as _i_all_logons_cnt_1
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,try_to_number(_i_capp_logons_perc_2, 38, 2) as _i_capp_logons_perc_2
            ,try_to_number(_i_capp_logons_perc_3, 38, 2) as _i_capp_logons_perc_3
            ,try_to_number(_i_capp_logons_perc_3m, 38, 2) as _i_capp_logons_perc_3m
            ,try_to_number(_i_cust_net_l_cnt_1, 38, 2) as _i_cust_net_l_cnt_1
            ,try_to_number(_i_cust_net_cnt_4, 38, 2) as _i_cust_net_cnt_4
            ,try_to_number(_i_cust_net_cnt_long, 38, 2) as _i_cust_net_cnt_long
            ,try_to_number(_l_scm_rsk_scr_2, 38, 2) as _l_scm_rsk_scr_2
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_dpi_change, 38, 2) as _l_dpi_change
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,try_to_number(_l_plugin_cnt, 38, 2) as _l_plugin_cnt
            ,try_to_number(_l_rare_sim_cntry_code, 38, 2) as _l_rare_sim_cntry_code
            ,try_to_number(_l_rooted_dev, 38, 2) as _l_rooted_dev
            ,_L_SDID_1
            ,try_to_number(_l_sdid_cnt_1, 38, 2) as _l_sdid_cnt_1
            ,try_to_number(_l_sdid_cnt_3, 38, 2) as _l_sdid_cnt_3
            ,_L_NC_ACCT_NUM
            ,_L_NC_MATCH_NAME
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,try_to_number(_l_bc_ao_score, 38, 2) as _l_bc_ao_score
            ,_L_BRANCH_ID
            ,try_to_number(_l_drag_n_drop, 38, 2) as _l_drag_n_drop
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_rcnt_hi_scr_on_dev, 38, 2) as _l_rcnt_hi_scr_on_dev
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_score_1, 38, 2) as _l_se_score_1
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_accum_amt_anom, 38, 2) as _l_accum_amt_anom
            ,try_to_number(_l_frst_proxy, 38, 2) as _l_frst_proxy
            ,try_to_number(_l_new_lang, 38, 2) as _l_new_lang
            ,try_to_number(_l_scrn_res_anom, 38, 2) as _l_scrn_res_anom
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_score_4, 38, 2) as _l_score_4
            ,try_to_number(_l_score_5, 38, 2) as _l_score_5
            ,try_to_number(_l_rat_check, 38, 2) as _l_rat_check
            ,try_to_number(_l_m_l_1, 38, 2) as _l_m_l_1
            ,try_to_number(_l_m_l_4, 38, 2) as _l_m_l_4
            ,try_to_number(_l_m_l_c, 38, 2) as _l_m_l_c
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,_L_BC_SESS_ID
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_bc_score, 38, 2) as _l_bc_score
            ,try_to_number(_l_browser_age, 38, 2) as _l_browser_age
            ,try_to_number(_l_city_age, 38, 2) as _l_city_age
            ,try_to_number(_l_clipb_event_cnt, 38, 2) as _l_clipb_event_cnt
            ,try_to_number(_l_days_lst_dev_ios, 38, 2) as _l_days_lst_dev_ios
            ,try_to_number(_l_days_lst_dev_js, 38, 2) as _l_days_lst_dev_js
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_dom_hand_ch_anomaly, 38, 2) as _l_dom_hand_ch_anomaly
            ,try_to_number(_l_ft_rat_app_inst, 38, 2) as _l_ft_rat_app_inst
            ,try_to_number(_l_g_con_dev, 38, 2) as _l_g_con_dev
            ,try_to_number(_l_ip_age, 38, 2) as _l_ip_age
            ,try_to_number(_l_is_active_call, 38, 2) as _l_is_active_call
            ,try_to_number(_l_isp_age, 38, 2) as _l_isp_age
            ,try_to_number(_l_key_mouse_anomaly, 38, 2) as _l_key_mouse_anomaly
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_lgn_import_anomaly, 38, 2) as _l_lgn_import_anomaly
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_mins_lst_lgn_capped, 38, 2) as _l_mins_lst_lgn_capped
            ,try_to_number(_l_mouse_cnt, 38, 2) as _l_mouse_cnt
            ,try_to_number(_l_mouse_doodl, 38, 2) as _l_mouse_doodl
            ,try_to_number(_l_new_browser, 38, 2) as _l_new_browser
            ,try_to_number(_l_new_browser_anomaly, 38, 2) as _l_new_browser_anomaly
            ,try_to_number(_l_new_mob_app_user, 38, 2) as _l_new_mob_app_user
            ,try_to_number(_l_new_mob_browser_user, 38, 2) as _l_new_mob_browser_user
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,try_to_number(_l_orient_event_cnt, 38, 2) as _l_orient_event_cnt
            ,try_to_number(_l_os_ch_anomaly, 38, 2) as _l_os_ch_anomaly
            ,_L_POLICY_NM
            ,try_to_number(_l_priv_browsing_anomaly, 38, 2) as _l_priv_browsing_anomaly
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_scrn_w, 38, 2) as _l_scrn_w
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_mob_sdk, 38, 2) as _l_sess_cnt_mob_sdk
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,_L_SESS_ID
            ,try_to_number(_l_sim_ip_cntry_mismatch, 38, 2) as _l_sim_ip_cntry_mismatch
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_total_sess_cnt, 38, 2) as _l_total_sess_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_l_type_patterns_anomaly, 38, 2) as _l_type_patterns_anomaly
            ,try_to_number(_l_uid_age, 38, 2) as _l_uid_age
            ,try_to_number(_n_bc_cr_bc_1, 38, 2) as _n_bc_cr_bc_1
            ,try_to_number(_n_ftp_cnt_1, 38, 2) as _n_ftp_cnt_1
            ,_N_5_RCNT_M100S_1
            ,_N_5_RCNT_M100S_2
            ,try_to_number(_n_mps_mndt_cnt_24h_1, 38, 2) as _n_mps_mndt_cnt_24h_1
            ,try_to_number(_n_mob_oth_tran_sum_1, 38, 2) as _n_mob_oth_tran_sum_1
            ,_N_NB_LOGON_USER_AGENT
            ,try_to_number(_n_ca_device_profile_1, 38, 2) as _n_ca_device_profile_1
            ,try_to_number(_n_ca_device_profile_3, 38, 2) as _n_ca_device_profile_3
            ,try_to_number(_n_p20_7d_cnt_1, 38, 2) as _n_p20_7d_cnt_1
            ,try_to_number(_n_ca_lgn_cnt_24h_1, 38, 2) as _n_ca_lgn_cnt_24h_1
            ,try_to_number(_n_nmchk_cnt, 38, 2) as _n_nmchk_cnt
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_ind_1, 38, 2) as _n_2wp_tran_ind_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,_N_CLIENT_SSID_NAME_1
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_crypto_recipient_sum, 38, 2) as _n_crypto_recipient_sum
            ,try_to_number(_n_rp_ses_ip_1, 38, 2) as _n_rp_ses_ip_1
            ,try_to_number(_n_multi_amt_1, 38, 2) as _n_multi_amt_1
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,try_to_number(_n_nb_sum_tpt_4, 38, 2) as _n_nb_sum_tpt_4
            ,_N_D_D_3
            ,try_to_number(_n_h_1, 38, 2) as _n_h_1
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_open_ftp_sum_7d, 38, 2) as _n_open_ftp_sum_7d
            ,try_to_number(_n_capp_bpay_cnt_1, 38, 2) as _n_capp_bpay_cnt_1
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_cif_sender_sum, 38, 2) as _x_cif_sender_sum
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_name_match_ind, 38, 2) as _x_name_match_ind
            ,try_to_number(_x_ft_over5k_recip_cnt, 38, 2) as _x_ft_over5k_recip_cnt
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_t_1, 38, 2) as _x_t_1
            ,try_to_number(_x_t_2, 38, 2) as _x_t_2
            ,try_to_number(_x_t_3, 38, 2) as _x_t_3
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_npp_out_sum_1, 38, 2) as _x_npp_out_sum_1
            ,try_to_number(_x_npp_out_sum_3, 38, 2) as _x_npp_out_sum_3
    FROM
        LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
    WHERE
        TTS_TRAN_DATE_ALT BETWEEN 20250724 AND 20250729
        AND COALESCE(TRY_CAST(TGX_TRAN_AMT AS DECIMAL(14,2)), 0) > 0 -- Exclude non-mon txns 
        AND DTL_EX_1_5S_01 IN ('C205N','C207N','C242N','C244N','C246N','N205N','N207N','N244N','N246N')-- NPP Outbound txn only
        AND SSX_CUST_NUM <> 'Not Available'
)",9583.279000,633431,633468
01beed7f-3204-c939-0000-c71d2d08075a,28,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",9420.518000,2004493,2004556
01bed239-3204-c553-0000-c71d2c4154d2,855,"CREATE OR REPLACE TABLE PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG7D AS
SELECT 
    a.*,
    b.CUS_SUM_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_CNT_Q,
    b.CUS_SUM_TRAN_SUM_N,
    b.CUS_SUM_UPST_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_RULE_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_FINL_APRD_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_SUM_N,
    b.CUS_SUM_FINL_APRD_TRAN_SUM_N,
    b.CUS_SUM_FDP_RULE_TRIG_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_CNT_Q,
    b.CUS_SUM_OSEA_TRAN_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_SUM_N,
    b.CUS_SUM_OSEA_TRAN_SUM_N,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    b.CUS_SUM_3DS_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    b.CUS_SUM_N3D_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    b.CUS_SUM_3DS_TRAN_SUM_N as CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    b.CUS_SUM_N3D_TRAN_SUM_N as CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    b.CUS_SUM_CARD_PRES_TRAN_CNT_Q,
    b.CUS_SUM_ATM_TRAN_CNT_Q,
    b.CUS_SUM_FALL_BACK_TRAN_CNT_Q,
    b.CUS_SUM_CHIP_TRAN_CNT_Q,
    b.CUS_SUM_PAY_PASS_TRAN_CNT_Q,
    b.CUS_SUM_CARD_PRES_TRAN_SUM_N,
    b.CUS_SUM_ATM_TRAN_SUM_N,
    b.CUS_SUM_FALL_BACK_TRAN_SUM_N,
    b.CUS_SUM_CHIP_TRAN_SUM_N,
    b.CUS_SUM_PAY_PASS_TRAN_SUM_N,
    b.CUS_SUM_CAPP_PSWD_CHNG_CNT_Q,
    b.CUS_SUM_CAPP_DVIC_REGR_CNT_Q,
    b.CUS_SUM_CAPP_LOGN_CNT_Q,
    b.CUS_SUM_NTB_LOGN_CNT_Q,
    b.CUS_SUM_VIEW_CARD_DETL_CNT_Q,
    b.CUS_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    b.CUS_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    b.CUS_MAX_CUV_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_RULE_FLAG,
    d.CRD_SUM_TRAN_CNT_Q,
    d.CRD_SUM_UPST_APRD_TRAN_CNT_Q,
    d.CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_FINL_APRD_TRAN_CNT_Q,
    d.CRD_SUM_INCO_EXPY_CNT_Q,
    d.CRD_SUM_INCO_CVVA_CNT_Q,
    d.CRD_SUM_INCO_PIN_CNT_Q,
    d.CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
    d.CRD_SUM_TRAN_SUM_N,
    d.CRD_SUM_UPST_APRD_TRAN_SUM_N,
    d.CRD_SUM_UPST_DCLN_TRAN_SUM_N,
    d.CRD_SUM_RULE_DCLN_TRAN_SUM_N,
    d.CRD_SUM_FINL_APRD_TRAN_SUM_N,
    d.CRD_SUM_INCO_EXPY_SUM_N,
    d.CRD_SUM_INCO_CVVA_SUM_N,
    d.CRD_SUM_INCO_PIN_SUM_N,
    d.CRD_SUM_OVER_LIMT_DCLN_SUM_N,
    d.CRD_SUM_FDP_RULE_TRIG_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_CNT_Q,
    d.CRD_SUM_OSEA_TRAN_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_SUM_N,
    d.CRD_SUM_OSEA_TRAN_SUM_N,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    d.CRD_SUM_3DS_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    d.CRD_SUM_N3D_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    d.CRD_SUM_3DS_TRAN_SUM_N as CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    d.CRD_SUM_N3D_TRAN_SUM_N as CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    d.CRD_SUM_CARD_PRES_TRAN_CNT_Q,
    d.CRD_SUM_ATM_TRAN_CNT_Q,
    d.CRD_SUM_FALL_BACK_TRAN_CNT_Q,
    d.CRD_SUM_CHIP_TRAN_CNT_Q,
    d.CRD_SUM_PAY_PASS_TRAN_CNT_Q,
    d.CRD_SUM_CARD_PRES_TRAN_SUM_N,
    d.CRD_SUM_ATM_TRAN_SUM_N,
    d.CRD_SUM_FALL_BACK_TRAN_SUM_N,
    d.CRD_SUM_CHIP_TRAN_SUM_N,
    d.CRD_SUM_PAY_PASS_TRAN_SUM_N,
    d.CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
    d.CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
    d.CRD_SUM_CAPP_LOGN_CNT_Q,
    d.CRD_SUM_NTB_LOGN_CNT_Q,
    d.CRD_SUM_VIEW_CARD_DETL_CNT_Q,
    d.CRD_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_HIGH_RISK_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_FRAU_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_WHLI_F as CRD_MAX_CARD_USER_VARY_WHLI_F,
    d.CRD_MAX_CUV_DO_NOT_CTCT_F as CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F,
    f.CMA_SUM_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    f.CMA_SUM_TRAN_SUM_N,
    f.CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_SUM_N,
    f.CMA_SUM_FINL_APRD_TRAN_SUM_N,
    f.CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_CNT_Q,
    f.CMA_SUM_OSEA_TRAN_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_SUM_N,
    f.CMA_SUM_OSEA_TRAN_SUM_N,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    f.CMA_SUM_3DS_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    f.CMA_SUM_N3D_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    f.CMA_SUM_3DS_TRAN_SUM_N as CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    f.CMA_SUM_N3D_TRAN_SUM_N as CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    f.CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    f.CMA_SUM_ATM_TRAN_CNT_Q,
    f.CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    f.CMA_SUM_CHIP_TRAN_CNT_Q,
    f.CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    f.CMA_SUM_CARD_PRES_TRAN_SUM_N,
    f.CMA_SUM_ATM_TRAN_SUM_N,
    f.CMA_SUM_FALL_BACK_TRAN_SUM_N,
    f.CMA_SUM_CHIP_TRAN_SUM_N,
    f.CMA_SUM_PAY_PASS_TRAN_SUM_N,
    f.CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    f.CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    f.CMA_MAX_CUV_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_RULE_FLAG,
    g.CMC_SUM_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    g.CMC_SUM_TRAN_SUM_N,
    g.CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_SUM_N,
    g.CMC_SUM_FINL_APRD_TRAN_SUM_N,
    g.CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_CNT_Q,
    g.CMC_SUM_OSEA_TRAN_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_SUM_N,
    g.CMC_SUM_OSEA_TRAN_SUM_N,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    g.CMC_SUM_3DS_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    g.CMC_SUM_N3D_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    g.CMC_SUM_3DS_TRAN_SUM_N as CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    g.CMC_SUM_N3D_TRAN_SUM_N as CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    g.CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    g.CMC_SUM_ATM_TRAN_CNT_Q,
    g.CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    g.CMC_SUM_CHIP_TRAN_CNT_Q,
    g.CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    g.CMC_SUM_CARD_PRES_TRAN_SUM_N,
    g.CMC_SUM_ATM_TRAN_SUM_N,
    g.CMC_SUM_FALL_BACK_TRAN_SUM_N,
    g.CMC_SUM_CHIP_TRAN_SUM_N,
    g.CMC_SUM_PAY_PASS_TRAN_SUM_N,
    g.CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    g.CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    g.CMC_MAX_CUV_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_RULE_FLAG,
    h.MAQ_SUM_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_TRAN_SUM_N,
    h.MAQ_SUM_UPST_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_RULE_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_FINL_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FINL_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FDP_RULE_TRIG_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_CNT_Q,
    h.MAQ_SUM_OSEA_TRAN_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_SUM_N,
    h.MAQ_SUM_OSEA_TRAN_SUM_N,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_3DS_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    h.MAQ_SUM_N3D_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    h.MAQ_SUM_3DS_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    h.MAQ_SUM_N3D_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    h.MAQ_SUM_CARD_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_ATM_TRAN_CNT_Q,
    h.MAQ_SUM_FALL_BACK_TRAN_CNT_Q,
    h.MAQ_SUM_CHIP_TRAN_CNT_Q,
    h.MAQ_SUM_PAY_PASS_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_PRES_TRAN_SUM_N,
    h.MAQ_SUM_ATM_TRAN_SUM_N,
    h.MAQ_SUM_FALL_BACK_TRAN_SUM_N,
    h.MAQ_SUM_CHIP_TRAN_SUM_N,
    h.MAQ_SUM_PAY_PASS_TRAN_SUM_N
FROM 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT a
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_tran_prfl_agg7d b
ON 
    a.ssx_cust_num = b.cust_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = b.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_card_tran_prfl_agg7d d
ON 
    a.CHL_ID_CARD_NUM = d.card_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = d.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg7d f
ON 
    a.ssx_cust_num = f.cust_i and a.chl_ct_term_owner_id = f.merc_i and a.chl_ct_acq_id = f.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = f.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg7d g
ON 
    a.CHL_ID_CARD_NUM = g.card_i and a.chl_ct_mer_mcc = g.merc_catg_c
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = g.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_merc_acqr_tran_prfl_agg7d h
ON 
    a.chl_ct_term_owner_id = h.merc_i and a.chl_ct_acq_id = h.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = h.WINDOW_START_DATE

;",9336.935000,123513,123513
01beee1f-3204-c939-0000-c71d2d0dbdf6,27,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        * EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",8994.175000,2004676,2004770
01bef3a0-3204-c93c-0000-c71d2d3af132,2245,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905164056_scored_1 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it6_F2_xval_2day_all_fdt_redmojsiz_20250905164056.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CRD_SAFE_MERCHANT, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_ASN_AGE, _L_SCORE_2, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_SCRN_H, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_CLC_FTP_AMT, _L_TRVL_SPD, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_SCH_AMT, _A_P_L_3, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _L_DAYS_LST_DEV_JS, _A_ECV_DOCUMENT_IP, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_LANG_1, _L_LANG_2, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, DPST_CNT, CC_CNT, FA_1, NO_1, GOVT_BENE, MAR_STS_ORG_STR, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CMA_SUM_TRAN_SUM_N, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-05' and to_date(transactiondatetime) <= '2025-06-10'
-- limit 870
);",8936.629000,7417,7417
01beecbc-3204-c558-0000-c71d2d02a61e,31,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",8784.833000,2002132,2002166
01bee8a9-3204-c557-0000-c71d2ce3d62a,32,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",8684.939000,1997939,1997939
01be9d9c-3204-bee2-0000-c71d2a92fbbe,861,"create or replace temporary table Digital_Transactions as
select    
    b.fraudtype,
    b.DETECTION,
    b.case_detection,
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') as _B_ANY_CUST_FTP_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00') as _x_cif_recipient_new_date,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_BC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _L_BC_EVENT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SCM_RSK_HGH_DT, 38, 2), '1960-01-01 00:00:00') as _L_SCM_RSK_HGH_DT,
    _L_NC_RESPONSE_CODE,
    dtl_ex_0_20s_001 AS RECEIPT_NUM,
    (a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID,
    cmx_tran_id,
    hdr_activity_type,
    ssx_cust_num,
    chl_id_ob_userid,
    chl_id_pb_userid,
    dtl_ex_1_5s_01 as dmx_5byte_string_01,
    _a_cse_chg_dwl_ind AS DWL_change,
    dtl_ex_0_n_006 as Task_ID,
    dtl_ex_0_i_002 AS FTP_Indicator_1,
    rsp_ex_2_i_006 AS FTP_Indicator_2,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_SUM, 38, 2) as _X_CIF_RECIPIENT_SUM,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_SUM, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM,
    TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2) as _x_cif_recipient_new_cnt,
    TRY_TO_NUMBER(TGX_TRAN_AMT) AS TGX_TRAN_AMT,
    TRY_TO_NUMBER(_A_BTS_CUST_AGE, 38, 2)as _A_BTS_CUST_AGE,
    tgx_bank_name,
    tgx_bank_num,
    tgx_branch_id,
    tgx_acct_num,
    tgx_name,
    _L_ACCT_NUM,
    _L_BANK_NUM,
    _l_branch_id, 
    DTL_EX_3_80S_003 AS pmt_description_1,
    tgx_description AS pmt_description_2,
    TRY_TO_NUMBER(_L_SCM_RSK_HGH_SCR, 38, 2) as _L_SCM_RSK_HGH_SCR,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 5) as CERBERUS_SCORE,
    TRY_TO_NUMBER(_L_CUST_SCAMRISK_SCORE, 38, 2) as _L_CUST_SCAMRISK_SCORE,
    TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE,
    TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_S,
    TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2) as _l_max_30d_mule_score,
    TRY_TO_NUMBER(_L_NUM_SESS_2H, 38, 2) as _L_NUM_SESS_2H,
    TRY_TO_NUMBER(_L_NUM_SESS_4H, 38, 2) as _L_NUM_SESS_4H,
    TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE,38,2) as _L_TRUST_NEW_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE,38,2) as _L_TRUST_UNUSED_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN,38,2) as _L_TRUST_PAYEE_HIGH_VLOC_IN,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT,38,2) as _L_TRUST_PAYEE_DORM_ACCT,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYER,
    TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev,38,2) as _l_rcnt_hi_scr_on_dev,
    TRY_TO_NUMBER(_B_RECIP_SUM_LONG, 38, 2) as _B_RECIP_SUM_LONG,
    TRY_TO_NUMBER(_B_RECIP_SUM_SHORT, 38, 2) as _B_RECIP_SUM_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_1, 38, 2) as _B_RECIP_FTP_CNT_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_2, 38, 2) as _B_RECIP_FTP_CNT_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_3, 38, 2) as _B_RECIP_FTP_CNT_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_4, 38, 2) as _B_RECIP_FTP_CNT_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_5, 38, 2) as _B_RECIP_FTP_CNT_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_6, 38, 2) as _B_RECIP_FTP_CNT_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_7, 38, 2) as _B_RECIP_FTP_CNT_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_CNT_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_CNT_DATE,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_LONG, 38, 2) as _B_RECIP_FTP_CNT_LONG,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_SHORT, 38, 2) as _B_RECIP_FTP_CNT_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_1, 38, 2) as _B_RECIP_FTP_SUM_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_2, 38, 2) as _B_RECIP_FTP_SUM_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_3, 38, 2) as _B_RECIP_FTP_SUM_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_4, 38, 2) as _B_RECIP_FTP_SUM_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_5, 38, 2) as _B_RECIP_FTP_SUM_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_6, 38, 2) as _B_RECIP_FTP_SUM_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_7, 38, 2) as _B_RECIP_FTP_SUM_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_SUM_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_SUM_DATE,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_1, 38, 2) as _a_npp_in_unrelated_sum_24_1,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_2, 38, 2) as _a_npp_in_unrelated_sum_24_2,
    TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1,
	TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2,
	TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3,
	TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4,
	TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5,
	TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6,
	TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7,
	TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1,
	TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2,
	TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3,
	TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4,
	TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5,
	TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6,
	TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_1, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_2, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_3, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_1, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_7, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_7,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_LONG, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_LONG,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_SHORT, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP5_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP5_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP6_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP6_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP7_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP7_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP1_MLW_IND, 38, 2) as _A_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP2_MLW_IND, 38, 2) as _A_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP3_MLW_IND, 38, 2) as _A_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP4_MLW_IND, 38, 2) as _A_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP5_MLW_IND, 38, 2) as _A_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP6_MLW_IND, 38, 2) as _A_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP7_MLW_IND, 38, 2) as _A_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP_MLW_IND, 38, 2) as _A_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MOUSE_MV_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_MOUSE_MV_MLW_DT,
    TRY_TO_NUMBER(_N_MOUSE_MV_MLW_IND, 38, 2) as _N_MOUSE_MV_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_1, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_2, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_3, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_4, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_5, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_5,
    _N_5_RCNT_M100S_1,
    _N_5_RCNT_M100S_2,
    _N_5_RCNT_M100S_3,
    _N_5_RCNT_M100S_4,
    _N_5_RCNT_M100S_5,
    TRY_TO_NUMBER(_N_M100_P8_IND, 38, 2) as _N_M100_P8_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P8_IND_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P8_IND_DT,
    TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND,
    TRY_TO_NUMBER(_N_P20_7D_CNT_1, 38, 2) as _N_P20_7D_CNT_1,
    TRY_TO_NUMBER(_N_P20_7D_CNT_2, 38, 2) as _N_P20_7D_CNT_2,
    TRY_TO_NUMBER(_N_P20_7D_CNT_3, 38, 2) as _N_P20_7D_CNT_3,
    TRY_TO_NUMBER(_N_P20_7D_CNT_4, 38, 2) as _N_P20_7D_CNT_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_P20_7D_CNT_DT, 38, 2), '1960-01-01 00:00:00') as _N_P20_7D_CNT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP21_MLW_IND, 38, 2) as _A_SCAMP21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP21_MLW_IND, 38, 2) as _N_SCAMP21_MLW_IND,
    _L_PUSH_API_1,
    _L_PUSH_API_2,
    _L_PUSH_API_3,
    _L_PUSH_API_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,3,1),1.) as HOME_LOAN_IND,
    TRY_TO_NUMBER(substr(_l_Fingerprint_1,11,1),1.) as MORTGAGE_ACC,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,7,1),1.) as INCOME_BANDS,
    TRY_TO_NUMBER(substr(dtl_ex_0_20s_004,14,1),1.) as HOME_OWNER_STATUS,
    dtl_ex_0_30s_002,
    dtl_ex_0_80s_002,
    _L_POLICY_NM
from LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
    on a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where mid_event_ts >= '20250501'
and mid_event_ts <= '20250801';",8638.772000,119641,668394
01beee77-3204-c93b-0000-c71d2d1145ea,2254,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250904140303_scored_1 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO2('modelname=pipeline_it1_F2_xval_zero_day_20250904140303.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CRD_APAY_CNT_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_2WAY_CRD_FRD_RULE_FLAG, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_G_CON_DEV, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_RISKY_KEY_COMBO, _A_C_G, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_CONCURRENT_SESS, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_NPP_OUT_SUM_AAA_2, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_NPP_IN_UNRELATED_SUM_24_1, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _A_CUST_NPP_IN_SUM_AAA_1, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _L_NUM_SESS_2H, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_DPI_CHANGE, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _L_CLIPB_EVENT_CNT, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _L_NC_RESPONSE_CODE, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, BUS_LN_CNT, OTH_CNT, REL_MNG, FA_1, FA_2, NO_1, NO_2, FP, GOVT_BENE, PRVT_CUST, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-07'
-- limit 870
);",8403.418000,7417,7417
01be9f50-3204-bee4-0000-c71d2a9f7446,2325,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
    order by tran_d
),
hourly_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
),
all_dates AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT cust_i, merc_i, acqr_i FROM PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl where tran_d between '2025-03-01' and '2025-05-31') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.cust_i = hd.cust_i AND ad.merc_i = hd.merc_i AND ad.acqr_i = hd.acqr_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    cust_i, -- as ssx_cust_num,
    merc_i,
    acqr_i,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMA_SUM_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    CMA_SUM_TRAN_SUM_N,
    CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_SUM_N,
    CMA_SUM_FINL_APRD_TRAN_SUM_N,
    CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    CMA_SUM_DOMS_TRAN_CNT_Q,
    CMA_SUM_OSEA_TRAN_CNT_Q,
    CMA_SUM_DOMS_TRAN_SUM_N,
    CMA_SUM_OSEA_TRAN_SUM_N,
    CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMA_SUM_3DS_TRAN_CNT_Q,
    CMA_SUM_N3D_TRAN_CNT_Q,
    CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMA_SUM_3DS_TRAN_SUM_N,
    CMA_SUM_N3D_TRAN_SUM_N,
    CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    CMA_SUM_ATM_TRAN_CNT_Q,
    CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    CMA_SUM_CHIP_TRAN_CNT_Q,
    CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    CMA_SUM_CARD_PRES_TRAN_SUM_N,
    CMA_SUM_ATM_TRAN_SUM_N,
    CMA_SUM_FALL_BACK_TRAN_SUM_N,
    CMA_SUM_CHIP_TRAN_SUM_N,
    CMA_SUM_PAY_PASS_TRAN_SUM_N,
    CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    cust_i,
    merc_i,
    acqr_i,
    window_start_date);",8342.151000,6380,23421
01bebc64-3204-c1f3-0000-c71d2b9b7516,443,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as 
(
WITH code1_data AS (
        SELECT DISTINCT

    -- Transaction datetime (parsed from alternate date/time fields)
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
    -- Transaction ID (concatenation of 3 fields)x
    ,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
    -- Snapshot date of transaction (parsed from MID_EVENT_TS)
    ,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
    -- Account identifier (bank, branch, account number)
    ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
    -- Party identifier (customer number padded)
    ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
    -- Transaction date (alternate format)
    ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d

    -- Feature from leaky.txt, no description
    ,dtl_ex_0_20s_001
    -- Feature from leaky.txt, no description
    -- ,dtl_ex_1_5s_01
    -- Customer number (must be present, dropped for modelling)
    ,SSX_CUST_NUM
    -- Transaction amount
    -- ,tgx_tran_amt
    -- -- Max 30-day risk score
    -- ,_l_max_30d_score
    -- -- BC risk score
    -- ,_l_bc_score
    -- -- Max 30-day mule risk score
    -- ,_l_max_30d_mule_score

    ,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

-- ,_l_adv_key_combo
-- ,_l_clpbrd_evnt
-- ,_l_concurrent_sess
-- ,_l_export_data
-- ,_l_import_data
-- ,_l_rat_in_sess
-- ,_l_is_rcnt_hrisk_sess
,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS

-- ,_l_scrn_broadcast
-- ,_l_delay_to_input_pi
-- ,_l_active_spoofing
-- ,_l_pmt_vloc_anom
-- ,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM

-- ,_l_accum_amt_anom
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM

-- ,_l_is_active_call
-- ,_l_is_long_sess
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,_L_TRUST_900
-- ,_L_TRUST_NEW_PAYEE
-- ,_L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE

-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYEE
-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYER
-- ,_L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,_l_cust_scamrisk_score
-- ,_b_recip_sum_short
-- ,_b_recip_sum_long
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG

-- ,_a_customer_age
-- ,_a_cust_sum_aaa_short
-- ,_a_cust_sum_aaa_long
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M

,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM

------------------
-- Keep other columns as VARCHAR (mostly text)
,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,_x_cif_recipient_new_cnt
-- ,_x_telstra_last_call_dur
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_3
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_2
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_4
-- ,REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '') as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
-- REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '') as _N_NEW_IP_LOGON_PCODE,
-- REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '') as _A_LOGON_198_IP_PC,
-- REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '') as _A_LOGON_NB_IP_PC,
-- COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,


,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE


,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT


-- ,_x_telstra_max_call_dur
-- -- ,_a_telstra_active_call
-- ,_a_telstra_tp_outbnd_avg_dur
-- ,_a_telstra_multi_calls
-- ,_a_crypto_mnthly_sum
,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
-- COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM

,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250717'
and     dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     TRAN_AMT > 0
order by    transactiondatetime
-- limit 10000
),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-17'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,

        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1

--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",7830.675000,527620,902420
01be11a6-3204-ae4c-0000-c71d265fb01e,2364,"COPY INTO @h2oai8f34b94b87944d0e929ea85333cffd6e/TECHDS_DEHURYSK_SCAM_RETRO_TRAINSET_3007_DSAMPL_v1
                                FROM (select * from LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2)
                                FILE_FORMAT = (TYPE=""CSV"" COMPRESSION=""NONE"" FIELD_OPTIONALLY_ENCLOSED_BY = '""')
                                OVERWRITE = TRUE
                                HEADER = TRUE",7766.139000,5646,5646
01bef272-3204-c93d-0000-c71d2d30c3da,2248,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905164042_scored as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it5_F2_xval_2day_all_redmojsiz_20250905164042.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _L_UID_AGE, _L_BC_SESS_CNT, _A_CC_CASH_ADVANCE_AMT, _L_PMT_AMT, _A_CAPP_HCE_CNT_1, _L_MUID_AGE_PER_USER, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_MAX_30D_SCORE, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _L_BC_SCORE, _L_DAYS_LST_DEV_IOS, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_NB_BROWSER_CNT, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_TIME_ZONE, _L_IP_AGE, _A_CLC_FTP_AMT, _A_CRYPTO_MNTHLY_SUM, _L_SESS_CNT_MOB_BROWSER, _A_P_L_3, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _L_NC_MATCH_NAME_CONF, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_NAME, _A_2WAY_TYPE, _L_PUSH_API_1, _A_CLIENT_CITY_6, _L_PROXY_TYPE, _L_LANG_1, _L_LANG_2, _L_NC_RESPONSE_CODE, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, OTH_CNT, NTBNK_FAC, REL_MNG, FA_1, NO_1, GOVT_BENE, PRVT_CUST, HL_ASOC, CORP_EMPL, TRUSTEE, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG, CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
-- where to_date(transactiondatetime) <= '2025-06-07'
-- limit 870
);",7709.813000,7417,7417
01bef20c-3204-c93e-0000-c71d2d2cbfe2,30505,"execute NOTEBOOK PRD_P01_DMN_FRAUMD.LABMLFRD.FRAUD_MARVIN_GENERATOR() MAIN_FILE='FRAUD_MARVIN_GENERATOR.ipynb'
RUNTIME_NAME='SYSTEM$BASIC_RUNTIME'
COMPUTE_POOL=CPL_USR_PRD_P01_FRAUMD_LABMLFRD_CPU_X64_L_001
QUERY_WAREHOUSE=WH_USR_PRD_P01_FRAUMD_LABMLFRD_003",7600.579000,0,0
01be9bda-3204-bee5-0000-c71d2a88ab6a,2101,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-07-01'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-03-01' and '2025-07-01'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-03-01' and '2025-07-01') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMC_SUM_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    CMC_SUM_TRAN_SUM_N,
    CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_SUM_N,
    CMC_SUM_FINL_APRD_TRAN_SUM_N,
    CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    CMC_SUM_DOMS_TRAN_CNT_Q,
    CMC_SUM_OSEA_TRAN_CNT_Q,
    CMC_SUM_DOMS_TRAN_SUM_N,
    CMC_SUM_OSEA_TRAN_SUM_N,
    CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMC_SUM_3DS_TRAN_CNT_Q,
    CMC_SUM_N3D_TRAN_CNT_Q,
    CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMC_SUM_3DS_TRAN_SUM_N,
    CMC_SUM_N3D_TRAN_SUM_N,
    CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    CMC_SUM_ATM_TRAN_CNT_Q,
    CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    CMC_SUM_CHIP_TRAN_CNT_Q,
    CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    CMC_SUM_CARD_PRES_TRAN_SUM_N,
    CMC_SUM_ATM_TRAN_SUM_N,
    CMC_SUM_FALL_BACK_TRAN_SUM_N,
    CMC_SUM_CHIP_TRAN_SUM_N,
    CMC_SUM_PAY_PASS_TRAN_SUM_N,
    CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",7595.039000,9489,24289
01be817b-3204-bc98-0000-c71d29bb9e1a,80950,"SELECT  *  FROM ( SELECT ""HDR_ACTIVITY_TYPE"", count(1) AS ""COUNT"" FROM ( SELECT  *  FROM LABMLFRD.TECHDS_MARVIN_CCA_TRANSACTIONS_ENCODED_FRAUDENGINEERING_TESTING_CHK_JOIN_COND) GROUP BY ""HDR_ACTIVITY_TYPE"") LIMIT 100",7550.704000,0,256
01bddfac-3204-a61b-0000-c71d24f35d32,106126,"execute notebook ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""GAREAJU 2025-05-28 13:40:55""()",7291.281000,0,0
01bed1b4-3204-c553-0000-c71d2c3cc4fe,2313,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg7d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
    order by tran_d
),
hourly_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
),
all_dates AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT cust_i, merc_i, acqr_i FROM PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl where tran_d between '2025-03-01' and '2025-06-06') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.cust_i = hd.cust_i AND ad.merc_i = hd.merc_i AND ad.acqr_i = hd.acqr_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    cust_i, -- as ssx_cust_num,
    merc_i,
    acqr_i,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,

    COALESCE(CAST(CMA_SUM_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_UPST_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_UPST_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_RULE_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_FINL_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_UPST_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_FINL_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_FDP_RULE_TRIG_CNT_Q AS FLOAT), -1) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    COALESCE(CAST(CMA_SUM_DOMS_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_DOMS_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_OSEA_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_OSEA_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_DOMS_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_DOMS_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_OSEA_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_OSEA_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_3DS_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_3DS_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_N3D_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_N3D_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_3DS_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_3DS_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_N3D_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_N3D_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_CARD_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_ATM_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_ATM_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_FALL_BACK_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_CHIP_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_CHIP_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_PAY_PASS_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_CARD_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_ATM_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_ATM_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_FALL_BACK_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_CHIP_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_CHIP_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_PAY_PASS_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
    COALESCE(CAST(CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMA_MAX_CUV_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMA_MAX_CUV_RULE_PUSH_SENT_F,
    
    -- CMA_SUM_TRAN_CNT_Q,
    -- CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    -- CMA_SUM_TRAN_SUM_N,
    -- CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    -- CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    -- CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    -- CMA_SUM_UPST_APRD_TRAN_SUM_N,
    -- CMA_SUM_FINL_APRD_TRAN_SUM_N,
    -- CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    -- CMA_SUM_DOMS_TRAN_CNT_Q,
    -- CMA_SUM_OSEA_TRAN_CNT_Q,
    -- CMA_SUM_DOMS_TRAN_SUM_N,
    -- CMA_SUM_OSEA_TRAN_SUM_N,
    -- CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    -- CMA_SUM_3DS_TRAN_CNT_Q,
    -- CMA_SUM_N3D_TRAN_CNT_Q,
    -- CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    -- CMA_SUM_3DS_TRAN_SUM_N,
    -- CMA_SUM_N3D_TRAN_SUM_N,
    -- CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    -- CMA_SUM_ATM_TRAN_CNT_Q,
    -- CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    -- CMA_SUM_CHIP_TRAN_CNT_Q,
    -- CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    -- CMA_SUM_CARD_PRES_TRAN_SUM_N,
    -- CMA_SUM_ATM_TRAN_SUM_N,
    -- CMA_SUM_FALL_BACK_TRAN_SUM_N,
    -- CMA_SUM_CHIP_TRAN_SUM_N,
    -- CMA_SUM_PAY_PASS_TRAN_SUM_N,
    -- CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    -- CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    -- CMA_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    cust_i,
    merc_i,
    acqr_i,
    window_start_date);",7257.220000,6868,25149
01bea03e-3204-c132-0000-c71d2aa65d46,2234,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_card_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        INCO_EXPY_CNT_Q,
        INCO_CVVA_CNT_Q,
        INCO_PIN_CNT_Q,
        OVER_LIMT_DCLN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        UPST_DCLN_TRAN_SUM_N,
        RULE_DCLN_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        INCO_EXPY_SUM_N,
        INCO_CVVA_SUM_N,
        INCO_PIN_SUM_N,
        OVER_LIMT_DCLN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CAPP_PSWD_CHNG_CNT_Q,
        CAPP_DVIC_REGR_CNT_Q,
        CAPP_LOGN_CNT_Q,
        NTB_LOGN_CNT_Q,
        VIEW_CARD_DETL_CNT_Q,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F,
        CUV_WHLI_F,
        CUV_DO_NOT_CTCT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.card_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
),
all_dates AS (
    SELECT
        card_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i FROM PRD_P01_DMN_FRAUMD.lcl.card_tran_prfl where tran_d between '2025-03-01' and '2025-05-31') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.INCO_EXPY_CNT_Q), 0) AS DAILY_INCO_EXPY_CNT_Q,
        COALESCE(SUM(hd.INCO_CVVA_CNT_Q), 0) AS DAILY_INCO_CVVA_CNT_Q,
        COALESCE(SUM(hd.INCO_PIN_CNT_Q), 0) AS DAILY_INCO_PIN_CNT_Q,
        COALESCE(SUM(hd.OVER_LIMT_DCLN_CNT_Q), 0) AS DAILY_OVER_LIMT_DCLN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_SUM_N), 0) AS DAILY_UPST_DCLN_TRAN_SUM_N,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_SUM_N), 0) AS DAILY_RULE_DCLN_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.INCO_EXPY_SUM_N), 0) AS DAILY_INCO_EXPY_SUM_N,
        COALESCE(SUM(hd.INCO_CVVA_SUM_N), 0) AS DAILY_INCO_CVVA_SUM_N,
        COALESCE(SUM(hd.INCO_PIN_SUM_N), 0) AS DAILY_INCO_PIN_SUM_N,
        COALESCE(SUM(hd.OVER_LIMT_DCLN_SUM_N), 0) AS DAILY_OVER_LIMT_DCLN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(SUM(hd.CAPP_PSWD_CHNG_CNT_Q), 0) AS DAILY_CAPP_PSWD_CHNG_CNT_Q,
        COALESCE(SUM(hd.CAPP_DVIC_REGR_CNT_Q), 0) AS DAILY_CAPP_DVIC_REGR_CNT_Q,
        COALESCE(SUM(hd.CAPP_LOGN_CNT_Q), 0) AS DAILY_CAPP_LOGN_CNT_Q,
        COALESCE(SUM(hd.NTB_LOGN_CNT_Q), 0) AS DAILY_NTB_LOGN_CNT_Q,
        COALESCE(SUM(hd.VIEW_CARD_DETL_CNT_Q), 0) AS DAILY_VIEW_CARD_DETL_CNT_Q,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_WHLI_F), 0) AS DAILY_CUV_WHLI_F,
        COALESCE(MAX(hd.CUV_DO_NOT_CTCT_F), 0) AS DAILY_CUV_DO_NOT_CTCT_F

    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_INCO_EXPY_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_EXPY_CNT_Q,
        SUM(DAILY_INCO_CVVA_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_CVVA_CNT_Q,
        SUM(DAILY_INCO_PIN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_PIN_CNT_Q,
        SUM(DAILY_OVER_LIMT_DCLN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_UPST_DCLN_TRAN_SUM_N,
        SUM(DAILY_RULE_DCLN_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_RULE_DCLN_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_INCO_EXPY_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_EXPY_SUM_N,
        SUM(DAILY_INCO_CVVA_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_CVVA_SUM_N,
        SUM(DAILY_INCO_PIN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_PIN_SUM_N,
        SUM(DAILY_OVER_LIMT_DCLN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_OVER_LIMT_DCLN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_PAY_PASS_TRAN_SUM_N,
        SUM(DAILY_CAPP_PSWD_CHNG_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
        SUM(DAILY_CAPP_DVIC_REGR_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
        SUM(DAILY_CAPP_LOGN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CAPP_LOGN_CNT_Q,
        SUM(DAILY_NTB_LOGN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_NTB_LOGN_CNT_Q,
        SUM(DAILY_VIEW_CARD_DETL_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_VIEW_CARD_DETL_CNT_Q,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_MAX_CUV_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_WHLI_F) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_MAX_CUV_WHLI_F,
        MAX(DAILY_CUV_DO_NOT_CTCT_F) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_MAX_CUV_DO_NOT_CTCT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CRD_SUM_TRAN_CNT_Q,
    CRD_SUM_UPST_APRD_TRAN_CNT_Q,
    CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
    CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
    CRD_SUM_FINL_APRD_TRAN_CNT_Q,
    CRD_SUM_INCO_EXPY_CNT_Q,
    CRD_SUM_INCO_CVVA_CNT_Q,
    CRD_SUM_INCO_PIN_CNT_Q,
    CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
    CRD_SUM_TRAN_SUM_N,
    CRD_SUM_UPST_APRD_TRAN_SUM_N,
    CRD_SUM_UPST_DCLN_TRAN_SUM_N,
    CRD_SUM_RULE_DCLN_TRAN_SUM_N,
    CRD_SUM_FINL_APRD_TRAN_SUM_N,
    CRD_SUM_INCO_EXPY_SUM_N,
    CRD_SUM_INCO_CVVA_SUM_N,
    CRD_SUM_INCO_PIN_SUM_N,
    CRD_SUM_OVER_LIMT_DCLN_SUM_N,
    CRD_SUM_FDP_RULE_TRIG_CNT_Q,
    CRD_SUM_DOMS_TRAN_CNT_Q,
    CRD_SUM_OSEA_TRAN_CNT_Q,
    CRD_SUM_DOMS_TRAN_SUM_N,
    CRD_SUM_OSEA_TRAN_SUM_N,
    CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CRD_SUM_3DS_TRAN_CNT_Q,
    CRD_SUM_N3D_TRAN_CNT_Q,
    CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CRD_SUM_3DS_TRAN_SUM_N,
    CRD_SUM_N3D_TRAN_SUM_N,
    CRD_SUM_CARD_PRES_TRAN_CNT_Q,
    CRD_SUM_ATM_TRAN_CNT_Q,
    CRD_SUM_FALL_BACK_TRAN_CNT_Q,
    CRD_SUM_CHIP_TRAN_CNT_Q,
    CRD_SUM_PAY_PASS_TRAN_CNT_Q,
    CRD_SUM_CARD_PRES_TRAN_SUM_N,
    CRD_SUM_ATM_TRAN_SUM_N,
    CRD_SUM_FALL_BACK_TRAN_SUM_N,
    CRD_SUM_CHIP_TRAN_SUM_N,
    CRD_SUM_PAY_PASS_TRAN_SUM_N,
    CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
    CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
    CRD_SUM_CAPP_LOGN_CNT_Q,
    CRD_SUM_NTB_LOGN_CNT_Q,
    CRD_SUM_VIEW_CARD_DETL_CNT_Q,
    CRD_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CRD_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CRD_MAX_CUV_RULE_PUSH_SENT_F,
    CRD_MAX_CUV_WHLI_F,
    CRD_MAX_CUV_DO_NOT_CTCT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    window_start_date);",7213.550000,7564,27097
01bea8d1-3204-c1f3-0000-c71d2afe1ca6,15016,"SELECT ""COMMENTS"" FROM LABMLFRD.CARD_TRAN_GROS_FRAU LIMIT 20",6894.988000,1,40
01be9875-3204-bee4-0000-c71d2a6dc332,19927,"execute notebook ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""FRAUD_MARVIN_GENERATOR""()",6875.327000,0,0
01bdd2a4-3204-a617-0000-c71d249851e2,826,"select _L_PMT_AMT
,_L_G_CON_DEV
,_N_CUST_TXN_COUNT
,_L_BC_SESS_CNT
,_L_BC_SCORE
,_B_RECIP_SUM_AAA_LONG
,_N_P20_7D_CNT_1
,_A_CC_CASH_ADVANCE_AMT
,_A_ATM_WITHDRAWAL_SUM_AMT
,_L_RISKY_KEY_COMBO
,_L_AND_ID_AGE
,_B_RECIP_SUM_AAA_6
,_L_SESS_CNT_MOB_SDK
,_A_CLIENT_COUNTRY_CNT_6
,_N_OPEN_FTP_SUM_7D
,_L_CUST_SCAMRISK_SCORE
,_A_CAPP_HCE_CNT_1
,_X_CIF_SENDER_SUM
,_L_MINS_LST_LGN_CAPPED
,_B_RECIP_SUM_TODAY
,_L_DAYS_LST_DEV_IOS
,_B_RECIP_SUM_AAA_7
,_B_CLIENT_POSTCODE_SUM_2
,_L_M_L_1
,_L_TOTAL_SESS_CNT
,_L_TAP_CNT
,_B_CLIENT_POSTCODE_CNT_3
,_B_RECIP_SUM_AAA_4
,_A_P_N_H
,_L_SCORE_2
,_A_NPP_INB_PMT_VAL
,_L_NC_ACCT_NUM_NAME_CONF
,_L_TOUCH_CNT
,_A_CUSTOMER_AGE
,_A_CUST_NPP_IN_SUM_AAA_2
,_L_MUID_AGE_PER_USER
,_B_CLIENT_POSTCODE_SUM_3
,_L_SCM_RSK_SCR_2
,_N_HCE_ADD_CARD
,_L_ISP_AGE
,_N_CRYPTO_RECIPIENT_CNT
,_L_SCORE_5
,_L_ACC_AMT_7D
,_X_T_3
,_L_ACC_AMT_4H
,_N_H_C
,_B_CLIENT_POSTCODE_1
,_B_RECIP_SUM_AAA_1
,_L_UID_AGE
,_A_PROF_CAPP_DEVICE_CNT_3
,_N_OPEN_FTP_CNT_7D
,_N_CA_LGN_CNT_24H_3
,_A_CRD_SCAM_SUPP_7D_SUM_1
,_A_CURR_CAPP_DEVICE_NFTP_CNT
,_A_CRD_NPP_PAYMENT_AMOUNT
,_A_CUST_SUM_AAA_LONG
,_A_CLIENT_COUNTRY_CNT_7
,_A_P_L_1
,_I_CUST_TRAN_SUM_3
,_A_CLIENT_COUNTRY_CNT_5
,_A_CLIENT_COUNTRY_CNT_2
,_L_SCORE_4
,_L_DEV_FAM_AGE
,_A_U
,_X_T_1
,_A_PROF_CAPP_DEVICE_CNT_1
,_A_CLIENT_CITY_CNT_2
,_N_H_1
,_A_CUST_AVG_ACCT_BAL
,_X_NPP_OUT_SUM_DATE
,_A_PROF_CAPP_DEVICE_CNT_2
,_N_MOB_APPLE_TRAN_SUM_3
,_B_CLIENT_POSTCODE_CNT_2
,_A_CUST_NPP_OUT_SUM_AAA_2
,_A_NPP_FTP_SUM
,_A_E
,_L_PASTE_IN_LOGIN_CNT
,_N_H_2
,_X_CIF_REC_SUM
,_X_LAST_N_TXN_COUNT
,_L_MAX_30D_SCORE
,_L_ASN_AGE
,_A_CLIENT_COUNTRY_CNT_10
,_A_CUST_ACCT_BAL
,_L_ACC_AMT_2H
,_A_P_L_C
,_L_SCRN_W
,_N_CAPP_LINKED_CNT_1
,_A_CUST_SUM_AAA_SHORT
,_A_CUST_NPP_OUT_SUM_AAA_5
,_L_CONCURRENT_SESS
,_N_NB_RECIPIENT_AMT_1
,_L_CITY_AGE
,_B_CLIENT_POSTCODE_3
,_N_CUST_NB_DEVICE_CNT
,_A_T
,_L_SCRN_H
,_L_ACC_AMT_1H
,_N_NB_RECIPIENT_AMT_3
,_A_CLIENT_COUNTRY_CNT_3
,_N_MOB_APPLE_TRAN_SUM_1
,_L_DAYS_LST_DEV_AND
,_N_CAPP_LOGONS_CNT_1
,_N_MOB_OTH_TRAN_SUM_1
,_N_H_4
,_I_CUST_TRAN_SUM_1
,_N_RP_NB_LOGON_CNT
,_a_c_g
,_a_ecv_document_ip
,_a_list_wl_scam_passport
,_a_list_bl_scam_passport
,_a_ecv_document_dt
,_a_list_bl_scam_drive_license
,_a_list_wl_scam_drive_license
,_a_list_bl_passport
,_a_cust_action_ind
,_a_list_bl_scam_tp_ip
,_a_list_wl_scam_tp_ip
,_X_NPP_OUT_SUM_1
,_X_NPP_OUT_SUM_2
,_X_NPP_OUT_SUM_3
,_A_CC_DT
,_A_ONLINE_PL_DT
,_A_CIF_ESTABLISH_DT
,_A_CIF_ESTABLISH_CHANNEL
,_L_FINGERPRINT_1
,_L_FINGERPRINT_2
,_L_FINGERPRINT_3
,_L_FINGERPRINT_4
,_L_FINGERPRINT_5
,_a_cust_os_ver
,_a_cust_os_name
,_A_2WAY_TYPE
,_A_AUTO_DEC_CP_PP_DT
,_A_BTS_BCH_SUM
,_A_BTS_CUST_AGE
,_A_CAPP_NOTIFY_OPT_OUT_DT
,_A_CLIENT_CITY_10
,_A_CURR_CAPP_DEVICE_CNT
,_A_CURR_NB_BROWSER_CNT
,_A_PREV_CAPP_DEVICE_CNT
,_A_Q
,_A_R
,_A_SCAMP1_MLW_DT
,_A_SCAMP2_MLW_DT
,_A_SCAMP5_MLW_DT
,_A_SCAMP7_MLW_DT
,_L_PUSH_API_1
,_L_PUSH_API_2
,_L_PUSH_API_3
,_L_PUSH_API_4
,_L_PUSH_API_DT_1
,_L_PUSH_API_DT_2
,_L_PUSH_API_DT_3
,_L_PUSH_API_DT_4
,_b_client_postcode_cnt_4
,_l_cntry_age
,_a_npp_in_unrelated_sum_24_1
,_x_ft_over5k_recip_cnt
,_b_recip_sum_aaa_short
,_l_clipb_event_cnt
,_x_cif_recipient_new_cnt
,_a_npp_in_unrelated_sum_24_2
,_b_npp_out_sum_1
,_l_acc_amt_1d
,_b_client_postcode_cnt_1
,_a_transport_reg_cnt_1
,_a_multi_cnt
,_l_m_l_4
,_a_prof_capp_device_nftp_1
,_n_ca_lgn_cnt_24h_1
,_x_name_match_cnt
,_n_capp_linked_cnt_2
,_a_prof_capp_device_cnt_5
,_a_prof_capp_device_cnt_4
,_b_list_rl1_scam_tp_cif
,_b_npp_blacklist_recip_flag
,_l_sess_cnt_web
,_n_100k_crypto_sum
,_n_crypto_recipient_sum
,_b_recip_sum_aaa_2
,_l_m_l_c
,_l_time_zone
,_b_client_postcode_sum_5
,_a_cust_npp_in_sum_aaa_1
,_l_ip_age
,_a_npp_inbound_sum_amt
,_x_ft_over5k_recip_sum
,_x_cif_sender_cnt
,_a_nb_logons_cnt_2
,_a_clc_ftp_amt
,_l_trvl_spd
,_n_2wp_tran_ind_1
,_b_recip_sum_long
,_a_crypto_mnthly_sum
,_x_t_2
,_a_gl_trf_acc_bal
,_l_sess_cnt_mob_browser
,_b_client_postcode_sum_1
,_l_score_3
,_n_noncrypto_sum
,_a_crd_crypto_proc_flg
,_b_npp_out_cnt_2
,_a_npp_out_cnt_2
,_a_sch_amt
,_a_p_l_3
,_n_100k_noncrypto_sum
,_b_npp_out_ftp_sum_1
,_l_sdid_cnt_1
,_b_client_postcode_sum_4
,_a_cust_npp_out_sum_aaa_long
,_i_cust_tran_sum_2
,_b_client_postcode_cnt_5
,_a_list_rl1_scam_cust_cif
,_n_mob_samsung_tran_sum_2
,_l_num_sess_2h
,_a_vpn_vps_ip_logon_count
,_n_mob_oth_tran_sum_3
,_x_t_5
,_a_geo_distance
,_x_name_match_ind
,_a_nb_logons_cnt_3
,_n_mob_oth_tran_sum_2
,_l_days_lst_dev_js
,_n_mob_samsung_tran_sum_1
,_a_ftp_sum_1
,_l_num_sess_4h
,_l_nc_match_name_conf
,_b_recip_sum_aaa_5
,_l_dpi_change
,_n_100k_crypto_cnt
,_b_recip_sum_1
,_n_capp_logons_cnt_3m
,_n_mob_apple_tran_sum_2
,_a_scam_risky_mcc_prelead_amt
,_l_m_l_3
,_x_cif_rec_cnt
,_n_nmchk_cnt
,_a_client_city_6
,_l_nc_winning_alg
,_l_proxy_type
,_l_lang_3
,_a_cif_establish_cust_pcode
,_b_crypto_risk
,_l_lang_1
,_a_mrisk_foreign_ip_cntry_code
,_l_lang_2
,_l_nc_response_code
,_a_prof_risk_ind
,_a_latest_ncrg_isp, SSX_CUST_NUM
,DTL_EX_0_N_064
,DTL_EX_0_N_065
,DTL_EX_0_N_066
,TGX_TRAN_AMT
,TTS_TRAN_DATE_ALT
,TTS_TRAN_TIME_ALT
,DTL_EX_0_20S_001, b.* from PRD_P01_DMN_FRAUMD.LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b on a.SSX_CUST_NUM = b.HQO_OB_USERID 
where a.TTS_TRAN_DATE_ALT > '20250710';",6858.941000,150172,1796524
01bebbcc-3204-c1f5-0000-c71d2b96ea4a,444,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as 
(
WITH code1_data AS (
        SELECT DISTINCT

    -- Transaction datetime (parsed from alternate date/time fields)
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
    -- Transaction ID (concatenation of 3 fields)x
    ,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
    -- Snapshot date of transaction (parsed from MID_EVENT_TS)
    ,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
    -- Account identifier (bank, branch, account number)
    ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
    -- Party identifier (customer number padded)
    ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
    -- Transaction date (alternate format)
    ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d

    -- Feature from leaky.txt, no description
    ,dtl_ex_0_20s_001
    -- Feature from leaky.txt, no description
    -- ,dtl_ex_1_5s_01
    -- Customer number (must be present, dropped for modelling)
    ,SSX_CUST_NUM
    -- Transaction amount
    -- ,tgx_tran_amt
    -- -- Max 30-day risk score
    -- ,_l_max_30d_score
    -- -- BC risk score
    -- ,_l_bc_score
    -- -- Max 30-day mule risk score
    -- ,_l_max_30d_mule_score

    ,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

-- ,_l_adv_key_combo
-- ,_l_clpbrd_evnt
-- ,_l_concurrent_sess
-- ,_l_export_data
-- ,_l_import_data
-- ,_l_rat_in_sess
-- ,_l_is_rcnt_hrisk_sess
,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS

-- ,_l_scrn_broadcast
-- ,_l_delay_to_input_pi
-- ,_l_active_spoofing
-- ,_l_pmt_vloc_anom
-- ,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM

-- ,_l_accum_amt_anom
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM

-- ,_l_is_active_call
-- ,_l_is_long_sess
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,_L_TRUST_900
-- ,_L_TRUST_NEW_PAYEE
-- ,_L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE

-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYEE
-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYER
-- ,_L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,_l_cust_scamrisk_score
-- ,_b_recip_sum_short
-- ,_b_recip_sum_long
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG

-- ,_a_customer_age
-- ,_a_cust_sum_aaa_short
-- ,_a_cust_sum_aaa_long
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M

-- ,_x_cif_recipient_new_sum
------------------
-- Keep other columns as VARCHAR (mostly text)
,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,_x_cif_recipient_new_cnt
-- ,_x_telstra_last_call_dur
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_3
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_2
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_4
-- ,REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '') as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
-- REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '') as _N_NEW_IP_LOGON_PCODE,
-- REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '') as _A_LOGON_198_IP_PC,
-- REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '') as _A_LOGON_NB_IP_PC,
-- COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,


,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT

-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE


,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT


-- ,_x_telstra_max_call_dur
-- -- ,_a_telstra_active_call
-- ,_a_telstra_tp_outbnd_avg_dur
-- ,_a_telstra_multi_calls
-- ,_a_crypto_mnthly_sum
-- COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
-- COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
-- COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM

,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250717'
and     dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     TRAN_AMT > 0
order by    transactiondatetime
-- limit 10000
),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-17'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,

        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1

--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",6706.582000,527620,901181
01bf0f98-3204-c93b-0000-c71d2e010052,149682,"execute NOTEBOOK PRD_P01_DMN_FRAUMD.LABMLFRD.FRAUD_MARVIN_GENERATOR() MAIN_FILE='FRAUD_MARVIN_GENERATOR.ipynb'
RUNTIME_NAME='SYSTEM$BASIC_RUNTIME'
COMPUTE_POOL=CPL_USR_PRD_P01_FRAUMD_LABMLFRD_CPU_X64_L_001
QUERY_WAREHOUSE=WH_USR_PRD_P01_FRAUMD_LABMLFRD_003",6557.621000,0,0
01bf1992-3204-ccd0-0000-c71d2e4faae2,35216,"execute NOTEBOOK PRD_P01_DMN_FRAUMD.LABMLFRD.FRAUD_MARVIN_GENERATOR() MAIN_FILE='FRAUD_MARVIN_GENERATOR.ipynb'
RUNTIME_NAME='SYSTEM$BASIC_RUNTIME'
COMPUTE_POOL=CPL_USR_PRD_P01_FRAUMD_LABMLFRD_CPU_X64_L_001
QUERY_WAREHOUSE=WH_USR_PRD_P01_FRAUMD_LABMLFRD_003",6553.861000,0,0
01bed1c6-3204-c558-0000-c71d2c3c9e0e,2240,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg7d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-03-01' and '2025-06-06'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-03-01' and '2025-06-06') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,

    COALESCE(CAST(CMC_SUM_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_UPST_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_UPST_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_RULE_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_FINL_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_UPST_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FINL_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FDP_RULE_TRIG_CNT_Q AS FLOAT), -1) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    COALESCE(CAST(CMC_SUM_DOMS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_DOMS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_OSEA_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_OSEA_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_DOMS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_DOMS_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_OSEA_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_OSEA_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_3DS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_3DS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_N3D_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_N3D_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_3DS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_3DS_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_N3D_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_N3D_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CARD_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_ATM_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_ATM_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_FALL_BACK_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CHIP_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CHIP_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_PAY_PASS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CARD_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_ATM_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_ATM_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FALL_BACK_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CHIP_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CHIP_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_PAY_PASS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
    COALESCE(CAST(CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMC_MAX_CUV_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_RULE_PUSH_SENT_F,

    
    -- CMC_SUM_TRAN_CNT_Q,
    -- CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    -- CMC_SUM_TRAN_SUM_N,
    -- CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    -- CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    -- CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    -- CMC_SUM_UPST_APRD_TRAN_SUM_N,
    -- CMC_SUM_FINL_APRD_TRAN_SUM_N,
    -- CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    -- CMC_SUM_DOMS_TRAN_CNT_Q,
    -- CMC_SUM_OSEA_TRAN_CNT_Q,
    -- CMC_SUM_DOMS_TRAN_SUM_N,
    -- CMC_SUM_OSEA_TRAN_SUM_N,
    -- CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    -- CMC_SUM_3DS_TRAN_CNT_Q,
    -- CMC_SUM_N3D_TRAN_CNT_Q,
    -- CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    -- CMC_SUM_3DS_TRAN_SUM_N,
    -- CMC_SUM_N3D_TRAN_SUM_N,
    -- CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    -- CMC_SUM_ATM_TRAN_CNT_Q,
    -- CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    -- CMC_SUM_CHIP_TRAN_CNT_Q,
    -- CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    -- CMC_SUM_CARD_PRES_TRAN_SUM_N,
    -- CMC_SUM_ATM_TRAN_SUM_N,
    -- CMC_SUM_FALL_BACK_TRAN_SUM_N,
    -- CMC_SUM_CHIP_TRAN_SUM_N,
    -- CMC_SUM_PAY_PASS_TRAN_SUM_N,
    -- CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    -- CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    -- CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",6005.440000,7432,26209
01bf1aa1-3204-ccd0-0000-c71d2e58874e,153198,"execute NOTEBOOK PRD_P01_DMN_FRAUMD.LABMLFRD.FRAUD_MARVIN_GENERATOR() MAIN_FILE='FRAUD_MARVIN_GENERATOR.ipynb'
RUNTIME_NAME='SYSTEM$BASIC_RUNTIME'
COMPUTE_POOL=CPL_USR_PRD_P01_FRAUMD_LABMLFRD_CPU_X64_L_001
QUERY_WAREHOUSE=WH_USR_PRD_P01_FRAUMD_LABMLFRD_003",5711.117000,0,0
01bea374-3204-c1f2-0000-c71d2ac73d6a,143859,"execute notebook ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""FRAUD_MARVIN_GENERATOR""()",5684.426000,0,0
01bde9ef-3204-aa20-0000-c71d25428ade,125,"SELECT 
    sum(case when COALESCE(TRIM(t1.ssx_cust_num), '') = '' then 1 else 0 end) as null_cust_tran_nums,
    sum(case when COALESCE(TRIM(t1.ssx_cust_num), '') <> '' then 1 else 0 end) as populated_cust_tran_nums,
    sum(1) as total
FROM
    PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT AS t1
JOIN LCL.CARD_ASES_BTCH_PEGA_CURR_STG AS p
    ON (
        (
            p.BUSN_D = TO_DATE('2025-07-18')
            AND (
                (p.custid IS NOT NULL AND p.custid <> '' AND t1.ssx_cust_num = p.custid)
                OR
                (p.custid IS NULL OR p.custid = '' AND t1.chl_id_card_num = p.basecrdnumber)
            )
        )
    )
WHERE 
    t1.tts_tran_date_client >= TO_CHAR(DATEADD(month, -6, CURRENT_DATE), 'YYYYMMDD')",5660.830000,1318637,1652706
01bef378-3204-c93c-0000-c71d2d38be4a,2246,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905164056_scored_0 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it6_F2_xval_2day_all_fdt_redmojsiz_20250905164056.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CRD_SAFE_MERCHANT, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_ASN_AGE, _L_SCORE_2, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_SCRN_H, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_CLC_FTP_AMT, _L_TRVL_SPD, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_SCH_AMT, _A_P_L_3, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _L_DAYS_LST_DEV_JS, _A_ECV_DOCUMENT_IP, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_LANG_1, _L_LANG_2, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, DPST_CNT, CC_CNT, FA_1, NO_1, GOVT_BENE, MAR_STS_ORG_STR, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CMA_SUM_TRAN_SUM_N, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) <= '2025-06-05'
-- limit 870
);",5649.980000,7417,7417
01bf18e9-3204-ccd0-0000-c71d2e4acff2,47276,"execute NOTEBOOK PRD_P01_DMN_FRAUMD.LABMLFRD.FRAUD_MARVIN_GENERATOR() MAIN_FILE='FRAUD_MARVIN_GENERATOR.ipynb'
RUNTIME_NAME='SYSTEM$BASIC_RUNTIME'
COMPUTE_POOL=CPL_USR_PRD_P01_FRAUMD_LABMLFRD_CPU_X64_L_001
QUERY_WAREHOUSE=WH_USR_PRD_P01_FRAUMD_LABMLFRD_003",5632.287000,0,0
