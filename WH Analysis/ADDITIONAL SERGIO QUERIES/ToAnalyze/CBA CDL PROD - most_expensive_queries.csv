QUERY_ID,QUERY_TEXT,USER_NAME,ROLE_NAME,EXECUTION_TIME_MILLISECONDS,EXECUTION_TIME_SECONDS,EXECUTION_TIME_MINUTES,EXECUTION_TIME_HOURS,WAREHOUSE_SIZE,NODES,RELATIVE_PERFORMANCE_COST
01be9de3-3204-bee3-0000-c71d2a95278a,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-07-01'
    order by tran_d
),
hourly_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-07-01'
),
all_dates AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT cust_i, merc_i, acqr_i FROM PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl where tran_d between '2025-03-01' and '2025-07-01') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.cust_i = hd.cust_i AND ad.merc_i = hd.merc_i AND ad.acqr_i = hd.acqr_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    cust_i, -- as ssx_cust_num,
    merc_i,
    acqr_i,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMA_SUM_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    CMA_SUM_TRAN_SUM_N,
    CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_SUM_N,
    CMA_SUM_FINL_APRD_TRAN_SUM_N,
    CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    CMA_SUM_DOMS_TRAN_CNT_Q,
    CMA_SUM_OSEA_TRAN_CNT_Q,
    CMA_SUM_DOMS_TRAN_SUM_N,
    CMA_SUM_OSEA_TRAN_SUM_N,
    CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMA_SUM_3DS_TRAN_CNT_Q,
    CMA_SUM_N3D_TRAN_CNT_Q,
    CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMA_SUM_3DS_TRAN_SUM_N,
    CMA_SUM_N3D_TRAN_SUM_N,
    CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    CMA_SUM_ATM_TRAN_CNT_Q,
    CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    CMA_SUM_CHIP_TRAN_CNT_Q,
    CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    CMA_SUM_CARD_PRES_TRAN_SUM_N,
    CMA_SUM_ATM_TRAN_SUM_N,
    CMA_SUM_FALL_BACK_TRAN_SUM_N,
    CMA_SUM_CHIP_TRAN_SUM_N,
    CMA_SUM_PAY_PASS_TRAN_SUM_N,
    CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    cust_i,
    merc_i,
    acqr_i,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,14399706,14399.706000,239.995100,3.999918,2X-LARGE,32,127.997376
01bee7b9-3204-c558-0000-c71d2cdc863e,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-32
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,14369846,14369.846000,239.497433,3.991624,2X-LARGE,32,127.731968
01bed777-3204-c554-0000-c71d2c6a49ae,"CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM 
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b 
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            -- AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-30
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            -- AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL)
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM DSPT_POST dai
        LEFT JOIN FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM RANKED_MATCHES
        WHERE POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        -- AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NULL))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,14328179,14328.179000,238.802983,3.980050,2X-LARGE,32,127.361600
01bef22e-3204-c93c-0000-c71d2d2e38c6,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        * EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,12493532,12493.532000,208.225533,3.470426,2X-LARGE,32,111.053632
01beefcf-3204-c93a-0000-c71d2d1d3b32,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905163819_scored_1 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it3_F2_xval_2day_all_20250905163819.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_NC_MATCH_NAME_CONF, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, REL_MNG, FA_1, NO_1, FP, GOVT_BENE, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_CNT_Q, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_RULE_DCLN_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_SUM_N, CUS_SUM_FINL_APRD_TRAN_SUM_N, CUS_SUM_FDP_RULE_TRIG_CNT_Q, CUS_SUM_DOMS_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_CNT_Q, CUS_SUM_PAY_PASS_TRAN_CNT_Q, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_CHIP_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_NTB_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CUS_MAX_C_2WAY_CRD_RULE_FLAG, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_RULE_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_APRD_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_FINL_APRD_TRAN_SUM_N, CRD_SUM_INCO_CVVA_SUM_N, CRD_SUM_FDP_RULE_TRIG_CNT_Q, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_CHIP_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CRD_SUM_CAPP_LOGN_CNT_Q, CRD_SUM_VIEW_CARD_DETL_CNT_Q, CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F, CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_DOMS_TRAN_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_CNT_Q, CMC_SUM_OSEA_TRAN_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_CNT_Q, CMC_SUM_PAY_PASS_TRAN_CNT_Q, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,10561528,10561.528000,176.025467,2.933758,2X-LARGE,32,93.880256
01beefce-3204-c939-0000-c71d2d1d48aa,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905163819_scored_0 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it3_F2_xval_2day_all_20250905163819.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_NC_MATCH_NAME_CONF, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, REL_MNG, FA_1, NO_1, FP, GOVT_BENE, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_CNT_Q, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_RULE_DCLN_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_SUM_N, CUS_SUM_FINL_APRD_TRAN_SUM_N, CUS_SUM_FDP_RULE_TRIG_CNT_Q, CUS_SUM_DOMS_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_CNT_Q, CUS_SUM_PAY_PASS_TRAN_CNT_Q, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_CHIP_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_NTB_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CUS_MAX_C_2WAY_CRD_RULE_FLAG, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_RULE_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_APRD_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_FINL_APRD_TRAN_SUM_N, CRD_SUM_INCO_CVVA_SUM_N, CRD_SUM_FDP_RULE_TRIG_CNT_Q, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_CHIP_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CRD_SUM_CAPP_LOGN_CNT_Q, CRD_SUM_VIEW_CARD_DETL_CNT_Q, CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F, CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_DOMS_TRAN_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_CNT_Q, CMC_SUM_OSEA_TRAN_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_CNT_Q, CMC_SUM_PAY_PASS_TRAN_CNT_Q, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) <= '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,10330236,10330.236000,172.170600,2.869510,2X-LARGE,32,91.824320
01be8a32-3204-bee3-0000-c71d2a00252e,"SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
,dtl_ex_0_20s_001
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,
        -- Blacklist and scam indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_acct,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl1_scam_tp_cif, '[^0-9.-]', '')), -1) as _b_list_rl1_scam_tp_cif,
        -- High-risk biller metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_recip_flag,
        -- NPP outbound transaction metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_sum_1,
        -- NPP first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_2,
        -- Other risk indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_open_listed_last_cif_2, '[^0-9.-]', '')), -1) as _b_open_listed_last_cif_2,
        -- Recipient first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_long, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_long,
        -- Recipient link sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_short,
        -- Recipient transaction sums (various time periods)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_4, '[^0-9.-]', '')), -1) as _b_recip_sum_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_7, '[^0-9.-]', '')), -1) as _b_recip_sum_7,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_today, '[^0-9.-]', '')), -1) as _b_recip_sum_today,
        -- Recipient AAA transaction sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_1, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_4, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_short,
        -- Fixed: _b_rfm_whitelist_ind (was incorrectly aliased)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_rfm_whitelist_ind, '[^0-9.-]', '')), -1) as _b_rfm_whitelist_ind,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_1d_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_1d_out,
        
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added

,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,10103908,10103.908000,168.398467,2.806641,2X-LARGE,32,89.812512
01beec16-3204-c558-0000-c71d2cfdc962,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,9715742,9715.742000,161.929033,2.698817,2X-LARGE,32,86.362144
01be061f-3204-aca9-0000-c71d2609d136,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""DTL_EX_0_20S_001"" STRING(16777216), ""DTL_EX_1_5S_01"" STRING(16777216), ""TGX_TRAN_AMT"" STRING(16777216), ""HOUR"" BIGINT, ""_A_MARVIN_DIGI_DECISION_NUM"" STRING(16777216), ""LAG_A_MARVIN_DIGI_DECISION_NUM"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_BTS_MAX_SE_DT"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_CRD_ACTIONCODE_DT_1"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_LO_DT"" BIGINT, ""_A_CC_DT"" BIGINT, ""_A_CAPP_NOTIFY_OPT_OUT_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_3"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_NPP_FTP_DATE2"" BIGINT, ""_A_P_P_3"" BIGINT, ""_A_CRD_NPP_PAYMENT_DT"" BIGINT, ""_A_IS_IP_DT_3"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_5_2"" BIGINT, ""_A_ONLINE_PL_DT"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_DTL_HID_UNHID_ACCT_DT_PREV"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_SCAMP1_MLW_DT"" BIGINT, ""_A_SCAMP2_MLW_DT"" BIGINT, ""_A_SCAMP5_MLW_DT"" BIGINT, ""_A_SCAMP7_MLW_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP4_DT"" BIGINT, ""_A_NB_LASTLOGON_DT_3"" BIGINT, ""_A_AUTO_DEC_CP_PP_DT"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_INB_ALL_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_1"" BIGINT, ""_A_RETRIEVE_STMT_DETAILS_DT"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_NPP_WHITELIST_CUS_ACCT_DT"" BIGINT, ""_A_NPP_WHITELIST_PAYID_DT"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_BLACKLIST_PAYID_DT"" BIGINT, ""_A_NPP_INB_OFI_PAYID_DT"" BIGINT, ""_A_NPP_OUT_CBA_PAYID_DT"" BIGINT, ""_A_AUS_IP_ACTIVITY"" BIGINT, ""_A_CIF_ESTABLISH_DT"" BIGINT, ""_A_ECV_DOCUMENT_DT"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_CLIENT_POSTCODE_DT_2"" BIGINT, ""_A_CLIENT_PORT_DATE_1"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_OPEN_LAST_PAYER_CIF_DT_10"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_NPP_OUT_CNT_DATE"" BIGINT, ""_I_ALL_LOGONS_FDT"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_PUSH_API_DT_2"" BIGINT, ""_L_PUSH_API_DT_3"" BIGINT, ""_L_PUSH_API_DT_4"" BIGINT, ""_L_FIRST_RAT_DT"" BIGINT, ""_L_M_C_5"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_MOB_RAT_DT"" BIGINT, ""_L_IS_RAT_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_1701_DT_1"" BIGINT, ""_N_D_P_C"" BIGINT, ""_N_T_3"" BIGINT, ""_N_1601_DT"" BIGINT, ""_N_F_3"" BIGINT, ""_N_NB_MEDIUM_PRIORITY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_CUST_NB_DEVICE_DT"" BIGINT, ""_N_CUST_NB_FIRST_DEVICE_DT"" BIGINT, ""_N_HCE_ADD_CARD"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CAPP_REG_DT_3"" BIGINT, ""_N_CAPP_REG_DT_5"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_PASSWORD_TEMP"" BIGINT, ""_X_D_2"" BIGINT, ""_A_BTS_BIO_SE"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_ECV_COMMSEC_FLAG"" NUMBER(38, 2), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_ATM_WITHDRAWAL_SUM_AMT"" NUMBER(38, 2), ""_A_NPP_INBOUND_SUM_AMT"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_DISTANCE"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_FTP_SUM_1"" NUMBER(38, 2), ""_A_MULTI_CNT"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_3"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_P_N_3"" STRING(16777216), ""_A_P_N_C"" STRING(16777216), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_CUST_AVG_ACCT_BAL"" NUMBER(38, 2), ""_A_E"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_T"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_CAPP_REGISTRATIONS_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_2"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_DEVICE_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_LOGON_NB_IP_PC"" STRING(16777216), ""_A_CURR_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE"" STRING(16777216), ""_A_PREV_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE_MODEL"" STRING(16777216), ""_A_PROF_CAPP_DEVICE_2"" STRING(16777216), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_2"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_3"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_5"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_MODEL_1"" STRING(16777216), ""_A_VPN_VPS_IP_LOGON_COUNT"" NUMBER(38, 2), ""_A_CC_CASH_ADVANCE_AMT"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_CNT_2"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NPP_FTP_SUM"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_5"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_7"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_SHORT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_CIF_ESTABLISH_EMAIL"" STRING(16777216), ""_A_CIF_ESTABLISH_PHONE"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_CLIENT_POSTCODE_FTP_SUM_3"" NUMBER(38, 2), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_CITY_CNT_1"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_3"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_2"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_5"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_6"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_7"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_BVT_NUMERIC_1"" NUMBER(38, 2), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_LIST_RL1_SCAM_TP_CIF"" NUMBER(38, 2), ""_B_NPP_OUT_FTP_SUM_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_4"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_5"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_6"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_7"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_4"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_2"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_3"" NUMBER(38, 2), ""_I_ALL_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_2"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_3"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_3M"" NUMBER(38, 2), ""_I_CUST_NET_L_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_4"" NUMBER(38, 2), ""_I_CUST_NET_CNT_LONG"" NUMBER(38, 2), ""_L_SCM_RSK_SCR_2"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_DPI_CHANGE"" NUMBER(38, 2), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_PLUGIN_CNT"" NUMBER(38, 2), ""_L_RARE_SIM_CNTRY_CODE"" NUMBER(38, 2), ""_L_ROOTED_DEV"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_SDID_CNT_1"" NUMBER(38, 2), ""_L_SDID_CNT_3"" NUMBER(38, 2), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_MATCH_NAME"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BC_AO_SCORE"" NUMBER(38, 2), ""_L_BRANCH_ID"" STRING(16777216), ""_L_DRAG_N_DROP"" NUMBER(38, 2), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_RCNT_HI_SCR_ON_DEV"" NUMBER(38, 2), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SCORE_1"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_ACCUM_AMT_ANOM"" NUMBER(38, 2), ""_L_FRST_PROXY"" NUMBER(38, 2), ""_L_NEW_LANG"" NUMBER(38, 2), ""_L_SCRN_RES_ANOM"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_SCORE_4"" NUMBER(38, 2), ""_L_SCORE_5"" NUMBER(38, 2), ""_L_RAT_CHECK"" NUMBER(38, 2), ""_L_M_L_1"" NUMBER(38, 2), ""_L_M_L_4"" NUMBER(38, 2), ""_L_M_L_C"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_BC_SESS_ID"" STRING(16777216), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_BC_SCORE"" NUMBER(38, 2), ""_L_BROWSER_AGE"" NUMBER(38, 2), ""_L_CITY_AGE"" NUMBER(38, 2), ""_L_CLIPB_EVENT_CNT"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_IOS"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_JS"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_DOM_HAND_CH_ANOMALY"" NUMBER(38, 2), ""_L_FT_RAT_APP_INST"" NUMBER(38, 2), ""_L_G_CON_DEV"" NUMBER(38, 2), ""_L_IP_AGE"" NUMBER(38, 2), ""_L_IS_ACTIVE_CALL"" NUMBER(38, 2), ""_L_ISP_AGE"" NUMBER(38, 2), ""_L_KEY_MOUSE_ANOMALY"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_LGN_IMPORT_ANOMALY"" NUMBER(38, 2), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_MINS_LST_LGN_CAPPED"" NUMBER(38, 2), ""_L_MOUSE_CNT"" NUMBER(38, 2), ""_L_MOUSE_DOODL"" NUMBER(38, 2), ""_L_NEW_BROWSER"" NUMBER(38, 2), ""_L_NEW_BROWSER_ANOMALY"" NUMBER(38, 2), ""_L_NEW_MOB_APP_USER"" NUMBER(38, 2), ""_L_NEW_MOB_BROWSER_USER"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_ORIENT_EVENT_CNT"" NUMBER(38, 2), ""_L_OS_CH_ANOMALY"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PRIV_BROWSING_ANOMALY"" NUMBER(38, 2), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SCRN_W"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_SDK"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_SESS_ID"" STRING(16777216), ""_L_SIM_IP_CNTRY_MISMATCH"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOTAL_SESS_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_L_TYPE_PATTERNS_ANOMALY"" NUMBER(38, 2), ""_L_UID_AGE"" NUMBER(38, 2), ""_N_BC_CR_BC_1"" NUMBER(38, 2), ""_N_FTP_CNT_1"" NUMBER(38, 2), ""_N_5_RCNT_M100S_1"" STRING(16777216), ""_N_5_RCNT_M100S_2"" STRING(16777216), ""_N_MPS_MNDT_CNT_24H_1"" NUMBER(38, 2), ""_N_MOB_OTH_TRAN_SUM_1"" NUMBER(38, 2), ""_N_NB_LOGON_USER_AGENT"" STRING(16777216), ""_N_CA_DEVICE_PROFILE_1"" NUMBER(38, 2), ""_N_CA_DEVICE_PROFILE_3"" NUMBER(38, 2), ""_N_P20_7D_CNT_1"" NUMBER(38, 2), ""_N_CA_LGN_CNT_24H_1"" NUMBER(38, 2), ""_N_NMCHK_CNT"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_IND_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CLIENT_SSID_NAME_1"" STRING(16777216), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_CRYPTO_RECIPIENT_SUM"" NUMBER(38, 2), ""_N_RP_SES_IP_1"" NUMBER(38, 2), ""_N_MULTI_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_NB_SUM_TPT_4"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_H_1"" NUMBER(38, 2), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_OPEN_FTP_SUM_7D"" NUMBER(38, 2), ""_N_CAPP_BPAY_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_CIF_SENDER_SUM"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_IND"" NUMBER(38, 2), ""_X_FT_OVER5K_RECIP_CNT"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_T_1"" NUMBER(38, 2), ""_X_T_2"" NUMBER(38, 2), ""_X_T_3"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_1"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_3"" NUMBER(38, 2))    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            SSX_CUST_NUM,
            TTS_TRAN_DATE_ALT,
            DTL_EX_0_20S_001,
            DTL_EX_1_5S_01,
            TGX_TRAN_AMT,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _A_MARVIN_DIGI_DECISION_NUM,
            LAG(_A_MARVIN_DIGI_DECISION_NUM) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_A_MARVIN_DIGI_DECISION_NUM,
            	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_MAX_SE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CC_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CC_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CC_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_NOTIFY_OPT_OUT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_FTP_DATE2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_FTP_DATE2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_FTP_DATE2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_P_P_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_P_P_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_P_P_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_NPP_PAYMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_NPP_PAYMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_NPP_PAYMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IS_IP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ONLINE_PL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ONLINE_PL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ONLINE_PL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_HID_UNHID_ACCT_DT_PREV, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_HID_UNHID_ACCT_DT_PREV, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_HID_UNHID_ACCT_DT_PREV
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP1_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP2_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP5_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP7_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP4_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_LASTLOGON_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_LASTLOGON_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_LASTLOGON_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_AUTO_DEC_CP_PP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RETRIEVE_STMT_DETAILS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_CUS_ACCT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_CUS_ACCT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_WHITELIST_CUS_ACCT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_WHITELIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_BLACKLIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_BLACKLIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_BLACKLIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_OFI_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_CBA_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUS_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUS_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00'))
            END as _A_AUS_IP_ACTIVITY
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CIF_ESTABLISH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ECV_DOCUMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PORT_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PORT_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_PORT_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_10, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_10, 38, 2), '1960-01-01 00:00:00'))
            END as _B_OPEN_LAST_PAYER_CIF_DT_10
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00'))
            END as _I_ALL_LOGONS_FDT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_FIRST_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_C_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_C_5, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_C_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_MOB_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_MOB_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_MOB_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1701_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_D_P_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_T_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_T_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_T_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1601_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_F_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_F_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_F_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_MEDIUM_PRIORITY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_DEVICE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_DEVICE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_DEVICE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_FIRST_DEVICE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_FIRST_DEVICE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_FIRST_DEVICE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_HCE_ADD_CARD, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_HCE_ADD_CARD, 38, 2), '1960-01-01 00:00:00'))
            END as _N_HCE_ADD_CARD
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PASSWORD_TEMP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00'))
            END as _X_D_2
        
            ,             try_to_number(_a_bts_bio_se, 38, 2) as _a_bts_bio_se
            ,_A_BTS_BNFT
            ,try_to_number(_a_ecv_commsec_flag, 38, 2) as _a_ecv_commsec_flag
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,try_to_number(_a_atm_withdrawal_sum_amt, 38, 2) as _a_atm_withdrawal_sum_amt
            ,try_to_number(_a_npp_inbound_sum_amt, 38, 2) as _a_npp_inbound_sum_amt
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_distance, 38, 2) as _a_geo_distance
            ,_A_P_N_H
            ,try_to_number(_a_ftp_sum_1, 38, 2) as _a_ftp_sum_1
            ,try_to_number(_a_multi_cnt, 38, 2) as _a_multi_cnt
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_3, 38, 2) as _a_p_l_3
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,_A_P_N_3
            ,_A_P_N_C
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_cust_avg_acct_bal, 38, 2) as _a_cust_avg_acct_bal
            ,try_to_number(_a_e, 38, 2) as _a_e
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_t, 38, 2) as _a_t
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_capp_registrations_cnt_3, 38, 2) as _a_capp_registrations_cnt_3
            ,try_to_number(_a_nb_logons_cnt_2, 38, 2) as _a_nb_logons_cnt_2
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_DEVICE_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,_A_LOGON_NB_IP_PC
            ,try_to_number(_a_curr_capp_device_cnt, 38, 2) as _a_curr_capp_device_cnt
            ,_A_PREV_CAPP_DEVICE
            ,try_to_number(_a_prev_capp_device_cnt, 38, 2) as _a_prev_capp_device_cnt
            ,_A_PREV_CAPP_DEVICE_MODEL
            ,_A_PROF_CAPP_DEVICE_2
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,try_to_number(_a_prof_capp_device_cnt_2, 38, 2) as _a_prof_capp_device_cnt_2
            ,try_to_number(_a_prof_capp_device_cnt_3, 38, 2) as _a_prof_capp_device_cnt_3
            ,try_to_number(_a_prof_capp_device_cnt_5, 38, 2) as _a_prof_capp_device_cnt_5
            ,_A_PROF_CAPP_DEVICE_MODEL_1
            ,try_to_number(_a_vpn_vps_ip_logon_count, 38, 2) as _a_vpn_vps_ip_logon_count
            ,try_to_number(_a_cc_cash_advance_amt, 38, 2) as _a_cc_cash_advance_amt
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_nb_bpay_acct_cnt_2, 38, 2) as _a_nb_bpay_acct_cnt_2
            ,try_to_number(_a_nb_bpay_acct_sum_1, 38, 2) as _a_nb_bpay_acct_sum_1
            ,try_to_number(_a_npp_ftp_sum, 38, 2) as _a_npp_ftp_sum
            ,try_to_number(_a_cust_npp_out_sum_aaa_1, 38, 2) as _a_cust_npp_out_sum_aaa_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_5, 38, 2) as _a_cust_npp_out_sum_aaa_5
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_7, 38, 2) as _a_cust_sum_aaa_7
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_short, 38, 2) as _a_cust_sum_aaa_short
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_CIF_ESTABLISH_EMAIL
            ,_A_CIF_ESTABLISH_PHONE
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_client_postcode_ftp_sum_3, 38, 2) as _a_client_postcode_ftp_sum_3
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,try_to_number(_a_client_city_cnt_1, 38, 2) as _a_client_city_cnt_1
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_3
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_2, 38, 2) as _a_client_country_cnt_2
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_a_client_country_cnt_5, 38, 2) as _a_client_country_cnt_5
            ,try_to_number(_a_client_country_cnt_6, 38, 2) as _a_client_country_cnt_6
            ,try_to_number(_a_client_country_cnt_7, 38, 2) as _a_client_country_cnt_7
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_bvt_numeric_1, 38, 2) as _b_bvt_numeric_1
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_list_rl1_scam_tp_cif, 38, 2) as _b_list_rl1_scam_tp_cif
            ,try_to_number(_b_npp_out_ftp_sum_1, 38, 2) as _b_npp_out_ftp_sum_1
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_4, 38, 2) as _b_recip_sum_aaa_4
            ,try_to_number(_b_recip_sum_aaa_5, 38, 2) as _b_recip_sum_aaa_5
            ,try_to_number(_b_recip_sum_aaa_6, 38, 2) as _b_recip_sum_aaa_6
            ,try_to_number(_b_recip_sum_aaa_7, 38, 2) as _b_recip_sum_aaa_7
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_cnt_3, 38, 2) as _b_client_postcode_cnt_3
            ,try_to_number(_b_client_postcode_cnt_4, 38, 2) as _b_client_postcode_cnt_4
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_cust_tran_sum_1, 38, 2) as _i_cust_tran_sum_1
            ,try_to_number(_i_cust_tran_sum_2, 38, 2) as _i_cust_tran_sum_2
            ,try_to_number(_i_cust_tran_sum_3, 38, 2) as _i_cust_tran_sum_3
            ,try_to_number(_i_all_logons_cnt_1, 38, 2) as _i_all_logons_cnt_1
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,try_to_number(_i_capp_logons_perc_2, 38, 2) as _i_capp_logons_perc_2
            ,try_to_number(_i_capp_logons_perc_3, 38, 2) as _i_capp_logons_perc_3
            ,try_to_number(_i_capp_logons_perc_3m, 38, 2) as _i_capp_logons_perc_3m
            ,try_to_number(_i_cust_net_l_cnt_1, 38, 2) as _i_cust_net_l_cnt_1
            ,try_to_number(_i_cust_net_cnt_4, 38, 2) as _i_cust_net_cnt_4
            ,try_to_number(_i_cust_net_cnt_long, 38, 2) as _i_cust_net_cnt_long
            ,try_to_number(_l_scm_rsk_scr_2, 38, 2) as _l_scm_rsk_scr_2
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_dpi_change, 38, 2) as _l_dpi_change
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,try_to_number(_l_plugin_cnt, 38, 2) as _l_plugin_cnt
            ,try_to_number(_l_rare_sim_cntry_code, 38, 2) as _l_rare_sim_cntry_code
            ,try_to_number(_l_rooted_dev, 38, 2) as _l_rooted_dev
            ,_L_SDID_1
            ,try_to_number(_l_sdid_cnt_1, 38, 2) as _l_sdid_cnt_1
            ,try_to_number(_l_sdid_cnt_3, 38, 2) as _l_sdid_cnt_3
            ,_L_NC_ACCT_NUM
            ,_L_NC_MATCH_NAME
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,try_to_number(_l_bc_ao_score, 38, 2) as _l_bc_ao_score
            ,_L_BRANCH_ID
            ,try_to_number(_l_drag_n_drop, 38, 2) as _l_drag_n_drop
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_rcnt_hi_scr_on_dev, 38, 2) as _l_rcnt_hi_scr_on_dev
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_score_1, 38, 2) as _l_se_score_1
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_accum_amt_anom, 38, 2) as _l_accum_amt_anom
            ,try_to_number(_l_frst_proxy, 38, 2) as _l_frst_proxy
            ,try_to_number(_l_new_lang, 38, 2) as _l_new_lang
            ,try_to_number(_l_scrn_res_anom, 38, 2) as _l_scrn_res_anom
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_score_4, 38, 2) as _l_score_4
            ,try_to_number(_l_score_5, 38, 2) as _l_score_5
            ,try_to_number(_l_rat_check, 38, 2) as _l_rat_check
            ,try_to_number(_l_m_l_1, 38, 2) as _l_m_l_1
            ,try_to_number(_l_m_l_4, 38, 2) as _l_m_l_4
            ,try_to_number(_l_m_l_c, 38, 2) as _l_m_l_c
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,_L_BC_SESS_ID
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_bc_score, 38, 2) as _l_bc_score
            ,try_to_number(_l_browser_age, 38, 2) as _l_browser_age
            ,try_to_number(_l_city_age, 38, 2) as _l_city_age
            ,try_to_number(_l_clipb_event_cnt, 38, 2) as _l_clipb_event_cnt
            ,try_to_number(_l_days_lst_dev_ios, 38, 2) as _l_days_lst_dev_ios
            ,try_to_number(_l_days_lst_dev_js, 38, 2) as _l_days_lst_dev_js
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_dom_hand_ch_anomaly, 38, 2) as _l_dom_hand_ch_anomaly
            ,try_to_number(_l_ft_rat_app_inst, 38, 2) as _l_ft_rat_app_inst
            ,try_to_number(_l_g_con_dev, 38, 2) as _l_g_con_dev
            ,try_to_number(_l_ip_age, 38, 2) as _l_ip_age
            ,try_to_number(_l_is_active_call, 38, 2) as _l_is_active_call
            ,try_to_number(_l_isp_age, 38, 2) as _l_isp_age
            ,try_to_number(_l_key_mouse_anomaly, 38, 2) as _l_key_mouse_anomaly
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_lgn_import_anomaly, 38, 2) as _l_lgn_import_anomaly
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_mins_lst_lgn_capped, 38, 2) as _l_mins_lst_lgn_capped
            ,try_to_number(_l_mouse_cnt, 38, 2) as _l_mouse_cnt
            ,try_to_number(_l_mouse_doodl, 38, 2) as _l_mouse_doodl
            ,try_to_number(_l_new_browser, 38, 2) as _l_new_browser
            ,try_to_number(_l_new_browser_anomaly, 38, 2) as _l_new_browser_anomaly
            ,try_to_number(_l_new_mob_app_user, 38, 2) as _l_new_mob_app_user
            ,try_to_number(_l_new_mob_browser_user, 38, 2) as _l_new_mob_browser_user
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,try_to_number(_l_orient_event_cnt, 38, 2) as _l_orient_event_cnt
            ,try_to_number(_l_os_ch_anomaly, 38, 2) as _l_os_ch_anomaly
            ,_L_POLICY_NM
            ,try_to_number(_l_priv_browsing_anomaly, 38, 2) as _l_priv_browsing_anomaly
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_scrn_w, 38, 2) as _l_scrn_w
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_mob_sdk, 38, 2) as _l_sess_cnt_mob_sdk
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,_L_SESS_ID
            ,try_to_number(_l_sim_ip_cntry_mismatch, 38, 2) as _l_sim_ip_cntry_mismatch
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_total_sess_cnt, 38, 2) as _l_total_sess_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_l_type_patterns_anomaly, 38, 2) as _l_type_patterns_anomaly
            ,try_to_number(_l_uid_age, 38, 2) as _l_uid_age
            ,try_to_number(_n_bc_cr_bc_1, 38, 2) as _n_bc_cr_bc_1
            ,try_to_number(_n_ftp_cnt_1, 38, 2) as _n_ftp_cnt_1
            ,_N_5_RCNT_M100S_1
            ,_N_5_RCNT_M100S_2
            ,try_to_number(_n_mps_mndt_cnt_24h_1, 38, 2) as _n_mps_mndt_cnt_24h_1
            ,try_to_number(_n_mob_oth_tran_sum_1, 38, 2) as _n_mob_oth_tran_sum_1
            ,_N_NB_LOGON_USER_AGENT
            ,try_to_number(_n_ca_device_profile_1, 38, 2) as _n_ca_device_profile_1
            ,try_to_number(_n_ca_device_profile_3, 38, 2) as _n_ca_device_profile_3
            ,try_to_number(_n_p20_7d_cnt_1, 38, 2) as _n_p20_7d_cnt_1
            ,try_to_number(_n_ca_lgn_cnt_24h_1, 38, 2) as _n_ca_lgn_cnt_24h_1
            ,try_to_number(_n_nmchk_cnt, 38, 2) as _n_nmchk_cnt
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_ind_1, 38, 2) as _n_2wp_tran_ind_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,_N_CLIENT_SSID_NAME_1
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_crypto_recipient_sum, 38, 2) as _n_crypto_recipient_sum
            ,try_to_number(_n_rp_ses_ip_1, 38, 2) as _n_rp_ses_ip_1
            ,try_to_number(_n_multi_amt_1, 38, 2) as _n_multi_amt_1
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,try_to_number(_n_nb_sum_tpt_4, 38, 2) as _n_nb_sum_tpt_4
            ,_N_D_D_3
            ,try_to_number(_n_h_1, 38, 2) as _n_h_1
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_open_ftp_sum_7d, 38, 2) as _n_open_ftp_sum_7d
            ,try_to_number(_n_capp_bpay_cnt_1, 38, 2) as _n_capp_bpay_cnt_1
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_cif_sender_sum, 38, 2) as _x_cif_sender_sum
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_name_match_ind, 38, 2) as _x_name_match_ind
            ,try_to_number(_x_ft_over5k_recip_cnt, 38, 2) as _x_ft_over5k_recip_cnt
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_t_1, 38, 2) as _x_t_1
            ,try_to_number(_x_t_2, 38, 2) as _x_t_2
            ,try_to_number(_x_t_3, 38, 2) as _x_t_3
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_npp_out_sum_1, 38, 2) as _x_npp_out_sum_1
            ,try_to_number(_x_npp_out_sum_3, 38, 2) as _x_npp_out_sum_3
        FROM
            LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
        WHERE
            TTS_TRAN_DATE_ALT BETWEEN 20250724 AND 20250729
            AND COALESCE(TRY_CAST(TGX_TRAN_AMT AS DECIMAL(14,2)), 0) > 0 -- Exclude non-mon txns 
            AND DTL_EX_1_5S_01 IN ('C205N','C207N','C242N','C244N','C246N','N205N','N207N','N244N','N246N')-- NPP Outbound txn only
            AND SSX_CUST_NUM <> 'Not Available'
    )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,9594506,9594.506000,159.908433,2.665141,2X-LARGE,32,85.284512
01be05cd-3204-abe2-0000-c71d2606fada,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""DTL_EX_0_20S_001"" STRING(16777216), ""DTL_EX_1_5S_01"" STRING(16777216), ""TGX_TRAN_AMT"" STRING(16777216), ""HOUR"" BIGINT, ""_A_MARVIN_DIGI_DECISION_NUM"" STRING(16777216), ""LAG_A_MARVIN_DIGI_DECISION_NUM"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_BTS_MAX_SE_DT"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_CRD_ACTIONCODE_DT_1"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_LO_DT"" BIGINT, ""_A_CC_DT"" BIGINT, ""_A_CAPP_NOTIFY_OPT_OUT_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_3"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_NPP_FTP_DATE2"" BIGINT, ""_A_P_P_3"" BIGINT, ""_A_CRD_NPP_PAYMENT_DT"" BIGINT, ""_A_IS_IP_DT_3"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_5_2"" BIGINT, ""_A_ONLINE_PL_DT"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_DTL_HID_UNHID_ACCT_DT_PREV"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_SCAMP1_MLW_DT"" BIGINT, ""_A_SCAMP2_MLW_DT"" BIGINT, ""_A_SCAMP5_MLW_DT"" BIGINT, ""_A_SCAMP7_MLW_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP4_DT"" BIGINT, ""_A_NB_LASTLOGON_DT_3"" BIGINT, ""_A_AUTO_DEC_CP_PP_DT"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_INB_ALL_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_1"" BIGINT, ""_A_RETRIEVE_STMT_DETAILS_DT"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_NPP_WHITELIST_CUS_ACCT_DT"" BIGINT, ""_A_NPP_WHITELIST_PAYID_DT"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_BLACKLIST_PAYID_DT"" BIGINT, ""_A_NPP_INB_OFI_PAYID_DT"" BIGINT, ""_A_NPP_OUT_CBA_PAYID_DT"" BIGINT, ""_A_AUS_IP_ACTIVITY"" BIGINT, ""_A_CIF_ESTABLISH_DT"" BIGINT, ""_A_ECV_DOCUMENT_DT"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_CLIENT_POSTCODE_DT_2"" BIGINT, ""_A_CLIENT_PORT_DATE_1"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_OPEN_LAST_PAYER_CIF_DT_10"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_NPP_OUT_CNT_DATE"" BIGINT, ""_I_ALL_LOGONS_FDT"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_PUSH_API_DT_2"" BIGINT, ""_L_PUSH_API_DT_3"" BIGINT, ""_L_PUSH_API_DT_4"" BIGINT, ""_L_FIRST_RAT_DT"" BIGINT, ""_L_M_C_5"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_MOB_RAT_DT"" BIGINT, ""_L_IS_RAT_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_1701_DT_1"" BIGINT, ""_N_D_P_C"" BIGINT, ""_N_T_3"" BIGINT, ""_N_1601_DT"" BIGINT, ""_N_F_3"" BIGINT, ""_N_NB_MEDIUM_PRIORITY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_CUST_NB_DEVICE_DT"" BIGINT, ""_N_CUST_NB_FIRST_DEVICE_DT"" BIGINT, ""_N_HCE_ADD_CARD"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CAPP_REG_DT_3"" BIGINT, ""_N_CAPP_REG_DT_5"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_PASSWORD_TEMP"" BIGINT, ""_X_D_2"" BIGINT, ""_A_BTS_BIO_SE"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_ECV_COMMSEC_FLAG"" NUMBER(38, 2), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_ATM_WITHDRAWAL_SUM_AMT"" NUMBER(38, 2), ""_A_NPP_INBOUND_SUM_AMT"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_DISTANCE"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_FTP_SUM_1"" NUMBER(38, 2), ""_A_MULTI_CNT"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_3"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_P_N_3"" STRING(16777216), ""_A_P_N_C"" STRING(16777216), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_CUST_AVG_ACCT_BAL"" NUMBER(38, 2), ""_A_E"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_T"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_CAPP_REGISTRATIONS_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_2"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_DEVICE_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_LOGON_NB_IP_PC"" STRING(16777216), ""_A_CURR_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE"" STRING(16777216), ""_A_PREV_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE_MODEL"" STRING(16777216), ""_A_PROF_CAPP_DEVICE_2"" STRING(16777216), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_2"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_3"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_5"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_MODEL_1"" STRING(16777216), ""_A_VPN_VPS_IP_LOGON_COUNT"" NUMBER(38, 2), ""_A_CC_CASH_ADVANCE_AMT"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_CNT_2"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NPP_FTP_SUM"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_5"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_7"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_SHORT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_CIF_ESTABLISH_EMAIL"" STRING(16777216), ""_A_CIF_ESTABLISH_PHONE"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_CLIENT_POSTCODE_FTP_SUM_3"" NUMBER(38, 2), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_CITY_CNT_1"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_3"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_2"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_5"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_6"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_7"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_BVT_NUMERIC_1"" NUMBER(38, 2), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_LIST_RL1_SCAM_TP_CIF"" NUMBER(38, 2), ""_B_NPP_OUT_FTP_SUM_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_4"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_5"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_6"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_7"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_4"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_2"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_3"" NUMBER(38, 2), ""_I_ALL_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_2"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_3"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_3M"" NUMBER(38, 2), ""_I_CUST_NET_L_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_4"" NUMBER(38, 2), ""_I_CUST_NET_CNT_LONG"" NUMBER(38, 2), ""_L_SCM_RSK_SCR_2"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_DPI_CHANGE"" NUMBER(38, 2), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_PLUGIN_CNT"" NUMBER(38, 2), ""_L_RARE_SIM_CNTRY_CODE"" NUMBER(38, 2), ""_L_ROOTED_DEV"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_SDID_CNT_1"" NUMBER(38, 2), ""_L_SDID_CNT_3"" NUMBER(38, 2), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_MATCH_NAME"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BC_AO_SCORE"" NUMBER(38, 2), ""_L_BRANCH_ID"" STRING(16777216), ""_L_DRAG_N_DROP"" NUMBER(38, 2), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_RCNT_HI_SCR_ON_DEV"" NUMBER(38, 2), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SCORE_1"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_ACCUM_AMT_ANOM"" NUMBER(38, 2), ""_L_FRST_PROXY"" NUMBER(38, 2), ""_L_NEW_LANG"" NUMBER(38, 2), ""_L_SCRN_RES_ANOM"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_SCORE_4"" NUMBER(38, 2), ""_L_SCORE_5"" NUMBER(38, 2), ""_L_RAT_CHECK"" NUMBER(38, 2), ""_L_M_L_1"" NUMBER(38, 2), ""_L_M_L_4"" NUMBER(38, 2), ""_L_M_L_C"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_BC_SESS_ID"" STRING(16777216), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_BC_SCORE"" NUMBER(38, 2), ""_L_BROWSER_AGE"" NUMBER(38, 2), ""_L_CITY_AGE"" NUMBER(38, 2), ""_L_CLIPB_EVENT_CNT"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_IOS"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_JS"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_DOM_HAND_CH_ANOMALY"" NUMBER(38, 2), ""_L_FT_RAT_APP_INST"" NUMBER(38, 2), ""_L_G_CON_DEV"" NUMBER(38, 2), ""_L_IP_AGE"" NUMBER(38, 2), ""_L_IS_ACTIVE_CALL"" NUMBER(38, 2), ""_L_ISP_AGE"" NUMBER(38, 2), ""_L_KEY_MOUSE_ANOMALY"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_LGN_IMPORT_ANOMALY"" NUMBER(38, 2), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_MINS_LST_LGN_CAPPED"" NUMBER(38, 2), ""_L_MOUSE_CNT"" NUMBER(38, 2), ""_L_MOUSE_DOODL"" NUMBER(38, 2), ""_L_NEW_BROWSER"" NUMBER(38, 2), ""_L_NEW_BROWSER_ANOMALY"" NUMBER(38, 2), ""_L_NEW_MOB_APP_USER"" NUMBER(38, 2), ""_L_NEW_MOB_BROWSER_USER"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_ORIENT_EVENT_CNT"" NUMBER(38, 2), ""_L_OS_CH_ANOMALY"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PRIV_BROWSING_ANOMALY"" NUMBER(38, 2), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SCRN_W"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_SDK"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_SESS_ID"" STRING(16777216), ""_L_SIM_IP_CNTRY_MISMATCH"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOTAL_SESS_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_L_TYPE_PATTERNS_ANOMALY"" NUMBER(38, 2), ""_L_UID_AGE"" NUMBER(38, 2), ""_N_BC_CR_BC_1"" NUMBER(38, 2), ""_N_FTP_CNT_1"" NUMBER(38, 2), ""_N_5_RCNT_M100S_1"" STRING(16777216), ""_N_5_RCNT_M100S_2"" STRING(16777216), ""_N_MPS_MNDT_CNT_24H_1"" NUMBER(38, 2), ""_N_MOB_OTH_TRAN_SUM_1"" NUMBER(38, 2), ""_N_NB_LOGON_USER_AGENT"" STRING(16777216), ""_N_CA_DEVICE_PROFILE_1"" NUMBER(38, 2), ""_N_CA_DEVICE_PROFILE_3"" NUMBER(38, 2), ""_N_P20_7D_CNT_1"" NUMBER(38, 2), ""_N_CA_LGN_CNT_24H_1"" NUMBER(38, 2), ""_N_NMCHK_CNT"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_IND_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CLIENT_SSID_NAME_1"" STRING(16777216), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_CRYPTO_RECIPIENT_SUM"" NUMBER(38, 2), ""_N_RP_SES_IP_1"" NUMBER(38, 2), ""_N_MULTI_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_NB_SUM_TPT_4"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_H_1"" NUMBER(38, 2), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_OPEN_FTP_SUM_7D"" NUMBER(38, 2), ""_N_CAPP_BPAY_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_CIF_SENDER_SUM"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_IND"" NUMBER(38, 2), ""_X_FT_OVER5K_RECIP_CNT"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_T_1"" NUMBER(38, 2), ""_X_T_2"" NUMBER(38, 2), ""_X_T_3"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_1"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_3"" NUMBER(38, 2))    AS  SELECT  *  FROM (
    SELECT
        TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
        SSX_CUST_NUM,
        TTS_TRAN_DATE_ALT,
        DTL_EX_0_20S_001,
        DTL_EX_1_5S_01,
        TGX_TRAN_AMT,
        TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
        _A_MARVIN_DIGI_DECISION_NUM,
        LAG(_A_MARVIN_DIGI_DECISION_NUM) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_A_MARVIN_DIGI_DECISION_NUM,
        	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_MAX_SE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CC_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CC_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CC_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_NOTIFY_OPT_OUT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_FTP_DATE2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_FTP_DATE2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_FTP_DATE2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_P_P_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_P_P_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_P_P_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_NPP_PAYMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_NPP_PAYMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_NPP_PAYMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IS_IP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ONLINE_PL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ONLINE_PL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ONLINE_PL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_HID_UNHID_ACCT_DT_PREV, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_HID_UNHID_ACCT_DT_PREV, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_HID_UNHID_ACCT_DT_PREV
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP1_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP2_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP5_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP7_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP4_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_LASTLOGON_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_LASTLOGON_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_LASTLOGON_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_AUTO_DEC_CP_PP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RETRIEVE_STMT_DETAILS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_CUS_ACCT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_CUS_ACCT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_WHITELIST_CUS_ACCT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_WHITELIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_BLACKLIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_BLACKLIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_BLACKLIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_OFI_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_CBA_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUS_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUS_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00'))
            END as _A_AUS_IP_ACTIVITY
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CIF_ESTABLISH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ECV_DOCUMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PORT_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PORT_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_PORT_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_10, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_10, 38, 2), '1960-01-01 00:00:00'))
            END as _B_OPEN_LAST_PAYER_CIF_DT_10
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00'))
            END as _I_ALL_LOGONS_FDT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_FIRST_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_C_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_C_5, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_C_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_MOB_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_MOB_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_MOB_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1701_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_D_P_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_T_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_T_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_T_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1601_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_F_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_F_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_F_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_MEDIUM_PRIORITY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_DEVICE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_DEVICE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_DEVICE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_FIRST_DEVICE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_FIRST_DEVICE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_FIRST_DEVICE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_HCE_ADD_CARD, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_HCE_ADD_CARD, 38, 2), '1960-01-01 00:00:00'))
            END as _N_HCE_ADD_CARD
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PASSWORD_TEMP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00'))
            END as _X_D_2
        
        ,             try_to_number(_a_bts_bio_se, 38, 2) as _a_bts_bio_se
            ,_A_BTS_BNFT
            ,try_to_number(_a_ecv_commsec_flag, 38, 2) as _a_ecv_commsec_flag
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,try_to_number(_a_atm_withdrawal_sum_amt, 38, 2) as _a_atm_withdrawal_sum_amt
            ,try_to_number(_a_npp_inbound_sum_amt, 38, 2) as _a_npp_inbound_sum_amt
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_distance, 38, 2) as _a_geo_distance
            ,_A_P_N_H
            ,try_to_number(_a_ftp_sum_1, 38, 2) as _a_ftp_sum_1
            ,try_to_number(_a_multi_cnt, 38, 2) as _a_multi_cnt
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_3, 38, 2) as _a_p_l_3
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,_A_P_N_3
            ,_A_P_N_C
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_cust_avg_acct_bal, 38, 2) as _a_cust_avg_acct_bal
            ,try_to_number(_a_e, 38, 2) as _a_e
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_t, 38, 2) as _a_t
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_capp_registrations_cnt_3, 38, 2) as _a_capp_registrations_cnt_3
            ,try_to_number(_a_nb_logons_cnt_2, 38, 2) as _a_nb_logons_cnt_2
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_DEVICE_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,_A_LOGON_NB_IP_PC
            ,try_to_number(_a_curr_capp_device_cnt, 38, 2) as _a_curr_capp_device_cnt
            ,_A_PREV_CAPP_DEVICE
            ,try_to_number(_a_prev_capp_device_cnt, 38, 2) as _a_prev_capp_device_cnt
            ,_A_PREV_CAPP_DEVICE_MODEL
            ,_A_PROF_CAPP_DEVICE_2
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,try_to_number(_a_prof_capp_device_cnt_2, 38, 2) as _a_prof_capp_device_cnt_2
            ,try_to_number(_a_prof_capp_device_cnt_3, 38, 2) as _a_prof_capp_device_cnt_3
            ,try_to_number(_a_prof_capp_device_cnt_5, 38, 2) as _a_prof_capp_device_cnt_5
            ,_A_PROF_CAPP_DEVICE_MODEL_1
            ,try_to_number(_a_vpn_vps_ip_logon_count, 38, 2) as _a_vpn_vps_ip_logon_count
            ,try_to_number(_a_cc_cash_advance_amt, 38, 2) as _a_cc_cash_advance_amt
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_nb_bpay_acct_cnt_2, 38, 2) as _a_nb_bpay_acct_cnt_2
            ,try_to_number(_a_nb_bpay_acct_sum_1, 38, 2) as _a_nb_bpay_acct_sum_1
            ,try_to_number(_a_npp_ftp_sum, 38, 2) as _a_npp_ftp_sum
            ,try_to_number(_a_cust_npp_out_sum_aaa_1, 38, 2) as _a_cust_npp_out_sum_aaa_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_5, 38, 2) as _a_cust_npp_out_sum_aaa_5
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_7, 38, 2) as _a_cust_sum_aaa_7
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_short, 38, 2) as _a_cust_sum_aaa_short
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_CIF_ESTABLISH_EMAIL
            ,_A_CIF_ESTABLISH_PHONE
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_client_postcode_ftp_sum_3, 38, 2) as _a_client_postcode_ftp_sum_3
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,try_to_number(_a_client_city_cnt_1, 38, 2) as _a_client_city_cnt_1
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_3
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_2, 38, 2) as _a_client_country_cnt_2
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_a_client_country_cnt_5, 38, 2) as _a_client_country_cnt_5
            ,try_to_number(_a_client_country_cnt_6, 38, 2) as _a_client_country_cnt_6
            ,try_to_number(_a_client_country_cnt_7, 38, 2) as _a_client_country_cnt_7
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_bvt_numeric_1, 38, 2) as _b_bvt_numeric_1
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_list_rl1_scam_tp_cif, 38, 2) as _b_list_rl1_scam_tp_cif
            ,try_to_number(_b_npp_out_ftp_sum_1, 38, 2) as _b_npp_out_ftp_sum_1
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_4, 38, 2) as _b_recip_sum_aaa_4
            ,try_to_number(_b_recip_sum_aaa_5, 38, 2) as _b_recip_sum_aaa_5
            ,try_to_number(_b_recip_sum_aaa_6, 38, 2) as _b_recip_sum_aaa_6
            ,try_to_number(_b_recip_sum_aaa_7, 38, 2) as _b_recip_sum_aaa_7
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_cnt_3, 38, 2) as _b_client_postcode_cnt_3
            ,try_to_number(_b_client_postcode_cnt_4, 38, 2) as _b_client_postcode_cnt_4
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_cust_tran_sum_1, 38, 2) as _i_cust_tran_sum_1
            ,try_to_number(_i_cust_tran_sum_2, 38, 2) as _i_cust_tran_sum_2
            ,try_to_number(_i_cust_tran_sum_3, 38, 2) as _i_cust_tran_sum_3
            ,try_to_number(_i_all_logons_cnt_1, 38, 2) as _i_all_logons_cnt_1
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,try_to_number(_i_capp_logons_perc_2, 38, 2) as _i_capp_logons_perc_2
            ,try_to_number(_i_capp_logons_perc_3, 38, 2) as _i_capp_logons_perc_3
            ,try_to_number(_i_capp_logons_perc_3m, 38, 2) as _i_capp_logons_perc_3m
            ,try_to_number(_i_cust_net_l_cnt_1, 38, 2) as _i_cust_net_l_cnt_1
            ,try_to_number(_i_cust_net_cnt_4, 38, 2) as _i_cust_net_cnt_4
            ,try_to_number(_i_cust_net_cnt_long, 38, 2) as _i_cust_net_cnt_long
            ,try_to_number(_l_scm_rsk_scr_2, 38, 2) as _l_scm_rsk_scr_2
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_dpi_change, 38, 2) as _l_dpi_change
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,try_to_number(_l_plugin_cnt, 38, 2) as _l_plugin_cnt
            ,try_to_number(_l_rare_sim_cntry_code, 38, 2) as _l_rare_sim_cntry_code
            ,try_to_number(_l_rooted_dev, 38, 2) as _l_rooted_dev
            ,_L_SDID_1
            ,try_to_number(_l_sdid_cnt_1, 38, 2) as _l_sdid_cnt_1
            ,try_to_number(_l_sdid_cnt_3, 38, 2) as _l_sdid_cnt_3
            ,_L_NC_ACCT_NUM
            ,_L_NC_MATCH_NAME
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,try_to_number(_l_bc_ao_score, 38, 2) as _l_bc_ao_score
            ,_L_BRANCH_ID
            ,try_to_number(_l_drag_n_drop, 38, 2) as _l_drag_n_drop
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_rcnt_hi_scr_on_dev, 38, 2) as _l_rcnt_hi_scr_on_dev
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_score_1, 38, 2) as _l_se_score_1
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_accum_amt_anom, 38, 2) as _l_accum_amt_anom
            ,try_to_number(_l_frst_proxy, 38, 2) as _l_frst_proxy
            ,try_to_number(_l_new_lang, 38, 2) as _l_new_lang
            ,try_to_number(_l_scrn_res_anom, 38, 2) as _l_scrn_res_anom
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_score_4, 38, 2) as _l_score_4
            ,try_to_number(_l_score_5, 38, 2) as _l_score_5
            ,try_to_number(_l_rat_check, 38, 2) as _l_rat_check
            ,try_to_number(_l_m_l_1, 38, 2) as _l_m_l_1
            ,try_to_number(_l_m_l_4, 38, 2) as _l_m_l_4
            ,try_to_number(_l_m_l_c, 38, 2) as _l_m_l_c
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,_L_BC_SESS_ID
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_bc_score, 38, 2) as _l_bc_score
            ,try_to_number(_l_browser_age, 38, 2) as _l_browser_age
            ,try_to_number(_l_city_age, 38, 2) as _l_city_age
            ,try_to_number(_l_clipb_event_cnt, 38, 2) as _l_clipb_event_cnt
            ,try_to_number(_l_days_lst_dev_ios, 38, 2) as _l_days_lst_dev_ios
            ,try_to_number(_l_days_lst_dev_js, 38, 2) as _l_days_lst_dev_js
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_dom_hand_ch_anomaly, 38, 2) as _l_dom_hand_ch_anomaly
            ,try_to_number(_l_ft_rat_app_inst, 38, 2) as _l_ft_rat_app_inst
            ,try_to_number(_l_g_con_dev, 38, 2) as _l_g_con_dev
            ,try_to_number(_l_ip_age, 38, 2) as _l_ip_age
            ,try_to_number(_l_is_active_call, 38, 2) as _l_is_active_call
            ,try_to_number(_l_isp_age, 38, 2) as _l_isp_age
            ,try_to_number(_l_key_mouse_anomaly, 38, 2) as _l_key_mouse_anomaly
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_lgn_import_anomaly, 38, 2) as _l_lgn_import_anomaly
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_mins_lst_lgn_capped, 38, 2) as _l_mins_lst_lgn_capped
            ,try_to_number(_l_mouse_cnt, 38, 2) as _l_mouse_cnt
            ,try_to_number(_l_mouse_doodl, 38, 2) as _l_mouse_doodl
            ,try_to_number(_l_new_browser, 38, 2) as _l_new_browser
            ,try_to_number(_l_new_browser_anomaly, 38, 2) as _l_new_browser_anomaly
            ,try_to_number(_l_new_mob_app_user, 38, 2) as _l_new_mob_app_user
            ,try_to_number(_l_new_mob_browser_user, 38, 2) as _l_new_mob_browser_user
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,try_to_number(_l_orient_event_cnt, 38, 2) as _l_orient_event_cnt
            ,try_to_number(_l_os_ch_anomaly, 38, 2) as _l_os_ch_anomaly
            ,_L_POLICY_NM
            ,try_to_number(_l_priv_browsing_anomaly, 38, 2) as _l_priv_browsing_anomaly
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_scrn_w, 38, 2) as _l_scrn_w
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_mob_sdk, 38, 2) as _l_sess_cnt_mob_sdk
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,_L_SESS_ID
            ,try_to_number(_l_sim_ip_cntry_mismatch, 38, 2) as _l_sim_ip_cntry_mismatch
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_total_sess_cnt, 38, 2) as _l_total_sess_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_l_type_patterns_anomaly, 38, 2) as _l_type_patterns_anomaly
            ,try_to_number(_l_uid_age, 38, 2) as _l_uid_age
            ,try_to_number(_n_bc_cr_bc_1, 38, 2) as _n_bc_cr_bc_1
            ,try_to_number(_n_ftp_cnt_1, 38, 2) as _n_ftp_cnt_1
            ,_N_5_RCNT_M100S_1
            ,_N_5_RCNT_M100S_2
            ,try_to_number(_n_mps_mndt_cnt_24h_1, 38, 2) as _n_mps_mndt_cnt_24h_1
            ,try_to_number(_n_mob_oth_tran_sum_1, 38, 2) as _n_mob_oth_tran_sum_1
            ,_N_NB_LOGON_USER_AGENT
            ,try_to_number(_n_ca_device_profile_1, 38, 2) as _n_ca_device_profile_1
            ,try_to_number(_n_ca_device_profile_3, 38, 2) as _n_ca_device_profile_3
            ,try_to_number(_n_p20_7d_cnt_1, 38, 2) as _n_p20_7d_cnt_1
            ,try_to_number(_n_ca_lgn_cnt_24h_1, 38, 2) as _n_ca_lgn_cnt_24h_1
            ,try_to_number(_n_nmchk_cnt, 38, 2) as _n_nmchk_cnt
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_ind_1, 38, 2) as _n_2wp_tran_ind_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,_N_CLIENT_SSID_NAME_1
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_crypto_recipient_sum, 38, 2) as _n_crypto_recipient_sum
            ,try_to_number(_n_rp_ses_ip_1, 38, 2) as _n_rp_ses_ip_1
            ,try_to_number(_n_multi_amt_1, 38, 2) as _n_multi_amt_1
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,try_to_number(_n_nb_sum_tpt_4, 38, 2) as _n_nb_sum_tpt_4
            ,_N_D_D_3
            ,try_to_number(_n_h_1, 38, 2) as _n_h_1
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_open_ftp_sum_7d, 38, 2) as _n_open_ftp_sum_7d
            ,try_to_number(_n_capp_bpay_cnt_1, 38, 2) as _n_capp_bpay_cnt_1
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_cif_sender_sum, 38, 2) as _x_cif_sender_sum
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_name_match_ind, 38, 2) as _x_name_match_ind
            ,try_to_number(_x_ft_over5k_recip_cnt, 38, 2) as _x_ft_over5k_recip_cnt
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_t_1, 38, 2) as _x_t_1
            ,try_to_number(_x_t_2, 38, 2) as _x_t_2
            ,try_to_number(_x_t_3, 38, 2) as _x_t_3
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_npp_out_sum_1, 38, 2) as _x_npp_out_sum_1
            ,try_to_number(_x_npp_out_sum_3, 38, 2) as _x_npp_out_sum_3
    FROM
        LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
    WHERE
        TTS_TRAN_DATE_ALT BETWEEN 20250724 AND 20250729
        AND COALESCE(TRY_CAST(TGX_TRAN_AMT AS DECIMAL(14,2)), 0) > 0 -- Exclude non-mon txns 
        AND DTL_EX_1_5S_01 IN ('C205N','C207N','C242N','C244N','C246N','N205N','N207N','N244N','N246N')-- NPP Outbound txn only
        AND SSX_CUST_NUM <> 'Not Available'
)",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,9472619,9472.619000,157.876983,2.631283,2X-LARGE,32,84.201056
01bed239-3204-c553-0000-c71d2c4154d2,"CREATE OR REPLACE TABLE PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG7D AS
SELECT 
    a.*,
    b.CUS_SUM_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_CNT_Q,
    b.CUS_SUM_TRAN_SUM_N,
    b.CUS_SUM_UPST_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_RULE_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_FINL_APRD_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_SUM_N,
    b.CUS_SUM_FINL_APRD_TRAN_SUM_N,
    b.CUS_SUM_FDP_RULE_TRIG_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_CNT_Q,
    b.CUS_SUM_OSEA_TRAN_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_SUM_N,
    b.CUS_SUM_OSEA_TRAN_SUM_N,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    b.CUS_SUM_3DS_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    b.CUS_SUM_N3D_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    b.CUS_SUM_3DS_TRAN_SUM_N as CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    b.CUS_SUM_N3D_TRAN_SUM_N as CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    b.CUS_SUM_CARD_PRES_TRAN_CNT_Q,
    b.CUS_SUM_ATM_TRAN_CNT_Q,
    b.CUS_SUM_FALL_BACK_TRAN_CNT_Q,
    b.CUS_SUM_CHIP_TRAN_CNT_Q,
    b.CUS_SUM_PAY_PASS_TRAN_CNT_Q,
    b.CUS_SUM_CARD_PRES_TRAN_SUM_N,
    b.CUS_SUM_ATM_TRAN_SUM_N,
    b.CUS_SUM_FALL_BACK_TRAN_SUM_N,
    b.CUS_SUM_CHIP_TRAN_SUM_N,
    b.CUS_SUM_PAY_PASS_TRAN_SUM_N,
    b.CUS_SUM_CAPP_PSWD_CHNG_CNT_Q,
    b.CUS_SUM_CAPP_DVIC_REGR_CNT_Q,
    b.CUS_SUM_CAPP_LOGN_CNT_Q,
    b.CUS_SUM_NTB_LOGN_CNT_Q,
    b.CUS_SUM_VIEW_CARD_DETL_CNT_Q,
    b.CUS_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    b.CUS_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    b.CUS_MAX_CUV_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_RULE_FLAG,
    d.CRD_SUM_TRAN_CNT_Q,
    d.CRD_SUM_UPST_APRD_TRAN_CNT_Q,
    d.CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_FINL_APRD_TRAN_CNT_Q,
    d.CRD_SUM_INCO_EXPY_CNT_Q,
    d.CRD_SUM_INCO_CVVA_CNT_Q,
    d.CRD_SUM_INCO_PIN_CNT_Q,
    d.CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
    d.CRD_SUM_TRAN_SUM_N,
    d.CRD_SUM_UPST_APRD_TRAN_SUM_N,
    d.CRD_SUM_UPST_DCLN_TRAN_SUM_N,
    d.CRD_SUM_RULE_DCLN_TRAN_SUM_N,
    d.CRD_SUM_FINL_APRD_TRAN_SUM_N,
    d.CRD_SUM_INCO_EXPY_SUM_N,
    d.CRD_SUM_INCO_CVVA_SUM_N,
    d.CRD_SUM_INCO_PIN_SUM_N,
    d.CRD_SUM_OVER_LIMT_DCLN_SUM_N,
    d.CRD_SUM_FDP_RULE_TRIG_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_CNT_Q,
    d.CRD_SUM_OSEA_TRAN_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_SUM_N,
    d.CRD_SUM_OSEA_TRAN_SUM_N,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    d.CRD_SUM_3DS_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    d.CRD_SUM_N3D_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    d.CRD_SUM_3DS_TRAN_SUM_N as CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    d.CRD_SUM_N3D_TRAN_SUM_N as CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    d.CRD_SUM_CARD_PRES_TRAN_CNT_Q,
    d.CRD_SUM_ATM_TRAN_CNT_Q,
    d.CRD_SUM_FALL_BACK_TRAN_CNT_Q,
    d.CRD_SUM_CHIP_TRAN_CNT_Q,
    d.CRD_SUM_PAY_PASS_TRAN_CNT_Q,
    d.CRD_SUM_CARD_PRES_TRAN_SUM_N,
    d.CRD_SUM_ATM_TRAN_SUM_N,
    d.CRD_SUM_FALL_BACK_TRAN_SUM_N,
    d.CRD_SUM_CHIP_TRAN_SUM_N,
    d.CRD_SUM_PAY_PASS_TRAN_SUM_N,
    d.CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
    d.CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
    d.CRD_SUM_CAPP_LOGN_CNT_Q,
    d.CRD_SUM_NTB_LOGN_CNT_Q,
    d.CRD_SUM_VIEW_CARD_DETL_CNT_Q,
    d.CRD_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_HIGH_RISK_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_FRAU_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_WHLI_F as CRD_MAX_CARD_USER_VARY_WHLI_F,
    d.CRD_MAX_CUV_DO_NOT_CTCT_F as CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F,
    f.CMA_SUM_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    f.CMA_SUM_TRAN_SUM_N,
    f.CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_SUM_N,
    f.CMA_SUM_FINL_APRD_TRAN_SUM_N,
    f.CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_CNT_Q,
    f.CMA_SUM_OSEA_TRAN_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_SUM_N,
    f.CMA_SUM_OSEA_TRAN_SUM_N,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    f.CMA_SUM_3DS_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    f.CMA_SUM_N3D_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    f.CMA_SUM_3DS_TRAN_SUM_N as CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    f.CMA_SUM_N3D_TRAN_SUM_N as CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    f.CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    f.CMA_SUM_ATM_TRAN_CNT_Q,
    f.CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    f.CMA_SUM_CHIP_TRAN_CNT_Q,
    f.CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    f.CMA_SUM_CARD_PRES_TRAN_SUM_N,
    f.CMA_SUM_ATM_TRAN_SUM_N,
    f.CMA_SUM_FALL_BACK_TRAN_SUM_N,
    f.CMA_SUM_CHIP_TRAN_SUM_N,
    f.CMA_SUM_PAY_PASS_TRAN_SUM_N,
    f.CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    f.CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    f.CMA_MAX_CUV_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_RULE_FLAG,
    g.CMC_SUM_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    g.CMC_SUM_TRAN_SUM_N,
    g.CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_SUM_N,
    g.CMC_SUM_FINL_APRD_TRAN_SUM_N,
    g.CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_CNT_Q,
    g.CMC_SUM_OSEA_TRAN_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_SUM_N,
    g.CMC_SUM_OSEA_TRAN_SUM_N,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    g.CMC_SUM_3DS_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    g.CMC_SUM_N3D_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    g.CMC_SUM_3DS_TRAN_SUM_N as CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    g.CMC_SUM_N3D_TRAN_SUM_N as CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    g.CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    g.CMC_SUM_ATM_TRAN_CNT_Q,
    g.CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    g.CMC_SUM_CHIP_TRAN_CNT_Q,
    g.CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    g.CMC_SUM_CARD_PRES_TRAN_SUM_N,
    g.CMC_SUM_ATM_TRAN_SUM_N,
    g.CMC_SUM_FALL_BACK_TRAN_SUM_N,
    g.CMC_SUM_CHIP_TRAN_SUM_N,
    g.CMC_SUM_PAY_PASS_TRAN_SUM_N,
    g.CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    g.CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    g.CMC_MAX_CUV_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_RULE_FLAG,
    h.MAQ_SUM_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_TRAN_SUM_N,
    h.MAQ_SUM_UPST_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_RULE_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_FINL_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FINL_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FDP_RULE_TRIG_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_CNT_Q,
    h.MAQ_SUM_OSEA_TRAN_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_SUM_N,
    h.MAQ_SUM_OSEA_TRAN_SUM_N,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_3DS_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    h.MAQ_SUM_N3D_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    h.MAQ_SUM_3DS_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    h.MAQ_SUM_N3D_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    h.MAQ_SUM_CARD_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_ATM_TRAN_CNT_Q,
    h.MAQ_SUM_FALL_BACK_TRAN_CNT_Q,
    h.MAQ_SUM_CHIP_TRAN_CNT_Q,
    h.MAQ_SUM_PAY_PASS_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_PRES_TRAN_SUM_N,
    h.MAQ_SUM_ATM_TRAN_SUM_N,
    h.MAQ_SUM_FALL_BACK_TRAN_SUM_N,
    h.MAQ_SUM_CHIP_TRAN_SUM_N,
    h.MAQ_SUM_PAY_PASS_TRAN_SUM_N
FROM 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT a
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_tran_prfl_agg7d b
ON 
    a.ssx_cust_num = b.cust_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = b.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_card_tran_prfl_agg7d d
ON 
    a.CHL_ID_CARD_NUM = d.card_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = d.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg7d f
ON 
    a.ssx_cust_num = f.cust_i and a.chl_ct_term_owner_id = f.merc_i and a.chl_ct_acq_id = f.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = f.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg7d g
ON 
    a.CHL_ID_CARD_NUM = g.card_i and a.chl_ct_mer_mcc = g.merc_catg_c
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = g.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_merc_acqr_tran_prfl_agg7d h
ON 
    a.chl_ct_term_owner_id = h.merc_i and a.chl_ct_acq_id = h.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = h.WINDOW_START_DATE

;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,9331641,9331.641000,155.527350,2.592123,2X-LARGE,32,82.947936
01beed7f-3204-c939-0000-c71d2d08075a,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,9182903,9182.903000,153.048383,2.550806,2X-LARGE,32,81.625792
01beee1f-3204-c939-0000-c71d2d0dbdf6,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        * EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,8956330,8956.330000,149.272167,2.487869,2X-LARGE,32,79.611808
01bef3a0-3204-c93c-0000-c71d2d3af132,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905164056_scored_1 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it6_F2_xval_2day_all_fdt_redmojsiz_20250905164056.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CRD_SAFE_MERCHANT, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_ASN_AGE, _L_SCORE_2, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_SCRN_H, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_CLC_FTP_AMT, _L_TRVL_SPD, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_SCH_AMT, _A_P_L_3, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _L_DAYS_LST_DEV_JS, _A_ECV_DOCUMENT_IP, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_LANG_1, _L_LANG_2, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, DPST_CNT, CC_CNT, FA_1, NO_1, GOVT_BENE, MAR_STS_ORG_STR, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CMA_SUM_TRAN_SUM_N, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-05' and to_date(transactiondatetime) <= '2025-06-10'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,8935129,8935.129000,148.918817,2.481980,2X-LARGE,32,79.423360
01beecbc-3204-c558-0000-c71d2d02a61e,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,8749357,8749.357000,145.822617,2.430377,2X-LARGE,32,77.772064
01bee8a9-3204-c557-0000-c71d2ce3d62a,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,8650944,8650.944000,144.182400,2.403040,2X-LARGE,32,76.897280
01beee77-3204-c93b-0000-c71d2d1145ea,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250904140303_scored_1 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO2('modelname=pipeline_it1_F2_xval_zero_day_20250904140303.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CRD_APAY_CNT_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_2WAY_CRD_FRD_RULE_FLAG, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_G_CON_DEV, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_RISKY_KEY_COMBO, _A_C_G, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_CONCURRENT_SESS, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_NPP_OUT_SUM_AAA_2, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_NPP_IN_UNRELATED_SUM_24_1, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _A_CUST_NPP_IN_SUM_AAA_1, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _L_NUM_SESS_2H, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_DPI_CHANGE, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _L_CLIPB_EVENT_CNT, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _L_NC_RESPONSE_CODE, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, BUS_LN_CNT, OTH_CNT, REL_MNG, FA_1, FA_2, NO_1, NO_2, FP, GOVT_BENE, PRVT_CUST, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,8401475,8401.475000,140.024583,2.333743,2X-LARGE,32,74.679776
01be9f50-3204-bee4-0000-c71d2a9f7446,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
    order by tran_d
),
hourly_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
),
all_dates AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT cust_i, merc_i, acqr_i FROM PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl where tran_d between '2025-03-01' and '2025-05-31') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.cust_i = hd.cust_i AND ad.merc_i = hd.merc_i AND ad.acqr_i = hd.acqr_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    cust_i, -- as ssx_cust_num,
    merc_i,
    acqr_i,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMA_SUM_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    CMA_SUM_TRAN_SUM_N,
    CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_SUM_N,
    CMA_SUM_FINL_APRD_TRAN_SUM_N,
    CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    CMA_SUM_DOMS_TRAN_CNT_Q,
    CMA_SUM_OSEA_TRAN_CNT_Q,
    CMA_SUM_DOMS_TRAN_SUM_N,
    CMA_SUM_OSEA_TRAN_SUM_N,
    CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMA_SUM_3DS_TRAN_CNT_Q,
    CMA_SUM_N3D_TRAN_CNT_Q,
    CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMA_SUM_3DS_TRAN_SUM_N,
    CMA_SUM_N3D_TRAN_SUM_N,
    CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    CMA_SUM_ATM_TRAN_CNT_Q,
    CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    CMA_SUM_CHIP_TRAN_CNT_Q,
    CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    CMA_SUM_CARD_PRES_TRAN_SUM_N,
    CMA_SUM_ATM_TRAN_SUM_N,
    CMA_SUM_FALL_BACK_TRAN_SUM_N,
    CMA_SUM_CHIP_TRAN_SUM_N,
    CMA_SUM_PAY_PASS_TRAN_SUM_N,
    CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    cust_i,
    merc_i,
    acqr_i,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,8341096,8341.096000,139.018267,2.316971,2X-LARGE,32,74.143072
01bef272-3204-c93d-0000-c71d2d30c3da,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905164042_scored as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it5_F2_xval_2day_all_redmojsiz_20250905164042.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _L_UID_AGE, _L_BC_SESS_CNT, _A_CC_CASH_ADVANCE_AMT, _L_PMT_AMT, _A_CAPP_HCE_CNT_1, _L_MUID_AGE_PER_USER, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_MAX_30D_SCORE, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _L_BC_SCORE, _L_DAYS_LST_DEV_IOS, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_NB_BROWSER_CNT, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_TIME_ZONE, _L_IP_AGE, _A_CLC_FTP_AMT, _A_CRYPTO_MNTHLY_SUM, _L_SESS_CNT_MOB_BROWSER, _A_P_L_3, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _L_NC_MATCH_NAME_CONF, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_NAME, _A_2WAY_TYPE, _L_PUSH_API_1, _A_CLIENT_CITY_6, _L_PROXY_TYPE, _L_LANG_1, _L_LANG_2, _L_NC_RESPONSE_CODE, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, OTH_CNT, NTBNK_FAC, REL_MNG, FA_1, NO_1, GOVT_BENE, PRVT_CUST, HL_ASOC, CORP_EMPL, TRUSTEE, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG, CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
-- where to_date(transactiondatetime) <= '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,7708445,7708.445000,128.474083,2.141235,2X-LARGE,32,68.519520
01be9bda-3204-bee5-0000-c71d2a88ab6a,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-07-01'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-03-01' and '2025-07-01'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-03-01' and '2025-07-01') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMC_SUM_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    CMC_SUM_TRAN_SUM_N,
    CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_SUM_N,
    CMC_SUM_FINL_APRD_TRAN_SUM_N,
    CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    CMC_SUM_DOMS_TRAN_CNT_Q,
    CMC_SUM_OSEA_TRAN_CNT_Q,
    CMC_SUM_DOMS_TRAN_SUM_N,
    CMC_SUM_OSEA_TRAN_SUM_N,
    CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMC_SUM_3DS_TRAN_CNT_Q,
    CMC_SUM_N3D_TRAN_CNT_Q,
    CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMC_SUM_3DS_TRAN_SUM_N,
    CMC_SUM_N3D_TRAN_SUM_N,
    CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    CMC_SUM_ATM_TRAN_CNT_Q,
    CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    CMC_SUM_CHIP_TRAN_CNT_Q,
    CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    CMC_SUM_CARD_PRES_TRAN_SUM_N,
    CMC_SUM_ATM_TRAN_SUM_N,
    CMC_SUM_FALL_BACK_TRAN_SUM_N,
    CMC_SUM_CHIP_TRAN_SUM_N,
    CMC_SUM_PAY_PASS_TRAN_SUM_N,
    CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,7593743,7593.743000,126.562383,2.109373,2X-LARGE,32,67.499936
01be9d9c-3204-bee2-0000-c71d2a92fbbe,"create or replace temporary table Digital_Transactions as
select    
    b.fraudtype,
    b.DETECTION,
    b.case_detection,
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') as _B_ANY_CUST_FTP_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00') as _x_cif_recipient_new_date,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_BC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _L_BC_EVENT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SCM_RSK_HGH_DT, 38, 2), '1960-01-01 00:00:00') as _L_SCM_RSK_HGH_DT,
    _L_NC_RESPONSE_CODE,
    dtl_ex_0_20s_001 AS RECEIPT_NUM,
    (a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID,
    cmx_tran_id,
    hdr_activity_type,
    ssx_cust_num,
    chl_id_ob_userid,
    chl_id_pb_userid,
    dtl_ex_1_5s_01 as dmx_5byte_string_01,
    _a_cse_chg_dwl_ind AS DWL_change,
    dtl_ex_0_n_006 as Task_ID,
    dtl_ex_0_i_002 AS FTP_Indicator_1,
    rsp_ex_2_i_006 AS FTP_Indicator_2,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_SUM, 38, 2) as _X_CIF_RECIPIENT_SUM,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_SUM, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM,
    TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2) as _x_cif_recipient_new_cnt,
    TRY_TO_NUMBER(TGX_TRAN_AMT) AS TGX_TRAN_AMT,
    TRY_TO_NUMBER(_A_BTS_CUST_AGE, 38, 2)as _A_BTS_CUST_AGE,
    tgx_bank_name,
    tgx_bank_num,
    tgx_branch_id,
    tgx_acct_num,
    tgx_name,
    _L_ACCT_NUM,
    _L_BANK_NUM,
    _l_branch_id, 
    DTL_EX_3_80S_003 AS pmt_description_1,
    tgx_description AS pmt_description_2,
    TRY_TO_NUMBER(_L_SCM_RSK_HGH_SCR, 38, 2) as _L_SCM_RSK_HGH_SCR,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 5) as CERBERUS_SCORE,
    TRY_TO_NUMBER(_L_CUST_SCAMRISK_SCORE, 38, 2) as _L_CUST_SCAMRISK_SCORE,
    TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE,
    TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_S,
    TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2) as _l_max_30d_mule_score,
    TRY_TO_NUMBER(_L_NUM_SESS_2H, 38, 2) as _L_NUM_SESS_2H,
    TRY_TO_NUMBER(_L_NUM_SESS_4H, 38, 2) as _L_NUM_SESS_4H,
    TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE,38,2) as _L_TRUST_NEW_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE,38,2) as _L_TRUST_UNUSED_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN,38,2) as _L_TRUST_PAYEE_HIGH_VLOC_IN,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT,38,2) as _L_TRUST_PAYEE_DORM_ACCT,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYER,
    TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev,38,2) as _l_rcnt_hi_scr_on_dev,
    TRY_TO_NUMBER(_B_RECIP_SUM_LONG, 38, 2) as _B_RECIP_SUM_LONG,
    TRY_TO_NUMBER(_B_RECIP_SUM_SHORT, 38, 2) as _B_RECIP_SUM_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_1, 38, 2) as _B_RECIP_FTP_CNT_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_2, 38, 2) as _B_RECIP_FTP_CNT_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_3, 38, 2) as _B_RECIP_FTP_CNT_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_4, 38, 2) as _B_RECIP_FTP_CNT_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_5, 38, 2) as _B_RECIP_FTP_CNT_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_6, 38, 2) as _B_RECIP_FTP_CNT_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_7, 38, 2) as _B_RECIP_FTP_CNT_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_CNT_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_CNT_DATE,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_LONG, 38, 2) as _B_RECIP_FTP_CNT_LONG,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_SHORT, 38, 2) as _B_RECIP_FTP_CNT_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_1, 38, 2) as _B_RECIP_FTP_SUM_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_2, 38, 2) as _B_RECIP_FTP_SUM_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_3, 38, 2) as _B_RECIP_FTP_SUM_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_4, 38, 2) as _B_RECIP_FTP_SUM_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_5, 38, 2) as _B_RECIP_FTP_SUM_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_6, 38, 2) as _B_RECIP_FTP_SUM_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_7, 38, 2) as _B_RECIP_FTP_SUM_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_SUM_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_SUM_DATE,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_1, 38, 2) as _a_npp_in_unrelated_sum_24_1,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_2, 38, 2) as _a_npp_in_unrelated_sum_24_2,
    TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1,
	TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2,
	TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3,
	TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4,
	TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5,
	TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6,
	TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7,
	TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1,
	TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2,
	TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3,
	TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4,
	TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5,
	TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6,
	TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_1, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_2, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_3, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_1, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_7, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_7,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_LONG, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_LONG,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_SHORT, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP5_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP5_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP6_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP6_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP7_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP7_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP1_MLW_IND, 38, 2) as _A_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP2_MLW_IND, 38, 2) as _A_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP3_MLW_IND, 38, 2) as _A_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP4_MLW_IND, 38, 2) as _A_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP5_MLW_IND, 38, 2) as _A_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP6_MLW_IND, 38, 2) as _A_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP7_MLW_IND, 38, 2) as _A_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP_MLW_IND, 38, 2) as _A_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MOUSE_MV_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_MOUSE_MV_MLW_DT,
    TRY_TO_NUMBER(_N_MOUSE_MV_MLW_IND, 38, 2) as _N_MOUSE_MV_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_1, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_2, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_3, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_4, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_5, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_5,
    _N_5_RCNT_M100S_1,
    _N_5_RCNT_M100S_2,
    _N_5_RCNT_M100S_3,
    _N_5_RCNT_M100S_4,
    _N_5_RCNT_M100S_5,
    TRY_TO_NUMBER(_N_M100_P8_IND, 38, 2) as _N_M100_P8_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P8_IND_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P8_IND_DT,
    TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND,
    TRY_TO_NUMBER(_N_P20_7D_CNT_1, 38, 2) as _N_P20_7D_CNT_1,
    TRY_TO_NUMBER(_N_P20_7D_CNT_2, 38, 2) as _N_P20_7D_CNT_2,
    TRY_TO_NUMBER(_N_P20_7D_CNT_3, 38, 2) as _N_P20_7D_CNT_3,
    TRY_TO_NUMBER(_N_P20_7D_CNT_4, 38, 2) as _N_P20_7D_CNT_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_P20_7D_CNT_DT, 38, 2), '1960-01-01 00:00:00') as _N_P20_7D_CNT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP21_MLW_IND, 38, 2) as _A_SCAMP21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP21_MLW_IND, 38, 2) as _N_SCAMP21_MLW_IND,
    _L_PUSH_API_1,
    _L_PUSH_API_2,
    _L_PUSH_API_3,
    _L_PUSH_API_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,3,1),1.) as HOME_LOAN_IND,
    TRY_TO_NUMBER(substr(_l_Fingerprint_1,11,1),1.) as MORTGAGE_ACC,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,7,1),1.) as INCOME_BANDS,
    TRY_TO_NUMBER(substr(dtl_ex_0_20s_004,14,1),1.) as HOME_OWNER_STATUS,
    dtl_ex_0_30s_002,
    dtl_ex_0_80s_002,
    _L_POLICY_NM
from LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
    on a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where mid_event_ts >= '20250501'
and mid_event_ts <= '20250801';",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,7438201,7438.201000,123.970017,2.066167,2X-LARGE,32,66.117344
01bddfac-3204-a61b-0000-c71d24f35d32,"execute notebook ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""GAREAJU 2025-05-28 13:40:55""()",GAREAJU,PUBLIC,7291034,7291.034000,121.517233,2.025287,2X-LARGE,32,64.809184
01bed1b4-3204-c553-0000-c71d2c3cc4fe,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg7d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
    order by tran_d
),
hourly_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
),
all_dates AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT cust_i, merc_i, acqr_i FROM PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl where tran_d between '2025-03-01' and '2025-06-06') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.cust_i = hd.cust_i AND ad.merc_i = hd.merc_i AND ad.acqr_i = hd.acqr_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    cust_i, -- as ssx_cust_num,
    merc_i,
    acqr_i,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,

    COALESCE(CAST(CMA_SUM_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_UPST_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_UPST_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_RULE_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_FINL_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_UPST_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_FINL_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_FDP_RULE_TRIG_CNT_Q AS FLOAT), -1) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    COALESCE(CAST(CMA_SUM_DOMS_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_DOMS_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_OSEA_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_OSEA_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_DOMS_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_DOMS_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_OSEA_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_OSEA_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_3DS_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_3DS_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_N3D_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_N3D_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_3DS_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_3DS_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_N3D_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_N3D_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_CARD_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_ATM_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_ATM_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_FALL_BACK_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_CHIP_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_CHIP_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_PAY_PASS_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_CARD_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_ATM_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_ATM_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_FALL_BACK_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_CHIP_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_CHIP_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_PAY_PASS_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
    COALESCE(CAST(CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMA_MAX_CUV_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMA_MAX_CUV_RULE_PUSH_SENT_F,
    
    -- CMA_SUM_TRAN_CNT_Q,
    -- CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    -- CMA_SUM_TRAN_SUM_N,
    -- CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    -- CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    -- CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    -- CMA_SUM_UPST_APRD_TRAN_SUM_N,
    -- CMA_SUM_FINL_APRD_TRAN_SUM_N,
    -- CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    -- CMA_SUM_DOMS_TRAN_CNT_Q,
    -- CMA_SUM_OSEA_TRAN_CNT_Q,
    -- CMA_SUM_DOMS_TRAN_SUM_N,
    -- CMA_SUM_OSEA_TRAN_SUM_N,
    -- CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    -- CMA_SUM_3DS_TRAN_CNT_Q,
    -- CMA_SUM_N3D_TRAN_CNT_Q,
    -- CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    -- CMA_SUM_3DS_TRAN_SUM_N,
    -- CMA_SUM_N3D_TRAN_SUM_N,
    -- CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    -- CMA_SUM_ATM_TRAN_CNT_Q,
    -- CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    -- CMA_SUM_CHIP_TRAN_CNT_Q,
    -- CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    -- CMA_SUM_CARD_PRES_TRAN_SUM_N,
    -- CMA_SUM_ATM_TRAN_SUM_N,
    -- CMA_SUM_FALL_BACK_TRAN_SUM_N,
    -- CMA_SUM_CHIP_TRAN_SUM_N,
    -- CMA_SUM_PAY_PASS_TRAN_SUM_N,
    -- CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    -- CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    -- CMA_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    cust_i,
    merc_i,
    acqr_i,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,7256118,7256.118000,120.935300,2.015588,2X-LARGE,32,64.498816
01be9c10-3204-bee2-0000-c71d2a897e8e,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-07-01'
    order by tran_d
),
hourly_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-07-01'
),
all_dates AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT cust_i, merc_i, acqr_i FROM PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl where tran_d between '2025-03-01' and '2025-07-01') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.cust_i = hd.cust_i AND ad.merc_i = hd.merc_i AND ad.acqr_i = hd.acqr_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    cust_i, -- as ssx_cust_num,
    merc_i,
    acqr_i,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMA_SUM_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    CMA_SUM_TRAN_SUM_N,
    CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_SUM_N,
    CMA_SUM_FINL_APRD_TRAN_SUM_N,
    CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    CMA_SUM_DOMS_TRAN_CNT_Q,
    CMA_SUM_OSEA_TRAN_CNT_Q,
    CMA_SUM_DOMS_TRAN_SUM_N,
    CMA_SUM_OSEA_TRAN_SUM_N,
    CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMA_SUM_3DS_TRAN_CNT_Q,
    CMA_SUM_N3D_TRAN_CNT_Q,
    CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMA_SUM_3DS_TRAN_SUM_N,
    CMA_SUM_N3D_TRAN_SUM_N,
    CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    CMA_SUM_ATM_TRAN_CNT_Q,
    CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    CMA_SUM_CHIP_TRAN_CNT_Q,
    CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    CMA_SUM_CARD_PRES_TRAN_SUM_N,
    CMA_SUM_ATM_TRAN_SUM_N,
    CMA_SUM_FALL_BACK_TRAN_SUM_N,
    CMA_SUM_CHIP_TRAN_SUM_N,
    CMA_SUM_PAY_PASS_TRAN_SUM_N,
    CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    cust_i,
    merc_i,
    acqr_i,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,14346484,14346.484000,239.108067,3.985134,X-LARGE,16,63.762144
01beedf0-3204-c93b-0000-c71d2d0bfffa,"create or replace table FRD_ECV_NM_H20 as 
WITH DEVICE_VENDOR AS (
--added to include a view of Capp Device Vendor/Telstra Device Vendor mismatch
select dtl_ex_0_20s_001
,TRIM(CHL_ID_DEVICE_ID)::variant AS CHL_ID_DEVICE_ID_
,ARRAY_CONSTRUCT(_A_PROF_CAPP_DEVICE_1,_A_PROF_CAPP_DEVICE_2,_A_PROF_CAPP_DEVICE_3,_A_PROF_CAPP_DEVICE_4,_A_PROF_CAPP_DEVICE_5) AS DEVICE_ID_ARRAY
,CASE WHEN CHL_ID_DEVICE_ID IS NOT NULL AND CHL_ID_DEVICE_ID != '' THEN ARRAY_POSITION(CHL_ID_DEVICE_ID_, DEVICE_ID_ARRAY) ELSE NULL END AS DEV_ARRAY_POS
            ,ARRAY_CONSTRUCT(_A_PROF_CAPP_DEVICE_VENDOR_1,_A_PROF_CAPP_DEVICE_VENDOR_2,_A_PROF_CAPP_DEVICE_VENDOR_3,_A_PROF_CAPP_DEVICE_VENDOR_4,_A_PROF_CAPP_DEVICE_VENDOR_5) AS DEVICE_VENDOR_ARRAY
            ,UPPER(GET(DEVICE_VENDOR_ARRAY, DEV_ARRAY_POS)::varchar) AS CAPP_DEVICE_VENDOR
        from        LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT a 
        where   mid_event_ts >= '20250101'
        AND     mid_event_ts < '20250901'
        AND LEFT(dtl_ex_1_5s_01, 1) = 'C'
        )
        
SELECT 
to_timestamp(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
DEV.CAPP_DEVICE_VENDOR
SSX_CUST_NUM, 
SSX_CUST_NAME,
dtl_ex_1_5s_01, 
TGX_TRAN_AMT,
SUBSTR(dtl_ex_1_5s_01, 1, 1) as tran_made_on_cApp,
_l_acc_amt_1d,
_l_acc_amt_1h,
_l_acc_amt_2h,
_l_acc_amt_4h,
_l_acc_amt_7d,
_l_accel_event_cnt,
_l_alt_tab_cnt,
_l_and_id_age,
_l_anon_status,
_l_asn_age,
_l_bcksp_cnt,
_l_browser_age,
_l_city_age,
_l_clipb_copy_cnt,
_l_clipb_cut_cnt,
_l_clipb_event_cnt,
_l_clipb_paste_cnt,
_l_cntry_age,
_l_ctrl_tab_cnt,
_l_days_lst_dev_and,
_l_days_lst_dev_ios,
_l_days_lst_dev_js,
_l_days_lst_new_cookie,
_l_dbl_click_cnt,
_l_delete_cnt,
_l_dev_fam,
_l_dev_fam_age,
_l_dev_source,
_l_f_func_cnt,
_l_gyro_event_cnt,
_l_ip_age,
_l_ip_city,
_l_ip_cntry_code,
_l_ip_geo_ip,
_l_ip_geo_lat,
_l_ip_geo_long,
_l_ip_geo_state,
_l_is_f12,
_l_is_lh_int,
_l_is_on_call,
_l_is_priv_brows,
_l_is_rh_int,
_l_isp_age,
_l_lalt_cnt,
_l_lang_1,
_l_lang_2,
_l_lang_3,
_l_lcmd_cnt,
_l_lctrl_cnt,
_l_left_click_cnt,
_l_lshift_cnt,
_l_lst_proxy,
_l_mins_lst_lgn_capped,
_l_mouse_cnt,
_l_num_sess_2h,
_l_num_sess_4h,
_l_orient_event_cnt,
_l_overlap_sess_diff_dev,
_l_paste_in_login_cnt,
_l_priv_browsing_cnt,
_l_proxy_lvl,
_l_proxy_type,
_l_prt_scrn_cnt,
_l_ralt_cnt,
_l_rcmd_cnt,
_l_rctrl_cnt,
_l_right_click_cnt,
_l_rshift_cnt,
_l_scrn_h,
_l_scrn_w,
_l_sess_cnt_mob_browser,
_l_sess_cnt_mob_sdk,
_l_sess_cnt_web,
_l_shift_tab_cnt,
_l_swipe_cnt,
_l_tab_cnt,
_l_tap_cnt,
_l_time_zone,
_l_total_sess_cnt,
_l_touch_cnt,
_l_trvl_spd,
_l_uid_age,
_l_g_con_dev,
_l_g_con_ip,
_l_g_con_wifi,
_l_g_fluid_typing_pi,
_l_g_gen_payee,
_l_g_no_delay_to_input_pi,
_l_g_prev_used_pi,
_l_bc_event_dt,
_l_sess_id,
_l_policy_action,
_l_policy_nm,
_l_max_30d_score,
_l_bc_muid,
_l_policy_id,
_l_recip_ftp,
_l_adv_key_combo,
_l_app_togg,
_l_concurrent_sess,
_l_dev_tools,
_l_dev_change_anom,
_l_export_data,
_l_fast_traveler,
_l_frd_mac_adrs,
_l_hi_dead_time,
_l_import_export_pi,
_l_input_otp_delay,
_l_ip_mismatch_anomaly,
_l_is_active_call,
_l_is_soc_eng_rat,
_l_new_asn,
_l_new_browser,
_l_new_dev,
_l_new_dev_con_ip,
_l_new_ip,
_l_new_payee,
_l_new_user,
_l_nhuman_mouse_bhv,
_l_rare_browser,
_l_rare_cores,
_l_rare_cores_anomaly,
_l_rat_in_sess,
_l_rcnt_pmt_settings_ch,
_l_rcnt_prof_settings_ch,
_l_rcnt_req_loan,
_l_rcnt_risky_dev,
_l_risky_amt,
_l_risky_apps,
_l_risky_browser,
_l_risky_elements_int,
_l_risky_guid,
_l_risky_import_export,
_l_risky_ip,
_l_risky_isp,
_l_risky_key_combo,
_l_risky_payee,
_l_risky_wifi,
_l_tzone_mismatch,
_l_dom_hand_ch_anomaly,
_l_deleting_pi,
_l_ft_rat_app_inst,
_l_import_data,
_l_import_pi_data,
_l_is_long_sess,
_l_is_rcnt_hrisk_sess,
_l_key_mouse_anomaly,
_l_lgn_import_anomaly,
_l_delay_to_input_pi,
_l_low_fam_contact_det,
_l_mouse_doodl,
_l_new_browser_anomaly,
_l_new_desktop_user,
_l_new_mob_app_user,
_l_new_mob_browser_user,
_l_new_payee_per_user,
_l_os_ch_anomaly,
_l_priv_browsing_anomaly,
_l_type_patterns_anomaly,
_l_rcnt_linked_dev,
_l_rcnt_linked_ip,
_l_risky_import,
_l_seg_typing_pi,
_l_sim_ip_cntry_mismatch,
_l_is_bot,
_l_is_emu,
_l_is_mlw,
_l_is_mob_rat,
_l_is_rat,
_l_is_rcnt_rat,
_l_voice_scam,
_l_platform,
_l_bc_sess_cnt,
_l_bc_sess_id,
_l_m_m_1,
_l_m_m_2,
_l_m_m_3,
_l_m_m_4,
_l_m_m_5,
_l_first_rat_dt,
_l_prev_rat_dt,
_l_rat_cnt_1,
_l_rat_cnt_2,
_l_rat_cnt_3,
_l_rat_cnt_4,
_l_rat_check,
_l_score_1,
_l_score_2,
_l_score_3,
_l_score_4,
_l_score_5,
_l_score_dt_1,
_l_score_dt_2,
_l_score_dt_3,
_l_score_dt_4,
_l_score_dt_5,
_l_rare_scrn_sz,
_l_lrg_dist_known_loc,
_l_clpbrd_evnt,
_l_new_lang,
_l_scrn_res_anom,
_l_accum_amt_anom,
_l_frst_proxy,
_l_drag_n_drop,
_l_pmt_vloc_anom,
_l_flat_phone,
_l_rcnt_hi_scr_on_dev,
_l_g_con_geoloc,
_l_g_accum_amt,
_l_bank_num,
_l_acct_num,
_l_pmt_descr,
_l_pmt_amt,
_l_bpay_biller,
_l_bpay_crn,
_N_MII_ASSOC_NUM_CNT
        , _N_MII_AV_IN_CALL
        , _N_MII_AV_OUT_CALL
        , _N_MII_BRANCH_INT
        , _N_MII_CALLEE_CNT
        , _N_MII_CALLR_CNT
        , _N_MII_CALL_ACTIV
        , _N_MII_CALL_INACTIV
        , _N_MII_CUST_TENURE
        , _N_MII_DATA_ACTIV
        , _N_MII_DATA_INACTIV
        , _N_MII_DATA_USE_CH
        , _N_MII_DEV_BRAND
        , _N_MII_DEV_CNT
        , _N_MII_DEV_MNTHS
        , _N_MII_DWELL_MATCH
        , TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MII_EVENT_DT, 38, 2), '1960-01-01 00:00:00') AS _N_MII_EVENT_DT
        , _N_MII_HOME_PCODE
        , _N_MII_INB_SMS_CH
        , _N_MII_IN_CALL_CH
        , _N_MII_IN_CALL_CNT
        , _N_MII_IN_SMS_CNT
        , _N_MII_LOYALTY
        , _N_MII_MULT_PROD
        , _N_MII_NAME_MATCH
        , _N_MII_NEW_CALLEE_RATIO
        , _N_MII_NEW_CALLR_RATIO
        , _N_MII_NEW_RECIP_RATIO
        , _N_MII_NEW_SENDER_RATIO
        , _N_MII_OUT_CALL_CH
        , _N_MII_OUT_CALL_CNT
        , _N_MII_OUT_SMS_CH
        , _N_MII_OUT_SMS_CNT
        , _N_MII_PCODES_VISITED
        , _N_MII_PCODE_MATCH
        , _N_MII_SERV_CNT
        , _N_MII_SERV_TENURE
        , _N_MII_SERV_TYPE
        , _N_MII_SERV_USAGE
        , _N_MII_SIM_SWAP
        , _N_MII_SIM_SWAP_DT
        , _N_MII_SMS_ACTIV
        , _N_MII_SMS_INACTIV
        , _N_MII_SMS_RECIP_CNT
        , _N_MII_SMS_SENDER_CNT
FROM  LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT as a
LEFT JOIN DEVICE_VENDOR AS DEV
        ON DEV.dtl_ex_0_20s_001 = a.dtl_ex_0_20s_001
WHERE SSX_CUST_NUM IS NOT NULL
AND mid_event_ts >= TO_CHAR(TIMESTAMPADD(month, -($trainingPeriod + 1), TO_DATE($testingStart, 'YYYY-MM-DD')), 'YYYYMMDDHH24MISSFF6') 
AND mid_event_ts < TO_CHAR(LAST_DAY(TO_DATE($testingStart, 'YYYY-MM-DD')), 'YYYYMMDDHH24MISSFF6')
AND dtl_ex_1_5s_01 in ('N508B', 'N509B', 'N510B', 'N511B','C517B', 'N522B','N524B','O001B')
;",GOENKAPR,R_USR_FRAUMD_LABMLFRD_RW,13836381,13836.381000,230.606350,3.843439,X-LARGE,16,61.495024
01bea0cf-3204-bee2-0000-c71d2aacd46a,"(WITH code1_data AS (
    SELECT DISTINCT
--         TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
-- (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
-- TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d,
-- TO_DATE(SUBSTR(mid_event_ts, 1, 8), 'YYYYMMDD') as evnt_d,
-- TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
-- CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
-- CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-16'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,6815071,6815.071000,113.584517,1.893075,2X-LARGE,32,60.578400
01be8f55-3204-bee4-0000-c71d2a2e234a,"WITH code1_data AS (
    SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
,dtl_ex_0_20s_001
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,
        -- Blacklist and scam indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_acct,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl1_scam_tp_cif, '[^0-9.-]', '')), -1) as _b_list_rl1_scam_tp_cif,
        -- High-risk biller metrics
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_1,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_recip_flag,
        -- NPP outbound transaction metrics
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_2,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_sum_1,
                COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_sum_2, 
        -- -- NPP first-time payer metrics
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_1,
        -- NPP first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_2,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_2,
        -- Other risk indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_open_listed_last_cif_2, '[^0-9.-]', '')), -1) as _b_open_listed_last_cif_2,
        -- Recipient first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_long, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_long,
        -- Recipient link sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_short,
        -- Recipient transaction sums (various time periods)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_4, '[^0-9.-]', '')), -1) as _b_recip_sum_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_7, '[^0-9.-]', '')), -1) as _b_recip_sum_7,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_today, '[^0-9.-]', '')), -1) as _b_recip_sum_today,
        -- Recipient AAA transaction sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_1, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_4, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_short,
        -- Fixed: _b_rfm_whitelist_ind (was incorrectly aliased)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_rfm_whitelist_ind, '[^0-9.-]', '')), -1) as _b_rfm_whitelist_ind,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_1d_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_1d_out,
        
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added

,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT,
---newly added in itr3
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(RSP_ACTION_CODE, '[^0-9.-]', '')), -1) as RSP_ACTION_CODE,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_apps, '[^0-9.-]', '')), -1) as _l_risky_apps,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_browser, '[^0-9.-]', '')), -1) as _l_risky_browser,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_accel_event_cnt, '[^0-9.-]', '')), -1) as _l_accel_event_cnt,
        COALESCE(CAST(_l_recip_ftp AS VARCHAR(50)), '-1') as _l_recip_ftp,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_amt, '[^0-9.-]', '')), -1) as _l_risky_amt,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_tzone_mismatch, '[^0-9.-]', '')), -1) as _l_tzone_mismatch

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-16'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,6540677,6540.677000,109.011283,1.816855,2X-LARGE,32,58.139360
01be9b20-3204-bee3-0000-c71d2a8191b6,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as 
(WITH code1_data AS (
    SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        PRD_P01_DMN_FRAUMD.lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-16'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,6192181,6192.181000,103.203017,1.720050,2X-LARGE,32,55.041600
01beee46-3204-c93b-0000-c71d2d0f1782,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250904140303_scored_0 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it1_F2_xval_zero_day_20250904140303.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CRD_APAY_CNT_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_2WAY_CRD_FRD_RULE_FLAG, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_G_CON_DEV, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_RISKY_KEY_COMBO, _A_C_G, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_CONCURRENT_SESS, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_NPP_OUT_SUM_AAA_2, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_NPP_IN_UNRELATED_SUM_24_1, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _A_CUST_NPP_IN_SUM_AAA_1, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _L_NUM_SESS_2H, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_DPI_CHANGE, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _L_CLIPB_EVENT_CNT, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _L_NC_RESPONSE_CODE, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, BUS_LN_CNT, OTH_CNT, REL_MNG, FA_1, FA_2, NO_1, NO_2, FP, GOVT_BENE, PRVT_CUST, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) <= '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,11609818,11609.818000,193.496967,3.224949,X-LARGE,16,51.599184
01bef378-3204-c93c-0000-c71d2d38be4a,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905164056_scored_0 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it6_F2_xval_2day_all_fdt_redmojsiz_20250905164056.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CRD_SAFE_MERCHANT, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_ASN_AGE, _L_SCORE_2, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_SCRN_H, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_CLC_FTP_AMT, _L_TRVL_SPD, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_SCH_AMT, _A_P_L_3, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _L_DAYS_LST_DEV_JS, _A_ECV_DOCUMENT_IP, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_LANG_1, _L_LANG_2, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, DPST_CNT, CC_CNT, FA_1, NO_1, GOVT_BENE, MAR_STS_ORG_STR, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CMA_SUM_TRAN_SUM_N, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) <= '2025-06-05'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,5648410,5648.410000,94.140167,1.569003,2X-LARGE,32,50.208096
01beef23-3204-c93c-0000-c71d2d16e506,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_dehurysk_digital_retro_scam_20250909202111_scor_itr4_wo_7d as -- test data result
(select
tran_id,
TGX_TRAN_AMT as TRAN_AMT,
ssx_snap_d,
ssx_cust_num,
dtl_ex_0_20s_001,
RCPI_ACCT_I,
-- CERBERUS_SCORE,
-- DTL_EX_0_N_029,
fraudtype,
PRD_P01_DMN_FRAUMD.LABMLFRD.SCAM_RETRO_TEST_MOJO1('modelname=pipeline_Retro_scam_model_itr4_without_7D_20250909075608.mojo', -- model name
array_construct(
C_MONTH_OF_YEAR, _A_SCAM_VICTIM_FLAG, _B_CRYPTO_RISK, _B_LIST_BL_SCAM_TP_ACCT, _B_NPP_BLACKLIST_RECIP_FLAG, _B_NPP_OUT_CNT_1, _B_NPP_OUT_CNT_2, _B_NPP_OUT_SUM_1, _B_NPP_OUT_FTP_SUM_1, _B_OPEN_LISTED_LAST_CIF_2, _B_RECIP_LINK_SUM_SHORT, _B_RECIP_SUM_TODAY, _B_RECIP_SUM_AAA_1, _B_RECIP_SUM_AAA_4, _B_RECIP_SUM_AAA_LONG, _A_NPP_VELOCITY_1D_OUT, _L_RISKY_APPS, _L_RISKY_BROWSER, _L_RECIP_FTP, _L_RISKY_AMT, _A_CAPP_LOGON_CNT_1, TGX_TRAN_AMT, DAILY_COUNT, TOTL_SEND_CAPP_REGR_Q, MIN_SEND_CAPP_LOGN_Q, MAX_SEND_CAPP_LOGN_Q, TOTL_SEND_CAPP_LOGN_Q, TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q, MAX_SEND_SCAM_VCTM_Q, TOTL_SEND_SCAM_VCTM_Q, MIN_FNCL_TRAN_A, MAX_FNCL_TRAN_A, TOTL_FNCL_TRAN_A, MAX_CRYPTO_RISK_DAILY, UNIQUE_SENDERS_DAILY, SENDER_DIVERSITY_RATIO_DAILY, HISTORICAL_DAYS_AVAILABLE, AVG_TRANSACTIONS_PER_SENDER_D_HISTORICAL, MAX_TRANSACTIONS_CURRENT_PLUS_1D, MAX_UNIQUE_SENDERS_CURRENT_PLUS_1D, ACTIVE_DAYS_CURRENT_PLUS_1D, AVG_TRANSACTIONS_CURRENT_PLUS_1D, AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D, TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D, AVG_TRANSACTION_SUM_CURRENT_PLUS_1D, _L_BC_SCORE, _L_MAX_30D_MULE_SCORE, _L_EXPORT_DATA, _L_IMPORT_DATA, _L_IS_RCNT_HRISK_SESS, _L_DELAY_TO_INPUT_PI, _L_ACTIVE_SPOOFING, _L_PMT_VLOC_ANOM, _L_ACCUM_AMT_ANOM, _L_IS_LONG_SESS, _L_TRUST_NEW_PAYEE, _L_TRUST_PAYEE_DORM_ACCT, _L_TRUST_RCNT_HI_ATO_AS_PAYER, _L_TRUST_RCNT_HI_SES_AS_PAYEE, _L_CUST_SCAMRISK_SCORE, _B_RECIP_SUM_SHORT, _A_CUSTOMER_AGE, _A_CUST_SUM_AAA_SHORT, _A_CUST_SUM_AAA_LONG, FTP_CNT_7DAYS, FTP_SUM_7DAYS, NB_LOGONS_CNT_3M, CAPP_LOGONS_CNT_3M, _X_CIF_RECIPIENT_NEW_SUM, _B_CLIENT_POSTCODE_CNT_3, _L_PMT_AMT, _X_NPP_OUT_SUM_DATE, _L_ACC_AMT_1D, _L_SCORE_3, _B_RECIP_SUM_AAA_6, _A_CLIENT_CITY_7, _L_ACC_AMT_1H, _L_SCORE_4, _L_NEW_PAYEE_PER_USER, _A_CLIENT_CITY_2, _B_CLIENT_POSTCODE_SUM_2, _L_BC_SESS_CNT, _A_CLIENT_CITY_1, _B_CLIENT_POSTCODE_CNT_5, _L_MINS_LST_LGN_CAPPED, _B_RECIP_SUM_AAA_7, _B_CLIENT_POSTCODE_CNT_2, _A_CLIENT_CITY_10, _L_NUM_SESS_2H, _N_CUST_TXN_COUNT, _B_CLIENT_POSTCODE_SUM_3, _A_PROF_CAPP_DEVICE_NFTP_1, _A_NPP_FTP_SUM2, _A_CLIENT_CITY_6, _B_CLIENT_POSTCODE_CNT_1, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_NPP_OUT_SUM_1, _A_CLIENT_CITY_8, _N_CRYPTO_RECIPIENT_CNT, _N_H_2, _A_GEO_DISTANCE, _N_CAPP_LOGONS_CNT_1, _N_CAPP_LINKED_CNT_2, _B_CLIENT_POSTCODE_SUM_4, _L_M_L_C, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_3, _N_CUST_STATE_IP_ACTIVITY, _A_MRISK_FOREIGN_IP_ACTIVITY, _A_PROF_CAPP_DEVICE_LATT_3, _A_CUST_STATE_IP_ACTIVITY, _A_MRISK_FOREIGN_IP_TASK_ID, _A_DEVCIE_GEO_LAT_AVG_INCL, _N_INTERSTATE_IP_ACTIVITY, _N_FOREIGN_IP_ACTIVITY, _A_INTERSTATE_IP_STATE, _A_INTERSTATE_IP_ACTIVITY, _A_IS_IP_DT_2, _A_INTERSTATE_IP_TASK_ID, _A_IS_IP_DT_1, _A_SAFE_CUST_LATITUDE, _N_HRISK_FOREIGN_IP_ACTIVITY, _A_IS_IP_DT_3, _A_CURR_CUST_LATITUDE, _N_CLOUD_SERV_LATEST_LOGON_DT, _A_PROF_CAPP_DEVICE_LATT_1, _A_PROF_CAPP_DEVICE_LATT_2, _A_FOREIGN_IP_TASK_ID, _A_PREV_CUST_LATITUDE, _X_CIF_RECIPIENT_NEW_CNT, _X_TELSTRA_LAST_CALL_DUR, _B_CLIENT_POSTCODE_3, _B_CLIENT_POSTCODE_2, _B_CLIENT_POSTCODE_4, _A_MRISK_FOREIGN_IP_CNTRY_CODE, _N_NEW_IP_LOGON_PCODE, _A_LOGON_198_IP_PC, _A_LOGON_NB_IP_PC, _X_LAST_N_TXN_COUNT, _B_OPEN_LAST_PAYER_CIF_DT_2, _B_OPEN_LAST_PAYER_CIF_DT_3, _B_OPEN_LAST_PAYER_CIF_DT_4, _B_OPEN_LAST_PAYER_CIF_DT_5, _A_CSE_CHG_DWL_DT, _A_CIF_ESTABLISH_DT, _A_NB_LASTLOGON_DT_1, _A_CRYPTO_LAST_PYMNT_DATE, _N_SCAMP5_MLW_DT, _N_SCAMP20_MLW_DT, _N_SCAMP21_MLW_DT, _N_M100_P8_IND_DT, _N_M100_APP_P5_DT, _A_M100_APP_P8_IND_DT, _A_CRYPTO_MNTHLY_SUM, GENDER, BUSI_TRAN_COUNT, TRADE_ACCT_COUNT, NAME_ORIG_ASSOC, GOVT_BENEFITS, BAL_LAST_MON, BAL_TWO_MON_AGO, GAMBLING_SPEND_LAST_YEAR, GAMBLING_SPEND_THREE_MON, GAMBLING_SPEND_ONE_MON, DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, DPAT_TOTL_PRSL_TRAN_FOOT_A, DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, DPAT_TOTL_PRSL_TRAN_BALN_A, AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1, AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30, DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q, DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q, DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q, DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q)) as target_0,
1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_DEHURYSK_SCAM_RETRO_TESTSET_24082025 -- name of OOT data
where to_date(ssx_snap_d) >= '2025-06-01'
and to_date(ssx_snap_d) < '2025-07-01'-- filter on test data on dates
-- limit 10
);",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,11162761,11162.761000,186.046017,3.100767,X-LARGE,16,49.612272
01be86ee-3204-bdb1-0000-c71d29e53456,"create or replace temporary table Digital_Transactions as
select    
    b.fraudtype,
    b.DETECTION,
    b.case_detection,
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') as _B_ANY_CUST_FTP_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00') as _x_cif_recipient_new_date,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_BC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _L_BC_EVENT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SCM_RSK_HGH_DT, 38, 2), '1960-01-01 00:00:00') as _L_SCM_RSK_HGH_DT,
    _L_NC_RESPONSE_CODE,
    dtl_ex_0_20s_001 AS RECEIPT_NUM,
    (a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID,
    cmx_tran_id,
    hdr_activity_type,
    ssx_cust_num,
    chl_id_ob_userid,
    chl_id_pb_userid,
    dtl_ex_1_5s_01 as dmx_5byte_string_01,
    _a_cse_chg_dwl_ind AS DWL_change,
    dtl_ex_0_n_006 as Task_ID,
    dtl_ex_0_i_002 AS FTP_Indicator_1,
    rsp_ex_2_i_006 AS FTP_Indicator_2,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_SUM, 38, 2) as _X_CIF_RECIPIENT_SUM,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_SUM, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM,
    TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2) as _x_cif_recipient_new_cnt,
    TRY_TO_NUMBER(TGX_TRAN_AMT) AS TGX_TRAN_AMT,
    TRY_TO_NUMBER(_A_BTS_CUST_AGE, 38, 2)as _A_BTS_CUST_AGE,
    tgx_bank_name,
    tgx_bank_num,
    tgx_branch_id,
    tgx_acct_num,
    tgx_name,
    _L_ACCT_NUM,
    _L_BANK_NUM,
    _l_branch_id, 
    DTL_EX_3_80S_003 AS pmt_description_1,
    tgx_description AS pmt_description_2,
    TRY_TO_NUMBER(_L_SCM_RSK_HGH_SCR, 38, 2) as _L_SCM_RSK_HGH_SCR,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 5) as CERBERUS_SCORE,
    TRY_TO_NUMBER(_L_CUST_SCAMRISK_SCORE, 38, 2) as _L_CUST_SCAMRISK_SCORE,
    TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE,
    TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_S,
    TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2) as _l_max_30d_mule_score,
    TRY_TO_NUMBER(_L_NUM_SESS_2H, 38, 2) as _L_NUM_SESS_2H,
    TRY_TO_NUMBER(_L_NUM_SESS_4H, 38, 2) as _L_NUM_SESS_4H,
    TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE,38,2) as _L_TRUST_NEW_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE,38,2) as _L_TRUST_UNUSED_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN,38,2) as _L_TRUST_PAYEE_HIGH_VLOC_IN,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT,38,2) as _L_TRUST_PAYEE_DORM_ACCT,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYER,
    TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev,38,2) as _l_rcnt_hi_scr_on_dev,
    TRY_TO_NUMBER(_B_RECIP_SUM_LONG, 38, 2) as _B_RECIP_SUM_LONG,
    TRY_TO_NUMBER(_B_RECIP_SUM_SHORT, 38, 2) as _B_RECIP_SUM_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_1, 38, 2) as _B_RECIP_FTP_CNT_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_2, 38, 2) as _B_RECIP_FTP_CNT_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_3, 38, 2) as _B_RECIP_FTP_CNT_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_4, 38, 2) as _B_RECIP_FTP_CNT_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_5, 38, 2) as _B_RECIP_FTP_CNT_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_6, 38, 2) as _B_RECIP_FTP_CNT_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_7, 38, 2) as _B_RECIP_FTP_CNT_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_CNT_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_CNT_DATE,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_LONG, 38, 2) as _B_RECIP_FTP_CNT_LONG,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_SHORT, 38, 2) as _B_RECIP_FTP_CNT_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_1, 38, 2) as _B_RECIP_FTP_SUM_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_2, 38, 2) as _B_RECIP_FTP_SUM_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_3, 38, 2) as _B_RECIP_FTP_SUM_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_4, 38, 2) as _B_RECIP_FTP_SUM_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_5, 38, 2) as _B_RECIP_FTP_SUM_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_6, 38, 2) as _B_RECIP_FTP_SUM_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_7, 38, 2) as _B_RECIP_FTP_SUM_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_SUM_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_SUM_DATE,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_1, 38, 2) as _a_npp_in_unrelated_sum_24_1,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_2, 38, 2) as _a_npp_in_unrelated_sum_24_2,
    TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1,
	TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2,
	TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3,
	TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4,
	TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5,
	TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6,
	TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7,
	TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1,
	TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2,
	TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3,
	TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4,
	TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5,
	TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6,
	TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_1, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_2, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_3, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_1, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_7, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_7,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_LONG, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_LONG,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_SHORT, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP5_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP5_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP6_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP6_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP7_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP7_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP1_MLW_IND, 38, 2) as _A_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP2_MLW_IND, 38, 2) as _A_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP3_MLW_IND, 38, 2) as _A_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP4_MLW_IND, 38, 2) as _A_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP5_MLW_IND, 38, 2) as _A_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP6_MLW_IND, 38, 2) as _A_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP7_MLW_IND, 38, 2) as _A_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP_MLW_IND, 38, 2) as _A_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MOUSE_MV_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_MOUSE_MV_MLW_DT,
    TRY_TO_NUMBER(_N_MOUSE_MV_MLW_IND, 38, 2) as _N_MOUSE_MV_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_1, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_2, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_3, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_4, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_5, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_5,
    _N_5_RCNT_M100S_1,
    _N_5_RCNT_M100S_2,
    _N_5_RCNT_M100S_3,
    _N_5_RCNT_M100S_4,
    _N_5_RCNT_M100S_5,
    TRY_TO_NUMBER(_N_M100_P8_IND, 38, 2) as _N_M100_P8_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P8_IND_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P8_IND_DT,
    TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND,
    TRY_TO_NUMBER(_N_P20_7D_CNT_1, 38, 2) as _N_P20_7D_CNT_1,
    TRY_TO_NUMBER(_N_P20_7D_CNT_2, 38, 2) as _N_P20_7D_CNT_2,
    TRY_TO_NUMBER(_N_P20_7D_CNT_3, 38, 2) as _N_P20_7D_CNT_3,
    TRY_TO_NUMBER(_N_P20_7D_CNT_4, 38, 2) as _N_P20_7D_CNT_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_P20_7D_CNT_DT, 38, 2), '1960-01-01 00:00:00') as _N_P20_7D_CNT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP21_MLW_IND, 38, 2) as _A_SCAMP21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP21_MLW_IND, 38, 2) as _N_SCAMP21_MLW_IND,
    _L_PUSH_API_1,
    _L_PUSH_API_2,
    _L_PUSH_API_3,
    _L_PUSH_API_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,3,1),1.) as HOME_LOAN_IND,
    TRY_TO_NUMBER(substr(_l_Fingerprint_1,11,1),1.) as MORTGAGE_ACC,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,7,1),1.) as INCOME_BANDS,
    TRY_TO_NUMBER(substr(dtl_ex_0_20s_004,14,1),1.) as HOME_OWNER_STATUS,
    dtl_ex_0_30s_002,
    dtl_ex_0_80s_002,
    _L_POLICY_NM
from LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
    on a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where mid_event_ts >= '20250501'
and mid_event_ts <= '20250801';",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,5549538,5549.538000,92.492300,1.541538,2X-LARGE,32,49.329216
01bdfae0-3204-aa20-0000-c71d25ba3516,"execute notebook ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""GAREAJU 2025-05-28 13:40:55""()",GAREAJU,PUBLIC,5542184,5542.184000,92.369733,1.539496,2X-LARGE,32,49.263872
01beee90-3204-c939-0000-c71d2d11e25e,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_sai_cretro_scams_20250905163819_scored as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_SCAMS_RETRO_TEST_MOJO2_IT3('modelname=pipeline_it3_F2_xval_2day_all_20250905163819.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_NC_MATCH_NAME_CONF, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, REL_MNG, FA_1, NO_1, FP, GOVT_BENE, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_CNT_Q, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_RULE_DCLN_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_SUM_N, CUS_SUM_FINL_APRD_TRAN_SUM_N, CUS_SUM_FDP_RULE_TRIG_CNT_Q, CUS_SUM_DOMS_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_CNT_Q, CUS_SUM_PAY_PASS_TRAN_CNT_Q, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_CHIP_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_NTB_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CUS_MAX_C_2WAY_CRD_RULE_FLAG, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_RULE_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_APRD_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_FINL_APRD_TRAN_SUM_N, CRD_SUM_INCO_CVVA_SUM_N, CRD_SUM_FDP_RULE_TRIG_CNT_Q, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_CHIP_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CRD_SUM_CAPP_LOGN_CNT_Q, CRD_SUM_VIEW_CARD_DETL_CNT_Q, CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F, CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_DOMS_TRAN_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_CNT_Q, CMC_SUM_OSEA_TRAN_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_CNT_Q, CMC_SUM_PAY_PASS_TRAN_CNT_Q, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N
)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,10774247,10774.247000,179.570783,2.992846,X-LARGE,16,47.885536
01beef67-3204-c93b-0000-c71d2d180ff2,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_sai_cretro_scams_20250905163819_scored_01 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_SCAMS_RETRO_TEST_MOJO2_IT3('modelname=pipeline_it3_F2_xval_2day_all_20250905163819.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_NC_MATCH_NAME_CONF, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, REL_MNG, FA_1, NO_1, FP, GOVT_BENE, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_CNT_Q, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_RULE_DCLN_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_SUM_N, CUS_SUM_FINL_APRD_TRAN_SUM_N, CUS_SUM_FDP_RULE_TRIG_CNT_Q, CUS_SUM_DOMS_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_CNT_Q, CUS_SUM_PAY_PASS_TRAN_CNT_Q, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_CHIP_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_NTB_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CUS_MAX_C_2WAY_CRD_RULE_FLAG, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_RULE_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_APRD_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_FINL_APRD_TRAN_SUM_N, CRD_SUM_INCO_CVVA_SUM_N, CRD_SUM_FDP_RULE_TRIG_CNT_Q, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_CHIP_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CRD_SUM_CAPP_LOGN_CNT_Q, CRD_SUM_VIEW_CARD_DETL_CNT_Q, CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F, CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_DOMS_TRAN_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_CNT_Q, CMC_SUM_OSEA_TRAN_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_CNT_Q, CMC_SUM_PAY_PASS_TRAN_CNT_Q, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N
)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT_01
);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,5327208,5327.208000,88.786800,1.479780,2X-LARGE,32,47.352960
01bdda2f-3204-a617-0000-c71d24cc770a,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""F2KSZQG4AD3S4ZO0""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,5211528,5211.528000,86.858800,1.447647,2X-LARGE,32,46.324704
01beef08-3204-c93f-0000-c71d2d16b00e,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250904140303_scored_0 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it1_F2_xval_zero_day_20250904140303.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CRD_APAY_CNT_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_2WAY_CRD_FRD_RULE_FLAG, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_G_CON_DEV, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_RISKY_KEY_COMBO, _A_C_G, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_CONCURRENT_SESS, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_NPP_OUT_SUM_AAA_2, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_NPP_IN_UNRELATED_SUM_24_1, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _A_CUST_NPP_IN_SUM_AAA_1, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _L_NUM_SESS_2H, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_DPI_CHANGE, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _L_CLIPB_EVENT_CNT, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _L_NC_RESPONSE_CODE, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, BUS_LN_CNT, OTH_CNT, REL_MNG, FA_1, FA_2, NO_1, NO_2, FP, GOVT_BENE, PRVT_CUST, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) <= '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,5085184,5085.184000,84.753067,1.412551,2X-LARGE,32,45.201632
01bef40a-3204-c93b-0000-c71d2d3e90ae,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905164056_scored_2 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it6_F2_xval_2day_all_fdt_redmojsiz_20250905164056.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CRD_SAFE_MERCHANT, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_ASN_AGE, _L_SCORE_2, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_SCRN_H, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_CLC_FTP_AMT, _L_TRVL_SPD, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_SCH_AMT, _A_P_L_3, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _L_DAYS_LST_DEV_JS, _A_ECV_DOCUMENT_IP, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_LANG_1, _L_LANG_2, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, DPST_CNT, CC_CNT, FA_1, NO_1, GOVT_BENE, MAR_STS_ORG_STR, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CMA_SUM_TRAN_SUM_N, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-10'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,4831431,4831.431000,80.523850,1.342064,2X-LARGE,32,42.946048
01bee75a-3204-c556-0000-c71d2cda4162,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-32
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,4773132,4773.132000,79.552200,1.325870,2X-LARGE,32,42.427840
01bdd481-3204-a615-0000-c71d24a4a1ca,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""F2KSZQG4AD3S4ZO0""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,4757822,4757.822000,79.297033,1.321617,2X-LARGE,32,42.291744
01bef3c2-3204-c93e-0000-c71d2d3b39be,"CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_FPF AS (
-- INSERT INTO LABMLFRD.CARD_TRAN_PRFL (
    WITH TRAN AS (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS TRAN_I
            , TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S
            , TO_DATE(TTS_TRAN_DATE_ALT, 'YYYYMMDD') AS TRAN_D
            , UPPER(TO_CHAR(DATE_TRUNC('HOUR', TRAN_S), 'HH:DY')) AS TRAN_HOUR_DAY_X
            , SSX_CUST_NUM AS CUST_I
        	, CHL_ID_CARD_NUM AS CARD_I
            , ATH_PC_CARD_EXP_DATE
        	, DTL_EX_0_20S_004 AS DPAN_I
        	, CASE WHEN CHL_CT_MEDIA = 'V' THEN 1 ELSE 0 END AS TOKN_F
            , CASE WHEN CHL_CT_WHICH_CARD IN (1,0) THEN 1 ELSE 0 END AS PRIM_CAHD_F
        	, DTL_CA_CLIENT_AMT AS TRAN_AMT_N
        	, ATH_PC_POS AS POS_ENTR_C
            , CASE WHEN DTL_CA_REVERSAL_IND = 'N' THEN 0 ELSE 1 END AS REVS_INDA_F
            , CASE WHEN ATH_PC_PIN_VRFY = 'V' THEN 0 ELSE 1 END AS PIN_VRFY_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'C' THEN 1 ELSE 0 END AS PAIN_CUST_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'M' THEN 1 ELSE 0 END AS PAIN_MERC_F
        	, CASE WHEN DTL_EX_0_I_022 = 'R' THEN 1 ELSE 0 END AS RCRR_F
        	, DTL_EX_0_3S_002 AS SECU_LEVL_INDA_C
            , SUBSTR(DTL_EX_3_80S_003,1,2) AS ACCT_AUTT_V
            , CASE WHEN ATH_PC_POS IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_NOT_PRES_INDA_F
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS ""3DS_INDA_F""
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 NOT IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS N3D_INDA_F
            , CASE WHEN ATH_PC_POS NOT IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_PRES_INDA_F
            , CASE WHEN CARD_PRES_INDA_F = '1' AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS ATM_TRAN_F
            , CASE WHEN POS_ENTR_C IN ('62','79','80') AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS FALL_BACK_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '05' THEN 1 ELSE 0 END AS CHIP_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '07' THEN 1 ELSE 0 END AS PAY_PASS_TRAN_INDA_F
        	, REPLACE(DTL_CA_AUTH_SYS_DEC,' ','') AS UPST_DCDE_C
        	, REPLACE(DTL_CA_AUTH_SYS_INFO,' ','') AS UPST_REAS_C
            , REPLACE(RSP_ACTION_CODE,' ','') AS FINL_DCDE_C
            , CASE WHEN UPST_DCDE_C = '1' AND FINL_DCDE_C != '1' THEN 1 ELSE 0 END AS RULE_DCLN_F
        	, CASE WHEN FINL_DCDE_C = '1' THEN 1 ELSE 0 END AS FINL_APRD_TRAN_CNT_F
        	, CASE WHEN UPST_REAS_C IN ('20','21','22','81','BE') THEN 1 ELSE 0 END  AS INCO_EXPY_F
        	, CASE WHEN UPST_REAS_C IN ('30','31','34','36','41','42','43','44','45','46','47') THEN 1 ELSE 0 END AS INCO_CVVA_F
        	, CASE WHEN UPST_REAS_C IN ('11','12','CP','MP','PE','PM') THEN 1 ELSE 0 END AS INCO_PIN_F
        	, CASE WHEN UPST_REAS_C IN ('T7','CL','87','88','89','90','98') THEN 1 ELSE 0 END AS OVER_LIMT_DCLN_F /* $ OVER LIMIT, DELINQUANT OR TRASACTION LIMIT */
            
            , CHL_CT_ACQ_ID AS ACQR_I
        	, CHL_CT_TERM_OWNER_ID AS MERC_I
        	, REPLACE(CHL_CT_TERM_OWNER_NAME,' ','') AS MERC_M
        	, CHL_CT_TERM_ID AS MERC_TRML_I
        	, CHL_CT_TERM_CNTRY_CODE AS CNTY_C
        	, CHL_CT_MER_MCC AS MERC_CATG_C
            , CASE WHEN CHL_CT_TERM_CNTRY_CODE = '036' THEN 1 ELSE 0 END AS DOMS_TRAN_INDA_F

        	, RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X
            , SUBSTR(RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X
            , SUBSTR(RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F
        	, SUBSTR(RSP_EX_2_8S_002,8,1) AS PUSH_EXIT_C
            , CASE WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='1' AND RSP_EX_2_I_009='2' THEN '1WP_REG'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='2' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='3' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='4' AND RSP_EX_2_I_009='2' THEN '1WP_DMGD_CARD'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='5' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='A' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='B' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='G' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='H' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='I' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_CIF'
            	ELSE 'NO_PUSH' END AS PUSH_TYPE_QLFY_X
            , CASE WHEN DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(DTL_EX_3_8S_004) END AS MCRD_SCOR_N
            
        FROM 
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
        WHERE
            TTS_TRAN_DATE >= TO_CHAR($END_D-90,'YYYYMMDD')
            AND TTS_TRAN_DATE <= TO_CHAR($END_D,'YYYYMMDD')
            
            AND HDR_ACTIVITY_TYPE = 'CA'
            AND SSX_CUST_NUM != ''
            AND CHL_ID_CARD_NUM != ''
    )
    , CUST_TRAN_PRFL AS (
    SELECT 
        CUST_I

        -- Digital events
        , CAPP_PSWD_CHNG_CNT_Q
    	, CAPP_PSWD_CHNG_LAST_S
    	, CAPP_DVIC_REGR_CNT_Q
    	, CAPP_DVIC_REGR_LAST_S
    	, CAPP_LOGN_CNT_Q
    	, CAPP_LOGN_LAST_S
    	, NTB_LOGN_CNT_Q
    	, NTB_LOGN_LAST_S
    	, VIEW_CARD_DETL_CNT_Q
    	, VIEW_CARD_DETL_LAST_S
    FROM
        LCL.CUST_TRAN_PRFL
    WHERE 
        CUST_I IN (SELECT CUST_I FROM TRAN)
    )
     -- Analyst declined disputed transactions
    , CONFIRMED_FPF AS (
        SELECT
            b.DSPT_CASE_I
            , b.DSPT_CASE_EVNT_I
            , b.DSPT_CASE_CRAT_S
            , b.DSPT_TRAN_I
            , a.TRAN_ID
            , 1 AS FPF_INDA_F
        FROM 
            LABMLFRD.CARD_TRAN_GROS_FRAU a
        LEFT JOIN
            LABMLFRD.CARD_TRAN_DAIS_DSPT b
        ON
            a.TRAN_ID=b.TRAN_I
        WHERE 
            a.OUTCOME IN ('Resolved-CLOSED: INVEST DECLINE')
            AND b.DSPT_TRAN_DCDE_X IN ('Fraud Referral','Customer Liable')
    )
    -- STP Daisy cases - potential FPF
    , POTENTIAL_FPF AS (
        SELECT DISTINCT
            a.DSPT_CASE_I
            , a.DSPT_CASE_EVNT_I
            , b.DSPT_CASE_CRAT_S
            , b.DSPT_CASE_TRAN_Q
            , b.TOTL_TRAN_AND_FEE_A
            , a.DSPT_TRAN_I
            , dai.TRAN_I
            , 9 AS FPF_INDA_F
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        INNER JOIN
            (SELECT * FROM CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL 
            WHERE DSPT_TYPE_C = 'DT1'
            QUALIFY ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
            ) b
        ON
            a.DSPT_CASE_I = b.DSPT_CASE_I
        LEFT JOIN
            LABMLFRD.CARD_TRAN_DAIS_DSPT dai
        ON 
            a.DSPT_CASE_I = dai.DSPT_CASE_I
            AND a.DSPT_TRAN_I = dai.TRAN_I
        WHERE
            UPPER(a.DSPT_TRAN_DCDE_X) LIKE ANY ('%CHARGE%OFF%','%CHARGEBACK%','%WRITE%OFF%')
            AND a.DSPT_SRCE_SYST_M != 'GS'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC) = 1
    )
    -- Daisy case information
    , DNA_CASE AS (
    SELECT 
        a.PATY_I
        
        , COUNT(DISTINCT a.DSPT_CASE_I) AS DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , SUM(a.DSPT_CASE_TRAN_Q) AS DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , SUM(a.TOTL_TRAN_AND_FEE_A) AS DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND c.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND c.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND c.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
    FROM 
        (SELECT DISTINCT
            PATY_I
            , DSPT_CASE_I
            , DSPT_CASE_EVNT_I
            , DSPT_CASE_CRAT_S
            , DSPT_CASE_TRAN_Q
            , TOTL_TRAN_AND_FEE_A
        FROM
            CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
        WHERE
            DSPT_TYPE_C = 'DT1'
        QUALIFY 
            ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) a
    LEFT JOIN
        (SELECT DISTINCT DSPT_CASE_I 
        FROM CONFIRMED_FPF) b
    ON 
        a.DSPT_CASE_I = b.DSPT_CASE_I
    LEFT JOIN 
        POTENTIAL_FPF c
    ON
        a.DSPT_CASE_I = c.DSPT_CASE_I
    GROUP BY
        a.PATY_I
    )
    -- Output
    SELECT DISTINCT
    	a.* -- Transaction info, including UVs (e.g. WPR rego date, etc)

        , dai.DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , dai.DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , dai.DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , dai.DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , dai.DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , dai.DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , dai.DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , dai.DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , dai.DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , dai.DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , dai.DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , dai.DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , dai.DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , dai.DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , dai.DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , dai.DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days

        , dai.DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , dai.DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , dai.DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , dai.DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , dai.DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , dai.DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , dai.DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , dai.DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , dai.DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days

        , IFNULL(COALESCE(fpf.FPF_INDA_F,pfpf.FPF_INDA_F),0) AS FPF_INDA_F
        
    FROM
    	TRAN a
    LEFT JOIN 
        DNA_CASE dai
    ON 
        a.CUST_I = dai.PATY_I
    LEFT JOIN 
        CUST_TRAN_PRFL b
    ON
        a.CUST_I = b.CUST_I
    LEFT JOIN
        CONFIRMED_FPF fpf
    ON
        a.TRAN_I = fpf.TRAN_ID
    LEFT JOIN
        POTENTIAL_FPF pfpf
    ON
        a.TRAN_I = pfpf.TRAN_I
    -- WHERE 
    --     fpf.FPF_INDA_F<>0
    -- ORDER BY 
    --     a.CUST_I
    -- 	, a.CARD_I
    -- 	, a.TRAN_S DESC
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,4676316,4676.316000,77.938600,1.298977,2X-LARGE,32,41.567264
01be7b79-3204-bc97-0000-c71d298c5306,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D012_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_CNP_LTRANS_6HR_COUNT_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_4"" DOUBLE, ""DTL_EX_2_ENTITY_ID_6"" STRING(16777216), ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""DTL_CA_CLIENT_TRAN_TYPE"" STRING(16777216), ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_M_TOTAL_COUNT"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_A_U"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_CC_2DAY_VEL_6"" DOUBLE, ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CRD_CNP_TRN_SUM_3"" DOUBLE, ""_A_DTL_CAPP_NBANK_SSO_DT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_A_D_D_1"" DOUBLE, ""_M_MERCHANT_RETAIL_IND"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_A_GEO_LONG_1"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_A_CAPP_REGO_IP_ADDRESS"" STRING(16777216), ""_M_TOTAL_SUM_RETAIL"" DOUBLE, ""CHL_CT_CH_POST_CODE"" STRING(16777216), ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_2"" DOUBLE, ""_Q_DOM_DECL_CNT_DAY_1"" DOUBLE, ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_C_CC_2DAY_VEL_4"" DOUBLE, ""_C_CRD_3D_TRN_SUM_3"" DOUBLE, ""_C_N3D_DOM_6H_SUM_1"" DOUBLE, ""_L_SE_SCORE_5"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_CC_TRAN_ACCOUNT_BIN"" STRING(16777216), ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_Q_KEYED_DECL_CNT_DAY_1"" DOUBLE, ""_C_MDES_DPAN_CNT_CURR"" DOUBLE, ""_C_CC_SCR_ATTCK_30SEC_COUNT_2"" DOUBLE, ""_A_24H_CNP_DC_RTL_SUM_CURR_MAX"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_L_SCORE_H2O_5"" DOUBLE, ""SSA_D_AVAIL_BAL"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_UA_DEVICE_PREV_DT_4"" BIGINT, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, _C_CC_CNP_LTRANS_6HR_COUNT_1, ATH_PC_CUST_PRESENT, DTL_EX_3_8S_009, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _Q_MER_FRAUD_SCORE_CNT_5, _Q_MER_FRAUD_SCORE_SUM_6, _M_TOTAL_SUM, _C_N3D_TST_CNT_1, _Q_MER_FRAUD_SCORE_CNT_4, DTL_EX_2_ENTITY_ID_6, _C_CC_CNP_VEL_6HR_COUNT_1, DTL_CA_CLIENT_TRAN_TYPE, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_1, DTL_EX_3_80S_001, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _M_TOTAL_COUNT, CHL_CT_MER_MCC, _Q_AUTH_COUNT, _C_N3D_MERC_ID_SUM_3, _A_U, _C_N3D_MERC_ID_SUM_2, _C_N3D_MERC_ID_SUM_1, _A_BTS_CUST_AGE, _C_CC_2DAY_VEL_6, _L_MAX_30D_MULE_SCORE, _C_CRD_CNP_TRN_SUM_3, _A_DTL_CAPP_NBANK_SSO_DT, _A_PROF_CAPP_DEVICE_1, _A_D_D_1, _M_MERCHANT_RETAIL_IND, _C_CC_GBL_N3D_CNT_1, _L_BC_SESS_ID, _A_GEO_LONG_1, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CAPP_REGO_IP_ADDRESS, _M_TOTAL_SUM_RETAIL, CHL_CT_CH_POST_CODE, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _Q_MER_FRAUD_SCORE_CNT_2, _Q_DOM_DECL_CNT_DAY_1, _C_CC_2DAY_AMT_6, _C_CC_2DAY_VEL_4, _C_CRD_3D_TRN_SUM_3, _C_N3D_DOM_6H_SUM_1, _L_SE_SCORE_5, _C_2WAY_5X_CRD_CNT, _C_CC_TRAN_ACCOUNT_BIN, _C_N3D_OVS_6H_SUM_1, _Q_KEYED_DECL_CNT_DAY_1, _C_MDES_DPAN_CNT_CURR, _C_CC_SCR_ATTCK_30SEC_COUNT_2, _A_24H_CNP_DC_RTL_SUM_CURR_MAX, _Q_MER_FRAUD_SCORE_CNT_3, DTL_CA_AUTH_SYS_INFO, _L_SCORE_H2O_5, SSA_D_AVAIL_BAL
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_PREV_DT_4,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250818 and 20250820
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,4538876,4538.876000,75.647933,1.260799,2X-LARGE,32,40.345568
01be8fe1-3204-bee4-0000-c71d2a3375e2,"SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,4534314,4534.314000,75.571900,1.259532,2X-LARGE,32,40.305024
01be7b79-3204-bc96-0000-c71d298c361e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D012_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_CNP_LTRANS_6HR_COUNT_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_4"" DOUBLE, ""DTL_EX_2_ENTITY_ID_6"" STRING(16777216), ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""DTL_CA_CLIENT_TRAN_TYPE"" STRING(16777216), ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_M_TOTAL_COUNT"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_A_U"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_CC_2DAY_VEL_6"" DOUBLE, ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CRD_CNP_TRN_SUM_3"" DOUBLE, ""_A_DTL_CAPP_NBANK_SSO_DT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_A_D_D_1"" DOUBLE, ""_M_MERCHANT_RETAIL_IND"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_A_GEO_LONG_1"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_A_CAPP_REGO_IP_ADDRESS"" STRING(16777216), ""_M_TOTAL_SUM_RETAIL"" DOUBLE, ""CHL_CT_CH_POST_CODE"" STRING(16777216), ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_2"" DOUBLE, ""_Q_DOM_DECL_CNT_DAY_1"" DOUBLE, ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_C_CC_2DAY_VEL_4"" DOUBLE, ""_C_CRD_3D_TRN_SUM_3"" DOUBLE, ""_C_N3D_DOM_6H_SUM_1"" DOUBLE, ""_L_SE_SCORE_5"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_CC_TRAN_ACCOUNT_BIN"" STRING(16777216), ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_Q_KEYED_DECL_CNT_DAY_1"" DOUBLE, ""_C_MDES_DPAN_CNT_CURR"" DOUBLE, ""_C_CC_SCR_ATTCK_30SEC_COUNT_2"" DOUBLE, ""_A_24H_CNP_DC_RTL_SUM_CURR_MAX"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_L_SCORE_H2O_5"" DOUBLE, ""SSA_D_AVAIL_BAL"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_UA_DEVICE_PREV_DT_4"" BIGINT, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, _C_CC_CNP_LTRANS_6HR_COUNT_1, ATH_PC_CUST_PRESENT, DTL_EX_3_8S_009, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _Q_MER_FRAUD_SCORE_CNT_5, _Q_MER_FRAUD_SCORE_SUM_6, _M_TOTAL_SUM, _C_N3D_TST_CNT_1, _Q_MER_FRAUD_SCORE_CNT_4, DTL_EX_2_ENTITY_ID_6, _C_CC_CNP_VEL_6HR_COUNT_1, DTL_CA_CLIENT_TRAN_TYPE, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_1, DTL_EX_3_80S_001, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _M_TOTAL_COUNT, CHL_CT_MER_MCC, _Q_AUTH_COUNT, _C_N3D_MERC_ID_SUM_3, _A_U, _C_N3D_MERC_ID_SUM_2, _C_N3D_MERC_ID_SUM_1, _A_BTS_CUST_AGE, _C_CC_2DAY_VEL_6, _L_MAX_30D_MULE_SCORE, _C_CRD_CNP_TRN_SUM_3, _A_DTL_CAPP_NBANK_SSO_DT, _A_PROF_CAPP_DEVICE_1, _A_D_D_1, _M_MERCHANT_RETAIL_IND, _C_CC_GBL_N3D_CNT_1, _L_BC_SESS_ID, _A_GEO_LONG_1, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CAPP_REGO_IP_ADDRESS, _M_TOTAL_SUM_RETAIL, CHL_CT_CH_POST_CODE, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _Q_MER_FRAUD_SCORE_CNT_2, _Q_DOM_DECL_CNT_DAY_1, _C_CC_2DAY_AMT_6, _C_CC_2DAY_VEL_4, _C_CRD_3D_TRN_SUM_3, _C_N3D_DOM_6H_SUM_1, _L_SE_SCORE_5, _C_2WAY_5X_CRD_CNT, _C_CC_TRAN_ACCOUNT_BIN, _C_N3D_OVS_6H_SUM_1, _Q_KEYED_DECL_CNT_DAY_1, _C_MDES_DPAN_CNT_CURR, _C_CC_SCR_ATTCK_30SEC_COUNT_2, _A_24H_CNP_DC_RTL_SUM_CURR_MAX, _Q_MER_FRAUD_SCORE_CNT_3, DTL_CA_AUTH_SYS_INFO, _L_SCORE_H2O_5, SSA_D_AVAIL_BAL
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_PREV_DT_4,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250818 and 20250820
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,4483921,4483.921000,74.732017,1.245534,2X-LARGE,32,39.857088
01be7b79-3204-bc98-0000-c71d298c801e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""RSP_ACTION_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_CUST_SPEND_SUM_AAA_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_CC_RECOV_TRANS_SUM_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_C_N3D_TST_CNT_1"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_AUTH_COUNT"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_Q_NON_AU_IND"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_C_CC_GBL_N3D_1D_CNT_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CC_SFW_GOOGLE_CNT_2"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""_Q_COF_DECL_CNT_DAY_1"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_L_MAX_30D_SCORE_H2O"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_L_ACC_AMT_7D"" DOUBLE, ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_C_CRD_DOM_CNP_HV_SUM_1"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""CHL_CT_TERM_OWNER_ID"" STRING(16777216), ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_A_Q"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_3"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""_A_GEO_LONG_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_2"" DOUBLE, ""_C_N3D_MERC_ID_1"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_2"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, DTL_EX_3_8S_009, _M_TOTAL_COUNT, DTL_CA_AUTH_SYS_INFO, _C_CC_GBL_N3D_SUM_1, _C_CC_GBL_N3D_CNT_1, _C_N3D_OVS_6H_SUM_1, DTL_CA_MERCH_CURR_CODE, _C_CRD_SAFE_MERCHANT, RSP_ACTION_CODE, _Q_MER_FRAUD_SCORE_CNT_6, DTL_EX_3_20S_004, _Q_KEYED_APVD_CNT_DAY_1, _A_CUST_SPEND_SUM_AAA_1, _C_N3D_MERC_ID_SUM_2, _C_CC_RECOV_TRANS_SUM_1, _A_D_D_1, ATH_PC_CUST_PRESENT, _Q_MER_FRAUD_SCORE_CNT_5, ATH_PC_ACS_REFER_CODE, _Q_MER_FRAUD_SCORE_SUM_6, _C_N3D_MERC_ID_SUM_1, _L_BC_SESS_ID, _C_N3D_TST_CNT_1, _M_FIRST_USE_DATE, _Q_AUTH_COUNT, _M_TOTAL_SUM, _C_2WAY_5X_CRD_CNT, _Q_MER_FRAUD_SCORE_CNT_3, CHL_CT_TERM_CNTRY_CODE, _A_BTS_CUST_AGE, _C_N3D_MERC_ID_SUM_3, _Q_NON_AU_IND, _A_CRD_NPP_PAYMENT_AMOUNT, _C_CC_GBL_N3D_1D_CNT_1, DTL_EX_3_80S_001, _C_CRD_VISA_MERC_SUM_1, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_2, _C_CC_SFW_GOOGLE_CNT_2, _A_D_D_3, _Q_COF_DECL_CNT_DAY_1, _A_AUS_IP_ACTIVITY, _A_BTS_CUST_DOB, _L_MAX_30D_SCORE_H2O, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _C_CC_2DAY_AMT_6, _A_D_D_2, _L_ACC_AMT_7D, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _A_PROF_CAPP_DEVICE_1, _C_CRD_DOM_CNP_HV_SUM_1, _L_BC_SCORE_H2O, _C_CC_CNP_VEL_6HR_COUNT_1, CHL_CT_TERM_OWNER_ID, _C_CC_OS_FB_CNT_3, _A_Q, _Q_MER_FRAUD_SCORE_SUM_1, _C_CRD_DOM_CNP_HV_CNT_1, _Q_MER_FRAUD_SCORE_SUM_3, _C_CRD_3D_TRN_SUM_1, _A_GEO_LONG_1, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_1, _C_CC_GBL_N3D_CNT_2, CHL_CT_MER_MCC
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250818 and 20250820
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,4455127,4455.127000,74.252117,1.237535,2X-LARGE,32,39.601120
01bef8a4-3204-c93e-0000-c71d2d5d433a,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        * EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,4305437,4305.437000,71.757283,1.195955,2X-LARGE,32,38.270560
01bed14a-3204-c553-0000-c71d2c398cde,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg7d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-03-01' and '2025-06-06'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-03-01' and '2025-06-06') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMC_SUM_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    CMC_SUM_TRAN_SUM_N,
    CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_SUM_N,
    CMC_SUM_FINL_APRD_TRAN_SUM_N,
    CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    CMC_SUM_DOMS_TRAN_CNT_Q,
    CMC_SUM_OSEA_TRAN_CNT_Q,
    CMC_SUM_DOMS_TRAN_SUM_N,
    CMC_SUM_OSEA_TRAN_SUM_N,
    CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMC_SUM_3DS_TRAN_CNT_Q,
    CMC_SUM_N3D_TRAN_CNT_Q,
    CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMC_SUM_3DS_TRAN_SUM_N,
    CMC_SUM_N3D_TRAN_SUM_N,
    CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    CMC_SUM_ATM_TRAN_CNT_Q,
    CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    CMC_SUM_CHIP_TRAN_CNT_Q,
    CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    CMC_SUM_CARD_PRES_TRAN_SUM_N,
    CMC_SUM_ATM_TRAN_SUM_N,
    CMC_SUM_FALL_BACK_TRAN_SUM_N,
    CMC_SUM_CHIP_TRAN_SUM_N,
    CMC_SUM_PAY_PASS_TRAN_SUM_N,
    CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,4110896,4110.896000,68.514933,1.141916,2X-LARGE,32,36.541312
01be9b97-3204-bee5-0000-c71d2a865ab6,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-07-01'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-03-01' and '2025-07-01'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-03-01' and '2025-07-01') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMC_SUM_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    CMC_SUM_TRAN_SUM_N,
    CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_SUM_N,
    CMC_SUM_FINL_APRD_TRAN_SUM_N,
    CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    CMC_SUM_DOMS_TRAN_CNT_Q,
    CMC_SUM_OSEA_TRAN_CNT_Q,
    CMC_SUM_DOMS_TRAN_SUM_N,
    CMC_SUM_OSEA_TRAN_SUM_N,
    CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMC_SUM_3DS_TRAN_CNT_Q,
    CMC_SUM_N3D_TRAN_CNT_Q,
    CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMC_SUM_3DS_TRAN_SUM_N,
    CMC_SUM_N3D_TRAN_SUM_N,
    CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    CMC_SUM_ATM_TRAN_CNT_Q,
    CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    CMC_SUM_CHIP_TRAN_CNT_Q,
    CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    CMC_SUM_CARD_PRES_TRAN_SUM_N,
    CMC_SUM_ATM_TRAN_SUM_N,
    CMC_SUM_FALL_BACK_TRAN_SUM_N,
    CMC_SUM_CHIP_TRAN_SUM_N,
    CMC_SUM_PAY_PASS_TRAN_SUM_N,
    CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,3981421,3981.421000,66.357017,1.105950,2X-LARGE,32,35.390400
01bec0f6-3204-c1f3-0000-c71d2bb91f8a,"CREATE OR REPLACE TEMPORARY TABLE LABMLFRD.NT_RETRO_SAMPLE_TMP AS (
    SELECT TOP 1000

        tran.*
    
        -- -- Retro output
        -- retr.TRAN_IDNN_BK AS TRAN_I,
        -- CAST(retr.MODL_SCOR_V, FLOAT) AS MODL_SCOR_V,
        
    
        -- -- Cards transaction
        -- tran.SSX_CUST_NUM, -- CIF
        -- tran.CHL_ID_CARD_NUM, --Card number
        -- tran.CHL_CT_TERM_OWNER_ID, --merchant ID
        -- tran.CHL_CT_ACQ_ID -- acquirer ID
    FROM
        LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
    INNER JOIN
        PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_RETRO_SCORES retr
    ON 
        retr.TRAN_IDNN_BK = TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,7925725,7925.725000,132.095417,2.201590,X-LARGE,16,35.225440
01be9a70-3204-bee4-0000-c71d2a7c382e,"SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,3930494,3930.494000,65.508233,1.091804,2X-LARGE,32,34.937728
01bebc64-3204-c1f3-0000-c71d2b9b7516,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as 
(
WITH code1_data AS (
        SELECT DISTINCT

    -- Transaction datetime (parsed from alternate date/time fields)
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
    -- Transaction ID (concatenation of 3 fields)x
    ,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
    -- Snapshot date of transaction (parsed from MID_EVENT_TS)
    ,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
    -- Account identifier (bank, branch, account number)
    ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
    -- Party identifier (customer number padded)
    ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
    -- Transaction date (alternate format)
    ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d

    -- Feature from leaky.txt, no description
    ,dtl_ex_0_20s_001
    -- Feature from leaky.txt, no description
    -- ,dtl_ex_1_5s_01
    -- Customer number (must be present, dropped for modelling)
    ,SSX_CUST_NUM
    -- Transaction amount
    -- ,tgx_tran_amt
    -- -- Max 30-day risk score
    -- ,_l_max_30d_score
    -- -- BC risk score
    -- ,_l_bc_score
    -- -- Max 30-day mule risk score
    -- ,_l_max_30d_mule_score

    ,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

-- ,_l_adv_key_combo
-- ,_l_clpbrd_evnt
-- ,_l_concurrent_sess
-- ,_l_export_data
-- ,_l_import_data
-- ,_l_rat_in_sess
-- ,_l_is_rcnt_hrisk_sess
,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS

-- ,_l_scrn_broadcast
-- ,_l_delay_to_input_pi
-- ,_l_active_spoofing
-- ,_l_pmt_vloc_anom
-- ,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM

-- ,_l_accum_amt_anom
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM

-- ,_l_is_active_call
-- ,_l_is_long_sess
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,_L_TRUST_900
-- ,_L_TRUST_NEW_PAYEE
-- ,_L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE

-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYEE
-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYER
-- ,_L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,_l_cust_scamrisk_score
-- ,_b_recip_sum_short
-- ,_b_recip_sum_long
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG

-- ,_a_customer_age
-- ,_a_cust_sum_aaa_short
-- ,_a_cust_sum_aaa_long
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M

,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM

------------------
-- Keep other columns as VARCHAR (mostly text)
,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,_x_cif_recipient_new_cnt
-- ,_x_telstra_last_call_dur
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_3
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_2
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_4
-- ,REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '') as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
-- REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '') as _N_NEW_IP_LOGON_PCODE,
-- REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '') as _A_LOGON_198_IP_PC,
-- REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '') as _A_LOGON_NB_IP_PC,
-- COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,


,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE


,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT


-- ,_x_telstra_max_call_dur
-- -- ,_a_telstra_active_call
-- ,_a_telstra_tp_outbnd_avg_dur
-- ,_a_telstra_multi_calls
-- ,_a_crypto_mnthly_sum
,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
-- COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM

,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250717'
and     dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     TRAN_AMT > 0
order by    transactiondatetime
-- limit 10000
),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-17'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,

        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1

--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,7708631,7708.631000,128.477183,2.141286,X-LARGE,16,34.260576
01beb628-3204-c1f7-0000-c71d2b722e32,"(
WITH code1_data AS (
    SELECT DISTINCT

    -- Transaction datetime (parsed from alternate date/time fields)
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
    -- Transaction ID (concatenation of 3 fields)x
    ,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
    -- Snapshot date of transaction (parsed from MID_EVENT_TS)
    ,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
    -- Account identifier (bank, branch, account number)
    ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
    -- Party identifier (customer number padded)
    ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
    -- Transaction date (alternate format)
    ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d

    -- Feature from leaky.txt, no description
    ,dtl_ex_0_20s_001
    -- Feature from leaky.txt, no description
    ,dtl_ex_1_5s_01
    -- Customer number (must be present, dropped for modelling)
    ,SSX_CUST_NUM
    -- Transaction amount
    ,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
    -- Max 30-day risk score
    ,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
    -- BC risk score
    ,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
    -- Max 30-day mule risk score
    ,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE


,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT


,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250717'
and     dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-17'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,

        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1

--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,3489339,3489.339000,58.155650,0.969261,2X-LARGE,32,31.016352
01be9bf0-3204-bee5-0000-c71d2a892aa2,"(WITH code1_data AS (
    SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM
from        PRD_P01_DMN_FRAUMD.lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime
),

------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
code1_data2 as (
SELECT DISTINCT
(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list
from        PRD_P01_DMN_FRAUMD.lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
-- and     tran_amt > 0
-- order by    transactiondatetime
),
code1_data3 as(

SELECT DISTINCT
(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID 
-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        PRD_P01_DMN_FRAUMD.lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
-- and     tran_amt > 0
-- order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-16'
)

SELECT 
    c1.*,
    cd2.* EXCLUDE(TRAN_ID),
    cd3.* EXCLUDE(TRAN_ID),
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
LEFT JOIN code1_data2 cd2
ON c1.TRAN_ID = cd2.TRAN_ID
LEFT JOIN code1_data3 cd3
ON c1.TRAN_ID = cd3.TRAN_ID

ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,3442690,3442.690000,57.378167,0.956303,2X-LARGE,32,30.601696
01bea061-3204-bee5-0000-c71d2aa7bf22,"WITH code1_data AS (
    SELECT DISTINCT
--         TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
-- (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
-- TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d,
-- TO_DATE(SUBSTR(mid_event_ts, 1, 8), 'YYYYMMDD') as evnt_d,
-- TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
-- CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
-- CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250101'
and  mid_event_ts < '20250731'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2025-01-01'
    and SNAP_D < '2025-07-31'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK-- );  -- This implements NPP.SNAP_D >= RPF.SNAP_D
 
-- 'CUS' or 'HIP'",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,3400170,3400.170000,56.669500,0.944492,2X-LARGE,32,30.223744
01be5a85-3204-b87e-0000-c71d287b5fe2,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250813123510_scored as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO4('modelname=pipeline_it4_AUCPR_reduce_mojo_freeze_70cols_20250813123510.mojo', 
array_construct(
CHL_CT_TERM_OWNER_ID, CHL_CT_ACQ_ID, TRANSACTION_HOUR_DECI, CHL_CT_TERM_OWNER_NAME, _C_CRD_SAFE_MERCHANT, CHL_CT_TERM_CNTRY_CODE, _C_CC_CNP_VEL_6HR_COUNT_1, _C_CNP_MER_NM_5, _C_CNP_MER_NM_1, _C_CNP_MER_NM_3, DTL_CA_MERCH_CURR_CODE, _A_BTS_CUST_AGE, _C_CNP_MER_NM_2, _C_CC_GBL_N3D_1D_CNT_1, _C_CNP_MER_NM_4, DTL_EX_0_N_009, _C_CNP_MER_NM_CURR, DTL_CA_AUTH_SYS_DEC, _C_CC_CNP_LTRANS_6HR_COUNT_1, DTL_EX_0_2S_002, _C_CC_IND_TRAN_3D, _C_CC_CNP_VEL_6HR_SUM_1, _A_PREV_CAPP_DEVICE_CNT, _C_CRD_APAY_CNT_1, DTL_CA_AUTH_SYS_INFO, _A_CURR_CAPP_DEVICE_CNT, _C_CRD_CNP_TRN_CNT_5, ATH_PC_CUST_PRESENT, _C_CRD_CNP_TRN_SUM_1, DTL_EX_3_80S_002, _C_N3D_MERC_ID_SUM_1, CHL_CT_MER_MCC, _C_N3D_MERC_ID_SUM_2, _C_CC_GBL_N3D_1D_SUM_1, _A_P_L_C, _A_Q, SSA_C_CASH_LIMIT, DTL_CA_CLIENT_TRAN_TYPE, _C_CRD_CNP_TRN_CNT_2, _A_BTS_BCH_SUM, _C_CRD_CNP_TRN_SUM_3, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_SUM_3, _C_CRD_CNP_TRN_SUM_4, DTL_CA_CLIENT_AMT, DTL_CA_MERCH_AMT)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_VERENIIL_CNP_OOT_20250605
-- where to_date(transactiondatetime) < '2025-05-01'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,3337138,3337.138000,55.618967,0.926983,2X-LARGE,32,29.663456
01bebbcc-3204-c1f5-0000-c71d2b96ea4a,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as 
(
WITH code1_data AS (
        SELECT DISTINCT

    -- Transaction datetime (parsed from alternate date/time fields)
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
    -- Transaction ID (concatenation of 3 fields)x
    ,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
    -- Snapshot date of transaction (parsed from MID_EVENT_TS)
    ,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
    -- Account identifier (bank, branch, account number)
    ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
    -- Party identifier (customer number padded)
    ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
    -- Transaction date (alternate format)
    ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d

    -- Feature from leaky.txt, no description
    ,dtl_ex_0_20s_001
    -- Feature from leaky.txt, no description
    -- ,dtl_ex_1_5s_01
    -- Customer number (must be present, dropped for modelling)
    ,SSX_CUST_NUM
    -- Transaction amount
    -- ,tgx_tran_amt
    -- -- Max 30-day risk score
    -- ,_l_max_30d_score
    -- -- BC risk score
    -- ,_l_bc_score
    -- -- Max 30-day mule risk score
    -- ,_l_max_30d_mule_score

    ,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

-- ,_l_adv_key_combo
-- ,_l_clpbrd_evnt
-- ,_l_concurrent_sess
-- ,_l_export_data
-- ,_l_import_data
-- ,_l_rat_in_sess
-- ,_l_is_rcnt_hrisk_sess
,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS

-- ,_l_scrn_broadcast
-- ,_l_delay_to_input_pi
-- ,_l_active_spoofing
-- ,_l_pmt_vloc_anom
-- ,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM

-- ,_l_accum_amt_anom
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM

-- ,_l_is_active_call
-- ,_l_is_long_sess
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,_L_TRUST_900
-- ,_L_TRUST_NEW_PAYEE
-- ,_L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE

-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYEE
-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYER
-- ,_L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,_l_cust_scamrisk_score
-- ,_b_recip_sum_short
-- ,_b_recip_sum_long
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG

-- ,_a_customer_age
-- ,_a_cust_sum_aaa_short
-- ,_a_cust_sum_aaa_long
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M

-- ,_x_cif_recipient_new_sum
------------------
-- Keep other columns as VARCHAR (mostly text)
,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,_x_cif_recipient_new_cnt
-- ,_x_telstra_last_call_dur
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_3
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_2
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_4
-- ,REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '') as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
-- REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '') as _N_NEW_IP_LOGON_PCODE,
-- REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '') as _A_LOGON_198_IP_PC,
-- REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '') as _A_LOGON_NB_IP_PC,
-- COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,


,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT

-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE


,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT


-- ,_x_telstra_max_call_dur
-- -- ,_a_telstra_active_call
-- ,_a_telstra_tp_outbnd_avg_dur
-- ,_a_telstra_multi_calls
-- ,_a_crypto_mnthly_sum
-- COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
-- COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
-- COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM

,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250717'
and     dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     TRAN_AMT > 0
order by    transactiondatetime
-- limit 10000
),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-17'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,

        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1

--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,6599027,6599.027000,109.983783,1.833063,X-LARGE,16,29.329008
01bea02f-3204-bee5-0000-c71d2aa64862,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-03-01' and '2025-05-31'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-03-01' and '2025-05-31') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMC_SUM_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    CMC_SUM_TRAN_SUM_N,
    CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_SUM_N,
    CMC_SUM_FINL_APRD_TRAN_SUM_N,
    CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    CMC_SUM_DOMS_TRAN_CNT_Q,
    CMC_SUM_OSEA_TRAN_CNT_Q,
    CMC_SUM_DOMS_TRAN_SUM_N,
    CMC_SUM_OSEA_TRAN_SUM_N,
    CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMC_SUM_3DS_TRAN_CNT_Q,
    CMC_SUM_N3D_TRAN_CNT_Q,
    CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMC_SUM_3DS_TRAN_SUM_N,
    CMC_SUM_N3D_TRAN_SUM_N,
    CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    CMC_SUM_ATM_TRAN_CNT_Q,
    CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    CMC_SUM_CHIP_TRAN_CNT_Q,
    CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    CMC_SUM_CARD_PRES_TRAN_SUM_N,
    CMC_SUM_ATM_TRAN_SUM_N,
    CMC_SUM_FALL_BACK_TRAN_SUM_N,
    CMC_SUM_CHIP_TRAN_SUM_N,
    CMC_SUM_PAY_PASS_TRAN_SUM_N,
    CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,3262388,3262.388000,54.373133,0.906219,2X-LARGE,32,28.999008
01bddf77-3204-a61b-0000-c71d24f2499a,"execute notebook ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""GAREAJU 2025-05-28 13:40:55""()",GAREAJU,PUBLIC,3158003,3158.003000,52.633383,0.877223,2X-LARGE,32,28.071136
01be9ae6-3204-bee2-0000-c71d2a7fc416,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as 
(WITH code1_data AS (
    SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        PRD_P01_DMN_FRAUMD.lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-16'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,3140134,3140.134000,52.335567,0.872259,2X-LARGE,32,27.912288
01be77f8-3204-bb40-0000-c71d2973335e,"select 
    A.DTL_EX_0_20S_001, 
    A.ssx_cust_num,
    (A.dtl_ex_0_n_064 || A.dtl_ex_0_n_065 || A.dtl_ex_0_n_066) as TRAN_ID,
    CAST(A.dtl_ex_0_n_034 as DOUBLE) as score_baseline,
    B.*,
    from PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT A
    inner join (select * from PRD_P01_DMN_FRAUMD.LABMLFRD.techds_dehurysk_digital_retro_scam_20250805202111_scor) B
    on TRAN_ID = B.tran_id",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,6184702,6184.702000,103.078367,1.717973,X-LARGE,16,27.487568
01bdfb1f-3204-aa21-0000-c71d25bbc8b2,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""VVLVYQYQ846NIRCJ""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,3061138,3061.138000,51.018967,0.850316,2X-LARGE,32,27.210112
01bed1c6-3204-c558-0000-c71d2c3c9e0e,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg7d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-03-01' and '2025-06-06'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-03-01' and '2025-06-06') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,

    COALESCE(CAST(CMC_SUM_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_UPST_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_UPST_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_RULE_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_FINL_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_UPST_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FINL_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FDP_RULE_TRIG_CNT_Q AS FLOAT), -1) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    COALESCE(CAST(CMC_SUM_DOMS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_DOMS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_OSEA_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_OSEA_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_DOMS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_DOMS_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_OSEA_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_OSEA_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_3DS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_3DS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_N3D_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_N3D_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_3DS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_3DS_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_N3D_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_N3D_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CARD_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_ATM_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_ATM_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_FALL_BACK_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CHIP_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CHIP_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_PAY_PASS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CARD_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_ATM_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_ATM_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FALL_BACK_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CHIP_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CHIP_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_PAY_PASS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
    COALESCE(CAST(CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMC_MAX_CUV_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_RULE_PUSH_SENT_F,

    
    -- CMC_SUM_TRAN_CNT_Q,
    -- CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    -- CMC_SUM_TRAN_SUM_N,
    -- CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    -- CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    -- CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    -- CMC_SUM_UPST_APRD_TRAN_SUM_N,
    -- CMC_SUM_FINL_APRD_TRAN_SUM_N,
    -- CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    -- CMC_SUM_DOMS_TRAN_CNT_Q,
    -- CMC_SUM_OSEA_TRAN_CNT_Q,
    -- CMC_SUM_DOMS_TRAN_SUM_N,
    -- CMC_SUM_OSEA_TRAN_SUM_N,
    -- CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    -- CMC_SUM_3DS_TRAN_CNT_Q,
    -- CMC_SUM_N3D_TRAN_CNT_Q,
    -- CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    -- CMC_SUM_3DS_TRAN_SUM_N,
    -- CMC_SUM_N3D_TRAN_SUM_N,
    -- CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    -- CMC_SUM_ATM_TRAN_CNT_Q,
    -- CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    -- CMC_SUM_CHIP_TRAN_CNT_Q,
    -- CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    -- CMC_SUM_CARD_PRES_TRAN_SUM_N,
    -- CMC_SUM_ATM_TRAN_SUM_N,
    -- CMC_SUM_FALL_BACK_TRAN_SUM_N,
    -- CMC_SUM_CHIP_TRAN_SUM_N,
    -- CMC_SUM_PAY_PASS_TRAN_SUM_N,
    -- CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    -- CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    -- CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,6003681,6003.681000,100.061350,1.667689,X-LARGE,16,26.683024
01be8f03-3204-bee2-0000-c71d2a2a6ff2,"create or replace table LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE1 as 
(WITH code1_data AS (
    SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
,dtl_ex_0_20s_001
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,
        -- Blacklist and scam indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_acct,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl1_scam_tp_cif, '[^0-9.-]', '')), -1) as _b_list_rl1_scam_tp_cif,
        -- High-risk biller metrics
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_1,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_recip_flag,
        -- NPP outbound transaction metrics
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_2,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_sum_1,
                COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_sum_2, 
        -- -- NPP first-time payer metrics
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_1,
        -- NPP first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_2,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_2,
        -- Other risk indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_open_listed_last_cif_2, '[^0-9.-]', '')), -1) as _b_open_listed_last_cif_2,
        -- Recipient first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_long, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_long,
        -- Recipient link sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_short,
        -- Recipient transaction sums (various time periods)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_4, '[^0-9.-]', '')), -1) as _b_recip_sum_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_7, '[^0-9.-]', '')), -1) as _b_recip_sum_7,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_today, '[^0-9.-]', '')), -1) as _b_recip_sum_today,
        -- Recipient AAA transaction sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_1, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_4, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_short,
        -- Fixed: _b_rfm_whitelist_ind (was incorrectly aliased)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_rfm_whitelist_ind, '[^0-9.-]', '')), -1) as _b_rfm_whitelist_ind,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_1d_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_1d_out,
        
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added

,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT,
---newly added in itr3
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(RSP_ACTION_CODE, '[^0-9.-]', '')), -1) as RSP_ACTION_CODE,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_apps, '[^0-9.-]', '')), -1) as _l_risky_apps,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_browser, '[^0-9.-]', '')), -1) as _l_risky_browser,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_accel_event_cnt, '[^0-9.-]', '')), -1) as _l_accel_event_cnt,
        COALESCE(CAST(_l_recip_ftp AS VARCHAR(50)), '-1') as _l_recip_ftp,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_amt, '[^0-9.-]', '')), -1) as _l_risky_amt,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_tzone_mismatch, '[^0-9.-]', '')), -1) as _l_tzone_mismatch

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-16'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,2945455,2945.455000,49.090917,0.818182,2X-LARGE,32,26.181824
01bec629-3204-c1f1-0000-c71d2bde7aca,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""HF6LQX9C1ZU__PGH""()",WANGC34,R_USR_FRAUMD_LABMLFRD_RW,2940200,2940.200000,49.003333,0.816722,2X-LARGE,32,26.135104
01bdd3db-3204-a615-0000-c71d24a01192,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""F2KSZQG4AD3S4ZO0""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,2918587,2918.587000,48.643117,0.810719,2X-LARGE,32,25.943008
01bdda39-3204-a616-0000-c71d24ccf772,"execute notebook ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""GAREAJU 2025-05-28 13:40:55""()",GAREAJU,PUBLIC,2888066,2888.066000,48.134433,0.802241,2X-LARGE,32,25.671712
01beaa9c-3204-c1f3-0000-c71d2b0e5a3e,"CREATE OR REPLACE temporary TABLE transx AS 
select  
b.FRAUDTYPE
,b.DETECTION
,b.case_detection
,TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,ssx_cust_num AS XQO_CUST_NUM
,chl_id_ob_userid AS HQO_OB_USERID
,TRY_TO_NUMBER(tgx_tran_amt, 38, 2) as TRAN_AMT
,TRY_TO_NUMBER(_A_CUSTOMER_AGE, 38, 2) as _A_CUSTOMER_AGE
,TRY_TO_NUMBER(_L_SE_SCORE, 38, 2) as _L_SE_SCORE
,TRY_TO_NUMBER(_L_BC_SCORE, 38, 2) as _L_BC_SCORE
,TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 4) as CERBERUS_SCORE
,TGX_BANK_NAME
,TGX_BANK_NUM
,TGX_BRANCH_ID
,TGX_ACCT_NUM
,TGX_NAME
/* BC risk factors */
,_L_DPI_CHANGE 
,_L_NEW_DEV
,_L_RARE_SCRN_SZ
,_L_scrn_res_anom
,_l_lrg_dist_known_loc
,_L_NEW_BROWSER
,_L_NEW_DESKTOP_USER
,_L_IS_ACTIVE_CALL 
,_L_IS_LONG_SESS
,_L_NEW_MOB_BROWSER_USER
,_L_DEV_CHANGE_ANOM
,_L_TZONE_MISMATCH  
,dtl_ex_1_5s_01     /* task id */
,dtl_ex_0_i_002 as FTP_ind
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_n_client_details_view, 38, 2), '1960-01-01 00:00:00'::timestamp) as _n_client_details_view
,TRY_TO_NUMBER(_A_CAPP_LOGON_CNT_1, 38, 2) as _A_CAPP_LOGON_CNT_1 /* capp login counts within last 24 hours, 2 is between 24 and 48 hours etc */
,TRY_TO_NUMBER(_A_NB_LOGONS_CNT_1, 38, 2) as _A_NB_LOGONS_CNT_1
, _L_ADV_KEY_COMBO
,_A_TELSTRA_API_EVENT_ID /* this is task id e.g.C513B  */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_API_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _A_TELSTRA_API_EVENT_DT
,COALESCE(NULLIF(_A_TELSTRA_CALL_DURATION, ''), 0) / 60 as _A_TELSTRA_CALL_DURATION /* in minutes */
,_a_telstra_active_call 
,_l_trust_1000 
,_l_trust_900
,_L_PUSH_API_1
,_L_PUSH_API_2
,_L_PUSH_API_3
,_L_PUSH_API_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_RST_PSWD_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_RST_PSWD_DT /* reset password date */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') as _N_CLIENT_IDTO_PW
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_MOD_MOB_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_MOD_MOB_DT
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PHONE_CHG_ALL, 38, 2), '1960-01-01 00:00:00') as _A_PHONE_CHG_ALL /*mobile phone number change date*/
/* scam p indicators and dates */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT
,TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P21_MLW_DT
,TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT
,TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT
,TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND
/* CAPP rego */
,TRY_TO_NUMBER(_N_BC_NCRG_ATO_SCORE, 38, 2) as _N_BC_NCRG_ATO_SCORE
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_BC_NCRG_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _N_BC_NCRG_EVENT_DT
from        LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join   PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
    where   mid_event_ts >= '20250525'
    AND     mid_event_ts < '20250825'
order by    TRANSACTIONDATETIME;",WANGC34,R_USR_FRAUMD_ZRD_CUS,2842414,2842.414000,47.373567,0.789559,2X-LARGE,32,25.265888
01be9b0e-3204-bee4-0000-c71d2a805b02,"CREATE OR REPLACE TABLE PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D AS
select distinct tran_id,
SSX_CUST_NUM,
CHL_ID_CARD_NUM,
CHL_CT_TERM_OWNER_ID,
CHL_CT_ACQ_ID,
TRANSACTIONDATETIME,
TRANSACTION_HOUR,
DTL_CA_CLIENT_AMT,
_C_CC_GBL_N3D_1D_SUM_1,
_C_CC_HIGH_VEL_APPLE_SUM_1,
_C_CRD_APAY_CNT_1,
_C_CC_GBL_N3D_1D_CNT_1,
_C_CC_CNP_VEL_6HR_SUM_1,
_C_CRD_APAY_SUM_1,
_C_CRD_SAFE_MERCHANT,
_C_2WAY_CRD_FRD_RULE_FLAG,
_C_CC_CNP_LTRANS_6HR_COUNT_1,
_C_CC_CNP_VEL_6HR_COUNT_1,
_L_CITY_AGE,
_A_CRD_NPP_PAYMENT_AMOUNT,
_A_CLIENT_COUNTRY_CNT_3,
_A_CUSTOMER_AGE,
_A_CLIENT_COUNTRY_CNT_10,
_A_NPP_FTP_SUM,
_L_PASTE_IN_LOGIN_CNT,
_A_CUST_SUM_AAA_LONG,
_L_G_CON_DEV,
_L_DEV_FAM_AGE,
_L_TOUCH_CNT,
_B_RECIP_SUM_AAA_LONG,
_L_RISKY_KEY_COMBO,
_A_C_G,
_L_SCORE_4,
_A_E,
_A_NPP_INB_PMT_VAL,
_A_CLIENT_COUNTRY_CNT_2,
_A_PROF_CAPP_DEVICE_CNT_1,
_A_CRD_SCAM_SUPP_7D_SUM_1,
_A_CLIENT_CITY_CNT_2,
_L_UID_AGE,
_L_SCRN_W,
_L_ASN_AGE,
_L_SCORE_2,
_A_CUST_NPP_OUT_SUM_AAA_5,
_L_BC_SESS_CNT,
_L_ACC_AMT_1H,
_A_LIST_WL_SCAM_DRIVE_LICENSE,
_A_CC_CASH_ADVANCE_AMT,
_A_CUST_SUM_AAA_SHORT,
_A_P_L_1,
_L_PMT_AMT,
_L_ISP_AGE,
_L_ACC_AMT_7D,
_A_CLIENT_COUNTRY_CNT_7,
_L_CONCURRENT_SESS,
_A_CAPP_HCE_CNT_1,
_L_SCORE_5,
_L_MUID_AGE_PER_USER,
_A_CUST_ACCT_BAL,
_L_CUST_SCAMRISK_SCORE,
_A_ATM_WITHDRAWAL_SUM_AMT,
_L_TAP_CNT,
_A_LIST_WL_SCAM_TP_IP,
_L_MAX_30D_SCORE,
_B_RECIP_SUM_AAA_1,
_X_CIF_SENDER_SUM,
_L_M_L_1,
_L_SCRN_H,
_A_CUST_NPP_OUT_SUM_AAA_2,
_A_CUST_ACTION_IND,
_A_P_L_C,
_A_CUST_AVG_ACCT_BAL,
_L_AND_ID_AGE,
_X_CIF_REC_SUM,
_L_SESS_CNT_MOB_SDK,
_L_TOTAL_SESS_CNT,
_A_CURR_CAPP_DEVICE_NFTP_CNT,
_L_NC_ACCT_NUM_NAME_CONF,
_A_CLIENT_COUNTRY_CNT_5,
_A_U,
_B_RECIP_SUM_AAA_7,
_L_SCM_RSK_SCR_2,
_B_RECIP_SUM_AAA_4,
_L_BC_SCORE,
_L_DAYS_LST_DEV_AND,
_A_PROF_CAPP_DEVICE_CNT_3,
_L_DAYS_LST_DEV_IOS,
_X_LAST_N_TXN_COUNT,
_A_T,
_A_CUST_NPP_IN_SUM_AAA_2,
_L_MINS_LST_LGN_CAPPED,
_L_ACC_AMT_2H,
_L_ACC_AMT_4H,
_A_LIST_BL_PASSPORT,
_A_LIST_WL_SCAM_PASSPORT,
_A_LIST_BL_SCAM_PASSPORT,
_B_RECIP_SUM_AAA_6,
_A_PROF_CAPP_DEVICE_CNT_2,
_A_CLIENT_COUNTRY_CNT_6,
_A_BTS_BCH_SUM,
_A_BTS_CUST_AGE,
_A_CURR_CAPP_DEVICE_CNT,
_A_CURR_NB_BROWSER_CNT,
_A_PREV_CAPP_DEVICE_CNT,
_A_Q,
_A_R,
_L_CNTRY_AGE,
_A_NPP_IN_UNRELATED_SUM_24_1,
_X_FT_OVER5K_RECIP_CNT,
_X_CIF_RECIPIENT_NEW_CNT,
_A_NPP_IN_UNRELATED_SUM_24_2,
_B_NPP_OUT_SUM_1,
_L_ACC_AMT_1D,
_A_TRANSPORT_REG_CNT_1,
_A_MULTI_CNT,
_L_M_L_4,
_A_PROF_CAPP_DEVICE_NFTP_1,
_X_NAME_MATCH_CNT,
_A_PROF_CAPP_DEVICE_CNT_5,
_A_PROF_CAPP_DEVICE_CNT_4,
_L_SESS_CNT_WEB,
_B_RECIP_SUM_AAA_2,
_L_M_L_C,
_L_TIME_ZONE,
_A_CUST_NPP_IN_SUM_AAA_1,
_L_IP_AGE,
_A_NPP_INBOUND_SUM_AMT,
_X_FT_OVER5K_RECIP_SUM,
_X_CIF_SENDER_CNT,
_A_NB_LOGONS_CNT_2,
_A_CLC_FTP_AMT,
_L_TRVL_SPD,
_B_RECIP_SUM_LONG,
_A_CRYPTO_MNTHLY_SUM,
_A_GL_TRF_ACC_BAL,
_L_SESS_CNT_MOB_BROWSER,
_L_SCORE_3,
_A_CRD_CRYPTO_PROC_FLG,
_B_NPP_OUT_CNT_2,
_A_NPP_OUT_CNT_2,
_A_SCH_AMT,
_A_P_L_3,
_B_NPP_OUT_FTP_SUM_1,
_L_SDID_CNT_1,
_A_CUST_NPP_OUT_SUM_AAA_LONG,
_A_LIST_RL1_SCAM_CUST_CIF,
_L_NUM_SESS_2H,
_A_VPN_VPS_IP_LOGON_COUNT,
_A_GEO_DISTANCE,
_X_NAME_MATCH_IND,
_A_NB_LOGONS_CNT_3,
_L_DAYS_LST_DEV_JS,
_A_FTP_SUM_1,
_L_NUM_SESS_4H,
_L_NC_MATCH_NAME_CONF,
_B_RECIP_SUM_AAA_5,
_L_DPI_CHANGE,
_B_RECIP_SUM_1,
_A_SCAM_RISKY_MCC_PRELEAD_AMT,
_L_M_L_3,
_X_CIF_REC_CNT,
_A_LIST_BL_SCAM_TP_IP,
_B_CRYPTO_RISK,
_A_LIST_BL_SCAM_DRIVE_LICENSE,
_B_RECIP_SUM_AAA_SHORT,
_L_CLIPB_EVENT_CNT,
_B_LIST_RL1_SCAM_TP_CIF,
_B_NPP_BLACKLIST_RECIP_FLAG,
_A_CIF_ESTABLISH_CHANNEL,
_A_ECV_DOCUMENT_IP,
_A_CUST_OS_VER,
_A_CUST_OS_NAME,
_A_2WAY_TYPE,
_A_CLIENT_CITY_10,
_L_PUSH_API_1,
_L_PUSH_API_2,
_L_PUSH_API_3,
_L_PUSH_API_4,
_A_CLIENT_CITY_6,
_L_NC_WINNING_ALG,
_L_PROXY_TYPE,
_L_LANG_3,
_L_LANG_1,
_L_LANG_2,
_L_NC_RESPONSE_CODE,
_A_PROF_RISK_IND,
_A_LATEST_NCRG_ISP,
CHL_CT_TERM_OWNER_NAME,
_C_CNP_MER_NM_CURR,
DTL_EX_0_2S_002,
DTL_EX_3_80S_002,
_A_MRISK_FOREIGN_IP_CNTRY_CODE,
DTL_CA_AUTH_SYS_DEC,
CHL_CT_MER_MCC,
ATH_PC_CUST_PRESENT,
_A_CIF_ESTABLISH_CUST_PCODE,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_MERCH_CURR_CODE,
PARTY_TYPE,
GENDER,
DMC_CNT,
YCS_CNT,
TRAN_CNT,
DPST_CNT,
CC_CNT,
TRD_CNT,
PL_CNT,
INVST_CNT,
MORT_CNT,
INSRNC_CNT,
BTA_CNT,
BUS_LN_CNT,
OTH_CNT,
NTBNK_FAC,
REL_MNG,
FA_1,
FA_2,
NO_1,
NO_2,
FA,
FP,
GOVT_BENE,
PRVT_CUST,
HL_ASOC,
CORP_EMPL,
TRUSTEE,
INTL_STU,
MAR_STS_ORG_STR,
EMPL_CLAS_LGL_STS,
HOME_OWN,
_X_NPP_OUT_SUM_DATE_DIFF,
_A_CC_DT_DIFF,
_A_ONLINE_PL_DT_DIFF,
_A_CIF_ESTABLISH_DT_DIFF,
_A_ECV_DOCUMENT_DT_DIFF,
_A_AUTO_DEC_CP_PP_DT_DIFF,
_A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
_A_SCAMP1_MLW_DT_DIFF,
_A_SCAMP2_MLW_DT_DIFF,
_A_SCAMP5_MLW_DT_DIFF,
_A_SCAMP7_MLW_DT_DIFF,
_L_PUSH_API_DT_1_DIFF,
_L_PUSH_API_DT_2_DIFF,
_L_PUSH_API_DT_3_DIFF,
_L_PUSH_API_DT_4_DIFF,
TARGET,
CUS_SUM_TRAN_CNT_Q,
CUS_SUM_UPST_APRD_TRAN_CNT_Q,
CUS_SUM_TRAN_SUM_N,
CUS_SUM_UPST_DCLN_TRAN_CNT_Q,
CUS_SUM_RULE_DCLN_TRAN_CNT_Q,
CUS_SUM_FINL_APRD_TRAN_CNT_Q,
CUS_SUM_UPST_APRD_TRAN_SUM_N,
CUS_SUM_FINL_APRD_TRAN_SUM_N,
CUS_SUM_FDP_RULE_TRIG_CNT_Q,
CUS_SUM_DOMS_TRAN_CNT_Q,
CUS_SUM_OSEA_TRAN_CNT_Q,
CUS_SUM_DOMS_TRAN_SUM_N,
CUS_SUM_OSEA_TRAN_SUM_N,
CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CUS_SUM_CARD_PRES_TRAN_CNT_Q,
CUS_SUM_ATM_TRAN_CNT_Q,
CUS_SUM_FALL_BACK_TRAN_CNT_Q,
CUS_SUM_CHIP_TRAN_CNT_Q,
CUS_SUM_PAY_PASS_TRAN_CNT_Q,
CUS_SUM_CARD_PRES_TRAN_SUM_N,
CUS_SUM_ATM_TRAN_SUM_N,
CUS_SUM_FALL_BACK_TRAN_SUM_N,
CUS_SUM_CHIP_TRAN_SUM_N,
CUS_SUM_PAY_PASS_TRAN_SUM_N,
CUS_SUM_CAPP_PSWD_CHNG_CNT_Q,
CUS_SUM_CAPP_DVIC_REGR_CNT_Q,
CUS_SUM_CAPP_LOGN_CNT_Q,
CUS_SUM_NTB_LOGN_CNT_Q,
CUS_SUM_VIEW_CARD_DETL_CNT_Q,
CUS_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CUS_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CUS_MAX_C_2WAY_CRD_RULE_FLAG,
CRD_SUM_TRAN_CNT_Q,
CRD_SUM_UPST_APRD_TRAN_CNT_Q,
CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
CRD_SUM_FINL_APRD_TRAN_CNT_Q,
CRD_SUM_INCO_EXPY_CNT_Q,
CRD_SUM_INCO_CVVA_CNT_Q,
CRD_SUM_INCO_PIN_CNT_Q,
CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
CRD_SUM_TRAN_SUM_N,
CRD_SUM_UPST_APRD_TRAN_SUM_N,
CRD_SUM_UPST_DCLN_TRAN_SUM_N,
CRD_SUM_RULE_DCLN_TRAN_SUM_N,
CRD_SUM_FINL_APRD_TRAN_SUM_N,
CRD_SUM_INCO_EXPY_SUM_N,
CRD_SUM_INCO_CVVA_SUM_N,
CRD_SUM_INCO_PIN_SUM_N,
CRD_SUM_OVER_LIMT_DCLN_SUM_N,
CRD_SUM_FDP_RULE_TRIG_CNT_Q,
CRD_SUM_DOMS_TRAN_CNT_Q,
CRD_SUM_OSEA_TRAN_CNT_Q,
CRD_SUM_DOMS_TRAN_SUM_N,
CRD_SUM_OSEA_TRAN_SUM_N,
CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CRD_SUM_CARD_PRES_TRAN_CNT_Q,
CRD_SUM_ATM_TRAN_CNT_Q,
CRD_SUM_FALL_BACK_TRAN_CNT_Q,
CRD_SUM_CHIP_TRAN_CNT_Q,
CRD_SUM_PAY_PASS_TRAN_CNT_Q,
CRD_SUM_CARD_PRES_TRAN_SUM_N,
CRD_SUM_ATM_TRAN_SUM_N,
CRD_SUM_FALL_BACK_TRAN_SUM_N,
CRD_SUM_CHIP_TRAN_SUM_N,
CRD_SUM_PAY_PASS_TRAN_SUM_N,
CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
CRD_SUM_CAPP_LOGN_CNT_Q,
CRD_SUM_NTB_LOGN_CNT_Q,
CRD_SUM_VIEW_CARD_DETL_CNT_Q,
CRD_MAX_CARD_USER_VARY_HIGH_RISK_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_FRAU_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_WHLI_F,
CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F,
CMA_SUM_TRAN_CNT_Q,
CMA_SUM_UPST_APRD_TRAN_CNT_Q,
CMA_SUM_TRAN_SUM_N,
CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
CMA_SUM_FINL_APRD_TRAN_CNT_Q,
CMA_SUM_UPST_APRD_TRAN_SUM_N,
CMA_SUM_FINL_APRD_TRAN_SUM_N,
CMA_SUM_FDP_RULE_TRIG_CNT_Q,
CMA_SUM_DOMS_TRAN_CNT_Q,
CMA_SUM_OSEA_TRAN_CNT_Q,
CMA_SUM_DOMS_TRAN_SUM_N,
CMA_SUM_OSEA_TRAN_SUM_N,
CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CMA_SUM_CARD_PRES_TRAN_CNT_Q,
CMA_SUM_ATM_TRAN_CNT_Q,
CMA_SUM_FALL_BACK_TRAN_CNT_Q,
CMA_SUM_CHIP_TRAN_CNT_Q,
CMA_SUM_PAY_PASS_TRAN_CNT_Q,
CMA_SUM_CARD_PRES_TRAN_SUM_N,
CMA_SUM_ATM_TRAN_SUM_N,
CMA_SUM_FALL_BACK_TRAN_SUM_N,
CMA_SUM_CHIP_TRAN_SUM_N,
CMA_SUM_PAY_PASS_TRAN_SUM_N,
CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CMA_MAX_C_2WAY_CRD_RULE_FLAG,
CMC_SUM_TRAN_CNT_Q,
CMC_SUM_UPST_APRD_TRAN_CNT_Q,
CMC_SUM_TRAN_SUM_N,
CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
CMC_SUM_FINL_APRD_TRAN_CNT_Q,
CMC_SUM_UPST_APRD_TRAN_SUM_N,
CMC_SUM_FINL_APRD_TRAN_SUM_N,
CMC_SUM_FDP_RULE_TRIG_CNT_Q,
CMC_SUM_DOMS_TRAN_CNT_Q,
CMC_SUM_OSEA_TRAN_CNT_Q,
CMC_SUM_DOMS_TRAN_SUM_N,
CMC_SUM_OSEA_TRAN_SUM_N,
CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CMC_SUM_CARD_PRES_TRAN_CNT_Q,
CMC_SUM_ATM_TRAN_CNT_Q,
CMC_SUM_FALL_BACK_TRAN_CNT_Q,
CMC_SUM_CHIP_TRAN_CNT_Q,
CMC_SUM_PAY_PASS_TRAN_CNT_Q,
CMC_SUM_CARD_PRES_TRAN_SUM_N,
CMC_SUM_ATM_TRAN_SUM_N,
CMC_SUM_FALL_BACK_TRAN_SUM_N,
CMC_SUM_CHIP_TRAN_SUM_N,
CMC_SUM_PAY_PASS_TRAN_SUM_N,
CMC_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CMC_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CMC_MAX_C_2WAY_CRD_RULE_FLAG,
MAQ_SUM_TRAN_CNT_Q,
MAQ_SUM_UPST_APRD_TRAN_CNT_Q,
MAQ_SUM_TRAN_SUM_N,
MAQ_SUM_UPST_DCLN_TRAN_CNT_Q,
MAQ_SUM_RULE_DCLN_TRAN_CNT_Q,
MAQ_SUM_FINL_APRD_TRAN_CNT_Q,
MAQ_SUM_UPST_APRD_TRAN_SUM_N,
MAQ_SUM_FINL_APRD_TRAN_SUM_N,
MAQ_SUM_FDP_RULE_TRIG_CNT_Q,
MAQ_SUM_DOMS_TRAN_CNT_Q,
MAQ_SUM_OSEA_TRAN_CNT_Q,
MAQ_SUM_DOMS_TRAN_SUM_N,
MAQ_SUM_OSEA_TRAN_SUM_N,
MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N,
MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
MAQ_SUM_CARD_PRES_TRAN_CNT_Q,
MAQ_SUM_ATM_TRAN_CNT_Q,
MAQ_SUM_FALL_BACK_TRAN_CNT_Q,
MAQ_SUM_CHIP_TRAN_CNT_Q,
MAQ_SUM_PAY_PASS_TRAN_CNT_Q,
MAQ_SUM_CARD_PRES_TRAN_SUM_N,
MAQ_SUM_ATM_TRAN_SUM_N,
MAQ_SUM_FALL_BACK_TRAN_SUM_N,
MAQ_SUM_CHIP_TRAN_SUM_N,
MAQ_SUM_PAY_PASS_TRAN_SUM_N,
from PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,2820763,2820.763000,47.012717,0.783545,2X-LARGE,32,25.073440
01bde9ef-3204-aa20-0000-c71d25428ade,"SELECT 
    sum(case when COALESCE(TRIM(t1.ssx_cust_num), '') = '' then 1 else 0 end) as null_cust_tran_nums,
    sum(case when COALESCE(TRIM(t1.ssx_cust_num), '') <> '' then 1 else 0 end) as populated_cust_tran_nums,
    sum(1) as total
FROM
    PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT AS t1
JOIN LCL.CARD_ASES_BTCH_PEGA_CURR_STG AS p
    ON (
        (
            p.BUSN_D = TO_DATE('2025-07-18')
            AND (
                (p.custid IS NOT NULL AND p.custid <> '' AND t1.ssx_cust_num = p.custid)
                OR
                (p.custid IS NULL OR p.custid = '' AND t1.chl_id_card_num = p.basecrdnumber)
            )
        )
    )
WHERE 
    t1.tts_tran_date_client >= TO_CHAR(DATEADD(month, -6, CURRENT_DATE), 'YYYYMMDD')",SAKKAIB,R_USR_FRAUMD_LABMLFRD_RW,5640469,5640.469000,94.007817,1.566797,X-LARGE,16,25.068752
01bdfaf2-3204-aa1e-0000-c71d25ba790a,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""F2KSZQG4AD3S4ZO0""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,2725571,2725.571000,45.426183,0.757103,2X-LARGE,32,24.227296
01bea18e-3204-bee4-0000-c71d2ab6378e,"CREATE OR REPLACE TABLE PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D AS
SELECT 
    a.*,
    b.CUS_SUM_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_CNT_Q,
    b.CUS_SUM_TRAN_SUM_N,
    b.CUS_SUM_UPST_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_RULE_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_FINL_APRD_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_SUM_N,
    b.CUS_SUM_FINL_APRD_TRAN_SUM_N,
    b.CUS_SUM_FDP_RULE_TRIG_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_CNT_Q,
    b.CUS_SUM_OSEA_TRAN_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_SUM_N,
    b.CUS_SUM_OSEA_TRAN_SUM_N,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    b.CUS_SUM_3DS_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    b.CUS_SUM_N3D_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    b.CUS_SUM_3DS_TRAN_SUM_N as CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    b.CUS_SUM_N3D_TRAN_SUM_N as CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    b.CUS_SUM_CARD_PRES_TRAN_CNT_Q,
    b.CUS_SUM_ATM_TRAN_CNT_Q,
    b.CUS_SUM_FALL_BACK_TRAN_CNT_Q,
    b.CUS_SUM_CHIP_TRAN_CNT_Q,
    b.CUS_SUM_PAY_PASS_TRAN_CNT_Q,
    b.CUS_SUM_CARD_PRES_TRAN_SUM_N,
    b.CUS_SUM_ATM_TRAN_SUM_N,
    b.CUS_SUM_FALL_BACK_TRAN_SUM_N,
    b.CUS_SUM_CHIP_TRAN_SUM_N,
    b.CUS_SUM_PAY_PASS_TRAN_SUM_N,
    b.CUS_SUM_CAPP_PSWD_CHNG_CNT_Q,
    b.CUS_SUM_CAPP_DVIC_REGR_CNT_Q,
    b.CUS_SUM_CAPP_LOGN_CNT_Q,
    b.CUS_SUM_NTB_LOGN_CNT_Q,
    b.CUS_SUM_VIEW_CARD_DETL_CNT_Q,
    b.CUS_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    b.CUS_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    b.CUS_MAX_CUV_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_RULE_FLAG,
    d.CRD_SUM_TRAN_CNT_Q,
    d.CRD_SUM_UPST_APRD_TRAN_CNT_Q,
    d.CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_FINL_APRD_TRAN_CNT_Q,
    d.CRD_SUM_INCO_EXPY_CNT_Q,
    d.CRD_SUM_INCO_CVVA_CNT_Q,
    d.CRD_SUM_INCO_PIN_CNT_Q,
    d.CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
    d.CRD_SUM_TRAN_SUM_N,
    d.CRD_SUM_UPST_APRD_TRAN_SUM_N,
    d.CRD_SUM_UPST_DCLN_TRAN_SUM_N,
    d.CRD_SUM_RULE_DCLN_TRAN_SUM_N,
    d.CRD_SUM_FINL_APRD_TRAN_SUM_N,
    d.CRD_SUM_INCO_EXPY_SUM_N,
    d.CRD_SUM_INCO_CVVA_SUM_N,
    d.CRD_SUM_INCO_PIN_SUM_N,
    d.CRD_SUM_OVER_LIMT_DCLN_SUM_N,
    d.CRD_SUM_FDP_RULE_TRIG_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_CNT_Q,
    d.CRD_SUM_OSEA_TRAN_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_SUM_N,
    d.CRD_SUM_OSEA_TRAN_SUM_N,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    d.CRD_SUM_3DS_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    d.CRD_SUM_N3D_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    d.CRD_SUM_3DS_TRAN_SUM_N as CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    d.CRD_SUM_N3D_TRAN_SUM_N as CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    d.CRD_SUM_CARD_PRES_TRAN_CNT_Q,
    d.CRD_SUM_ATM_TRAN_CNT_Q,
    d.CRD_SUM_FALL_BACK_TRAN_CNT_Q,
    d.CRD_SUM_CHIP_TRAN_CNT_Q,
    d.CRD_SUM_PAY_PASS_TRAN_CNT_Q,
    d.CRD_SUM_CARD_PRES_TRAN_SUM_N,
    d.CRD_SUM_ATM_TRAN_SUM_N,
    d.CRD_SUM_FALL_BACK_TRAN_SUM_N,
    d.CRD_SUM_CHIP_TRAN_SUM_N,
    d.CRD_SUM_PAY_PASS_TRAN_SUM_N,
    d.CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
    d.CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
    d.CRD_SUM_CAPP_LOGN_CNT_Q,
    d.CRD_SUM_NTB_LOGN_CNT_Q,
    d.CRD_SUM_VIEW_CARD_DETL_CNT_Q,
    d.CRD_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_HIGH_RISK_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_FRAU_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_WHLI_F as CRD_MAX_CARD_USER_VARY_WHLI_F,
    d.CRD_MAX_CUV_DO_NOT_CTCT_F as CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F,
    f.CMA_SUM_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    f.CMA_SUM_TRAN_SUM_N,
    f.CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_SUM_N,
    f.CMA_SUM_FINL_APRD_TRAN_SUM_N,
    f.CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_CNT_Q,
    f.CMA_SUM_OSEA_TRAN_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_SUM_N,
    f.CMA_SUM_OSEA_TRAN_SUM_N,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    f.CMA_SUM_3DS_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    f.CMA_SUM_N3D_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    f.CMA_SUM_3DS_TRAN_SUM_N as CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    f.CMA_SUM_N3D_TRAN_SUM_N as CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    f.CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    f.CMA_SUM_ATM_TRAN_CNT_Q,
    f.CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    f.CMA_SUM_CHIP_TRAN_CNT_Q,
    f.CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    f.CMA_SUM_CARD_PRES_TRAN_SUM_N,
    f.CMA_SUM_ATM_TRAN_SUM_N,
    f.CMA_SUM_FALL_BACK_TRAN_SUM_N,
    f.CMA_SUM_CHIP_TRAN_SUM_N,
    f.CMA_SUM_PAY_PASS_TRAN_SUM_N,
    f.CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    f.CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    f.CMA_MAX_CUV_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_RULE_FLAG,
    g.CMC_SUM_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    g.CMC_SUM_TRAN_SUM_N,
    g.CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_SUM_N,
    g.CMC_SUM_FINL_APRD_TRAN_SUM_N,
    g.CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_CNT_Q,
    g.CMC_SUM_OSEA_TRAN_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_SUM_N,
    g.CMC_SUM_OSEA_TRAN_SUM_N,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    g.CMC_SUM_3DS_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    g.CMC_SUM_N3D_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    g.CMC_SUM_3DS_TRAN_SUM_N as CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    g.CMC_SUM_N3D_TRAN_SUM_N as CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    g.CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    g.CMC_SUM_ATM_TRAN_CNT_Q,
    g.CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    g.CMC_SUM_CHIP_TRAN_CNT_Q,
    g.CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    g.CMC_SUM_CARD_PRES_TRAN_SUM_N,
    g.CMC_SUM_ATM_TRAN_SUM_N,
    g.CMC_SUM_FALL_BACK_TRAN_SUM_N,
    g.CMC_SUM_CHIP_TRAN_SUM_N,
    g.CMC_SUM_PAY_PASS_TRAN_SUM_N,
    g.CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    g.CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    g.CMC_MAX_CUV_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_RULE_FLAG,
    h.MAQ_SUM_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_TRAN_SUM_N,
    h.MAQ_SUM_UPST_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_RULE_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_FINL_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FINL_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FDP_RULE_TRIG_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_CNT_Q,
    h.MAQ_SUM_OSEA_TRAN_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_SUM_N,
    h.MAQ_SUM_OSEA_TRAN_SUM_N,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_3DS_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    h.MAQ_SUM_N3D_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    h.MAQ_SUM_3DS_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    h.MAQ_SUM_N3D_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    h.MAQ_SUM_CARD_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_ATM_TRAN_CNT_Q,
    h.MAQ_SUM_FALL_BACK_TRAN_CNT_Q,
    h.MAQ_SUM_CHIP_TRAN_CNT_Q,
    h.MAQ_SUM_PAY_PASS_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_PRES_TRAN_SUM_N,
    h.MAQ_SUM_ATM_TRAN_SUM_N,
    h.MAQ_SUM_FALL_BACK_TRAN_SUM_N,
    h.MAQ_SUM_CHIP_TRAN_SUM_N,
    h.MAQ_SUM_PAY_PASS_TRAN_SUM_N
FROM 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT a
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_tran_prfl_agg2d b
ON 
    a.ssx_cust_num = b.cust_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = b.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_card_tran_prfl_agg2d d
ON 
    a.CHL_ID_CARD_NUM = d.card_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = d.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg2d f
ON 
    a.ssx_cust_num = f.cust_i and a.chl_ct_term_owner_id = f.merc_i and a.chl_ct_acq_id = f.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = f.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg2d g
ON 
    a.CHL_ID_CARD_NUM = g.card_i and a.chl_ct_mer_mcc = g.merc_catg_c
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = g.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_merc_acqr_tran_prfl_agg2d h
ON 
    a.chl_ct_term_owner_id = h.merc_i and a.chl_ct_acq_id = h.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = h.WINDOW_START_DATE

;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,2692814,2692.814000,44.880233,0.748004,2X-LARGE,32,23.936128
01bf0f02-3204-c93c-0000-c71d2dfcabc2,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_sai_csr_it5_7day_20250911064113_scored as
(
select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_SCAMS_RETRO_TEST_SAI_MOJO('modelname=pipeline_it5_F2_xval_7day_all_redmojsiz_20250911064113.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_CNT_1, _C_CRD_SAFE_MERCHANT, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_SCORE_2, _L_BC_SESS_CNT, _A_CC_CASH_ADVANCE_AMT, _A_P_L_1, _L_PMT_AMT, _A_CLIENT_COUNTRY_CNT_7, _L_MUID_AGE_PER_USER, _L_CUST_SCAMRISK_SCORE, _L_MAX_30D_SCORE, _L_SCRN_H, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_CLIENT_COUNTRY_CNT_5, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _L_CNTRY_AGE, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _L_SESS_CNT_WEB, _L_IP_AGE, _A_CLC_FTP_AMT, _A_CRYPTO_MNTHLY_SUM, _L_SESS_CNT_MOB_BROWSER, _A_P_L_3, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _L_PUSH_API_1, _L_PUSH_API_2, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, CC_CNT, FA_1, NO_1, GOVT_BENE, CORP_EMPL, MAR_STS_ORG_STR, HOME_OWN, _A_CC_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_UPST_DCLN_TRAN_CNT_Q, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_CNT_Q, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_CHIP_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N
)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG7D_OOT
)
;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,2683624,2683.624000,44.727067,0.745451,2X-LARGE,32,23.854432
01be99aa-3204-bee3-0000-c71d2a7700ca,"create or replace table LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as 
(WITH code1_data AS (
    SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-16'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,2668212,2668.212000,44.470200,0.741170,2X-LARGE,32,23.717440
01be9e39-3204-bee5-0000-c71d2a9794da,"create or replace temporary table Digital_Transactions as
select    
    b.fraudtype,
    b.DETECTION,
    b.case_detection,
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') as _B_ANY_CUST_FTP_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00') as _x_cif_recipient_new_date,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_BC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _L_BC_EVENT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SCM_RSK_HGH_DT, 38, 2), '1960-01-01 00:00:00') as _L_SCM_RSK_HGH_DT,
    _L_NC_RESPONSE_CODE,
    dtl_ex_0_20s_001 AS RECEIPT_NUM,
    (a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID,
    cmx_tran_id,
    hdr_activity_type,
    ssx_cust_num,
    chl_id_ob_userid,
    chl_id_pb_userid,
    dtl_ex_1_5s_01 as dmx_5byte_string_01,
    _a_cse_chg_dwl_ind AS DWL_change,
    dtl_ex_0_n_006 as Task_ID,
    dtl_ex_0_i_002 AS FTP_Indicator_1,
    rsp_ex_2_i_006 AS FTP_Indicator_2,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_SUM, 38, 2) as _X_CIF_RECIPIENT_SUM,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_SUM, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM,
    TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2) as _x_cif_recipient_new_cnt,
    TRY_TO_NUMBER(TGX_TRAN_AMT) AS TGX_TRAN_AMT,
    TRY_TO_NUMBER(_A_BTS_CUST_AGE, 38, 2)as _A_BTS_CUST_AGE,
    tgx_bank_name,
    tgx_bank_num,
    tgx_branch_id,
    tgx_acct_num,
    tgx_name,
    _L_ACCT_NUM,
    _L_BANK_NUM,
    _l_branch_id, 
    DTL_EX_3_80S_003 AS pmt_description_1,
    tgx_description AS pmt_description_2,
    TRY_TO_NUMBER(_L_SCM_RSK_HGH_SCR, 38, 2) as _L_SCM_RSK_HGH_SCR,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 5) as CERBERUS_SCORE,
    TRY_TO_NUMBER(_L_CUST_SCAMRISK_SCORE, 38, 2) as _L_CUST_SCAMRISK_SCORE,
    TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE,
    TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_S,
    TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2) as _l_max_30d_mule_score,
    TRY_TO_NUMBER(_L_NUM_SESS_2H, 38, 2) as _L_NUM_SESS_2H,
    TRY_TO_NUMBER(_L_NUM_SESS_4H, 38, 2) as _L_NUM_SESS_4H,
    TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE,38,2) as _L_TRUST_NEW_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE,38,2) as _L_TRUST_UNUSED_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN,38,2) as _L_TRUST_PAYEE_HIGH_VLOC_IN,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT,38,2) as _L_TRUST_PAYEE_DORM_ACCT,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYER,
    TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev,38,2) as _l_rcnt_hi_scr_on_dev,
    TRY_TO_NUMBER(_B_RECIP_SUM_LONG, 38, 2) as _B_RECIP_SUM_LONG,
    TRY_TO_NUMBER(_B_RECIP_SUM_SHORT, 38, 2) as _B_RECIP_SUM_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_1, 38, 2) as _B_RECIP_FTP_CNT_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_2, 38, 2) as _B_RECIP_FTP_CNT_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_3, 38, 2) as _B_RECIP_FTP_CNT_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_4, 38, 2) as _B_RECIP_FTP_CNT_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_5, 38, 2) as _B_RECIP_FTP_CNT_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_6, 38, 2) as _B_RECIP_FTP_CNT_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_7, 38, 2) as _B_RECIP_FTP_CNT_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_CNT_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_CNT_DATE,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_LONG, 38, 2) as _B_RECIP_FTP_CNT_LONG,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_SHORT, 38, 2) as _B_RECIP_FTP_CNT_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_1, 38, 2) as _B_RECIP_FTP_SUM_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_2, 38, 2) as _B_RECIP_FTP_SUM_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_3, 38, 2) as _B_RECIP_FTP_SUM_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_4, 38, 2) as _B_RECIP_FTP_SUM_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_5, 38, 2) as _B_RECIP_FTP_SUM_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_6, 38, 2) as _B_RECIP_FTP_SUM_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_7, 38, 2) as _B_RECIP_FTP_SUM_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_SUM_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_SUM_DATE,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_1, 38, 2) as _a_npp_in_unrelated_sum_24_1,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_2, 38, 2) as _a_npp_in_unrelated_sum_24_2,
    TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1,
	TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2,
	TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3,
	TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4,
	TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5,
	TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6,
	TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7,
	TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1,
	TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2,
	TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3,
	TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4,
	TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5,
	TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6,
	TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_1, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_2, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_3, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_1, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_7, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_7,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_LONG, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_LONG,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_SHORT, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP5_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP5_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP6_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP6_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP7_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP7_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP1_MLW_IND, 38, 2) as _A_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP2_MLW_IND, 38, 2) as _A_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP3_MLW_IND, 38, 2) as _A_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP4_MLW_IND, 38, 2) as _A_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP5_MLW_IND, 38, 2) as _A_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP6_MLW_IND, 38, 2) as _A_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP7_MLW_IND, 38, 2) as _A_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP_MLW_IND, 38, 2) as _A_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MOUSE_MV_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_MOUSE_MV_MLW_DT,
    TRY_TO_NUMBER(_N_MOUSE_MV_MLW_IND, 38, 2) as _N_MOUSE_MV_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_1, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_2, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_3, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_4, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_5, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_5,
    _N_5_RCNT_M100S_1,
    _N_5_RCNT_M100S_2,
    _N_5_RCNT_M100S_3,
    _N_5_RCNT_M100S_4,
    _N_5_RCNT_M100S_5,
    TRY_TO_NUMBER(_N_M100_P8_IND, 38, 2) as _N_M100_P8_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P8_IND_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P8_IND_DT,
    TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND,
    TRY_TO_NUMBER(_N_P20_7D_CNT_1, 38, 2) as _N_P20_7D_CNT_1,
    TRY_TO_NUMBER(_N_P20_7D_CNT_2, 38, 2) as _N_P20_7D_CNT_2,
    TRY_TO_NUMBER(_N_P20_7D_CNT_3, 38, 2) as _N_P20_7D_CNT_3,
    TRY_TO_NUMBER(_N_P20_7D_CNT_4, 38, 2) as _N_P20_7D_CNT_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_P20_7D_CNT_DT, 38, 2), '1960-01-01 00:00:00') as _N_P20_7D_CNT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP21_MLW_IND, 38, 2) as _A_SCAMP21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP21_MLW_IND, 38, 2) as _N_SCAMP21_MLW_IND,
    _L_PUSH_API_1,
    _L_PUSH_API_2,
    _L_PUSH_API_3,
    _L_PUSH_API_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,3,1),1.) as HOME_LOAN_IND,
    TRY_TO_NUMBER(substr(_l_Fingerprint_1,11,1),1.) as MORTGAGE_ACC,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,7,1),1.) as INCOME_BANDS,
    TRY_TO_NUMBER(substr(dtl_ex_0_20s_004,14,1),1.) as HOME_OWNER_STATUS
from LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
    on a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where mid_event_ts >= '20250701'
and mid_event_ts <= '20250801';",ZAIDIS2,PUBLIC,2616484,2616.484000,43.608067,0.726801,2X-LARGE,32,23.257632
01bea1c7-3204-c132-0000-c71d2ab8749a,"CREATE OR REPLACE TABLE PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D AS
select distinct tran_id,
SSX_CUST_NUM,
CHL_ID_CARD_NUM,
CHL_CT_TERM_OWNER_ID,
CHL_CT_ACQ_ID,
TRANSACTIONDATETIME,
TRANSACTION_HOUR,
DTL_CA_CLIENT_AMT,
_C_CC_GBL_N3D_1D_SUM_1,
_C_CC_HIGH_VEL_APPLE_SUM_1,
_C_CRD_APAY_CNT_1,
_C_CC_GBL_N3D_1D_CNT_1,
_C_CC_CNP_VEL_6HR_SUM_1,
_C_CRD_APAY_SUM_1,
_C_CRD_SAFE_MERCHANT,
_C_2WAY_CRD_FRD_RULE_FLAG,
_C_CC_CNP_LTRANS_6HR_COUNT_1,
_C_CC_CNP_VEL_6HR_COUNT_1,
_L_CITY_AGE,
_A_CRD_NPP_PAYMENT_AMOUNT,
_A_CLIENT_COUNTRY_CNT_3,
_A_CUSTOMER_AGE,
_A_CLIENT_COUNTRY_CNT_10,
_A_NPP_FTP_SUM,
_L_PASTE_IN_LOGIN_CNT,
_A_CUST_SUM_AAA_LONG,
_L_G_CON_DEV,
_L_DEV_FAM_AGE,
_L_TOUCH_CNT,
_B_RECIP_SUM_AAA_LONG,
_L_RISKY_KEY_COMBO,
_A_C_G,
_L_SCORE_4,
_A_E,
_A_NPP_INB_PMT_VAL,
_A_CLIENT_COUNTRY_CNT_2,
_A_PROF_CAPP_DEVICE_CNT_1,
_A_CRD_SCAM_SUPP_7D_SUM_1,
_A_CLIENT_CITY_CNT_2,
_L_UID_AGE,
_L_SCRN_W,
_L_ASN_AGE,
_L_SCORE_2,
_A_CUST_NPP_OUT_SUM_AAA_5,
_L_BC_SESS_CNT,
_L_ACC_AMT_1H,
_A_LIST_WL_SCAM_DRIVE_LICENSE,
_A_CC_CASH_ADVANCE_AMT,
_A_CUST_SUM_AAA_SHORT,
_A_P_L_1,
_L_PMT_AMT,
_L_ISP_AGE,
_L_ACC_AMT_7D,
_A_CLIENT_COUNTRY_CNT_7,
_L_CONCURRENT_SESS,
_A_CAPP_HCE_CNT_1,
_L_SCORE_5,
_L_MUID_AGE_PER_USER,
_A_CUST_ACCT_BAL,
_L_CUST_SCAMRISK_SCORE,
_A_ATM_WITHDRAWAL_SUM_AMT,
_L_TAP_CNT,
_A_LIST_WL_SCAM_TP_IP,
_L_MAX_30D_SCORE,
_B_RECIP_SUM_AAA_1,
_X_CIF_SENDER_SUM,
_L_M_L_1,
_L_SCRN_H,
_A_CUST_NPP_OUT_SUM_AAA_2,
_A_CUST_ACTION_IND,
_A_P_L_C,
_A_CUST_AVG_ACCT_BAL,
_L_AND_ID_AGE,
_X_CIF_REC_SUM,
_L_SESS_CNT_MOB_SDK,
_L_TOTAL_SESS_CNT,
_A_CURR_CAPP_DEVICE_NFTP_CNT,
_L_NC_ACCT_NUM_NAME_CONF,
_A_CLIENT_COUNTRY_CNT_5,
_A_U,
_B_RECIP_SUM_AAA_7,
_L_SCM_RSK_SCR_2,
_B_RECIP_SUM_AAA_4,
_L_BC_SCORE,
_L_DAYS_LST_DEV_AND,
_A_PROF_CAPP_DEVICE_CNT_3,
_L_DAYS_LST_DEV_IOS,
_X_LAST_N_TXN_COUNT,
_A_T,
_A_CUST_NPP_IN_SUM_AAA_2,
_L_MINS_LST_LGN_CAPPED,
_L_ACC_AMT_2H,
_L_ACC_AMT_4H,
_A_LIST_BL_PASSPORT,
_A_LIST_WL_SCAM_PASSPORT,
_A_LIST_BL_SCAM_PASSPORT,
_B_RECIP_SUM_AAA_6,
_A_PROF_CAPP_DEVICE_CNT_2,
_A_CLIENT_COUNTRY_CNT_6,
_A_BTS_BCH_SUM,
_A_BTS_CUST_AGE,
_A_CURR_CAPP_DEVICE_CNT,
_A_CURR_NB_BROWSER_CNT,
_A_PREV_CAPP_DEVICE_CNT,
_A_Q,
_A_R,
_L_CNTRY_AGE,
_A_NPP_IN_UNRELATED_SUM_24_1,
_X_FT_OVER5K_RECIP_CNT,
_X_CIF_RECIPIENT_NEW_CNT,
_A_NPP_IN_UNRELATED_SUM_24_2,
_B_NPP_OUT_SUM_1,
_L_ACC_AMT_1D,
_A_TRANSPORT_REG_CNT_1,
_A_MULTI_CNT,
_L_M_L_4,
_A_PROF_CAPP_DEVICE_NFTP_1,
_X_NAME_MATCH_CNT,
_A_PROF_CAPP_DEVICE_CNT_5,
_A_PROF_CAPP_DEVICE_CNT_4,
_L_SESS_CNT_WEB,
_B_RECIP_SUM_AAA_2,
_L_M_L_C,
_L_TIME_ZONE,
_A_CUST_NPP_IN_SUM_AAA_1,
_L_IP_AGE,
_A_NPP_INBOUND_SUM_AMT,
_X_FT_OVER5K_RECIP_SUM,
_X_CIF_SENDER_CNT,
_A_NB_LOGONS_CNT_2,
_A_CLC_FTP_AMT,
_L_TRVL_SPD,
_B_RECIP_SUM_LONG,
_A_CRYPTO_MNTHLY_SUM,
_A_GL_TRF_ACC_BAL,
_L_SESS_CNT_MOB_BROWSER,
_L_SCORE_3,
_A_CRD_CRYPTO_PROC_FLG,
_B_NPP_OUT_CNT_2,
_A_NPP_OUT_CNT_2,
_A_SCH_AMT,
_A_P_L_3,
_B_NPP_OUT_FTP_SUM_1,
_L_SDID_CNT_1,
_A_CUST_NPP_OUT_SUM_AAA_LONG,
_A_LIST_RL1_SCAM_CUST_CIF,
_L_NUM_SESS_2H,
_A_VPN_VPS_IP_LOGON_COUNT,
_A_GEO_DISTANCE,
_X_NAME_MATCH_IND,
_A_NB_LOGONS_CNT_3,
_L_DAYS_LST_DEV_JS,
_A_FTP_SUM_1,
_L_NUM_SESS_4H,
_L_NC_MATCH_NAME_CONF,
_B_RECIP_SUM_AAA_5,
_L_DPI_CHANGE,
_B_RECIP_SUM_1,
_A_SCAM_RISKY_MCC_PRELEAD_AMT,
_L_M_L_3,
_X_CIF_REC_CNT,
_A_LIST_BL_SCAM_TP_IP,
_B_CRYPTO_RISK,
_A_LIST_BL_SCAM_DRIVE_LICENSE,
_B_RECIP_SUM_AAA_SHORT,
_L_CLIPB_EVENT_CNT,
_B_LIST_RL1_SCAM_TP_CIF,
_B_NPP_BLACKLIST_RECIP_FLAG,
_A_CIF_ESTABLISH_CHANNEL,
_A_ECV_DOCUMENT_IP,
_A_CUST_OS_VER,
_A_CUST_OS_NAME,
_A_2WAY_TYPE,
_A_CLIENT_CITY_10,
_L_PUSH_API_1,
_L_PUSH_API_2,
_L_PUSH_API_3,
_L_PUSH_API_4,
_A_CLIENT_CITY_6,
_L_NC_WINNING_ALG,
_L_PROXY_TYPE,
_L_LANG_3,
_L_LANG_1,
_L_LANG_2,
_L_NC_RESPONSE_CODE,
_A_PROF_RISK_IND,
_A_LATEST_NCRG_ISP,
CHL_CT_TERM_OWNER_NAME,
_C_CNP_MER_NM_CURR,
DTL_EX_0_2S_002,
DTL_EX_3_80S_002,
_A_MRISK_FOREIGN_IP_CNTRY_CODE,
DTL_CA_AUTH_SYS_DEC,
CHL_CT_MER_MCC,
ATH_PC_CUST_PRESENT,
_A_CIF_ESTABLISH_CUST_PCODE,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_MERCH_CURR_CODE,
PARTY_TYPE,
GENDER,
DMC_CNT,
YCS_CNT,
TRAN_CNT,
DPST_CNT,
CC_CNT,
TRD_CNT,
PL_CNT,
INVST_CNT,
MORT_CNT,
INSRNC_CNT,
BTA_CNT,
BUS_LN_CNT,
OTH_CNT,
NTBNK_FAC,
REL_MNG,
FA_1,
FA_2,
NO_1,
NO_2,
FA,
FP,
GOVT_BENE,
PRVT_CUST,
HL_ASOC,
CORP_EMPL,
TRUSTEE,
INTL_STU,
MAR_STS_ORG_STR,
EMPL_CLAS_LGL_STS,
HOME_OWN,
_X_NPP_OUT_SUM_DATE_DIFF,
_A_CC_DT_DIFF,
_A_ONLINE_PL_DT_DIFF,
_A_CIF_ESTABLISH_DT_DIFF,
_A_ECV_DOCUMENT_DT_DIFF,
_A_AUTO_DEC_CP_PP_DT_DIFF,
_A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
_A_SCAMP1_MLW_DT_DIFF,
_A_SCAMP2_MLW_DT_DIFF,
_A_SCAMP5_MLW_DT_DIFF,
_A_SCAMP7_MLW_DT_DIFF,
_L_PUSH_API_DT_1_DIFF,
_L_PUSH_API_DT_2_DIFF,
_L_PUSH_API_DT_3_DIFF,
_L_PUSH_API_DT_4_DIFF,
TARGET,
CUS_SUM_TRAN_CNT_Q,
CUS_SUM_UPST_APRD_TRAN_CNT_Q,
CUS_SUM_TRAN_SUM_N,
CUS_SUM_UPST_DCLN_TRAN_CNT_Q,
CUS_SUM_RULE_DCLN_TRAN_CNT_Q,
CUS_SUM_FINL_APRD_TRAN_CNT_Q,
CUS_SUM_UPST_APRD_TRAN_SUM_N,
CUS_SUM_FINL_APRD_TRAN_SUM_N,
CUS_SUM_FDP_RULE_TRIG_CNT_Q,
CUS_SUM_DOMS_TRAN_CNT_Q,
CUS_SUM_OSEA_TRAN_CNT_Q,
CUS_SUM_DOMS_TRAN_SUM_N,
CUS_SUM_OSEA_TRAN_SUM_N,
CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CUS_SUM_CARD_PRES_TRAN_CNT_Q,
CUS_SUM_ATM_TRAN_CNT_Q,
CUS_SUM_FALL_BACK_TRAN_CNT_Q,
CUS_SUM_CHIP_TRAN_CNT_Q,
CUS_SUM_PAY_PASS_TRAN_CNT_Q,
CUS_SUM_CARD_PRES_TRAN_SUM_N,
CUS_SUM_ATM_TRAN_SUM_N,
CUS_SUM_FALL_BACK_TRAN_SUM_N,
CUS_SUM_CHIP_TRAN_SUM_N,
CUS_SUM_PAY_PASS_TRAN_SUM_N,
CUS_SUM_CAPP_PSWD_CHNG_CNT_Q,
CUS_SUM_CAPP_DVIC_REGR_CNT_Q,
CUS_SUM_CAPP_LOGN_CNT_Q,
CUS_SUM_NTB_LOGN_CNT_Q,
CUS_SUM_VIEW_CARD_DETL_CNT_Q,
CUS_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CUS_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CUS_MAX_C_2WAY_CRD_RULE_FLAG,
CRD_SUM_TRAN_CNT_Q,
CRD_SUM_UPST_APRD_TRAN_CNT_Q,
CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
CRD_SUM_FINL_APRD_TRAN_CNT_Q,
CRD_SUM_INCO_EXPY_CNT_Q,
CRD_SUM_INCO_CVVA_CNT_Q,
CRD_SUM_INCO_PIN_CNT_Q,
CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
CRD_SUM_TRAN_SUM_N,
CRD_SUM_UPST_APRD_TRAN_SUM_N,
CRD_SUM_UPST_DCLN_TRAN_SUM_N,
CRD_SUM_RULE_DCLN_TRAN_SUM_N,
CRD_SUM_FINL_APRD_TRAN_SUM_N,
CRD_SUM_INCO_EXPY_SUM_N,
CRD_SUM_INCO_CVVA_SUM_N,
CRD_SUM_INCO_PIN_SUM_N,
CRD_SUM_OVER_LIMT_DCLN_SUM_N,
CRD_SUM_FDP_RULE_TRIG_CNT_Q,
CRD_SUM_DOMS_TRAN_CNT_Q,
CRD_SUM_OSEA_TRAN_CNT_Q,
CRD_SUM_DOMS_TRAN_SUM_N,
CRD_SUM_OSEA_TRAN_SUM_N,
CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CRD_SUM_CARD_PRES_TRAN_CNT_Q,
CRD_SUM_ATM_TRAN_CNT_Q,
CRD_SUM_FALL_BACK_TRAN_CNT_Q,
CRD_SUM_CHIP_TRAN_CNT_Q,
CRD_SUM_PAY_PASS_TRAN_CNT_Q,
CRD_SUM_CARD_PRES_TRAN_SUM_N,
CRD_SUM_ATM_TRAN_SUM_N,
CRD_SUM_FALL_BACK_TRAN_SUM_N,
CRD_SUM_CHIP_TRAN_SUM_N,
CRD_SUM_PAY_PASS_TRAN_SUM_N,
CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
CRD_SUM_CAPP_LOGN_CNT_Q,
CRD_SUM_NTB_LOGN_CNT_Q,
CRD_SUM_VIEW_CARD_DETL_CNT_Q,
CRD_MAX_CARD_USER_VARY_HIGH_RISK_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_FRAU_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_WHLI_F,
CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F,
CMA_SUM_TRAN_CNT_Q,
CMA_SUM_UPST_APRD_TRAN_CNT_Q,
CMA_SUM_TRAN_SUM_N,
CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
CMA_SUM_FINL_APRD_TRAN_CNT_Q,
CMA_SUM_UPST_APRD_TRAN_SUM_N,
CMA_SUM_FINL_APRD_TRAN_SUM_N,
CMA_SUM_FDP_RULE_TRIG_CNT_Q,
CMA_SUM_DOMS_TRAN_CNT_Q,
CMA_SUM_OSEA_TRAN_CNT_Q,
CMA_SUM_DOMS_TRAN_SUM_N,
CMA_SUM_OSEA_TRAN_SUM_N,
CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CMA_SUM_CARD_PRES_TRAN_CNT_Q,
CMA_SUM_ATM_TRAN_CNT_Q,
CMA_SUM_FALL_BACK_TRAN_CNT_Q,
CMA_SUM_CHIP_TRAN_CNT_Q,
CMA_SUM_PAY_PASS_TRAN_CNT_Q,
CMA_SUM_CARD_PRES_TRAN_SUM_N,
CMA_SUM_ATM_TRAN_SUM_N,
CMA_SUM_FALL_BACK_TRAN_SUM_N,
CMA_SUM_CHIP_TRAN_SUM_N,
CMA_SUM_PAY_PASS_TRAN_SUM_N,
CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CMA_MAX_C_2WAY_CRD_RULE_FLAG,
CMC_SUM_TRAN_CNT_Q,
CMC_SUM_UPST_APRD_TRAN_CNT_Q,
CMC_SUM_TRAN_SUM_N,
CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
CMC_SUM_FINL_APRD_TRAN_CNT_Q,
CMC_SUM_UPST_APRD_TRAN_SUM_N,
CMC_SUM_FINL_APRD_TRAN_SUM_N,
CMC_SUM_FDP_RULE_TRIG_CNT_Q,
CMC_SUM_DOMS_TRAN_CNT_Q,
CMC_SUM_OSEA_TRAN_CNT_Q,
CMC_SUM_DOMS_TRAN_SUM_N,
CMC_SUM_OSEA_TRAN_SUM_N,
CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CMC_SUM_CARD_PRES_TRAN_CNT_Q,
CMC_SUM_ATM_TRAN_CNT_Q,
CMC_SUM_FALL_BACK_TRAN_CNT_Q,
CMC_SUM_CHIP_TRAN_CNT_Q,
CMC_SUM_PAY_PASS_TRAN_CNT_Q,
CMC_SUM_CARD_PRES_TRAN_SUM_N,
CMC_SUM_ATM_TRAN_SUM_N,
CMC_SUM_FALL_BACK_TRAN_SUM_N,
CMC_SUM_CHIP_TRAN_SUM_N,
CMC_SUM_PAY_PASS_TRAN_SUM_N,
CMC_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CMC_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CMC_MAX_C_2WAY_CRD_RULE_FLAG,
MAQ_SUM_TRAN_CNT_Q,
MAQ_SUM_UPST_APRD_TRAN_CNT_Q,
MAQ_SUM_TRAN_SUM_N,
MAQ_SUM_UPST_DCLN_TRAN_CNT_Q,
MAQ_SUM_RULE_DCLN_TRAN_CNT_Q,
MAQ_SUM_FINL_APRD_TRAN_CNT_Q,
MAQ_SUM_UPST_APRD_TRAN_SUM_N,
MAQ_SUM_FINL_APRD_TRAN_SUM_N,
MAQ_SUM_FDP_RULE_TRIG_CNT_Q,
MAQ_SUM_DOMS_TRAN_CNT_Q,
MAQ_SUM_OSEA_TRAN_CNT_Q,
MAQ_SUM_DOMS_TRAN_SUM_N,
MAQ_SUM_OSEA_TRAN_SUM_N,
MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N,
MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
MAQ_SUM_CARD_PRES_TRAN_CNT_Q,
MAQ_SUM_ATM_TRAN_CNT_Q,
MAQ_SUM_FALL_BACK_TRAN_CNT_Q,
MAQ_SUM_CHIP_TRAN_CNT_Q,
MAQ_SUM_PAY_PASS_TRAN_CNT_Q,
MAQ_SUM_CARD_PRES_TRAN_SUM_N,
MAQ_SUM_ATM_TRAN_SUM_N,
MAQ_SUM_FALL_BACK_TRAN_SUM_N,
MAQ_SUM_CHIP_TRAN_SUM_N,
MAQ_SUM_PAY_PASS_TRAN_SUM_N,
from PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,2592730,2592.730000,43.212167,0.720203,2X-LARGE,32,23.046496
01bdfbc1-3204-abe2-0000-c71d25bfdda2,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""VVLVYQYQ846NIRCJ""()",VENKAY2,PUBLIC,2513145,2513.145000,41.885750,0.698096,2X-LARGE,32,22.339072
01be9a8b-3204-bee3-0000-c71d2a7c9e82,"CREATE OR REPLACE TABLE PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D AS
SELECT 
    a.*,
    b.CUS_SUM_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_CNT_Q,
    b.CUS_SUM_TRAN_SUM_N,
    b.CUS_SUM_UPST_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_RULE_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_FINL_APRD_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_SUM_N,
    b.CUS_SUM_FINL_APRD_TRAN_SUM_N,
    b.CUS_SUM_FDP_RULE_TRIG_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_CNT_Q,
    b.CUS_SUM_OSEA_TRAN_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_SUM_N,
    b.CUS_SUM_OSEA_TRAN_SUM_N,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    b.CUS_SUM_3DS_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    b.CUS_SUM_N3D_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    b.CUS_SUM_3DS_TRAN_SUM_N as CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    b.CUS_SUM_N3D_TRAN_SUM_N as CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    b.CUS_SUM_CARD_PRES_TRAN_CNT_Q,
    b.CUS_SUM_ATM_TRAN_CNT_Q,
    b.CUS_SUM_FALL_BACK_TRAN_CNT_Q,
    b.CUS_SUM_CHIP_TRAN_CNT_Q,
    b.CUS_SUM_PAY_PASS_TRAN_CNT_Q,
    b.CUS_SUM_CARD_PRES_TRAN_SUM_N,
    b.CUS_SUM_ATM_TRAN_SUM_N,
    b.CUS_SUM_FALL_BACK_TRAN_SUM_N,
    b.CUS_SUM_CHIP_TRAN_SUM_N,
    b.CUS_SUM_PAY_PASS_TRAN_SUM_N,
    b.CUS_SUM_CAPP_PSWD_CHNG_CNT_Q,
    b.CUS_SUM_CAPP_DVIC_REGR_CNT_Q,
    b.CUS_SUM_CAPP_LOGN_CNT_Q,
    b.CUS_SUM_NTB_LOGN_CNT_Q,
    b.CUS_SUM_VIEW_CARD_DETL_CNT_Q,
    b.CUS_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    b.CUS_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    b.CUS_MAX_CUV_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_RULE_FLAG,
    d.CRD_SUM_TRAN_CNT_Q,
    d.CRD_SUM_UPST_APRD_TRAN_CNT_Q,
    d.CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_FINL_APRD_TRAN_CNT_Q,
    d.CRD_SUM_INCO_EXPY_CNT_Q,
    d.CRD_SUM_INCO_CVVA_CNT_Q,
    d.CRD_SUM_INCO_PIN_CNT_Q,
    d.CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
    d.CRD_SUM_TRAN_SUM_N,
    d.CRD_SUM_UPST_APRD_TRAN_SUM_N,
    d.CRD_SUM_UPST_DCLN_TRAN_SUM_N,
    d.CRD_SUM_RULE_DCLN_TRAN_SUM_N,
    d.CRD_SUM_FINL_APRD_TRAN_SUM_N,
    d.CRD_SUM_INCO_EXPY_SUM_N,
    d.CRD_SUM_INCO_CVVA_SUM_N,
    d.CRD_SUM_INCO_PIN_SUM_N,
    d.CRD_SUM_OVER_LIMT_DCLN_SUM_N,
    d.CRD_SUM_FDP_RULE_TRIG_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_CNT_Q,
    d.CRD_SUM_OSEA_TRAN_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_SUM_N,
    d.CRD_SUM_OSEA_TRAN_SUM_N,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    d.CRD_SUM_3DS_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    d.CRD_SUM_N3D_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    d.CRD_SUM_3DS_TRAN_SUM_N as CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    d.CRD_SUM_N3D_TRAN_SUM_N as CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    d.CRD_SUM_CARD_PRES_TRAN_CNT_Q,
    d.CRD_SUM_ATM_TRAN_CNT_Q,
    d.CRD_SUM_FALL_BACK_TRAN_CNT_Q,
    d.CRD_SUM_CHIP_TRAN_CNT_Q,
    d.CRD_SUM_PAY_PASS_TRAN_CNT_Q,
    d.CRD_SUM_CARD_PRES_TRAN_SUM_N,
    d.CRD_SUM_ATM_TRAN_SUM_N,
    d.CRD_SUM_FALL_BACK_TRAN_SUM_N,
    d.CRD_SUM_CHIP_TRAN_SUM_N,
    d.CRD_SUM_PAY_PASS_TRAN_SUM_N,
    d.CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
    d.CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
    d.CRD_SUM_CAPP_LOGN_CNT_Q,
    d.CRD_SUM_NTB_LOGN_CNT_Q,
    d.CRD_SUM_VIEW_CARD_DETL_CNT_Q,
    d.CRD_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_HIGH_RISK_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_FRAU_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_WHLI_F as CRD_MAX_CARD_USER_VARY_WHLI_F,
    d.CRD_MAX_CUV_DO_NOT_CTCT_F as CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F,
    f.CMA_SUM_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    f.CMA_SUM_TRAN_SUM_N,
    f.CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_SUM_N,
    f.CMA_SUM_FINL_APRD_TRAN_SUM_N,
    f.CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_CNT_Q,
    f.CMA_SUM_OSEA_TRAN_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_SUM_N,
    f.CMA_SUM_OSEA_TRAN_SUM_N,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    f.CMA_SUM_3DS_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    f.CMA_SUM_N3D_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    f.CMA_SUM_3DS_TRAN_SUM_N as CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    f.CMA_SUM_N3D_TRAN_SUM_N as CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    f.CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    f.CMA_SUM_ATM_TRAN_CNT_Q,
    f.CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    f.CMA_SUM_CHIP_TRAN_CNT_Q,
    f.CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    f.CMA_SUM_CARD_PRES_TRAN_SUM_N,
    f.CMA_SUM_ATM_TRAN_SUM_N,
    f.CMA_SUM_FALL_BACK_TRAN_SUM_N,
    f.CMA_SUM_CHIP_TRAN_SUM_N,
    f.CMA_SUM_PAY_PASS_TRAN_SUM_N,
    f.CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    f.CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    f.CMA_MAX_CUV_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_RULE_FLAG,
    g.CMC_SUM_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    g.CMC_SUM_TRAN_SUM_N,
    g.CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_SUM_N,
    g.CMC_SUM_FINL_APRD_TRAN_SUM_N,
    g.CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_CNT_Q,
    g.CMC_SUM_OSEA_TRAN_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_SUM_N,
    g.CMC_SUM_OSEA_TRAN_SUM_N,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    g.CMC_SUM_3DS_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    g.CMC_SUM_N3D_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    g.CMC_SUM_3DS_TRAN_SUM_N as CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    g.CMC_SUM_N3D_TRAN_SUM_N as CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    g.CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    g.CMC_SUM_ATM_TRAN_CNT_Q,
    g.CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    g.CMC_SUM_CHIP_TRAN_CNT_Q,
    g.CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    g.CMC_SUM_CARD_PRES_TRAN_SUM_N,
    g.CMC_SUM_ATM_TRAN_SUM_N,
    g.CMC_SUM_FALL_BACK_TRAN_SUM_N,
    g.CMC_SUM_CHIP_TRAN_SUM_N,
    g.CMC_SUM_PAY_PASS_TRAN_SUM_N,
    g.CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    g.CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    g.CMC_MAX_CUV_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_RULE_FLAG,
    h.MAQ_SUM_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_TRAN_SUM_N,
    h.MAQ_SUM_UPST_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_RULE_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_FINL_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FINL_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FDP_RULE_TRIG_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_CNT_Q,
    h.MAQ_SUM_OSEA_TRAN_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_SUM_N,
    h.MAQ_SUM_OSEA_TRAN_SUM_N,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_3DS_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    h.MAQ_SUM_N3D_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    h.MAQ_SUM_3DS_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    h.MAQ_SUM_N3D_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    h.MAQ_SUM_CARD_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_ATM_TRAN_CNT_Q,
    h.MAQ_SUM_FALL_BACK_TRAN_CNT_Q,
    h.MAQ_SUM_CHIP_TRAN_CNT_Q,
    h.MAQ_SUM_PAY_PASS_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_PRES_TRAN_SUM_N,
    h.MAQ_SUM_ATM_TRAN_SUM_N,
    h.MAQ_SUM_FALL_BACK_TRAN_SUM_N,
    h.MAQ_SUM_CHIP_TRAN_SUM_N,
    h.MAQ_SUM_PAY_PASS_TRAN_SUM_N
FROM 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT a
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_tran_prfl_agg2d b
ON 
    a.ssx_cust_num = b.cust_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = b.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_card_tran_prfl_agg2d d
ON 
    a.CHL_ID_CARD_NUM = d.card_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = d.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg2d f
ON 
    a.ssx_cust_num = f.cust_i and a.chl_ct_term_owner_id = f.merc_i and a.chl_ct_acq_id = f.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = f.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg2d g
ON 
    a.CHL_ID_CARD_NUM = g.card_i and a.chl_ct_mer_mcc = g.merc_catg_c
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = g.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_merc_acqr_tran_prfl_agg2d h
ON 
    a.chl_ct_term_owner_id = h.merc_i and a.chl_ct_acq_id = h.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = h.WINDOW_START_DATE

;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,2470919,2470.919000,41.181983,0.686366,2X-LARGE,32,21.963712
01be9bb1-3204-bee3-0000-c71d2a87678e,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-07-01'
    order by tran_d
),
hourly_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-07-01'
),
all_dates AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT cust_i, merc_i, acqr_i FROM PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl where tran_d between '2025-03-01' and '2025-07-01') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.cust_i = hd.cust_i AND ad.merc_i = hd.merc_i AND ad.acqr_i = hd.acqr_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    cust_i, -- as ssx_cust_num,
    merc_i,
    acqr_i,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMA_SUM_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    CMA_SUM_TRAN_SUM_N,
    CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_SUM_N,
    CMA_SUM_FINL_APRD_TRAN_SUM_N,
    CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    CMA_SUM_DOMS_TRAN_CNT_Q,
    CMA_SUM_OSEA_TRAN_CNT_Q,
    CMA_SUM_DOMS_TRAN_SUM_N,
    CMA_SUM_OSEA_TRAN_SUM_N,
    CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMA_SUM_3DS_TRAN_CNT_Q,
    CMA_SUM_N3D_TRAN_CNT_Q,
    CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMA_SUM_3DS_TRAN_SUM_N,
    CMA_SUM_N3D_TRAN_SUM_N,
    CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    CMA_SUM_ATM_TRAN_CNT_Q,
    CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    CMA_SUM_CHIP_TRAN_CNT_Q,
    CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    CMA_SUM_CARD_PRES_TRAN_SUM_N,
    CMA_SUM_ATM_TRAN_SUM_N,
    CMA_SUM_FALL_BACK_TRAN_SUM_N,
    CMA_SUM_CHIP_TRAN_SUM_N,
    CMA_SUM_PAY_PASS_TRAN_SUM_N,
    CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    cust_i,
    merc_i,
    acqr_i,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,2458414,2458.414000,40.973567,0.682893,2X-LARGE,32,21.852576
01be0588-3204-aa23-0000-c71d2605c462,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D012_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_CNP_LTRANS_6HR_COUNT_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_4"" DOUBLE, ""DTL_EX_2_ENTITY_ID_6"" STRING(16777216), ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""DTL_CA_CLIENT_TRAN_TYPE"" STRING(16777216), ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_M_TOTAL_COUNT"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_A_U"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_CC_2DAY_VEL_6"" DOUBLE, ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CRD_CNP_TRN_SUM_3"" DOUBLE, ""_A_DTL_CAPP_NBANK_SSO_DT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_A_D_D_1"" DOUBLE, ""_M_MERCHANT_RETAIL_IND"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_A_GEO_LONG_1"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_A_CAPP_REGO_IP_ADDRESS"" STRING(16777216), ""_M_TOTAL_SUM_RETAIL"" DOUBLE, ""CHL_CT_CH_POST_CODE"" STRING(16777216), ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_2"" DOUBLE, ""_Q_DOM_DECL_CNT_DAY_1"" DOUBLE, ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_C_CC_2DAY_VEL_4"" DOUBLE, ""_C_CRD_3D_TRN_SUM_3"" DOUBLE, ""_C_N3D_DOM_6H_SUM_1"" DOUBLE, ""_L_SE_SCORE_5"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_CC_TRAN_ACCOUNT_BIN"" STRING(16777216), ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_Q_KEYED_DECL_CNT_DAY_1"" DOUBLE, ""_C_MDES_DPAN_CNT_CURR"" DOUBLE, ""_C_CC_SCR_ATTCK_30SEC_COUNT_2"" DOUBLE, ""_A_24H_CNP_DC_RTL_SUM_CURR_MAX"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_L_SCORE_H2O_5"" DOUBLE, ""SSA_D_AVAIL_BAL"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_UA_DEVICE_PREV_DT_4"" BIGINT, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, _C_CC_CNP_LTRANS_6HR_COUNT_1, ATH_PC_CUST_PRESENT, DTL_EX_3_8S_009, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _Q_MER_FRAUD_SCORE_CNT_5, _Q_MER_FRAUD_SCORE_SUM_6, _M_TOTAL_SUM, _C_N3D_TST_CNT_1, _Q_MER_FRAUD_SCORE_CNT_4, DTL_EX_2_ENTITY_ID_6, _C_CC_CNP_VEL_6HR_COUNT_1, DTL_CA_CLIENT_TRAN_TYPE, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_1, DTL_EX_3_80S_001, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _M_TOTAL_COUNT, CHL_CT_MER_MCC, _Q_AUTH_COUNT, _C_N3D_MERC_ID_SUM_3, _A_U, _C_N3D_MERC_ID_SUM_2, _C_N3D_MERC_ID_SUM_1, _A_BTS_CUST_AGE, _C_CC_2DAY_VEL_6, _L_MAX_30D_MULE_SCORE, _C_CRD_CNP_TRN_SUM_3, _A_DTL_CAPP_NBANK_SSO_DT, _A_PROF_CAPP_DEVICE_1, _A_D_D_1, _M_MERCHANT_RETAIL_IND, _C_CC_GBL_N3D_CNT_1, _L_BC_SESS_ID, _A_GEO_LONG_1, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CAPP_REGO_IP_ADDRESS, _M_TOTAL_SUM_RETAIL, CHL_CT_CH_POST_CODE, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _Q_MER_FRAUD_SCORE_CNT_2, _Q_DOM_DECL_CNT_DAY_1, _C_CC_2DAY_AMT_6, _C_CC_2DAY_VEL_4, _C_CRD_3D_TRN_SUM_3, _C_N3D_DOM_6H_SUM_1, _L_SE_SCORE_5, _C_2WAY_5X_CRD_CNT, _C_CC_TRAN_ACCOUNT_BIN, _C_N3D_OVS_6H_SUM_1, _Q_KEYED_DECL_CNT_DAY_1, _C_MDES_DPAN_CNT_CURR, _C_CC_SCR_ATTCK_30SEC_COUNT_2, _A_24H_CNP_DC_RTL_SUM_CURR_MAX, _Q_MER_FRAUD_SCORE_CNT_3, DTL_CA_AUTH_SYS_INFO, _L_SCORE_H2O_5, SSA_D_AVAIL_BAL
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_PREV_DT_4,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250717 and 20250729
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,2396428,2396.428000,39.940467,0.665674,2X-LARGE,32,21.301568
01bde397-3204-a616-0000-c71d25112f62,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D012_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_CNP_LTRANS_6HR_COUNT_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_4"" DOUBLE, ""DTL_EX_2_ENTITY_ID_6"" STRING(16777216), ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""DTL_CA_CLIENT_TRAN_TYPE"" STRING(16777216), ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_M_TOTAL_COUNT"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_A_U"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_CC_2DAY_VEL_6"" DOUBLE, ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CRD_CNP_TRN_SUM_3"" DOUBLE, ""_A_DTL_CAPP_NBANK_SSO_DT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_A_D_D_1"" DOUBLE, ""_M_MERCHANT_RETAIL_IND"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_A_GEO_LONG_1"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_A_CAPP_REGO_IP_ADDRESS"" STRING(16777216), ""_M_TOTAL_SUM_RETAIL"" DOUBLE, ""CHL_CT_CH_POST_CODE"" STRING(16777216), ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_2"" DOUBLE, ""_Q_DOM_DECL_CNT_DAY_1"" DOUBLE, ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_C_CC_2DAY_VEL_4"" DOUBLE, ""_C_CRD_3D_TRN_SUM_3"" DOUBLE, ""_C_N3D_DOM_6H_SUM_1"" DOUBLE, ""_L_SE_SCORE_5"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_CC_TRAN_ACCOUNT_BIN"" STRING(16777216), ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_Q_KEYED_DECL_CNT_DAY_1"" DOUBLE, ""_C_MDES_DPAN_CNT_CURR"" DOUBLE, ""_C_CC_SCR_ATTCK_30SEC_COUNT_2"" DOUBLE, ""_A_24H_CNP_DC_RTL_SUM_CURR_MAX"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_L_SCORE_H2O_5"" DOUBLE, ""SSA_D_AVAIL_BAL"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_UA_DEVICE_PREV_DT_4"" BIGINT, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, _C_CC_CNP_LTRANS_6HR_COUNT_1, ATH_PC_CUST_PRESENT, DTL_EX_3_8S_009, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _Q_MER_FRAUD_SCORE_CNT_5, _Q_MER_FRAUD_SCORE_SUM_6, _M_TOTAL_SUM, _C_N3D_TST_CNT_1, _Q_MER_FRAUD_SCORE_CNT_4, DTL_EX_2_ENTITY_ID_6, _C_CC_CNP_VEL_6HR_COUNT_1, DTL_CA_CLIENT_TRAN_TYPE, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_1, DTL_EX_3_80S_001, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _M_TOTAL_COUNT, CHL_CT_MER_MCC, _Q_AUTH_COUNT, _C_N3D_MERC_ID_SUM_3, _A_U, _C_N3D_MERC_ID_SUM_2, _C_N3D_MERC_ID_SUM_1, _A_BTS_CUST_AGE, _C_CC_2DAY_VEL_6, _L_MAX_30D_MULE_SCORE, _C_CRD_CNP_TRN_SUM_3, _A_DTL_CAPP_NBANK_SSO_DT, _A_PROF_CAPP_DEVICE_1, _A_D_D_1, _M_MERCHANT_RETAIL_IND, _C_CC_GBL_N3D_CNT_1, _L_BC_SESS_ID, _A_GEO_LONG_1, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CAPP_REGO_IP_ADDRESS, _M_TOTAL_SUM_RETAIL, CHL_CT_CH_POST_CODE, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _Q_MER_FRAUD_SCORE_CNT_2, _Q_DOM_DECL_CNT_DAY_1, _C_CC_2DAY_AMT_6, _C_CC_2DAY_VEL_4, _C_CRD_3D_TRN_SUM_3, _C_N3D_DOM_6H_SUM_1, _L_SE_SCORE_5, _C_2WAY_5X_CRD_CNT, _C_CC_TRAN_ACCOUNT_BIN, _C_N3D_OVS_6H_SUM_1, _Q_KEYED_DECL_CNT_DAY_1, _C_MDES_DPAN_CNT_CURR, _C_CC_SCR_ATTCK_30SEC_COUNT_2, _A_24H_CNP_DC_RTL_SUM_CURR_MAX, _Q_MER_FRAUD_SCORE_CNT_3, DTL_CA_AUTH_SYS_INFO, _L_SCORE_H2O_5, SSA_D_AVAIL_BAL
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_PREV_DT_4,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250711 and 20250724
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,2364381,2364.381000,39.406350,0.656773,2X-LARGE,32,21.016736
01beae44-3204-c1f7-0000-c71d2b3225c2,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""RSP_ACTION_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_CUST_SPEND_SUM_AAA_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_CC_RECOV_TRANS_SUM_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_C_N3D_TST_CNT_1"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_AUTH_COUNT"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_Q_NON_AU_IND"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_C_CC_GBL_N3D_1D_CNT_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CC_SFW_GOOGLE_CNT_2"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""_Q_COF_DECL_CNT_DAY_1"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_L_MAX_30D_SCORE_H2O"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_L_ACC_AMT_7D"" DOUBLE, ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_C_CRD_DOM_CNP_HV_SUM_1"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""CHL_CT_TERM_OWNER_ID"" STRING(16777216), ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_A_Q"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_3"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""_A_GEO_LONG_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_2"" DOUBLE, ""_C_N3D_MERC_ID_1"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_2"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, DTL_EX_3_8S_009, _M_TOTAL_COUNT, DTL_CA_AUTH_SYS_INFO, _C_CC_GBL_N3D_SUM_1, _C_CC_GBL_N3D_CNT_1, _C_N3D_OVS_6H_SUM_1, DTL_CA_MERCH_CURR_CODE, _C_CRD_SAFE_MERCHANT, RSP_ACTION_CODE, _Q_MER_FRAUD_SCORE_CNT_6, DTL_EX_3_20S_004, _Q_KEYED_APVD_CNT_DAY_1, _A_CUST_SPEND_SUM_AAA_1, _C_N3D_MERC_ID_SUM_2, _C_CC_RECOV_TRANS_SUM_1, _A_D_D_1, ATH_PC_CUST_PRESENT, _Q_MER_FRAUD_SCORE_CNT_5, ATH_PC_ACS_REFER_CODE, _Q_MER_FRAUD_SCORE_SUM_6, _C_N3D_MERC_ID_SUM_1, _L_BC_SESS_ID, _C_N3D_TST_CNT_1, _M_FIRST_USE_DATE, _Q_AUTH_COUNT, _M_TOTAL_SUM, _C_2WAY_5X_CRD_CNT, _Q_MER_FRAUD_SCORE_CNT_3, CHL_CT_TERM_CNTRY_CODE, _A_BTS_CUST_AGE, _C_N3D_MERC_ID_SUM_3, _Q_NON_AU_IND, _A_CRD_NPP_PAYMENT_AMOUNT, _C_CC_GBL_N3D_1D_CNT_1, DTL_EX_3_80S_001, _C_CRD_VISA_MERC_SUM_1, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_2, _C_CC_SFW_GOOGLE_CNT_2, _A_D_D_3, _Q_COF_DECL_CNT_DAY_1, _A_AUS_IP_ACTIVITY, _A_BTS_CUST_DOB, _L_MAX_30D_SCORE_H2O, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _C_CC_2DAY_AMT_6, _A_D_D_2, _L_ACC_AMT_7D, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _A_PROF_CAPP_DEVICE_1, _C_CRD_DOM_CNP_HV_SUM_1, _L_BC_SCORE_H2O, _C_CC_CNP_VEL_6HR_COUNT_1, CHL_CT_TERM_OWNER_ID, _C_CC_OS_FB_CNT_3, _A_Q, _Q_MER_FRAUD_SCORE_SUM_1, _C_CRD_DOM_CNP_HV_CNT_1, _Q_MER_FRAUD_SCORE_SUM_3, _C_CRD_3D_TRN_SUM_1, _A_GEO_LONG_1, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_1, _C_CC_GBL_N3D_CNT_2, CHL_CT_MER_MCC
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250826 and 20250829
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,4638842,4638.842000,77.314033,1.288567,X-LARGE,16,20.617072
01be0588-3204-ace5-0000-c71d2605494e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D011_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""DTL_EX_3_8S_009"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""DTL_EX_0_2S_002"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_3"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""SSA_C_CASH_LIMIT"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_NON_AU_IND"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_A_CLIENT_CITY_DATE_2"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_L_SDID_H2O"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CC_2DAY_VEL_2"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_C_CNP_MER_NM_1"" STRING(16777216), ""_C_CNP_APL_VEL_CNT"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_L_SCORE_H2O_5"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_A_CAPP_LOGON_CNT_2"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, _M_TOTAL_COUNT, _A_PROF_CAPP_DEVICE_1, DTL_CA_AUTH_SYS_INFO, _Q_AUTH_COUNT, DTL_EX_3_8S_009, DTL_CA_MERCH_CURR_CODE, _C_CC_GBL_N3D_CNT_1, DTL_EX_3_20S_004, _C_CC_GBL_N3D_SUM_1, _C_N3D_OVS_6H_SUM_1, _M_TOTAL_SUM, ATH_PC_CUST_PRESENT, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _A_BTS_BIO_SE, _A_BTS_CUST_AGE, CHL_CT_TERM_CNTRY_CODE, _Q_KEYED_APVD_CNT_DAY_1, _A_D_D_1, DTL_EX_0_2S_002, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _Q_CRD_F2F_BIN_ATTACK_CNTRY_3, _Q_MER_FRAUD_SCORE_CNT_3, _A_D_D_3, SSA_C_CASH_LIMIT, _C_N3D_TST_CNT_1, _C_N3D_MERC_ID_SUM_1, _C_CC_CNP_VEL_6HR_COUNT_1, _C_2WAY_5X_CRD_CNT, _C_N3D_MERC_ID_SUM_2, DTL_EX_3_80S_001, _Q_NON_AU_IND, _A_AUS_IP_ACTIVITY, _L_BC_SCORE_H2O, _A_BTS_CUST_DOB, _A_CLIENT_CITY_DATE_2, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _L_SDID_H2O, _C_CRD_VISA_MERC_SUM_1, _Q_MER_FRAUD_SCORE_CNT_5, _L_BC_SESS_ID, _L_MAX_30D_MULE_SCORE, _C_CC_2DAY_VEL_2, _Q_MER_FRAUD_SCORE_SUM_2, _C_CRD_3D_TRN_SUM_1, ATH_PC_ACS_REFER_CODE, _C_CNP_MER_NM_1, _C_CNP_APL_VEL_CNT, _A_D_D_2, _C_CC_OS_FB_CNT_3, _L_SCORE_H2O_5, _C_CRD_DOM_CNP_HV_CNT_1, _A_CAPP_LOGON_CNT_2
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250717 and 20250729
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,2301401,2301.401000,38.356683,0.639278,2X-LARGE,32,20.456896
01bdea16-3204-aa21-0000-c71d254359e6,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""VVLVYQYQ846NIRCJ""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,2270227,2270.227000,37.837117,0.630619,2X-LARGE,32,20.179808
01bef793-3204-c939-0000-c71d2d544e5e,"WITH TRAN AS (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS TRAN_I
            , TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S
            , TO_DATE(TTS_TRAN_DATE_ALT, 'YYYYMMDD') AS TRAN_D
            , UPPER(TO_CHAR(DATE_TRUNC('HOUR', TRAN_S), 'HH:DY')) AS TRAN_HOUR_DAY_X
            , SSX_CUST_NUM AS CUST_I
        	, CHL_ID_CARD_NUM AS CARD_I
            , ATH_PC_CARD_EXP_DATE
        	, DTL_EX_0_20S_004 AS DPAN_I
        	, CASE WHEN CHL_CT_MEDIA = 'V' THEN 1 ELSE 0 END AS TOKN_F
            , CASE WHEN CHL_CT_WHICH_CARD IN (1,0) THEN 1 ELSE 0 END AS PRIM_CAHD_F
        	, DTL_CA_CLIENT_AMT AS TRAN_AMT_N
        	, ATH_PC_POS AS POS_ENTR_C
            , CASE WHEN DTL_CA_REVERSAL_IND = 'N' THEN 0 ELSE 1 END AS REVS_INDA_F
            , CASE WHEN ATH_PC_PIN_VRFY = 'V' THEN 0 ELSE 1 END AS PIN_VRFY_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'C' THEN 1 ELSE 0 END AS PAIN_CUST_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'M' THEN 1 ELSE 0 END AS PAIN_MERC_F
        	, CASE WHEN DTL_EX_0_I_022 = 'R' THEN 1 ELSE 0 END AS RCRR_F
        	, DTL_EX_0_3S_002 AS SECU_LEVL_INDA_C
            , SUBSTR(DTL_EX_3_80S_003,1,2) AS ACCT_AUTT_V
            , CASE WHEN ATH_PC_POS IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_NOT_PRES_INDA_F
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS ""3DS_INDA_F""
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 NOT IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS N3D_INDA_F
            , CASE WHEN ATH_PC_POS NOT IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_PRES_INDA_F
            , CASE WHEN CARD_PRES_INDA_F = '1' AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS ATM_TRAN_F
            , CASE WHEN POS_ENTR_C IN ('62','79','80') AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS FALL_BACK_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '05' THEN 1 ELSE 0 END AS CHIP_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '07' THEN 1 ELSE 0 END AS PAY_PASS_TRAN_INDA_F
        	, REPLACE(DTL_CA_AUTH_SYS_DEC,' ','') AS UPST_DCDE_C
        	, REPLACE(DTL_CA_AUTH_SYS_INFO,' ','') AS UPST_REAS_C
            , REPLACE(RSP_ACTION_CODE,' ','') AS FINL_DCDE_C
            , CASE WHEN UPST_DCDE_C = '1' AND FINL_DCDE_C != '1' THEN 1 ELSE 0 END AS RULE_DCLN_F
        	, CASE WHEN FINL_DCDE_C = '1' THEN 1 ELSE 0 END AS FINL_APRD_TRAN_CNT_F
        	, CASE WHEN UPST_REAS_C IN ('20','21','22','81','BE') THEN 1 ELSE 0 END  AS INCO_EXPY_F
        	, CASE WHEN UPST_REAS_C IN ('30','31','34','36','41','42','43','44','45','46','47') THEN 1 ELSE 0 END AS INCO_CVVA_F
        	, CASE WHEN UPST_REAS_C IN ('11','12','CP','MP','PE','PM') THEN 1 ELSE 0 END AS INCO_PIN_F
        	, CASE WHEN UPST_REAS_C IN ('T7','CL','87','88','89','90','98') THEN 1 ELSE 0 END AS OVER_LIMT_DCLN_F /* $ OVER LIMIT, DELINQUANT OR TRASACTION LIMIT */
            
            , CHL_CT_ACQ_ID AS ACQR_I
        	, CHL_CT_TERM_OWNER_ID AS MERC_I
        	, REPLACE(CHL_CT_TERM_OWNER_NAME,' ','') AS MERC_M
        	, CHL_CT_TERM_ID AS MERC_TRML_I
        	, CHL_CT_TERM_CNTRY_CODE AS CNTY_C
        	, CHL_CT_MER_MCC AS MERC_CATG_C
            , CASE WHEN CHL_CT_TERM_CNTRY_CODE = '036' THEN 1 ELSE 0 END AS DOMS_TRAN_INDA_F

        	, RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X
            , SUBSTR(RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X
            , SUBSTR(RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F
        	, SUBSTR(RSP_EX_2_8S_002,8,1) AS PUSH_EXIT_C
            , CASE WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='1' AND RSP_EX_2_I_009='2' THEN '1WP_REG'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='2' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='3' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='4' AND RSP_EX_2_I_009='2' THEN '1WP_DMGD_CARD'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='5' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='A' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='B' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='G' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='H' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='I' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_CIF'
            	ELSE 'NO_PUSH' END AS PUSH_TYPE_QLFY_X
            , CASE WHEN DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(DTL_EX_3_8S_004) END AS MCRD_SCOR_N
            
        FROM 
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
        WHERE
            TTS_TRAN_DATE >= TO_CHAR($END_D-90,'YYYYMMDD')
            AND TTS_TRAN_DATE <= TO_CHAR($END_D,'YYYYMMDD')
            
            AND HDR_ACTIVITY_TYPE = 'CA'
            AND SSX_CUST_NUM != ''
            AND CHL_ID_CARD_NUM != ''
    )
    , CUST_TRAN_PRFL AS (
    SELECT 
        CUST_I

        -- Digital events
        , CAPP_PSWD_CHNG_CNT_Q
    	, CAPP_PSWD_CHNG_LAST_S
    	, CAPP_DVIC_REGR_CNT_Q
    	, CAPP_DVIC_REGR_LAST_S
    	, CAPP_LOGN_CNT_Q
    	, CAPP_LOGN_LAST_S
    	, NTB_LOGN_CNT_Q
    	, NTB_LOGN_LAST_S
    	, VIEW_CARD_DETL_CNT_Q
    	, VIEW_CARD_DETL_LAST_S
    FROM
        LCL.CUST_TRAN_PRFL
    WHERE 
        CUST_I IN (SELECT CUST_I FROM TRAN)
    )
     -- Analyst declined disputed transactions
    , CONFIRMED_FPF AS (
        SELECT
            b.DSPT_CASE_I
            , b.DSPT_CASE_EVNT_I
            , b.DSPT_CASE_CRAT_S
            , b.DSPT_TRAN_I
            , a.TRAN_ID
            , 1 AS FPF_INDA_F
        FROM 
            LABMLFRD.CARD_TRAN_GROS_FRAU a
        LEFT JOIN
            LABMLFRD.CARD_TRAN_DAIS_DSPT b
        ON
            a.TRAN_ID=b.TRAN_I
        WHERE 
            a.OUTCOME IN ('Resolved-CLOSED: INVEST DECLINE')
            AND b.DSPT_TRAN_DCDE_X IN ('Fraud Referral','Customer Liable')
    )
    -- STP Daisy cases - potential FPF
    , POTENTIAL_FPF AS (
        SELECT DISTINCT
            a.DSPT_CASE_I
            , a.DSPT_CASE_EVNT_I
            , b.DSPT_CASE_CRAT_S
            , b.DSPT_CASE_TRAN_Q
            , b.TOTL_TRAN_AND_FEE_A
            , a.DSPT_TRAN_I
            , dai.TRAN_I
            , 9 AS FPF_INDA_F
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        INNER JOIN
            (SELECT * FROM CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL 
            WHERE DSPT_TYPE_C = 'DT1'
            QUALIFY ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
            ) b
        ON
            a.DSPT_CASE_I = b.DSPT_CASE_I
        LEFT JOIN
            LABMLFRD.CARD_TRAN_DAIS_DSPT dai
        ON 
            a.DSPT_CASE_I = dai.DSPT_CASE_I
            AND a.DSPT_TRAN_I = dai.TRAN_I
        WHERE
            UPPER(a.DSPT_TRAN_DCDE_X) LIKE ANY ('%CHARGE%OFF%','%CHARGEBACK%','%WRITE%OFF%')
            AND a.DSPT_SRCE_SYST_M != 'GS'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC) = 1
    )
    -- Daisy case information
    , DNA_CASE AS (
    SELECT 
        a.PATY_I
        
        , COUNT(DISTINCT a.DSPT_CASE_I) AS DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , SUM(a.DSPT_CASE_TRAN_Q) AS DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , SUM(a.TOTL_TRAN_AND_FEE_A) AS DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND c.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND c.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND c.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
    FROM 
        (SELECT DISTINCT
            PATY_I
            , DSPT_CASE_I
            , DSPT_CASE_EVNT_I
            , DSPT_CASE_CRAT_S
            , DSPT_CASE_TRAN_Q
            , TOTL_TRAN_AND_FEE_A
        FROM
            CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
        WHERE
            DSPT_TYPE_C = 'DT1'
        QUALIFY 
            ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) a
    LEFT JOIN
        (SELECT DISTINCT DSPT_CASE_I 
        FROM CONFIRMED_FPF) b
    ON 
        a.DSPT_CASE_I = b.DSPT_CASE_I
    LEFT JOIN 
        POTENTIAL_FPF c
    ON
        a.DSPT_CASE_I = c.DSPT_CASE_I
    GROUP BY
        a.PATY_I
    )
    -- Output
    SELECT DISTINCT
    	a.* -- Transaction info, including UVs (e.g. WPR rego date, etc)

        , dai.DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , dai.DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , dai.DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , dai.DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , dai.DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , dai.DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , dai.DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , dai.DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , dai.DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , dai.DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , dai.DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , dai.DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , dai.DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , dai.DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , dai.DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , dai.DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days

        , dai.DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , dai.DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , dai.DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , dai.DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , dai.DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , dai.DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , dai.DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , dai.DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , dai.DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
        , IFNULL(COALESCE(fpf.FPF_INDA_F,pfpf.FPF_INDA_F),0) AS FPF_INDA_F
        
    FROM
    	TRAN a
    LEFT JOIN 
        DNA_CASE dai
    ON 
        a.CUST_I = dai.PATY_I
    LEFT JOIN 
        CUST_TRAN_PRFL b
    ON
        a.CUST_I = b.CUST_I
    LEFT JOIN
        CONFIRMED_FPF fpf
    ON
        a.TRAN_I = fpf.TRAN_ID
    LEFT JOIN
        POTENTIAL_FPF pfpf
    ON
        a.TRAN_I = pfpf.TRAN_I
    -- WHERE 
    --     fpf.FPF_INDA_F<>0
    ORDER BY 
        a.CUST_I
    	, a.CARD_I
    	, a.TRAN_S DESC
-- )
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,2217528,2217.528000,36.958800,0.615980,2X-LARGE,32,19.711360
01bed787-3204-c554-0000-c71d2c6b711e,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_SHROFFPR as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    -- OR c.BAD = 1 
    THEN 1
    ELSE 0
  END AS final_target,
  SSX_CUST_NUM,
  DTL_EX_0_20S_001,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 -- TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
-- left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250201 and 202500601
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",SHROFFPR,R_USR_FRAUMD_LABMLFRD_RW,2170390,2170.390000,36.173167,0.602886,2X-LARGE,32,19.292352
01be0ca7-3204-aca9-0000-c71d263839c6,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""VVLVYQYQ846NIRCJ""()",ROYD5,PUBLIC,2148786,2148.786000,35.813100,0.596885,2X-LARGE,32,19.100320
01be99e6-3204-bee3-0000-c71d2a785c8e,"(WITH code1_data AS (
    SELECT DISTINCT
--         TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
-- (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
-- TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d,
-- TO_DATE(SUBSTR(mid_event_ts, 1, 8), 'YYYYMMDD') as evnt_d,
-- TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
-- CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
-- CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC
,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
--,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000   
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE

,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT


-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
--,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
--,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
--,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250601'
and  mid_event_ts < '20250701'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime



    -- FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT 
    -- where SSX_SNAP_D >= '2025-01-01'
),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2025-06-01'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,2138217,2138.217000,35.636950,0.593949,2X-LARGE,32,19.006368
01be7bb3-3204-bc96-0000-c71d298de122,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D011_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""DTL_EX_3_8S_009"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""DTL_EX_0_2S_002"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_3"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""SSA_C_CASH_LIMIT"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_NON_AU_IND"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_A_CLIENT_CITY_DATE_2"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_L_SDID_H2O"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CC_2DAY_VEL_2"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_C_CNP_MER_NM_1"" STRING(16777216), ""_C_CNP_APL_VEL_CNT"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_L_SCORE_H2O_5"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_A_CAPP_LOGON_CNT_2"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, _M_TOTAL_COUNT, _A_PROF_CAPP_DEVICE_1, DTL_CA_AUTH_SYS_INFO, _Q_AUTH_COUNT, DTL_EX_3_8S_009, DTL_CA_MERCH_CURR_CODE, _C_CC_GBL_N3D_CNT_1, DTL_EX_3_20S_004, _C_CC_GBL_N3D_SUM_1, _C_N3D_OVS_6H_SUM_1, _M_TOTAL_SUM, ATH_PC_CUST_PRESENT, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _A_BTS_BIO_SE, _A_BTS_CUST_AGE, CHL_CT_TERM_CNTRY_CODE, _Q_KEYED_APVD_CNT_DAY_1, _A_D_D_1, DTL_EX_0_2S_002, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _Q_CRD_F2F_BIN_ATTACK_CNTRY_3, _Q_MER_FRAUD_SCORE_CNT_3, _A_D_D_3, SSA_C_CASH_LIMIT, _C_N3D_TST_CNT_1, _C_N3D_MERC_ID_SUM_1, _C_CC_CNP_VEL_6HR_COUNT_1, _C_2WAY_5X_CRD_CNT, _C_N3D_MERC_ID_SUM_2, DTL_EX_3_80S_001, _Q_NON_AU_IND, _A_AUS_IP_ACTIVITY, _L_BC_SCORE_H2O, _A_BTS_CUST_DOB, _A_CLIENT_CITY_DATE_2, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _L_SDID_H2O, _C_CRD_VISA_MERC_SUM_1, _Q_MER_FRAUD_SCORE_CNT_5, _L_BC_SESS_ID, _L_MAX_30D_MULE_SCORE, _C_CC_2DAY_VEL_2, _Q_MER_FRAUD_SCORE_SUM_2, _C_CRD_3D_TRN_SUM_1, ATH_PC_ACS_REFER_CODE, _C_CNP_MER_NM_1, _C_CNP_APL_VEL_CNT, _A_D_D_2, _C_CC_OS_FB_CNT_3, _L_SCORE_H2O_5, _C_CRD_DOM_CNP_HV_CNT_1, _A_CAPP_LOGON_CNT_2
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250818 and 20250820
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,2110504,2110.504000,35.175067,0.586251,2X-LARGE,32,18.760032
01bde397-3204-a61b-0000-c71d2511c73a,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D011_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""DTL_EX_3_8S_009"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""DTL_EX_0_2S_002"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_3"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""SSA_C_CASH_LIMIT"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_NON_AU_IND"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_A_CLIENT_CITY_DATE_2"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_L_SDID_H2O"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CC_2DAY_VEL_2"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_C_CNP_MER_NM_1"" STRING(16777216), ""_C_CNP_APL_VEL_CNT"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_L_SCORE_H2O_5"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_A_CAPP_LOGON_CNT_2"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, _M_TOTAL_COUNT, _A_PROF_CAPP_DEVICE_1, DTL_CA_AUTH_SYS_INFO, _Q_AUTH_COUNT, DTL_EX_3_8S_009, DTL_CA_MERCH_CURR_CODE, _C_CC_GBL_N3D_CNT_1, DTL_EX_3_20S_004, _C_CC_GBL_N3D_SUM_1, _C_N3D_OVS_6H_SUM_1, _M_TOTAL_SUM, ATH_PC_CUST_PRESENT, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _A_BTS_BIO_SE, _A_BTS_CUST_AGE, CHL_CT_TERM_CNTRY_CODE, _Q_KEYED_APVD_CNT_DAY_1, _A_D_D_1, DTL_EX_0_2S_002, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _Q_CRD_F2F_BIN_ATTACK_CNTRY_3, _Q_MER_FRAUD_SCORE_CNT_3, _A_D_D_3, SSA_C_CASH_LIMIT, _C_N3D_TST_CNT_1, _C_N3D_MERC_ID_SUM_1, _C_CC_CNP_VEL_6HR_COUNT_1, _C_2WAY_5X_CRD_CNT, _C_N3D_MERC_ID_SUM_2, DTL_EX_3_80S_001, _Q_NON_AU_IND, _A_AUS_IP_ACTIVITY, _L_BC_SCORE_H2O, _A_BTS_CUST_DOB, _A_CLIENT_CITY_DATE_2, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _L_SDID_H2O, _C_CRD_VISA_MERC_SUM_1, _Q_MER_FRAUD_SCORE_CNT_5, _L_BC_SESS_ID, _L_MAX_30D_MULE_SCORE, _C_CC_2DAY_VEL_2, _Q_MER_FRAUD_SCORE_SUM_2, _C_CRD_3D_TRN_SUM_1, ATH_PC_ACS_REFER_CODE, _C_CNP_MER_NM_1, _C_CNP_APL_VEL_CNT, _A_D_D_2, _C_CC_OS_FB_CNT_3, _L_SCORE_H2O_5, _C_CRD_DOM_CNP_HV_CNT_1, _A_CAPP_LOGON_CNT_2
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250711 and 20250724
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,2106982,2106.982000,35.116367,0.585273,2X-LARGE,32,18.728736
01be9397-3204-bee4-0000-c71d2a4b7fb6,"(WITH code1_data AS (
    SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-16'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,2076229,2076.229000,34.603817,0.576730,2X-LARGE,32,18.455360
01be9a67-3204-bee4-0000-c71d2a7c33b2,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PKENGINEERING_TESTING_1(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,2066861,2066.861000,34.447683,0.574128,2X-LARGE,32,18.372096
01bed5ad-3204-c554-0000-c71d2c5cfd2a,"create or replace temporary table NPP_TRAN as
select	distinct case   when b.fraudtype = 'CVL' then null
                else b.fraudtype
        end as FRAUDTYPE
		,b.detection
		,b.case_detection
        ,TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
		,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
		,a.tts_tran_date_alt
		,a.tts_tran_time_alt
		,a.dtl_ex_0_20s_001
		,a.dtl_ex_1_5s_01
		,a.ssx_cust_num
		,a.chl_id_ob_userid
		,a.tgx_bank_name
		,a.tgx_bank_num
		,a.tgx_branch_id
		,a.tgx_acct_num
		,a.tgx_name
		,a.tgx_description
		,TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as TRAN_AMT
		,a.dtl_ex_0_i_002 as FTP_IND
		
		-- BioCatch UVs
		,TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE
		,TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_SCORE
		,TRY_TO_NUMBER(a._l_adv_key_combo, 38, 2) as _L_ADV_KEY_COMBO
		,TRY_TO_NUMBER(a._l_clpbrd_evnt, 38, 2) as _L_CLPBRD_EVNT
		,TRY_TO_NUMBER(a._l_concurrent_sess, 38, 2) as _L_CONCURRENT_SESS
		,TRY_TO_NUMBER(a._l_export_data, 38, 2) as _L_EXPORT_DATA
		,TRY_TO_NUMBER(a._l_import_data, 38, 2) as _L_IMPORT_DATA
		,TRY_TO_NUMBER(a._l_is_rat, 38, 2) as _L_IS_RAT
		,TRY_TO_NUMBER(a._l_is_mob_rat, 38, 2) as _L_IS_MOB_RAT
		,TRY_TO_NUMBER(a._l_rat_in_sess, 38, 2) as _L_RAT_IN_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_hrisk_sess, 38, 2) as _L_IS_RCNT_HRISK_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_rat, 38, 2) as _L_IS_RCNT_RAT
		,TRY_TO_NUMBER(a._l_lrg_dist_known_loc, 38, 2) as _L_LRG_DIST_KNOWN_LOC
		,TRY_TO_NUMBER(a._l_rare_scrn_sz, 38, 2) as _L_RARE_SCRN_SZ
		,TRY_TO_NUMBER(a._l_risky_isp, 38, 2) as _L_RISKY_ISP
		,TRY_TO_NUMBER(a._l_risky_key_combo, 38, 2) as _L_RISKY_KEY_COMBO
		,TRY_TO_NUMBER(a._l_tzone_mismatch, 38, 2) as _L_TZONE_MISMATCH
		,TRY_TO_NUMBER(a._l_scm_rsk_hgh_scr, 38, 2) as _L_SCM_RSK_HGH_SCR
		,TRY_TO_NUMBER(a._l_keyb_nav_anom, 38, 2) as _L_KEYB_NAV_ANOM
		,TRY_TO_NUMBER(a._l_scrn_broadcast, 38, 2) as _L_SCRN_BROADCAST
		,TRY_TO_NUMBER(a._l_delay_to_input_pi, 38, 2) as _L_DELAY_TO_INPUT_PI
		,TRY_TO_NUMBER(a._l_input_otp_delay, 38, 2) as _L_INPUT_OTP_DELAY
		,TRY_TO_NUMBER(a._l_active_spoofing, 38, 2) as _L_ACTIVE_SPOOFING
		,TRY_TO_NUMBER(a._l_pmt_vloc_anom, 38, 2) as _L_PMT_VLOC_ANOM
		,TRY_TO_NUMBER(a._l_rcnt_hi_scr_on_dev, 38, 2) as _L_RCNT_HI_SCR_ON_DEV
		,TRY_TO_NUMBER(a._l_accum_amt_anom, 38, 2) as _L_ACCUM_AMT_ANOM
		,TRY_TO_NUMBER(a._l_app_togg, 38, 2) as _l_APP_TOGG
		,TRY_TO_NUMBER(a._l_is_active_call, 38, 2) as _L_IS_ACTIVE_CALL
		,TRY_TO_NUMBER(a._l_is_long_sess, 38, 2) as _L_IS_LONG_SESS
		,TRY_TO_NUMBER(a._l_type_patterns_anomaly, 38, 2) as _L_TYPE_PATTERNS_ANOMALY
		,TRY_TO_NUMBER(a._l_seg_typing_pi, 38, 2) as _L_SEG_TYPING_PI
		
		-- NameCheck UVs
		,a._l_nc_response_code
		,a._l_nc_match_name_conf
		
		-- H2O Score UVs
		,TRY_TO_NUMBER(a._l_cust_scamrisk_score, 38, 2) as _L_CUST_SCAMRISK_SCORE
		,a.dtl_ex_0_n_029
		,a.dtl_ex_0_n_034 as CERBERUS_SCORE
		
		-- Recipient Level UVs
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_short, 38, 2) as _B_RECIP_SUM_SHORT
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_long, 38, 2) as _B_RECIP_SUM_LONG
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_short, 38, 2) as _B_RECIP_FTP_CNT_SHORT
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_long, 38, 2) as _B_RECIP_FTP_CNT_LONG
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_any_cust_ftp_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_ANY_CUST_FTP_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_2
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_3
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_4
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_5
		
		-- Customer Level UVs
		,TRY_TO_NUMBER(a._a_customer_age, 38, 2) as _A_CUSTOMER_AGE
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_SHORT, 38, 2) as _A_CUST_SUM_AAA_SHORT
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_LONG, 38, 2) as _A_CUST_SUM_AAA_LONG
		,TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1
		,TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2
		,TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3
		,TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4
		,TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5
		,TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6
		,TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7
		,TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1
		,TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2
		,TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3
		,TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4
		,TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5
		,TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6
		,TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_NEW_CAPP_REGO_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CSE_CHG_DWL_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CIF_ESTABLISH_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00') as _A_NB_LASTLOGON_DT_1
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00') as _A_CURR_CAPP_DEVICE_DT
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_1, 38, 2) as _A_NB_LOGONS_CNT_1
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_2, 38, 2) as _A_NB_LOGONS_CNT_2
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_3, 38, 2) as _A_NB_LOGONS_CNT_3
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_1, 38, 2) as _A_CAPP_LOGON_CNT_1
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_2, 38, 2) as _A_CAPP_LOGON_CNT_2
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_3, 38, 2) as _A_CAPP_LOGON_CNT_3
		
		-- Customer-Recipient Relationship Level UVs
		,TRY_TO_NUMBER(a._x_cif_recipient_new_sum, 38, 2) + TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM
		,case   when a._x_cif_recipient_new_date = '0' then TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF')
                else TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00'::timestamp)
		end as _X_CIF_RECIPIENT_NEW_DATE
		,case   when a._x_cif_recipient_new_cnt = '0' then 1
                else TRY_TO_NUMBER(a._x_cif_recipient_new_cnt, 38, 2) + 1
		end as _X_CIF_RECIPIENT_NEW_CNT
		
		-- Telstra Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_TELSTRA_LONG_CALL
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_telstra_last_call_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _X_TELSTRA_LAST_CALL_DT
		,TRY_TO_NUMBER(a._x_telstra_last_call_dur, 38, 2) as _X_TELSTRA_LAST_CALL_DUR
		,TRY_TO_NUMBER(a._x_telstra_max_call_dur, 38, 2) as _X_TELSTRA_MAX_CALL_DUR
		,a._a_telstra_active_call
		
		-- Crypto UVs
		,TRY_TO_NUMBER(a._a_crypto_mnthly_sum, 38, 2) as _A_CRYPTO_MNTHLY_SUM
		,DATEADD(day, TRY_TO_NUMBER(a._a_crypto_last_pymnt_date, 38, 2), '1960-01-01') as _A_CRYPTO_LAST_PYMNT_DATE
		
		-- M100 Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP1_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP2_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP3_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP4_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP5_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP6_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP7_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP10_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp11_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP11_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp12_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP12_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp13_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP13_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP20_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP21_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_M100_P8_IND_DT
		
		-- M100 App Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P1_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P5_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P8_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P9_DT
 		
		-- CIF Profiling UVs
		,a._l_fingerprint_1
		,a._l_fingerprint_2
		,a._l_fingerprint_3
		,a._l_fingerprint_4

        -- Intelligent Friction UVs
                ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCTN_MSG_SNT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCTN_MSG_SNT
    
         ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCT_INTENT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCT_INTENT
        
from        lcl.fdp_customer_transactions_send_flat a
left join  prd_p01_dmn_fraumd.labmlfrd.dtl_fraudmaster b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where   a.mid_event_ts >= '20250701'
and     a.mid_event_ts >= '20250801'
and     a.dtl_ex_1_5s_01 in ('C205N'
							,'C207N'
							,'C242N'
							,'C244N'
							,'C246N'
							,'N205N'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'X232N'
							,'X243N'
							,'X246N')
and     a.hdr_source = 'NPP OUT'
and     tran_amt > 0
order by    chl_id_ob_userid
            ,transactiondatetime;",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,2050201,2050.201000,34.170017,0.569500,2X-LARGE,32,18.224000
01beae51-3204-c1f6-0000-c71d2b32966e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_WIDE_TRANS_PK_CNP_D013_V1(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

    
            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250710 and 20250826
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,4089057,4089.057000,68.150950,1.135849,X-LARGE,16,18.173584
01be9fa1-3204-bee4-0000-c71d2aa13d36,"WITH code1_data AS (
    SELECT DISTINCT
--         TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
-- (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
-- TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d,
-- TO_DATE(SUBSTR(mid_event_ts, 1, 8), 'YYYYMMDD') as evnt_d,
-- TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
-- CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
-- CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250701'
and  mid_event_ts < '20250731'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2025-07-01'
    and SNAP_D < '2025-07-31'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK-- );  -- This implements NPP.SNAP_D >= RPF.SNAP_D
 ",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1994831,1994.831000,33.247183,0.554120,2X-LARGE,32,17.731840
01be939e-3204-bee5-0000-c71d2a4cc102,"(WITH code1_data AS (
    SELECT DISTINCT
--         TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
-- (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
-- TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d,
-- TO_DATE(SUBSTR(mid_event_ts, 1, 8), 'YYYYMMDD') as evnt_d,
-- TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
-- CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
-- CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC
,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
--,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000   
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE

,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT


-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
--,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
--,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
--,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250601'
and  mid_event_ts < '20250701'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime



    -- FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT 
    -- where SSX_SNAP_D >= '2025-01-01'
),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2025-06-01'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1969433,1969.433000,32.823883,0.547065,2X-LARGE,32,17.506080
01be1283-3204-ae51-0000-c71d2667220a,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""UWHOS4QN_6WF956F""()",GAREAJU,PUBLIC,1956963,1956.963000,32.616050,0.543601,2X-LARGE,32,17.395232
01be9abf-3204-bee4-0000-c71d2a7ddbfa,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE1 as (

WITH cleaned_recipient_data AS (
    -- Clean and prepare recipient transaction data for LAST 6 MONTHS
    SELECT
        TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
        TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
        (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
        CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
        dtl_ex_0_20s_001,
        SSX_CUST_NUM,
        TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS transaction_date,
        -- Extract hour from timestamp
        EXTRACT(HOUR FROM TRY_TO_TIMESTAMP(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF')) as C_hour,
        
        -- Day features from SSX_SNAP_D (DATE)
        DAYOFWEEK(TRANSACTIONDATETIME) as C_day_of_week,
        DAY(SSX_SNAP_D) as C_day_of_month,
        MONTH(SSX_SNAP_D) as C_month_of_year,
        -- Clean transaction amount
        -- CASE
        --     WHEN TGX_TRAN_AMT IS NULL OR TGX_TRAN_AMT = '' OR TGX_TRAN_AMT = ' ' THEN NULL
        --     ELSE TRY_CAST(TGX_TRAN_AMT AS DECIMAL(18,2))
        -- END AS clean_transaction_amount,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_SCAM_VICTIM_FLAG, '[^0-9.-]', '')), -1) as _A_SCAM_VICTIM_FLAG,
        -- Primary risk indicator y
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,
        -- Blacklist and scam indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_acct,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl1_scam_tp_cif, '[^0-9.-]', '')), -1) as _b_list_rl1_scam_tp_cif,
        -- High-risk biller metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_1,
        -- NPP blacklist flags
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_recip_flag,
        -- NPP outbound transaction metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_sum_1,
        -- NPP first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_2,
        -- NPP watchlist flags
        -- Other risk indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_open_listed_last_cif_2, '[^0-9.-]', '')), -1) as _b_open_listed_last_cif_2,
        -- Recipient first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_long, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_long,
        -- Recipient link sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_short,
        -- Recipient transaction sums (various time periods)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_4, '[^0-9.-]', '')), -1) as _b_recip_sum_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_7, '[^0-9.-]', '')), -1) as _b_recip_sum_7,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_today, '[^0-9.-]', '')), -1) as _b_recip_sum_today,
        -- Recipient AAA transaction sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_1, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_4, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_short,
        -- Fixed: _b_rfm_whitelist_ind (was incorrectly aliased)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_rfm_whitelist_ind, '[^0-9.-]', '')), -1) as _b_rfm_whitelist_ind,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_1d_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_1d_out,

        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(RSP_ACTION_CODE, '[^0-9.-]', '')), -1) as RSP_ACTION_CODE,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_apps, '[^0-9.-]', '')), -1) as _l_risky_apps,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_browser, '[^0-9.-]', '')), -1) as _l_risky_browser,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_accel_event_cnt, '[^0-9.-]', '')), -1) as _l_accel_event_cnt,
        COALESCE(CAST(_l_recip_ftp AS VARCHAR(50)), '-1') as _l_recip_ftp,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_amt, '[^0-9.-]', '')), -1) as _l_risky_amt,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_tzone_mismatch, '[^0-9.-]', '')), -1) as _l_tzone_mismatch,

        -- Original features
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_REGISTRATIONS_CNT_1, '[^0-9.-]', '')), -1) as _A_CAPP_REGISTRATIONS_CNT_1,   
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_LOGON_CNT_1, '[^0-9.-]', '')), -1) as _A_CAPP_LOGON_CNT_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_REGO_1D_IND, '[^0-9.-]', '')), -1) as _A_CAPP_REGO_1D_IND,
        
        -- Clean transaction amount
        -- CASE
        --     WHEN TGX_TRAN_AMT IS NULL OR TGX_TRAN_AMT = '' OR TGX_TRAN_AMT = ' ' THEN NULL
        --     ELSE TRY_CAST(TGX_TRAN_AMT AS DECIMAL(18,2))
        -- END AS clean_transaction_amount,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(RSP_ACTION_CODE, '[^0-9.-]', '')), -1) as RSP_ACTION_CODE,
        -- Original TGX_TRAN_AMT for backward compatibility
        COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TGX_TRAN_AMT,
        
        -- Primary risk indicators
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_SCAM_VICTIM_FLAG, '[^0-9.-]', '')), -1) as _A_SCAM_VICTIM_FLAG,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,

        
    FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
    WHERE SSX_SNAP_D >= '2024-09-20'
        AND SSX_SNAP_D < '2025-07-17'
        AND HDR_SOURCE = 'NPP OUT'
        AND TGX_BANK_NUM <> ''
        AND TGX_BRANCH_ID <> ''
        AND TGX_ACCT_NUM <> ''
),

-- Calculate daily aggregates
daily_aggregates AS (
    SELECT
        NPP.RCPI_ACCT_I,
        NPP.SSX_SNAP_D,
        
        -- Original aggregates
        MAX(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS MAX_SEND_CAPP_REGR_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS TOTL_SEND_CAPP_REGR_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_CAPP_REGR_Q,
        
        MIN(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MIN_SEND_CAPP_LOGN_Q,
        MAX(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MAX_SEND_CAPP_LOGN_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS TOTL_SEND_CAPP_LOGN_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_CAPP_LOGN_Q,
        
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGO_1D_IND) = '' OR TRIM(NPP._A_CAPP_REGO_1D_IND) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGO_1D_IND) END) AS TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_CAPP_REGO_1D_IND) = '' OR TRIM(NPP._A_CAPP_REGO_1D_IND) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_NEW_CAPP_REGR_1D_INDA_Q,
        
        MAX(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS MAX_SEND_SCAM_VCTM_Q,
        SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS TOTL_SEND_SCAM_VCTM_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_SCAM_VCTM_FLAG_Q,
        
        MIN(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MIN_FNCL_TRAN_A,
        MAX(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN -9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MAX_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS TOTL_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE 1 END) AS CNT_FNCL_TRAN_AMT_Q,
        
        -- Unique sender count
        COUNT(DISTINCT NPP.SSX_CUST_NUM) AS UNIQUE_SENDERS_DAILY,
        
        -- Transaction count and sum for calculations
        COUNT(*) AS DAILY_TRANSACTION_COUNT,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS DAILY_TRANSACTION_SUM,
        
        -- NEW: Risk indicator aggregations
        MAX(NPP._b_crypto_risk) AS MAX_CRYPTO_RISK_DAILY,
        
        
    FROM cleaned_recipient_data NPP    
    GROUP BY NPP.RCPI_ACCT_I, NPP.SSX_SNAP_D
),

-- Calculate SEPARATE window patterns
pattern_features AS (
    SELECT *,
        -- Account history sufficiency check
        COUNT(*) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
        ) AS HISTORICAL_DAYS_AVAILABLE,
        
        -- New account flags
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) = 0 THEN 1 ELSE 0
        END AS IS_NEW_ACCOUNT_FLAG,
        
        DATEDIFF('day', 
            MIN(SSX_SNAP_D) OVER (PARTITION BY RCPI_ACCT_I),
            SSX_SNAP_D
        ) AS DAYS_SINCE_FIRST_TRANSACTION,
        
        -- PATTERN 1: 7-DAY HISTORICAL LOOKBACK (excluding current day)
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3  -- At least 3 days of history
            THEN AVG(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) 
            ELSE 0
        END AS AVG_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN SUM(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS ACTIVE_DAYS_7D_HISTORICAL,
        
        -- PATTERN 2: CURRENT DAY + 1 FOLLOWING DAY (2-day forward pattern)
        AVG(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
        
        AVG(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        SUM(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        AVG(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        MAX(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_TRANSACTIONS_CURRENT_PLUS_1D,
        
        MAX(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS ACTIVE_DAYS_CURRENT_PLUS_1D
        
    FROM daily_aggregates
),

-- Final output with BOTH pattern types
recipient_aggregates as (SELECT
    RCPI_ACCT_I,
    SSX_SNAP_D,
    MAX_SEND_CAPP_REGR_Q,
    TOTL_SEND_CAPP_REGR_Q,
    -- CNT_SEND_CAPP_REGR_Q,
    MIN_SEND_CAPP_LOGN_Q,
    MAX_SEND_CAPP_LOGN_Q,
    TOTL_SEND_CAPP_LOGN_Q,
    -- CNT_SEND_CAPP_LOGN_Q,
    TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
    -- CNT_SEND_NEW_CAPP_REGR_1D_INDA_Q,
    MAX_SEND_SCAM_VCTM_Q,
    TOTL_SEND_SCAM_VCTM_Q,
    -- CNT_SEND_SCAM_VCTM_FLAG_Q,
    MIN_FNCL_TRAN_A,
    MAX_FNCL_TRAN_A,
    TOTL_FNCL_TRAN_A,
    CNT_FNCL_TRAN_AMT_Q,
    
     -- Current day metrics
    UNIQUE_SENDERS_DAILY,
    ROUND(UNIQUE_SENDERS_DAILY::DECIMAL / NULLIF(DAILY_TRANSACTION_COUNT, 0), 3) AS SENDER_DIVERSITY_RATIO_DAILY,
    DAILY_TRANSACTION_COUNT,
    ROUND(DAILY_TRANSACTION_SUM, 2) AS DAILY_TRANSACTION_SUM,
    
    -- Account history indicators
    IS_NEW_ACCOUNT_FLAG,
    DAYS_SINCE_FIRST_TRANSACTION,
    HISTORICAL_DAYS_AVAILABLE,
    
    -- 7-day historical features (0 for accounts without history)
    ROUND(AVG_TRANSACTIONS_7D_HISTORICAL, 2) AS AVG_TRANSACTIONS_7D_HISTORICAL,
    ROUND(AVG_UNIQUE_SENDERS_7D_HISTORICAL, 2) AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
    ROUND(TOTAL_TRANSACTION_SUM_7D_HISTORICAL, 2) AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
    ROUND(AVG_TRANSACTION_SUM_7D_HISTORICAL, 2) AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
    
    -- Current + 1 day forward features
    ROUND(AVG_TRANSACTIONS_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
    ROUND(AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D, 2) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
    ROUND(TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
    ROUND(AVG_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D
FROM pattern_features
)

-- Final result: Transaction-level data with recipient features
SELECT 
    r.*,  -- All transaction-level columns
    -- Recipient aggregated features
    ra.* EXCLUDE(RCPI_ACCT_I, SSX_SNAP_D)
    
FROM cleaned_recipient_data r
LEFT JOIN recipient_aggregates ra ON r.RCPI_ACCT_I = ra.RCPI_ACCT_I
and r.SSX_SNAP_D = ra.SSX_SNAP_D);",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1948040,1948.040000,32.467333,0.541122,2X-LARGE,32,17.315904
01bde57a-3204-a616-0000-c71d252090fe,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""F2KSZQG4AD3S4ZO0""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,1947468,1947.468000,32.457800,0.540963,2X-LARGE,32,17.310816
01bf150b-3204-cccf-0000-c71d2e2c2d76,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250916_045720(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250616
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1937030,1937.030000,32.283833,0.538064,2X-LARGE,32,17.218048
01be4fdf-3204-b363-0000-c71d28299e86,"SELECT 
    t1.tts_tran_date_client,
    t1.tts_tran_time_client,
    REGEXP_REPLACE(LTRIM(t1._c_cmx_tran_id), '^[0-9]','') AS transactionnumber2,
    t1.ath_pc_pos,
    t1.rsp_action_code,
    t1.DTL_CA_auth_sys_dec,
    t1.DTL_CA_client_amt,
    t1.CHL_CT_term_owner_name,
    t1.dtl_ex_0_20s_004,
    t1.chl_id_card_num,
    t1.CHL_CT_mer_mcc,
    t1.dtl_ex_3_20s_001,
    t1.chl_ct_media,
    t1.dtl_ex_0_3s_002,
    t1.dtl_ca_reversal_ind,
    t1.dtl_ex_3_80s_003,
    t1._a_customer_age,
    REGEXP_REPLACE(LTRIM(t1.rsp_ex_2_30s_001), '^[0-9]','') AS transactionnumber,
    t1.ssx_cust_num
FROM
    PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT AS t1
WHERE 
    t1.ssx_cust_num in ('14407463')",SAKKAIB,R_USR_FRAUMD_LABMLFRD_RW,1918684,1918.684000,31.978067,0.532968,2X-LARGE,32,17.054976
01befe00-3204-c93d-0000-c71d2d848d46,"CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_FPF AS (
-- INSERT INTO LABMLFRD.CARD_TRAN_PRFL (
    WITH TRAN AS (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS TRAN_I
            , TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S
            , TO_DATE(TTS_TRAN_DATE_ALT, 'YYYYMMDD') AS TRAN_D
            , UPPER(TO_CHAR(DATE_TRUNC('HOUR', TRAN_S), 'HH:DY')) AS TRAN_HOUR_DAY_X
            , TO_CHAR(SSX_CUST_NUM) AS CUST_I
        	, CHL_ID_CARD_NUM AS CARD_I
            , ATH_PC_CARD_EXP_DATE
        	, DTL_EX_0_20S_004 AS DPAN_I
        	, CASE WHEN CHL_CT_MEDIA = 'V' THEN 1 ELSE 0 END AS TOKN_F
            , CASE WHEN CHL_CT_WHICH_CARD IN (1,0) THEN 1 ELSE 0 END AS PRIM_CAHD_F
        	, DTL_CA_CLIENT_AMT AS TRAN_AMT_N
        	, ATH_PC_POS AS POS_ENTR_C
            , CASE WHEN DTL_CA_REVERSAL_IND = 'N' THEN 0 ELSE 1 END AS REVS_INDA_F
            , CASE WHEN ATH_PC_PIN_VRFY = 'V' THEN 0 ELSE 1 END AS PIN_VRFY_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'C' THEN 1 ELSE 0 END AS PAIN_CUST_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'M' THEN 1 ELSE 0 END AS PAIN_MERC_F
        	, CASE WHEN DTL_EX_0_I_022 = 'R' THEN 1 ELSE 0 END AS RCRR_F
        	, DTL_EX_0_3S_002 AS SECU_LEVL_INDA_C
            , SUBSTR(DTL_EX_3_80S_003,1,2) AS ACCT_AUTT_V
            , CASE WHEN ATH_PC_POS IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_NOT_PRES_INDA_F
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS ""3DS_INDA_F""
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 NOT IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS N3D_INDA_F
            , CASE WHEN ATH_PC_POS NOT IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_PRES_INDA_F
            , CASE WHEN CARD_PRES_INDA_F = '1' AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS ATM_TRAN_F
            , CASE WHEN POS_ENTR_C IN ('62','79','80') AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS FALL_BACK_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '05' THEN 1 ELSE 0 END AS CHIP_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '07' THEN 1 ELSE 0 END AS PAY_PASS_TRAN_INDA_F
        	, REPLACE(DTL_CA_AUTH_SYS_DEC,' ','') AS UPST_DCDE_C
        	, REPLACE(DTL_CA_AUTH_SYS_INFO,' ','') AS UPST_REAS_C
            , REPLACE(RSP_ACTION_CODE,' ','') AS FINL_DCDE_C
            , CASE WHEN UPST_DCDE_C = '1' AND FINL_DCDE_C != '1' THEN 1 ELSE 0 END AS RULE_DCLN_F
        	, CASE WHEN FINL_DCDE_C = '1' THEN 1 ELSE 0 END AS FINL_APRD_TRAN_CNT_F
        	, CASE WHEN UPST_REAS_C IN ('20','21','22','81','BE') THEN 1 ELSE 0 END  AS INCO_EXPY_F
        	, CASE WHEN UPST_REAS_C IN ('30','31','34','36','41','42','43','44','45','46','47') THEN 1 ELSE 0 END AS INCO_CVVA_F
        	, CASE WHEN UPST_REAS_C IN ('11','12','CP','MP','PE','PM') THEN 1 ELSE 0 END AS INCO_PIN_F
        	, CASE WHEN UPST_REAS_C IN ('T7','CL','87','88','89','90','98') THEN 1 ELSE 0 END AS OVER_LIMT_DCLN_F /* $ OVER LIMIT, DELINQUANT OR TRASACTION LIMIT */
            
            , CHL_CT_ACQ_ID AS ACQR_I
        	, CHL_CT_TERM_OWNER_ID AS MERC_I
        	, REPLACE(CHL_CT_TERM_OWNER_NAME,' ','') AS MERC_M
        	, CHL_CT_TERM_ID AS MERC_TRML_I
        	, CHL_CT_TERM_CNTRY_CODE AS CNTY_C
        	, CHL_CT_MER_MCC AS MERC_CATG_C
            , CASE WHEN CHL_CT_TERM_CNTRY_CODE = '036' THEN 1 ELSE 0 END AS DOMS_TRAN_INDA_F

        	, RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X
            , SUBSTR(RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X
            , SUBSTR(RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F
        	, SUBSTR(RSP_EX_2_8S_002,8,1) AS PUSH_EXIT_C
            , CASE WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='1' AND RSP_EX_2_I_009='2' THEN '1WP_REG'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='2' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='3' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='4' AND RSP_EX_2_I_009='2' THEN '1WP_DMGD_CARD'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='5' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='A' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='B' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='G' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='H' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='I' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_CIF'
            	ELSE 'NO_PUSH' END AS PUSH_TYPE_QLFY_X
            , CASE WHEN DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(DTL_EX_3_8S_004) END AS MCRD_SCOR_N,

            -- numerical UV columns, if missing then -1 as default
COALESCE(CAST(_C_CC_GBL_N3D_1D_SUM_1 AS FLOAT), -1) AS _C_CC_GBL_N3D_1D_SUM_1,
COALESCE(CAST(_C_CC_GBL_N3D_1D_CNT_1 AS FLOAT), -1) AS _C_CC_GBL_N3D_1D_CNT_1,
COALESCE(CAST(_C_CC_CNP_VEL_6HR_SUM_1 AS FLOAT), -1) AS _C_CC_CNP_VEL_6HR_SUM_1,
COALESCE(CAST(_C_CRD_APAY_SUM_1 AS FLOAT), -1) AS _C_CRD_APAY_SUM_1,
COALESCE(CAST(_C_CRD_SAFE_MERCHANT AS FLOAT), -1) AS _C_CRD_SAFE_MERCHANT,
COALESCE(CAST(_C_2WAY_CRD_FRD_RULE_FLAG AS FLOAT), -1) AS _C_2WAY_CRD_FRD_RULE_FLAG,
COALESCE(CAST(_C_CC_CNP_LTRANS_6HR_COUNT_1 AS FLOAT), -1) AS _C_CC_CNP_LTRANS_6HR_COUNT_1,
COALESCE(CAST(_C_CC_CNP_VEL_6HR_COUNT_1 AS FLOAT), -1) AS _C_CC_CNP_VEL_6HR_COUNT_1,
COALESCE(CAST(_L_CITY_AGE AS FLOAT), -1) AS _L_CITY_AGE,
COALESCE(CAST(_A_CRD_NPP_PAYMENT_AMOUNT AS FLOAT), -1) AS _A_CRD_NPP_PAYMENT_AMOUNT,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_3 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_3,
COALESCE(CAST(_A_CUSTOMER_AGE AS FLOAT), -1) AS _A_CUSTOMER_AGE,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_10 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_10,
COALESCE(CAST(_A_NPP_FTP_SUM AS FLOAT), -1) AS _A_NPP_FTP_SUM,
COALESCE(CAST(_L_PASTE_IN_LOGIN_CNT AS FLOAT), -1) AS _L_PASTE_IN_LOGIN_CNT,
COALESCE(CAST(_A_CUST_SUM_AAA_LONG AS FLOAT), -1) AS _A_CUST_SUM_AAA_LONG,
COALESCE(CAST(_L_G_CON_DEV AS FLOAT), -1) AS _L_G_CON_DEV,
COALESCE(CAST(_L_DEV_FAM_AGE AS FLOAT), -1) AS _L_DEV_FAM_AGE,
COALESCE(CAST(_L_TOUCH_CNT AS FLOAT), -1) AS _L_TOUCH_CNT,
COALESCE(CAST(_B_RECIP_SUM_AAA_LONG AS FLOAT), -1) AS _B_RECIP_SUM_AAA_LONG,
COALESCE(CAST(_L_RISKY_KEY_COMBO AS FLOAT), -1) AS _L_RISKY_KEY_COMBO,
COALESCE(CAST(_A_C_G AS FLOAT), -1) AS _A_C_G,
COALESCE(CAST(_L_SCORE_4 AS FLOAT), -1) AS _L_SCORE_4,
COALESCE(CAST(_A_E AS FLOAT), -1) AS _A_E,
COALESCE(CAST(_A_NPP_INB_PMT_VAL AS FLOAT), -1) AS _A_NPP_INB_PMT_VAL,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_2 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_2,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_CNT_1 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_CNT_1,
COALESCE(CAST(_A_CRD_SCAM_SUPP_7D_SUM_1 AS FLOAT), -1) AS _A_CRD_SCAM_SUPP_7D_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_CNT_2 AS FLOAT), -1) AS _A_CLIENT_CITY_CNT_2,
COALESCE(CAST(_L_UID_AGE AS FLOAT), -1) AS _L_UID_AGE,
COALESCE(CAST(_L_SCRN_W AS FLOAT), -1) AS _L_SCRN_W,
COALESCE(CAST(_L_ASN_AGE AS FLOAT), -1) AS _L_ASN_AGE,
COALESCE(CAST(_L_SCORE_2 AS FLOAT), -1) AS _L_SCORE_2,
COALESCE(CAST(_A_CUST_NPP_OUT_SUM_AAA_5 AS FLOAT), -1) AS _A_CUST_NPP_OUT_SUM_AAA_5,
COALESCE(CAST(_L_BC_SESS_CNT AS FLOAT), -1) AS _L_BC_SESS_CNT,
COALESCE(CAST(_L_ACC_AMT_1H AS FLOAT), -1) AS _L_ACC_AMT_1H,
COALESCE(CAST(_A_LIST_WL_SCAM_DRIVE_LICENSE AS FLOAT), -1) AS _A_LIST_WL_SCAM_DRIVE_LICENSE,
COALESCE(CAST(_A_CC_CASH_ADVANCE_AMT AS FLOAT), -1) AS _A_CC_CASH_ADVANCE_AMT,
COALESCE(CAST(_A_CUST_SUM_AAA_SHORT AS FLOAT), -1) AS _A_CUST_SUM_AAA_SHORT,
COALESCE(CAST(_A_P_L_1 AS FLOAT), -1) AS _A_P_L_1,
COALESCE(CAST(_L_PMT_AMT AS FLOAT), -1) AS _L_PMT_AMT,
COALESCE(CAST(_L_ISP_AGE AS FLOAT), -1) AS _L_ISP_AGE,
COALESCE(CAST(_L_ACC_AMT_7D AS FLOAT), -1) AS _L_ACC_AMT_7D,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_7 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_7,
COALESCE(CAST(_L_CONCURRENT_SESS AS FLOAT), -1) AS _L_CONCURRENT_SESS,
COALESCE(CAST(_A_CAPP_HCE_CNT_1 AS FLOAT), -1) AS _A_CAPP_HCE_CNT_1,
COALESCE(CAST(_L_SCORE_5 AS FLOAT), -1) AS _L_SCORE_5,
COALESCE(CAST(_L_MUID_AGE_PER_USER AS FLOAT), -1) AS _L_MUID_AGE_PER_USER,
COALESCE(CAST(_A_CUST_ACCT_BAL AS FLOAT), -1) AS _A_CUST_ACCT_BAL,
COALESCE(CAST(_L_CUST_SCAMRISK_SCORE AS FLOAT), -1) AS _L_CUST_SCAMRISK_SCORE,
COALESCE(CAST(_A_ATM_WITHDRAWAL_SUM_AMT AS FLOAT), -1) AS _A_ATM_WITHDRAWAL_SUM_AMT,
COALESCE(CAST(_L_TAP_CNT AS FLOAT), -1) AS _L_TAP_CNT,
COALESCE(CAST(_A_LIST_WL_SCAM_TP_IP AS FLOAT), -1) AS _A_LIST_WL_SCAM_TP_IP,
COALESCE(CAST(_L_MAX_30D_SCORE AS FLOAT), -1) AS _L_MAX_30D_SCORE,
COALESCE(CAST(_B_RECIP_SUM_AAA_1 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_1,
COALESCE(CAST(_X_CIF_SENDER_SUM AS FLOAT), -1) AS _X_CIF_SENDER_SUM,
COALESCE(CAST(_L_M_L_1 AS FLOAT), -1) AS _L_M_L_1,
COALESCE(CAST(_L_SCRN_H AS FLOAT), -1) AS _L_SCRN_H,
COALESCE(CAST(_A_CUST_NPP_OUT_SUM_AAA_2 AS FLOAT), -1) AS _A_CUST_NPP_OUT_SUM_AAA_2,
COALESCE(CAST(_A_CUST_ACTION_IND AS FLOAT), -1) AS _A_CUST_ACTION_IND,
COALESCE(CAST(_A_P_L_C AS FLOAT), -1) AS _A_P_L_C,
COALESCE(CAST(_A_CUST_AVG_ACCT_BAL AS FLOAT), -1) AS _A_CUST_AVG_ACCT_BAL,
COALESCE(CAST(_L_AND_ID_AGE AS FLOAT), -1) AS _l_and_id_age,
COALESCE(CAST(_X_CIF_REC_SUM AS FLOAT), -1) AS _X_CIF_REC_SUM,
COALESCE(CAST(_L_SESS_CNT_MOB_SDK AS FLOAT), -1) AS _L_SESS_CNT_MOB_SDK,
COALESCE(CAST(_L_TOTAL_SESS_CNT AS FLOAT), -1) AS _L_TOTAL_SESS_CNT,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_L_NC_ACCT_NUM_NAME_CONF AS FLOAT), -1) AS _L_NC_ACCT_NUM_NAME_CONF,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_5 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_5,
COALESCE(CAST(_A_U AS FLOAT), -1) AS _A_U,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_L_SCM_RSK_SCR_2 AS FLOAT), -1) AS _L_SCM_RSK_SCR_2,
COALESCE(CAST(_B_RECIP_SUM_AAA_4 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_4,
COALESCE(CAST(_L_BC_SCORE AS FLOAT), -1) AS _L_BC_SCORE,
COALESCE(CAST(_L_DAYS_LST_DEV_AND AS FLOAT), -1) AS _L_DAYS_LST_DEV_AND,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_CNT_3 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_CNT_3,
COALESCE(CAST(_L_DAYS_LST_DEV_IOS AS FLOAT), -1) AS _L_DAYS_LST_DEV_IOS,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS FLOAT), -1) AS _X_LAST_N_TXN_COUNT,
COALESCE(CAST(_A_T AS FLOAT), -1) AS _A_T,
COALESCE(CAST(_A_CUST_NPP_IN_SUM_AAA_2 AS FLOAT), -1) AS _A_CUST_NPP_IN_SUM_AAA_2,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS FLOAT), -1) AS _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_L_ACC_AMT_2H AS FLOAT), -1) AS _L_ACC_AMT_2H,
            
COALESCE(CAST(_L_ACC_AMT_4H AS FLOAT), -1) AS _L_ACC_AMT_4H,
COALESCE(CAST(_A_LIST_BL_PASSPORT AS FLOAT), -1) AS _A_LIST_BL_PASSPORT,
COALESCE(CAST(_A_LIST_WL_SCAM_PASSPORT AS FLOAT), -1) AS _A_LIST_WL_SCAM_PASSPORT,
COALESCE(CAST(_A_LIST_BL_SCAM_PASSPORT AS FLOAT), -1) AS _A_LIST_BL_SCAM_PASSPORT,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_CNT_2 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_CNT_2,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_6 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_6,
COALESCE(CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(CAST(_A_R AS FLOAT), -1) AS _A_R,
COALESCE(CAST(_L_CNTRY_AGE AS FLOAT), -1) AS _L_CNTRY_AGE,
COALESCE(CAST(_A_NPP_IN_UNRELATED_SUM_24_1 AS FLOAT), -1) AS _A_NPP_IN_UNRELATED_SUM_24_1,
COALESCE(CAST(_X_FT_OVER5K_RECIP_CNT AS FLOAT), -1) AS _X_FT_OVER5K_RECIP_CNT,
COALESCE(CAST(_X_CIF_RECIPIENT_NEW_CNT AS FLOAT), -1) AS _X_CIF_RECIPIENT_NEW_CNT,
COALESCE(CAST(_A_NPP_IN_UNRELATED_SUM_24_2 AS FLOAT), -1) AS _A_NPP_IN_UNRELATED_SUM_24_2,
COALESCE(CAST(_B_NPP_OUT_SUM_1 AS FLOAT), -1) AS _B_NPP_OUT_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS FLOAT), -1) AS _L_ACC_AMT_1D,
COALESCE(CAST(_A_TRANSPORT_REG_CNT_1 AS FLOAT), -1) AS _A_TRANSPORT_REG_CNT_1,
COALESCE(CAST(_A_MULTI_CNT AS FLOAT), -1) AS _A_MULTI_CNT,
COALESCE(CAST(_L_M_L_4 AS FLOAT), -1) AS _L_M_L_4,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_X_NAME_MATCH_CNT AS FLOAT), -1) AS _X_NAME_MATCH_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_CNT_5 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_CNT_5,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_CNT_4 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_CNT_4,
COALESCE(CAST(_L_SESS_CNT_WEB AS FLOAT), -1) AS _L_SESS_CNT_WEB,
COALESCE(CAST(_B_RECIP_SUM_AAA_2 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_2,
COALESCE(CAST(_L_M_L_C AS FLOAT), -1) AS _L_M_L_C,
COALESCE(CAST(_L_TIME_ZONE AS FLOAT), -1) AS _L_TIME_ZONE,
COALESCE(CAST(_A_CUST_NPP_IN_SUM_AAA_1 AS FLOAT), -1) AS _A_CUST_NPP_IN_SUM_AAA_1,
COALESCE(CAST(_L_IP_AGE AS FLOAT), -1) AS _L_IP_AGE,
COALESCE(CAST(_A_NPP_INBOUND_SUM_AMT AS FLOAT), -1) AS _A_NPP_INBOUND_SUM_AMT,
COALESCE(CAST(_X_FT_OVER5K_RECIP_SUM AS FLOAT), -1) AS _X_FT_OVER5K_RECIP_SUM,
COALESCE(CAST(_X_CIF_SENDER_CNT AS FLOAT), -1) AS _X_CIF_SENDER_CNT,
COALESCE(CAST(_A_NB_LOGONS_CNT_2 AS FLOAT), -1) AS _A_NB_LOGONS_CNT_2,
COALESCE(CAST(_A_CLC_FTP_AMT AS FLOAT), -1) AS _A_CLC_FTP_AMT,
COALESCE(CAST(_L_TRVL_SPD AS FLOAT), -1) AS _L_TRVL_SPD,
COALESCE(CAST(_B_RECIP_SUM_LONG AS FLOAT), -1) AS _B_RECIP_SUM_LONG,
COALESCE(CAST(_A_CRYPTO_MNTHLY_SUM AS FLOAT), -1) AS _A_CRYPTO_MNTHLY_SUM,
COALESCE(CAST(_A_GL_TRF_ACC_BAL AS FLOAT), -1) AS _A_GL_TRF_ACC_BAL,
COALESCE(CAST(_L_SESS_CNT_MOB_BROWSER AS FLOAT), -1) AS _L_SESS_CNT_MOB_BROWSER,
COALESCE(CAST(_L_SCORE_3 AS FLOAT), -1) AS _L_SCORE_3,
COALESCE(CAST(_A_CRD_CRYPTO_PROC_FLG AS FLOAT), -1) AS _A_CRD_CRYPTO_PROC_FLG,
COALESCE(CAST(_B_NPP_OUT_CNT_2 AS FLOAT), -1) AS _B_NPP_OUT_CNT_2,
COALESCE(CAST(_A_NPP_OUT_CNT_2 AS FLOAT), -1) AS _A_NPP_OUT_CNT_2,
COALESCE(CAST(_A_SCH_AMT AS FLOAT), -1) AS _A_SCH_AMT,
COALESCE(CAST(_A_P_L_3 AS FLOAT), -1) AS _A_P_L_3,
COALESCE(CAST(_B_NPP_OUT_FTP_SUM_1 AS FLOAT), -1) AS _B_NPP_OUT_FTP_SUM_1,
COALESCE(CAST(_L_SDID_CNT_1 AS FLOAT), -1) AS _L_SDID_CNT_1,
COALESCE(CAST(_A_CUST_NPP_OUT_SUM_AAA_LONG AS FLOAT), -1) AS _A_CUST_NPP_OUT_SUM_AAA_LONG,
COALESCE(CAST(_A_LIST_RL1_SCAM_CUST_CIF AS FLOAT), -1) AS _A_LIST_RL1_SCAM_CUST_CIF,
COALESCE(CAST(_L_NUM_SESS_2H AS FLOAT), -1) AS _L_NUM_SESS_2H,
COALESCE(CAST(_A_VPN_VPS_IP_LOGON_COUNT AS FLOAT), -1) AS _A_VPN_VPS_IP_LOGON_COUNT,
COALESCE(CAST(_A_GEO_DISTANCE AS FLOAT), -1) AS _A_GEO_DISTANCE,
COALESCE(CAST(_X_NAME_MATCH_IND AS FLOAT), -1) AS _X_NAME_MATCH_IND,
COALESCE(CAST(_A_NB_LOGONS_CNT_3 AS FLOAT), -1) AS _A_NB_LOGONS_CNT_3,
COALESCE(CAST(_L_DAYS_LST_DEV_JS AS FLOAT), -1) AS _L_DAYS_LST_DEV_JS,
COALESCE(CAST(_A_FTP_SUM_1 AS FLOAT), -1) AS _A_FTP_SUM_1,
COALESCE(CAST(_L_NUM_SESS_4H AS FLOAT), -1) AS _L_NUM_SESS_4H,
COALESCE(CAST(_L_NC_MATCH_NAME_CONF AS FLOAT), -1) AS _L_NC_MATCH_NAME_CONF,
COALESCE(CAST(_B_RECIP_SUM_AAA_5 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_5,
COALESCE(CAST(_L_DPI_CHANGE AS FLOAT), -1) AS _L_DPI_CHANGE,
COALESCE(CAST(_B_RECIP_SUM_1 AS FLOAT), -1) AS _B_RECIP_SUM_1,
COALESCE(CAST(_A_SCAM_RISKY_MCC_PRELEAD_AMT AS FLOAT), -1) AS _A_SCAM_RISKY_MCC_PRELEAD_AMT,
COALESCE(CAST(_L_M_L_3 AS FLOAT), -1) AS _L_M_L_3,
COALESCE(CAST(_X_CIF_REC_CNT AS FLOAT), -1) AS _X_CIF_REC_CNT,
COALESCE(CAST(_A_LIST_BL_SCAM_TP_IP AS FLOAT), -1) AS _A_LIST_BL_SCAM_TP_IP,
_B_CRYPTO_RISK,
COALESCE(CAST(_A_LIST_BL_SCAM_DRIVE_LICENSE AS FLOAT), -1) AS _A_LIST_BL_SCAM_DRIVE_LICENSE,
COALESCE(CAST(_B_RECIP_SUM_AAA_SHORT AS FLOAT), -1) AS _B_RECIP_SUM_AAA_SHORT,
COALESCE(CAST(_L_CLIPB_EVENT_CNT AS FLOAT), -1) AS _L_CLIPB_EVENT_CNT,
COALESCE(CAST(_B_LIST_RL1_SCAM_TP_CIF AS FLOAT), -1) AS _B_LIST_RL1_SCAM_TP_CIF,
COALESCE(CAST(_B_NPP_BLACKLIST_RECIP_FLAG AS FLOAT), -1) AS _B_NPP_BLACKLIST_RECIP_FLAG,
        
            -- categorical UV columns
_A_CIF_ESTABLISH_CHANNEL,-- customer established channel (if = 'O' then it's electronic)
_A_ECV_DOCUMENT_IP,
_A_CUST_OS_VER,
_A_CUST_OS_NAME,
_A_2WAY_TYPE,
_A_CLIENT_CITY_10,
_L_PUSH_API_1,
_L_PUSH_API_2,
_L_PUSH_API_3,
_L_PUSH_API_4,
_A_CLIENT_CITY_6,
_L_NC_WINNING_ALG,
_L_PROXY_TYPE,
_L_LANG_3,
_L_LANG_1,
_L_LANG_2,
_L_NC_RESPONSE_CODE,
_A_PROF_RISK_IND,
_A_LATEST_NCRG_ISP,
CHL_CT_TERM_OWNER_NAME,
_C_CNP_MER_NM_CURR,
DTL_EX_0_2S_002,
DTL_EX_3_80S_002,
CASE WHEN _A_MRISK_FOREIGN_IP_CNTRY_CODE IS NULL THEN 'UNKNOWN' ELSE _A_MRISK_FOREIGN_IP_CNTRY_CODE || '_V' END AS _A_MRISK_FOREIGN_IP_CNTRY_CODE,
CASE WHEN ATH_PC_CUST_PRESENT IS NULL THEN 'UNKNOWN' ELSE ATH_PC_CUST_PRESENT || '_V' END AS ATH_PC_CUST_PRESENT,
CASE WHEN _A_CIF_ESTABLISH_CUST_PCODE IN ('0', NULL) THEN 'UNKNOWN' ELSE _A_CIF_ESTABLISH_CUST_PCODE || '_V' END AS _A_CIF_ESTABLISH_CUST_PCODE,
CASE WHEN CHL_CT_TERM_CNTRY_CODE IN ('0', NULL) THEN 'UNKNOWN' ELSE CHL_CT_TERM_CNTRY_CODE || '_V' END AS CHL_CT_TERM_CNTRY_CODE,
CASE WHEN DTL_CA_MERCH_CURR_CODE IN ('0', NULL) THEN 'UNKNOWN' ELSE DTL_CA_MERCH_CURR_CODE || '_V' END AS DTL_CA_MERCH_CURR_CODE,
        
            -- features extracted from fingerprints data
            case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
            case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts 
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts 
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts 
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts 
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
            case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
            case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
            case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association   
            case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
            case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1  
            case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2  
            case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
            case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
            case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
            case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
            case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
            case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate  
            case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
            case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
            case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
            case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
            case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status     
        
            -- time differences
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_x_npp_out_sum_date AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) AS _x_npp_out_sum_date_diff,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CC_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CC_DT_DIFF, -- customer recent credit card application datetime
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_ONLINE_PL_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_ONLINE_PL_DT_DIFF, -- customer recent personal loan application datetime
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CIF_ESTABLISH_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CIF_ESTABLISH_DT_DIFF, -- when the customer is established
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_a_ecv_document_dt AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _a_ecv_document_dt_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_AUTO_DEC_CP_PP_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CAPP_NOTIFY_OPT_OUT_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP1_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP1_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP2_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP2_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP5_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP5_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP7_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP7_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_1 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_1_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_2 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_2_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_3 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_3_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_4 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_4_DIFF,


            /* H2O UVS */
            
            
            _c_cc_n3d_ovs_975_sum_1,
            dtl_ex_0_n_009,
            _c_crd_n3d_score_sum_1,
            _c_cc_ind_tran_3d,
            dtl_ex_3_8s_007,
            ssa_c_bal,
            _c_cc_n3d_dom_999_cnt_1,
            _c_crd_apay_cnt_1,
            _c_crd_cnp_trn_cnt_1,
            
            dtl_ca_auth_sys_info,
            
            _c_crd_cnp_trn_cnt_5,
            _c_cc_recov_trans_sum_1,
            
            _c_cc_high_vel_apple_sum_1,
            _c_crd_cnp_trn_sum_1,
            
            _c_crd_all_trn_cnt_2,
            _c_n3d_merc_id_sum_1,
            _c_cc_tran_account_bin,
            chl_ct_mer_mcc,
            _c_n3d_merc_id_sum_2,
            _c_os_retail_keyed_cnt_1,
            
            
            _c_n3d_merc_id_1,
            
            chl_ct_ch_post_code,
            
            ssa_c_cash_limit,
            dtl_ca_client_tran_type,
            _c_n3d_merc_id_2,
            
            _c_crd_cnp_trn_cnt_2,
            
            _c_cc_gbl_n3d_cnt_2,
            
            
            _c_crd_cnp_trn_sum_3,
            _c_crd_cnp_trn_sum_2,
            _c_cc_cnp_vel_6hr_count_2,
            _c_n3d_merc_id_sum_3,
            _c_crd_cnp_trn_sum_4,
            
            _c_cc_sfw_microsoft_cnt_1,
            _c_vul_velo_cnp_sum_1,
            _a_all_bpay_acct_sum_3,
            _a_capp_logon_cnt_3,
            _a_client_branch_1,
            
            
            _a_client_country_1,
            _a_client_country_cnt_1,
            
            _a_client_postcode_cnt_2,
            _a_curr_capp_device_os,
            _a_devcie_geo_long_avg_incl,
            _a_fire_ct,
            _a_joint_acct_num_1,
            _a_open_ml_suppress_prob_scr,
            _a_open_ml_suppress_raw_scr,
            _a_sso_capp_netbank_cnt,
            _c_apay_dpan_cnt_1,
            _c_cc_cnp_ltrans_6hr_count_4,
            _c_cc_gbl_n3d_cnt_1,
            _c_cc_gbl_n3d_sum_2,
            _c_cc_ind_card_credit,
            _c_cc_ind_mer_domestic,
            _c_cc_list_ind_p03,
            _c_cc_payment_amount,
            _c_cc_recov_trans_cnt_1,
            _c_crd_all_trn_sum_1,
            _c_crd_all_trn_sum_2,
            _c_crd_cnp_trn_cnt_4,
            _c_crd_dom_cnp_hv_sum_1,
            _c_crd_n3d_visa_score_sum_1,
            _c_crd_n3d_visa_score_sum_2,
            _c_crd_n3d_visa_score_sum_dt,
            _c_mdes_dpan_2,
            _c_n3d_merc_id_3,
            _c_n3d_merc_id_7,
            _c_n3d_merc_id_sum_4,
            _c_n3d_merc_id_sum_5,
            _c_n3d_merc_id_sum_6,
            _c_n3d_merc_id_sum_9,
            ssa_c_open_to_buy,
            ssa_acct_num,
            chl_ct_acq_cntry_code,
            rsp_score_3,
            dtl_ca_client_amt,
            dtl_ca_merch_amt
            
        FROM 
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
        WHERE
            TTS_TRAN_DATE >= TO_CHAR($END_D-90,'YYYYMMDD')
            AND TTS_TRAN_DATE <= TO_CHAR($END_D,'YYYYMMDD')
            
            AND HDR_ACTIVITY_TYPE = 'CA'
            AND SSX_CUST_NUM != ''
            AND CHL_ID_CARD_NUM != ''
    )
    -- , CUST_TRAN_PRFL AS (
    -- SELECT 
    --     CUST_I

    --     -- Digital events
    --     , CAPP_PSWD_CHNG_CNT_Q
    -- 	, CAPP_PSWD_CHNG_LAST_S
    -- 	, CAPP_DVIC_REGR_CNT_Q
    -- 	, CAPP_DVIC_REGR_LAST_S
    -- 	, CAPP_LOGN_CNT_Q
    -- 	, CAPP_LOGN_LAST_S
    -- 	, NTB_LOGN_CNT_Q
    -- 	, NTB_LOGN_LAST_S
    -- 	, VIEW_CARD_DETL_CNT_Q
    -- 	, VIEW_CARD_DETL_LAST_S
    -- FROM
    --     LCL.CUST_TRAN_PRFL
    -- WHERE
    --     CUST_I IN (SELECT CUST_I FROM TRAN)
    -- )
    --  -- Analyst declined disputed transactions
    -- , CONFIRMED_FPF AS (
    --     SELECT
    --         b.DSPT_CASE_I
    --         , b.DSPT_CASE_EVNT_I
    --         , b.DSPT_CASE_CRAT_S
    --         , b.DSPT_TRAN_I
    --         , a.TRAN_ID
    --         , 1 AS FPF_INDA_F
    --     FROM 
    --         LABMLFRD.CARD_TRAN_GROS_FRAU a
    --     LEFT JOIN
    --         LABMLFRD.CARD_TRAN_DAIS_DSPT b
    --     ON
    --         a.TRAN_ID=b.TRAN_I
    --     WHERE 
    --         a.OUTCOME IN ('Resolved-CLOSED: INVEST DECLINE')
    --         AND b.DSPT_TRAN_DCDE_X IN ('Fraud Referral','Customer Liable')
    -- )
    , LABELS AS (
        SELECT 
            CUST_I,
            TRAN_I,
            PEGA_CASENUMBER,
            DSPT_CASE_I,
            MIN(FPF_INDA_F) AS FPF_INDA_F
        FROM (
            -- STP
            SELECT DISTINCT
                CUST_I,
                TRAN_I, 
                '' AS PEGA_CASENUMBER,
                DSPT_CASE_I,
                '9' AS FPF_INDA_F
            FROM LABMLFRD.CARD_TRAN_DAIS_DSPT
            WHERE UPPER(DSPT_TRAN_DCDE_X) LIKE ANY ('%CHARGE%OFF%','%CHARGEBACK%','%WRITE%OFF%')
                AND DSPT_SRCE_SYST_M != 'GS'
                AND TRAN_I IS NOT NULL
                AND CUST_I IS NOT NULL
            UNION ALL
            -- Analyst declined
            SELECT DISTINCT
                COALESCE(TO_CHAR(a.SSX_CUST_NUM),b.CUST_I) AS CUST_I,
                a.TRAN_ID AS TRAN_I,
                PEGA_CASENUMBER,
                DSPT_CASE_I,
                '1' AS FPF_INDA_F
            FROM LABMLFRD.CARD_TRAN_GROS_FRAU a
            LEFT JOIN LABMLFRD.CARD_TRAN_DAIS_DSPT b ON a.TRAN_ID=b.TRAN_I
            WHERE CUST_I IS NOT NULL
                AND UPPER(A.OUTCOME) LIKE ('%CLOSED%INVEST%DECLINE%')
                AND UPPER(b.DSPT_TRAN_DCDE_X) LIKE ANY ('%FRAUD%REFERRAL%','%CUSTOMER%LIABLE%')
                AND b.TRAN_I IS NOT NULL
        )
        GROUP BY ALL 
    )
    , FRAUD_TRANS AS (
        SELECT
            *
        FROM (
            SELECT TRAN_ID AS TRAN_I
            FROM LABMLFRD.CARD_TRAN_GROS_FRAU
            WHERE TRAN_I IS NOT NULL
            UNION ALL
            SELECT TRAN_I
            FROM LABMLFRD.CARD_TRAN_DAIS_DSPT
            WHERE TRAN_I IS NOT NULL
        )
        WHERE 
            TRAN_I NOT IN (SELECT TRAN_I FROM LABELS)
    )   
    -- Daisy case information
    , DNA_CASE AS (
    SELECT 
        a.PATY_I
        
        , COUNT(DISTINCT a.DSPT_CASE_I) AS DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , SUM(a.DSPT_CASE_TRAN_Q) AS DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , SUM(a.TOTL_TRAN_AND_FEE_A) AS DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
    FROM 
        (SELECT DISTINCT
            PATY_I
            , DSPT_CASE_I
            , DSPT_CASE_EVNT_I
            , DSPT_CASE_CRAT_S
            , DSPT_CASE_TRAN_Q
            , TOTL_TRAN_AND_FEE_A
        FROM
            CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
        WHERE
            DSPT_TYPE_C = 'DT1'
        QUALIFY 
            ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) a
    LEFT JOIN
        (SELECT DISTINCT DSPT_CASE_I 
        FROM LABELS WHERE FPF_INDA_F='1') b
    ON 
        a.DSPT_CASE_I = b.DSPT_CASE_I
    LEFT JOIN 
        (SELECT DISTINCT DSPT_CASE_I 
        FROM LABELS WHERE FPF_INDA_F='9') c
    ON
        a.DSPT_CASE_I = c.DSPT_CASE_I
    GROUP BY
        a.PATY_I
    )
    -- Output
    SELECT DISTINCT
    	a.* -- Transaction info, including UVs (e.g. WPR rego date, etc)

        , dai.DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , dai.DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , dai.DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , dai.DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , dai.DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , dai.DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , dai.DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , dai.DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , dai.DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , dai.DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , dai.DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , dai.DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , dai.DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , dai.DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , dai.DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , dai.DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days

        , dai.DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , dai.DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , dai.DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , dai.DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , dai.DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , dai.DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , dai.DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , dai.DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , dai.DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
        , IFNULL(fpf.FPF_INDA_F,'0') AS FPF_INDA_F
        , CASE WHEN frd.TRAN_I IS NOT NULL THEN 1 ELSE 0 END AS FRAUDTAG
        
    FROM
    	TRAN a
    LEFT JOIN 
        DNA_CASE dai
    ON 
        a.CUST_I = dai.PATY_I
    LEFT JOIN
        LABELS fpf
    ON
        a.TRAN_I = fpf.TRAN_I
    LEFT JOIN
        FRAUD_TRANS frd
    ON
        a.TRAN_I = frd.TRAN_I
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,1913688,1913.688000,31.894800,0.531580,2X-LARGE,32,17.010560
01beb58b-3204-c1f5-0000-c71d2b6f6372,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as 
(
WITH code1_data AS (
    SELECT DISTINCT

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d

,dtl_ex_0_20s_001
,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,

-- COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250717'
and     dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-17'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,3797875,3797.875000,63.297917,1.054965,X-LARGE,16,16.879440
01bef968-3204-c93d-0000-c71d2d63322e,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_sai_csr_it5_7day_20250911064113_scored as
(
select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_SCAMS_RETRO_TEST_SAI_MOJO('modelname=pipeline_it5_F2_xval_7day_all_redmojsiz_20250911064113.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CRD_SAFE_MERCHANT, _C_CC_CNP_VEL_6HR_COUNT_1, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_BC_SESS_CNT, _L_PMT_AMT, _L_MUID_AGE_PER_USER, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_MAX_30D_SCORE, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_SCM_RSK_SCR_2, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_NB_BROWSER_CNT, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_SESS_CNT_WEB, _L_IP_AGE, _A_CLC_FTP_AMT, _L_SESS_CNT_MOB_BROWSER, _A_CRD_CRYPTO_PROC_FLG, _A_P_L_3, _A_LIST_RL1_SCAM_CUST_CIF, _L_PUSH_API_1, _L_PUSH_API_2, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_3_80S_002, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, DTL_CA_MERCH_CURR_CODE, GENDER, CC_CNT, NO_1, GOVT_BENE, HL_ASOC, CORP_EMPL, MAR_STS_ORG_STR, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_DOMS_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_UPST_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_FALL_BACK_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_ATM_TRAN_SUM_N, MAQ_SUM_FALL_BACK_TRAN_SUM_N, MAQ_SUM_CHIP_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N
)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG7D_OOT
)
;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,1894697,1894.697000,31.578283,0.526305,2X-LARGE,32,16.841760
01bea09e-3204-bee5-0000-c71d2aaa84be,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as (
WITH code1_data AS (
    SELECT DISTINCT

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250601'
and  mid_event_ts < '20250717'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2025-06-01'
    and SNAP_D < '2025-07-17'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1886900,1886.900000,31.448333,0.524139,2X-LARGE,32,16.772448
01be990e-3204-bee4-0000-c71d2a71e75e,"(WITH code1_data AS (
    SELECT DISTINCT
--         TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
-- (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
-- TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d,
-- TO_DATE(SUBSTR(mid_event_ts, 1, 8), 'YYYYMMDD') as evnt_d,
-- TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
-- CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
-- CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC
,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
--,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000   
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE

,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT


-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
--,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
--,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
--,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250601'
and  mid_event_ts < '20250701'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime



    -- FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT 
    -- where SSX_SNAP_D >= '2025-01-01'
),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2025-06-01'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,3689779,3689.779000,61.496317,1.024939,X-LARGE,16,16.399024
01bde6f3-3204-aa23-0000-c71d252b0c3e,"with PYTHON_WORKSHEET as procedure () returns Table() language python runtime_version=3.11 packages=('snowflake-snowpark-python') handler='main' as '
import pandas as pd
from snowflake.snowpark.functions import parse_json
import snowflake.snowpark as snowpark
from datetime import datetime 
import json


dtype_dict = {
    ''CARD_ASES_BTCH_CCA_CASE_TRAN_STG'': {
        ''TTS_TRAN_DATE_CLIENT'': ''object'',
        ''TTS_TRAN_TIME_CLIENT'': ''object'',
        ''TRANSACTIONNUMBER2'': ''object'',
        ''ATH_PC_POS'': ''object'',
        ''RSP_ACTION_CODE'': ''object'',
        ''DTL_CA_AUTH_SYS_DEC'': ''object'',
        ''DTL_CA_CLIENT_AMT'': ''float64'',
        ''CHL_CT_TERM_OWNER_NAME'': ''object'',
        ''DTL_EX_0_20S_004'': ''object'',
        ''CHL_ID_CARD_NUM'': ''object'',
        ''CHL_CT_MER_MCC'': ''object'',
        ''DTL_EX_3_20S_001'': ''object'',
        ''CHL_CT_MEDIA'': ''object'',
        ''DTL_EX_0_3S_002'': ''object'',
        ''DTL_CA_REVERSAL_IND'': ''object'',
        ''DTL_EX_3_80S_003'': ''object'',
        ''_A_CUSTOMER_AGE'': ''float64'',
        ''TRANSACTIONNUMBER'': ''object'',
        ''SSX_CUST_NUM'': ''object'',
        ''BUSN_D'': ''datetime64[ns]''
    },
    ''CARD_ASES_BTCH_CCA_CASE_TRAN_UV_STG'': {
        ''SSX_CUST_NUM'': ''object'',
        ''CHL_ID_CARD_NUM'': ''object'',
        ''DTL_EX_0_20S_004'': ''object'',
        ''REGISTRATION_TIME'': ''object'',
        ''BUSN_D'': ''datetime64[ns]''
    },
    ''CARD_ASES_BTCH_CCP_CRCD_TRAN_STG'': {
        ''TRAN_A'': ''float64'',
        ''MERC_X'': ''object'',
        ''TRAN_S'': ''object'',
        ''ACCT_I'': ''object'',
        ''BUSN_D'': ''datetime64[ns]''
    },
    ''CARD_ASES_BTCH_DIGT_NMON_EVNT_STG'': {
        ''TTS_TRAN_TIME_ALT'': ''object'',
        ''TTS_TRAN_DATE_ALT'': ''object'',
        ''DTL_EX_1_5S_01'': ''object'',
        ''DTL_EX_0_20S_004'': ''object'',
        ''CHL_ID_DEVICE_ID'': ''object'',
        ''DTL_EX_0_4S_001'': ''object'',
        ''DTL_EX_0_N_021'': ''float64'', 
        ''DTL_EX_0_N_015'': ''float64'',
        ''DTL_EX_0_N_012'': ''float64'', 
        ''DTL_EX_0_I_009'': ''object'',
        ''DTL_EX_0_I_005'': ''object'',
        ''DTL_EX_0_N_017'': ''float64'',
        ''DTL_EX_0_N_001'': ''float64'',
        ''DTL_EX_0_N_013'': ''float64'',
        ''SSX_CUST_NUM'': ''object'',
        ''CHL_OB_IP_ADDRESS_V6'': ''object'',
        ''CHL_OB_IP_ADDRESS'': ''object'',
        ''BUSN_D'': ''datetime64[ns]''
    },
    ''CARD_ASES_BTCH_PEGA_CURR_STG'': {
        ''TRANSDATETIME'': ''object'',
        ''TRANSACTIONNUMBER'': ''object'',
        ''TRANSACTIONAMOUNT'': ''float64'',
        ''FINALDECISIONCODE'': ''object'',
        ''SICCODE'': ''object'',
        ''MERCHANTNAME'': ''object'',
        ''PXCREATEDATETIME'': ''object'',
        ''PYID'': ''object'',
        ''BASECRDNUMBER'': ''object'',
        ''CUSTID'': ''object'',
        ''DETECTIONMETHODID'': ''object'',
        ''POSTINGS_COUNT'': ''float64'',
        ''BUSN_D'': ''datetime64[ns]''
    },
    ''CARD_ASES_BTCH_PEGA_HIST_STG'': {
        ''TRANSDATETIME'': ''object'',
        ''TRANSACTIONNUMBER'': ''object'',
        ''TRANSACTIONAMOUNT'': ''float64'',
        ''FINALDECISIONCODE'': ''object'',
        ''SICCODE'': ''object'',
        ''MERCHANTNAME'': ''object'',
        ''PXCREATEDATETIME'': ''object'',
        ''PYID'': ''object'',
        ''BASECRDNUMBER'': ''object'',
        ''CUSTID'': ''object'',
        ''DETECTIONMETHODID'': ''object'',
        ''BUSN_D'': ''datetime64[ns]''
    },
    ''CARD_ASES_BTCH_RSA_AUTN_EVNT_STG'': {
        ''PAREQLPADDRESS'': ''object'',
        ''DEVICEID'': ''object'',
        ''PAREQPAN'': ''object'', 
        ''PAREQPURCHASEAMOUNT'': ''float64'',
        ''PAREQPURCHASEDATE'': ''object'',
        ''TRANSACTIONID'': ''object'',
        ''BUSN_D'': ''datetime64[ns]''
    }
}


def charge_back_rights(pega: pd.DataFrame, run_param: dict):

    cpvals = run_param[""SUMMARY""][""cp_ucm_pos""]

    digivals = run_param[""SUMMARY""][""digi""]

    digital_wallet = pega[
    (pega[""DTL_EX_3_20S_001""].isin(digivals)) &
    (pega[""DTL_EX_0_20S_004""].str.len() > 14)
    ]

    digital_tran_id = digital_wallet[""TRANSACTIONNUMBER""].to_list()
    pega_without_digital = pega[~pega[""TRANSACTIONNUMBER""].isin(digital_tran_id)]
    pega_without_digital_cnp = pega_without_digital[
        ~pega_without_digital[""ATH_PC_POS""].isin(cpvals)
    ]

    netcode_transactions = []
    for index, row in pega_without_digital_cnp.iterrows():

        check1 = check2 = check3 = check4 = False

        try:
            int_rua_3byte_string_002 = int(row[""DTL_EX_0_3S_002""])
        except ValueError:
            int_rua_3byte_string_002 = -999  # hopefully not a real value

        if row[""ATH_PC_POS""] not in cpvals:
            check1 = True
        # in [005,242,912,05] means netcode sent
        if int_rua_3byte_string_002 in run_param[""DECLINE""][""netcode_sent_3ds_sli""]:
            check2 = True
        if (int_rua_3byte_string_002 == 212) & isinstance(
            row[""DTL_EX_3_80S_003""], str
        ) and not row[""DTL_EX_3_80S_003""].upper().startswith((""KA"", ""KG"")):
            check3 = True
        # new condition: int_rua_3byte_string_002 == 242 and dua_20byte_string_001 is empty
        if int_rua_3byte_string_002 == 242 and pd.isna(row[""DTL_EX_3_20S_001""]):
            check4 = True

        if check1 and (check2 or check3 or check4):
            netcode_transactions.append(row[""TRANSACTIONNUMBER""])
    pega_without_digital_cnp_not_netcode = pega_without_digital_cnp[
        ~pega_without_digital_cnp[""TRANSACTIONNUMBER""].isin(netcode_transactions)
    ]
    pega_without_digital_cnp_not_netcode = pega_without_digital_cnp_not_netcode.query(
        ""PXCREATEDATETIME != ''nat''""
    )

    # Convert columns to datetime
    # ...existing code...

    # Convert columns to datetime with explicit format
    

    

# ...existing code...

    pega_without_digital_cnp_not_netcode[""difference_days""] = (
        pega_without_digital_cnp_not_netcode[""PXCREATEDATETIME""]
        - pega_without_digital_cnp_not_netcode[""TRANSDATETIME""]
    ).dt.days
    pega_without_digital_cnp_not_netcode = pega_without_digital_cnp_not_netcode[
        pega_without_digital_cnp_not_netcode[""difference_days""] < 120
    ]
    # Sort the DataFrame by TRANSDATETIME
    sorted_pega = pega_without_digital_cnp_not_netcode.sort_values(""TRANSACTIONAMOUNT"", ascending=False)

# Select the top 35 rows
    top_35_pega = sorted_pega.head(35)

# Calculate the total sum of the TRANSACTIONAMOUNT column for these top 35 rows
    total_sum = top_35_pega[""TRANSACTIONAMOUNT""].sum()

    if total_sum > 0:
        return float(total_sum)
    else:
        return """"


def prepare_json_output(json_input):
    return json.dumps(json_input)



def prepare_table(session, table_path):
    table_df = pd.DataFrame(columns=dtype_dict[table_path].keys()) # Create base table
    # sf_table_df = session.table(table_path)
    if table_path in [''CARD_ASES_BTCH_DIGT_NMON_EVNT_STG'', ''CARD_ASES_BTCH_CCA_CASE_TRAN_UV_STG'']: 
        sf_table_df = session.sql (f""""""
            SELECT
                *
            FROM {table_path}
            WHERE 
                BUSN_D = ''2025-07-18''
                AND SSX_CUST_NUM IS NOT NULL  
                ANd SSX_CUST_NUM != ''''
        """"""    
        )
    else: 
        sf_table_df = session.sql (f""""""
            SELECT
                *
            FROM {table_path}
            WHERE BUSN_D = ''2025-07-18''
        """"""    
        )
    sf_table_df = sf_table_df.to_pandas()
    if not sf_table_df.empty:
        table_df = pd.concat([table_df, sf_table_df])
    col_dtype_dict = {}
    for _, v in dtype_dict.items():
        col_dtype_dict.update(v)
    filtered_dtype_dict = {col: dtype for col, dtype in col_dtype_dict.items() if col in table_df.columns}
    def safe_cast_column(series, target_type):
        if target_type == ''float64'':
            return pd.to_numeric(series, errors=''coerce'')
        elif target_type == ''datetime64[ns]'':
            return pd.to_datetime(series, errors=''coerce'')
        elif target_type == ''object'':
            # Optionally: fillna('''') if you want empty string for missing
            return series.astype(object).where(series.notna(), '''')
        else:
            return series.astype(target_type, errors=''ignore'')
    # Apply the filtered dtype dictionary to the DataFrame
    # table_df = table_df.astype(filtered_dtype_dict)
    # Replace null values with an empty string for string columns
    for col, dtype in filtered_dtype_dict.items():
        table_df[col] = safe_cast_column(table_df[col], dtype)
    if ''BUSN_D'' in table_df.columns:
        table_df = table_df[table_df[''BUSN_D''] == ''2025-07-18''] # TODO
    return table_df


run_param = {
    ''SUMMARY'': {
      # these fields are common to the entire case, so we just need to return a single
      # value. Dict maps the return key to the field name. Field names are lowercased by the
      # time this info is used
        ''case_level_fields'': {
            ''detection_method'': ''DETECTIONMETHODID''
        },
        #fraud_type: fraudtypename
        #case_creation_date: casecreatedate
        # values that indicate Card Present. Strings
        ''cp_ucm_pos'': [''05'',''07'',''02'',''62'',''90'',''91'',''95'', ''5'', ''7'', ''2''],
        ''digi'': [''50120834693'',''50139059239'',''50174158869'',''50183038325'',''40010075001'',''40010043095'',''40010077056'',''40010069887'',''50144344765'',''40010025333'',''50110030273'',''40010030273'',''006110030273'',''006100000002'',''006100000003''],
        # digi: &digi [''82933039052'', ''38741590518'', ''57680944050'', ''43204753869'', ''89342102629'']
        ''escalation_thresholds'': {
            10000: ""Senior Analyst"",
            20000: ""Manager/Senior Manager"",
            50000: ""Executive Manager""
        },
        ''no_change_to_account'': {
            # how many days before a transaction is considered a change?
            ''lookback_days'': 14,  # confirmed Joseph 2024-10-14
            ''change_taskids'': [
            # from Vincent/Matt, but potentially need additions for same action different channels?
            #- ""A0305""  # KAFKA_RTE CommBank App Device Register
                ""C221"",  # NPP ARC CAPP Customer updating contact mobile number
                ""N1702"",  # RTE MyContactDetailsAddressUpdate
                ""N221"",  # NPP ARC NB Customer updating contact mobile number
                ""S1201"",  # OTHER TELEPHONE BANKING PASSWORD RESET
                ""S1601"",  # COMMSEE CommSeeMobileNumberAdd
                ""S1611"",  # COMMSEE CommSeeMobileNumberModify
                ""S1621"",  # COMMSEE CommSeeMobileNumberDelete
                ""S439"",  # EONTECH Request SMS NetCode for Secure Internet Shopping
                ""U354""  # EONTECH CA Create/Change Card Pin
            ]
        }
    },
    # settings for decline reason determination
    ''DECLINE'': {
        ''cp_ucm_pos'': [''05'',''07'',''02'',''62'',''90'',''91'',''95'', ''5'', ''7'', ''2''],
        ''digi'': [''50120834693'',''50139059239'',''50174158869'',''50183038325'',''40010075001'',''40010043095'',''40010077056'',''40010069887'',''50144344765'',''40010025333'',''50110030273'',''40010030273'',''006110030273'',''006100000002'',''006100000003''],
        # applied to rua_3byte_string_002, which is numeric for us:
        ''netcode_sent_3ds_sli'': [912, 5],
        # applied to dua_80byte_string_003, netcode wasn''t actually sent. Uppercase
        ''frictionless_netcode_prefix'': [''KA'', ''KG''],
        # combinations of ucm_pos:hct_media that indicate a PIN check
        ''pin_check_combos'': {
            ''05'': ''C'',
            ''07'': ''T'',
            ''7'': ''T'',
            ''5'': ''C''
        },
        ''report_delay'': {
        # do we count from first(min) or last(max) flagged transaction?
            ''relevant_trans'': ''min'',
            # how long is too long?
            ''threshold_days'': 120
        },
        ''merchant_previously_used'': {
            # column names to compare
                ''pega_col'': ''MERCHANTNAME'',
                ''cca_col'': ''CHL_CT_TERM_OWNER_NAME''
        },
        ''similar_use'': {
        # column names to compare
            ''pega_col'': ''SICCODE'',
            ''cca_col'': ''CHL_CT_MER_MCC''
        },
        ''no_change_to_account'': {
            # how many days before a transaction is considered a change?
            ''lookback_days'': 14,  # confirmed Joseph 2024-10-14
            ''change_taskids'': [
            # from Vincent/Matt, but potentially need additions for same action different channels?
            #- ""A0305""  # KAFKA_RTE CommBank App Device Register
                ""C221"",  # NPP ARC CAPP Customer updating contact mobile number
                ""N1702"",  # RTE MyContactDetailsAddressUpdate
                ""N221"",  # NPP ARC NB Customer updating contact mobile number
                ""S1201"",  # OTHER TELEPHONE BANKING PASSWORD RESET
                ""S1601"",  # COMMSEE CommSeeMobileNumberAdd
                ""S1611"",  # COMMSEE CommSeeMobileNumberModify
                ""S1621"",  # COMMSEE CommSeeMobileNumberDelete
                ""S439"",  # EONTECH Request SMS NetCode for Secure Internet Shopping
                ""U354""  # EONTECH CA Create/Change Card Pin
          ]
        }
    }
}


def main(session: snowpark.Session):
    
    output_df_schema = {
        ''CASE_I'': ''string'',
        ''BUSN_D'': ''object'', #TODO: TJ MS change when adjusting to dbt
        ''LOAD_TS'': ''object'', #TODO: TJ MS change when adjusting to dbt
        ''CHRG_BACK_RGHT_OPUT_V'': ''object''
    }
    pega = prepare_table(session, ''CARD_ASES_BTCH_PEGA_CURR_STG'') #TODO: TJ MS change when adjusting to dbt
    pega[''TRANSDATETIME''] = pd.to_datetime(
        pega[''TRANSDATETIME''],
        errors=''coerce''
    )
    pega[''PXCREATEDATETIME''] = pd.to_datetime(
        pega[''PXCREATEDATETIME''],
        errors=''coerce''
    )

    
    pega_full = prepare_table(session, ''CARD_ASES_BTCH_PEGA_HIST_STG'') #TODO: TJ MS change when adjusting to dbt
    cca = prepare_table(session, ''CARD_ASES_BTCH_CCA_CASE_TRAN_STG'') #TODO: TJ MS change when adjusting to dbt
    case_ids = pega[''PYID''].unique()
    results = []
    
    for case_id in case_ids:
        if not case_id:
            continue
        # Step 1: Filter pega where PYID equals case_id
        pega_filtered = pega[pega[''PYID''] == case_id]
        pega_filtered = pega_filtered.drop_duplicates(subset=''TRANSACTIONNUMBER'')
        pega_filtered = pega_filtered.dropna(subset=[''TRANSDATETIME'', ''MERCHANTNAME'', ''TRANSACTIONNUMBER'', ''BASECRDNUMBER''])
        pega_filtered = pega_filtered[pega_filtered[''MERCHANTNAME''] != """"]
        pega_filtered = pega_filtered[pega_filtered[''TRANSDATETIME''] != """"]
        pega_filtered = pega_filtered[pega_filtered[''TRANSACTIONNUMBER''] != """"]
        pega_filtered = pega_filtered[pega_filtered[''BASECRDNUMBER''] != """"]
        
        
        
        # Extract BASECRDNUMBER and CUSTID from filtered pega
        basecrdnumber = pega_filtered[''BASECRDNUMBER''].iloc[0]  # Assuming single value

    # Handle possible nulls in CUSTID
        missing_custid = False
        first_custid = pega_filtered[''CUSTID''].iloc[0]
        if pd.isnull(first_custid) or first_custid == ''<NA>'':
            non_null_custids = pega_filtered[''CUSTID''][(~pd.isnull(pega_filtered[''CUSTID''])) & (pega_filtered[''CUSTID''] != ''<NA>'')]
            if not non_null_custids.empty:
                custid = non_null_custids.iloc[0]
            else:
                custid = None
                missing_custid = True
        else:
            custid = first_custid
        
        # Step 2:  fix tranactionnumber and remove disputed transactions from other cases from cca
        # ...existing code...

    # Step 2:  fix tranactionnumber and remove disputed transactions from other cases from cca
        if missing_custid:
            cca_filtered = cca[cca[''CHL_ID_CARD_NUM''] == basecrdnumber].copy()
        else:
            cca_filtered = cca[cca[''SSX_CUST_NUM''] == custid].copy()

    # ...existing code...
        # Add new datetime column to cca_filtered
        cca_filtered[''TRANSDATETIME''] = pd.to_datetime(
            cca_filtered[''TTS_TRAN_DATE_CLIENT''] + '' '' + cca_filtered[''TTS_TRAN_TIME_CLIENT''],
            format=''%Y%m%d %H:%M:%S.%f'',
            errors=''coerce''
        )
        cca_filtered = cca_filtered.sort_values(''TRANSDATETIME'', ascending=False).reset_index(drop=True)

        # Lag ''TRANSACTIONNUMBER2'' by 1 row (shift down) and overwrite the column
        cca_filtered[''TRANSACTIONNUMBER2''] = cca_filtered.groupby(''CHL_ID_CARD_NUM'')[''TRANSACTIONNUMBER2''].shift(1)
        invalid_values = ['''', ''00000000000000000000000000001'', ''00000000000000000000000000002'', ''00000000000000000000000000000'']
        cca_filtered[''TRANSACTIONNUMBER''] = cca_filtered.apply(
            lambda row: row[''TRANSACTIONNUMBER2''] if row[''TRANSACTIONNUMBER''] in invalid_values else row[''TRANSACTIONNUMBER''],
            axis=1
        )
        #remove disputed transactions from cca_filtered
        previous_case_transactions = pega_full[
            (pega_full[''CUSTID''] == custid) & (pega_full[''PYID''] != case_id)
        ][''TRANSACTIONNUMBER''].unique()
        # Remove rows in cca_filtered where TRANSACTIONNUMBER is in previous_case_transactions
        cca_filtered = cca_filtered[~cca_filtered[''TRANSACTIONNUMBER''].isin(previous_case_transactions)]
        #complete pega 
        pega_filtered = pega_filtered.merge(
        cca_filtered[[''TRANSACTIONNUMBER'', 
            ''RSP_ACTION_CODE'', ''ATH_PC_POS'', ''CHL_CT_MEDIA'', ''DTL_EX_0_3S_002'', 
            ''DTL_CA_REVERSAL_IND'', ''DTL_EX_0_20S_004'', ''DTL_EX_3_20S_001'', 
            ''DTL_EX_3_80S_003'', ''_A_CUSTOMER_AGE'', ''DTL_CA_AUTH_SYS_DEC'']],
        how=''left'',
        on = ''TRANSACTIONNUMBER''
        )
        pega_filtered = pega_filtered[pega_filtered[''FINALDECISIONCODE''] == ''A'']
        if pega_filtered.empty or cca_filtered.empty: # Skip condition as pega cca required for functions
            continue
        charge_back_json = charge_back_rights(pega_filtered, run_param)
        results.append({
                    ''CASE_I'': case_id,
                    ''BUSN_D'': (pd.Timestamp.now() - pd.Timedelta(days=1)).strftime(""%Y-%m-%d""), #TODO: TJ MS change when adjusting to dbt
                    ''LOAD_TS'': pd.Timestamp.now().strftime(""%Y-%m-%dT%H:%M:%S.%f""), #TODO: TJ MS change when adjusting to dbt
                    ''CHRG_BACK_RGHT_OPUT_V'': prepare_json_output(charge_back_json)
                    })
    results_df = pd.DataFrame(results, columns=output_df_schema).astype(output_df_schema)
    # For testing only
    #TODO: TJ MS change when adjusting to dbt [ADJUST HOW TABLES ARE SAVED TO SF]
    # sf_res_df = session.write_pandas(results_df, ''ASSESSMENT_JSON_AT_CB'', overwrite=True) #TODO: TJ MS change when adjusting to dbt
    # sf_res_df = sf_res_df.with_column(""JSON_OUTPUT"", parse_json(sf_res_df[''JSON_OUTPUT'']))
    # sf_res_df.write.mode(''overwrite'').save_as_table(''ASSESSMENT_JSON_AT_CB'') 
    tag_query = """"""
    """"""
    session.sql(tag_query)
    # For testing only
    return session.create_dataframe(results_df)' call PYTHON_WORKSHEET();",DINGHU,R_USR_FRAUMD_PRD_CUS,3687294,3687.294000,61.454900,1.024248,X-LARGE,16,16.387968
01bef768-3204-c939-0000-c71d2d544072,"create or replace temporary table NPP_TRAN as
select	distinct case   when b.fraudtype = 'CVL' then null
                else b.fraudtype
        end as FRAUDTYPE
		,b.detection
		,b.case_detection
        ,TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
		,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
		,a.tts_tran_date_alt
		,a.tts_tran_time_alt
		,a.dtl_ex_0_20s_001
		,a.dtl_ex_1_5s_01
		,a.ssx_cust_num
		,a.chl_id_ob_userid
		,a.tgx_bank_name
		,a.tgx_bank_num
		,a.tgx_branch_id
		,a.tgx_acct_num
		,a.tgx_name
		,a.tgx_description
		,TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as TRAN_AMT
		,a.dtl_ex_0_i_002 as FTP_IND
		
		-- BioCatch UVs
		,TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE
		,TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_SCORE
		,TRY_TO_NUMBER(a._l_adv_key_combo, 38, 2) as _L_ADV_KEY_COMBO
		,TRY_TO_NUMBER(a._l_clpbrd_evnt, 38, 2) as _L_CLPBRD_EVNT
		,TRY_TO_NUMBER(a._l_concurrent_sess, 38, 2) as _L_CONCURRENT_SESS
		,TRY_TO_NUMBER(a._l_export_data, 38, 2) as _L_EXPORT_DATA
		,TRY_TO_NUMBER(a._l_import_data, 38, 2) as _L_IMPORT_DATA
		,TRY_TO_NUMBER(a._l_is_rat, 38, 2) as _L_IS_RAT
		,TRY_TO_NUMBER(a._l_is_mob_rat, 38, 2) as _L_IS_MOB_RAT
		,TRY_TO_NUMBER(a._l_rat_in_sess, 38, 2) as _L_RAT_IN_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_hrisk_sess, 38, 2) as _L_IS_RCNT_HRISK_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_rat, 38, 2) as _L_IS_RCNT_RAT
		,TRY_TO_NUMBER(a._l_lrg_dist_known_loc, 38, 2) as _L_LRG_DIST_KNOWN_LOC
		,TRY_TO_NUMBER(a._l_rare_scrn_sz, 38, 2) as _L_RARE_SCRN_SZ
		,TRY_TO_NUMBER(a._l_risky_isp, 38, 2) as _L_RISKY_ISP
		,TRY_TO_NUMBER(a._l_risky_key_combo, 38, 2) as _L_RISKY_KEY_COMBO
		,TRY_TO_NUMBER(a._l_tzone_mismatch, 38, 2) as _L_TZONE_MISMATCH
		,TRY_TO_NUMBER(a._l_scm_rsk_hgh_scr, 38, 2) as _L_SCM_RSK_HGH_SCR
		,TRY_TO_NUMBER(a._l_keyb_nav_anom, 38, 2) as _L_KEYB_NAV_ANOM
		,TRY_TO_NUMBER(a._l_scrn_broadcast, 38, 2) as _L_SCRN_BROADCAST
		,TRY_TO_NUMBER(a._l_delay_to_input_pi, 38, 2) as _L_DELAY_TO_INPUT_PI
		,TRY_TO_NUMBER(a._l_input_otp_delay, 38, 2) as _L_INPUT_OTP_DELAY
		,TRY_TO_NUMBER(a._l_active_spoofing, 38, 2) as _L_ACTIVE_SPOOFING
		,TRY_TO_NUMBER(a._l_pmt_vloc_anom, 38, 2) as _L_PMT_VLOC_ANOM
		,TRY_TO_NUMBER(a._l_rcnt_hi_scr_on_dev, 38, 2) as _L_RCNT_HI_SCR_ON_DEV
		,TRY_TO_NUMBER(a._l_accum_amt_anom, 38, 2) as _L_ACCUM_AMT_ANOM
		,TRY_TO_NUMBER(a._l_app_togg, 38, 2) as _l_APP_TOGG
		,TRY_TO_NUMBER(a._l_is_active_call, 38, 2) as _L_IS_ACTIVE_CALL
		,TRY_TO_NUMBER(a._l_is_long_sess, 38, 2) as _L_IS_LONG_SESS
		,TRY_TO_NUMBER(a._l_type_patterns_anomaly, 38, 2) as _L_TYPE_PATTERNS_ANOMALY
		,TRY_TO_NUMBER(a._l_seg_typing_pi, 38, 2) as _L_SEG_TYPING_PI
		
		-- NameCheck UVs
		,a._l_nc_response_code
		,a._l_nc_match_name_conf
		
		-- H2O Score UVs
		,TRY_TO_NUMBER(a._l_cust_scamrisk_score, 38, 2) as _L_CUST_SCAMRISK_SCORE
		,a.dtl_ex_0_n_029
		,a.dtl_ex_0_n_034 as CERBERUS_SCORE
		
		-- Recipient Level UVs
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_short, 38, 2) as _B_RECIP_SUM_SHORT
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_long, 38, 2) as _B_RECIP_SUM_LONG
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_short, 38, 2) as _B_RECIP_FTP_CNT_SHORT
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_long, 38, 2) as _B_RECIP_FTP_CNT_LONG
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_any_cust_ftp_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_ANY_CUST_FTP_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_2
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_3
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_4
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_5
		
		-- Customer Level UVs
		,TRY_TO_NUMBER(a._a_customer_age, 38, 2) as _A_CUSTOMER_AGE
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_SHORT, 38, 2) as _A_CUST_SUM_AAA_SHORT
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_LONG, 38, 2) as _A_CUST_SUM_AAA_LONG
		,TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1
		,TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2
		,TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3
		,TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4
		,TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5
		,TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6
		,TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7
		,TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1
		,TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2
		,TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3
		,TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4
		,TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5
		,TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6
		,TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_NEW_CAPP_REGO_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CSE_CHG_DWL_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CIF_ESTABLISH_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00') as _A_NB_LASTLOGON_DT_1
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00') as _A_CURR_CAPP_DEVICE_DT
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_1, 38, 2) as _A_NB_LOGONS_CNT_1
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_2, 38, 2) as _A_NB_LOGONS_CNT_2
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_3, 38, 2) as _A_NB_LOGONS_CNT_3
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_1, 38, 2) as _A_CAPP_LOGON_CNT_1
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_2, 38, 2) as _A_CAPP_LOGON_CNT_2
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_3, 38, 2) as _A_CAPP_LOGON_CNT_3
		
		-- Customer-Recipient Relationship Level UVs
		,TRY_TO_NUMBER(a._x_cif_recipient_new_sum, 38, 2) + TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM
		,case   when a._x_cif_recipient_new_date = '0' then TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF')
                else TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00'::timestamp)
		end as _X_CIF_RECIPIENT_NEW_DATE
		,case   when a._x_cif_recipient_new_cnt = '0' then 1
                else TRY_TO_NUMBER(a._x_cif_recipient_new_cnt, 38, 2) + 1
		end as _X_CIF_RECIPIENT_NEW_CNT
		
		-- Telstra Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_TELSTRA_LONG_CALL
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_telstra_last_call_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _X_TELSTRA_LAST_CALL_DT
		,TRY_TO_NUMBER(a._x_telstra_last_call_dur, 38, 2) as _X_TELSTRA_LAST_CALL_DUR
		,TRY_TO_NUMBER(a._x_telstra_max_call_dur, 38, 2) as _X_TELSTRA_MAX_CALL_DUR
		,a._a_telstra_active_call
		
		-- Crypto UVs
		,TRY_TO_NUMBER(a._a_crypto_mnthly_sum, 38, 2) as _A_CRYPTO_MNTHLY_SUM
		,DATEADD(day, TRY_TO_NUMBER(a._a_crypto_last_pymnt_date, 38, 2), '1960-01-01') as _A_CRYPTO_LAST_PYMNT_DATE
		
		-- M100 Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP1_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP2_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP3_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP4_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP5_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP6_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP7_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP10_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp11_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP11_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp12_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP12_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp13_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP13_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP20_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP21_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_M100_P8_IND_DT
		
		-- M100 App Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P1_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P5_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P8_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P9_DT
 		
		-- CIF Profiling UVs
		,a._l_fingerprint_1
		,a._l_fingerprint_2
		,a._l_fingerprint_3
		,a._l_fingerprint_4

        -- Intelligent Friction UVs
                ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCTN_MSG_SNT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCTN_MSG_SNT
    
         ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCT_INTENT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCT_INTENT
        
from        lcl.fdp_customer_transactions_send_flat a
left join  prd_p01_dmn_fraumd.labmlfrd.dtl_fraudmaster b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where   a.mid_event_ts >= '20250701'
and     a.mid_event_ts >= '20250801'
and     a.dtl_ex_1_5s_01 in ('C205N'
							,'C207N'
							,'C242N'
							,'C244N'
							,'C246N'
							,'N205N'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'X232N'
							,'X243N'
							,'X246N')
and     a.hdr_source = 'NPP OUT'
and     tran_amt > 0
order by    chl_id_ob_userid
            ,transactiondatetime;",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,1835579,1835.579000,30.592983,0.509883,2X-LARGE,32,16.316256
01bed174-3204-c557-0000-c71d2c3b063a,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg7d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
    order by tran_d
),
hourly_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
),
all_dates AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT cust_i, merc_i, acqr_i FROM PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl where tran_d between '2025-03-01' and '2025-06-06') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.cust_i = hd.cust_i AND ad.merc_i = hd.merc_i AND ad.acqr_i = hd.acqr_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    cust_i, -- as ssx_cust_num,
    merc_i,
    acqr_i,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMA_SUM_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    CMA_SUM_TRAN_SUM_N,
    CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_SUM_N,
    CMA_SUM_FINL_APRD_TRAN_SUM_N,
    CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    CMA_SUM_DOMS_TRAN_CNT_Q,
    CMA_SUM_OSEA_TRAN_CNT_Q,
    CMA_SUM_DOMS_TRAN_SUM_N,
    CMA_SUM_OSEA_TRAN_SUM_N,
    CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMA_SUM_3DS_TRAN_CNT_Q,
    CMA_SUM_N3D_TRAN_CNT_Q,
    CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMA_SUM_3DS_TRAN_SUM_N,
    CMA_SUM_N3D_TRAN_SUM_N,
    CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    CMA_SUM_ATM_TRAN_CNT_Q,
    CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    CMA_SUM_CHIP_TRAN_CNT_Q,
    CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    CMA_SUM_CARD_PRES_TRAN_SUM_N,
    CMA_SUM_ATM_TRAN_SUM_N,
    CMA_SUM_FALL_BACK_TRAN_SUM_N,
    CMA_SUM_CHIP_TRAN_SUM_N,
    CMA_SUM_PAY_PASS_TRAN_SUM_N,
    CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    cust_i,
    merc_i,
    acqr_i,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,1822998,1822.998000,30.383300,0.506388,2X-LARGE,32,16.204416
01be9b1c-3204-bee3-0000-c71d2a813c1a,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PKENGINEERING_TESTING_1(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1819048,1819.048000,30.317467,0.505291,2X-LARGE,32,16.169312
01be71da-3204-bb76-0000-c71d29415c02,"SELECT * FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_EXEC_OMN_FNCL_TRAN_VW LIMIT 10
",GUERREOL,R_CLS_CBIRBS_PRD_CUS,3616903,3616.903000,60.281717,1.004695,X-LARGE,16,16.075120
01bdfad1-3204-aa1e-0000-c71d25b90f5a,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""F2KSZQG4AD3S4ZO0""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,1801930,1801.930000,30.032167,0.500536,2X-LARGE,32,16.017152
01beb5e8-3204-c1f5-0000-c71d2b70dd4e,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE1 as (

WITH cleaned_recipient_data AS (
    -- Clean and prepare recipient transaction data for LAST 6 MONTHS
    SELECT
        -- Snapshot date of transaction (parsed from MID_EVENT_TS)
        TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
        -- Transaction datetime (parsed from alternate date/time fields)
        TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
        -- Transaction ID (concatenation of 3 fields)
        (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
        -- Account identifier (bank, branch, account number)
        CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
        -- Feature from leaky.txt, no description
        dtl_ex_0_20s_001,
        -- Customer number (must be present, dropped for modelling)
        SSX_CUST_NUM,
        -- Transaction date (alternate format)
        TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS transaction_date,
        -- Extract hour from timestamp
        EXTRACT(HOUR FROM TRY_TO_TIMESTAMP(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF')) as C_hour,
        

        -- Day of week of transaction
        DAYOFWEEK(TRANSACTIONDATETIME) as C_day_of_week,
        -- Day of month of transaction
        DAY(SSX_SNAP_D) as C_day_of_month,
        -- Month of year of transaction
        MONTH(SSX_SNAP_D) as C_month_of_year,

        -- Scam victim flag (primary risk indicator)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_SCAM_VICTIM_FLAG, '[^0-9.-]', '')), -1) as _A_SCAM_VICTIM_FLAG,
        -- Primary risk indicator y
        -- Crypto risk indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,
        -- Blacklist and scam indicators
        -- Blacklist scam account indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_acct,
        -- Related scam CIF indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl1_scam_tp_cif, '[^0-9.-]', '')), -1) as _b_list_rl1_scam_tp_cif,
        -- High-risk biller metrics
        -- High-risk biller count
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_1,
        -- High-risk biller sum
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_1,
        -- NPP blacklist flags
        -- NPP blacklist recipient flag
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_recip_flag,
        -- NPP outbound transaction metrics
        -- NPP outbound transaction count (1)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_1,
        -- NPP outbound transaction count (2)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_2,
        -- NPP outbound transaction sum (1)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_sum_1,
        -- NPP first-time payer metrics
        -- NPP outbound first-time payer count (2)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_2,
        -- NPP outbound first-time payer sum (1)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_1,
        -- NPP outbound first-time payer sum (2)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_2,
        -- NPP watchlist flags
        -- Other risk indicators
        -- Open listed last CIF (2)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_open_listed_last_cif_2, '[^0-9.-]', '')), -1) as _b_open_listed_last_cif_2,
        -- Recipient first-time payer metrics
        -- Recipient first-time payer sum (1)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_1,
        -- Recipient first-time payer sum (long)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_long, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_long,
        -- Recipient link sums
        -- Recipient AAA link sum (long)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_long,
        -- Recipient link sum (long)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_long,
        -- Recipient link sum (short)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_short,
        -- Recipient transaction sums (various time periods)
        -- Recipient transaction sum (4 days)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_4, '[^0-9.-]', '')), -1) as _b_recip_sum_4,
        -- Recipient transaction sum (7 days)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_7, '[^0-9.-]', '')), -1) as _b_recip_sum_7,
        -- Recipient transaction sum (today)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_today, '[^0-9.-]', '')), -1) as _b_recip_sum_today,
        -- Recipient AAA transaction sums
        -- Recipient AAA transaction sum (1 day)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_1, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_1,
        -- Recipient AAA transaction sum (4 days)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_4, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_4,
        -- Recipient AAA transaction sum (long)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_long,
        -- Recipient AAA transaction sum (short)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_short,
        -- Fixed: _b_rfm_whitelist_ind (was incorrectly aliased)
        -- RFM whitelist indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_rfm_whitelist_ind, '[^0-9.-]', '')), -1) as _b_rfm_whitelist_ind,
        -- NPP velocity (1 day outbound)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_1d_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_1d_out,

        -- Risky apps indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_apps, '[^0-9.-]', '')), -1) as _l_risky_apps,
        -- Risky browser indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_browser, '[^0-9.-]', '')), -1) as _l_risky_browser,
        -- Accelerated event count
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_accel_event_cnt, '[^0-9.-]', '')), -1) as _l_accel_event_cnt,
        -- Recipient FTP feature
        COALESCE(CAST(_l_recip_ftp AS VARCHAR(50)), '-1') as _l_recip_ftp,
        -- Risky amount indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_amt, '[^0-9.-]', '')), -1) as _l_risky_amt,
        -- Time zone mismatch indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_tzone_mismatch, '[^0-9.-]', '')), -1) as _l_tzone_mismatch,

        -- Original features
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_REGISTRATIONS_CNT_1, '[^0-9.-]', '')), -1) as _A_CAPP_REGISTRATIONS_CNT_1,   
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_LOGON_CNT_1, '[^0-9.-]', '')), -1) as _A_CAPP_LOGON_CNT_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_REGO_1D_IND, '[^0-9.-]', '')), -1) as _A_CAPP_REGO_1D_IND,
    
        -- Original TGX_TRAN_AMT for backward compatibility
        COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TGX_TRAN_AMT,
        COUNT(*) OVER (PARTITION BY RCPI_ACCT_I, DATE(SSX_SNAP_D)) as daily_count
        

        
    FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
    WHERE SSX_SNAP_D >= '2024-09-23'
        AND SSX_SNAP_D < '2025-07-17'
        AND HDR_SOURCE = 'NPP OUT'
        AND TGX_BANK_NUM <> ''
        AND TGX_BRANCH_ID <> ''
        AND TGX_ACCT_NUM <> ''
        and  dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
),

-- Calculate daily aggregates
daily_aggregates AS (
    SELECT
        NPP.RCPI_ACCT_I,
        NPP.SSX_SNAP_D,
        
        -- Original aggregates
        MAX(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS MAX_SEND_CAPP_REGR_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS TOTL_SEND_CAPP_REGR_Q,
        
        MIN(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MIN_SEND_CAPP_LOGN_Q,
        MAX(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MAX_SEND_CAPP_LOGN_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS TOTL_SEND_CAPP_LOGN_Q,
        
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGO_1D_IND) = '' OR TRIM(NPP._A_CAPP_REGO_1D_IND) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGO_1D_IND) END) AS TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
        
        MAX(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS MAX_SEND_SCAM_VCTM_Q,
        SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS TOTL_SEND_SCAM_VCTM_Q,
        SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS total_scam_victim_connections_historical,
        
        MIN(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MIN_FNCL_TRAN_A,
        MAX(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN -9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MAX_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS TOTL_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE 1 END) AS CNT_FNCL_TRAN_AMT_Q,
        
        -- Unique sender count
        COUNT(DISTINCT NPP.SSX_CUST_NUM) AS UNIQUE_SENDERS_DAILY,
        
        -- Transaction count and sum for calculations
        COUNT(*) AS DAILY_TRANSACTION_COUNT,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS DAILY_TRANSACTION_SUM,
        
        -- NEW: Risk indicator aggregations
        MAX(NPP._b_crypto_risk) AS MAX_CRYPTO_RISK_DAILY,
 
        -- Average transactions per sender
        ROUND(COUNT(*) / NULLIF(COUNT(DISTINCT SSX_CUST_NUM), 0), 2) AS avg_transactions_per_sender_d_historical,
        -- Maximum daily transactions
        MAX(daily_count) as max_daily_transactions_historical,
        -- Sender diversity flag
        CASE
            WHEN COUNT(DISTINCT SSX_CUST_NUM) > COUNT(*) * 0.7 THEN 1  -- HIGH_DIVERSITY
            WHEN COUNT(DISTINCT SSX_CUST_NUM) < COUNT(*) * 0.2 THEN -1 -- LOW_DIVERSITY
            ELSE 0  -- NORMAL_DIVERSITY
        END as sender_diversity_flag,
        
      
    FROM cleaned_recipient_data NPP    
    GROUP BY NPP.RCPI_ACCT_I, NPP.SSX_SNAP_D
),

-- Calculate SEPARATE window patterns
pattern_features AS (
    SELECT *,
        -- Account history sufficiency check
        COUNT(*) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
        ) AS HISTORICAL_DAYS_AVAILABLE,
        
        -- New account flags
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) = 0 THEN 1 ELSE 0
        END AS IS_NEW_ACCOUNT_FLAG,
        
        -- DATEDIFF('day', 
        --     MIN(SSX_SNAP_D) OVER (PARTITION BY RCPI_ACCT_I),
        --     SSX_SNAP_D
        -- ) AS DAYS_SINCE_FIRST_TRANSACTION,
        
        -- PATTERN 1: 7-DAY HISTORICAL LOOKBACK (excluding current day)
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3  -- At least 3 days of history
            THEN AVG(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) 
            ELSE 0
        END AS AVG_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN SUM(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS ACTIVE_DAYS_7D_HISTORICAL,
        
        -- PATTERN 2: CURRENT DAY + 1 FOLLOWING DAY (2-day forward pattern)
        AVG(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
        
        AVG(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        SUM(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        AVG(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        MAX(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_TRANSACTIONS_CURRENT_PLUS_1D,
        
        MAX(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS ACTIVE_DAYS_CURRENT_PLUS_1D
        
    FROM daily_aggregates
),

-- Final output with BOTH pattern types
recipient_aggregates as (SELECT
    RCPI_ACCT_I,
    SSX_SNAP_D,
    MAX_SEND_CAPP_REGR_Q,
    TOTL_SEND_CAPP_REGR_Q,
    MIN_SEND_CAPP_LOGN_Q,
    MAX_SEND_CAPP_LOGN_Q,
    TOTL_SEND_CAPP_LOGN_Q,
    TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
    MAX_SEND_SCAM_VCTM_Q,
    TOTL_SEND_SCAM_VCTM_Q,
    MIN_FNCL_TRAN_A,
    MAX_FNCL_TRAN_A,
    TOTL_FNCL_TRAN_A,
    CNT_FNCL_TRAN_AMT_Q,
    MAX_CRYPTO_RISK_DAILY,
     -- Current day metrics
    UNIQUE_SENDERS_DAILY,
    ROUND(UNIQUE_SENDERS_DAILY::DECIMAL / NULLIF(DAILY_TRANSACTION_COUNT, 0), 3) AS SENDER_DIVERSITY_RATIO_DAILY,
    DAILY_TRANSACTION_COUNT,
    ROUND(DAILY_TRANSACTION_SUM, 2) AS DAILY_TRANSACTION_SUM,
    
    -- Account history indicators
    IS_NEW_ACCOUNT_FLAG,
    HISTORICAL_DAYS_AVAILABLE,
total_scam_victim_connections_historical,   avg_transactions_per_sender_d_historical, max_daily_transactions_historical,
MAX_TRANSACTIONS_7D_HISTORICAL, MAX_UNIQUE_SENDERS_7D_HISTORICAL, ACTIVE_DAYS_7D_HISTORICAL,
MAX_TRANSACTIONS_CURRENT_PLUS_1D, MAX_UNIQUE_SENDERS_CURRENT_PLUS_1D, ACTIVE_DAYS_CURRENT_PLUS_1D,

    -- 7-day historical features (0 for accounts without history)
    ROUND(AVG_TRANSACTIONS_7D_HISTORICAL, 2) AS AVG_TRANSACTIONS_7D_HISTORICAL,
    ROUND(AVG_UNIQUE_SENDERS_7D_HISTORICAL, 2) AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
    ROUND(TOTAL_TRANSACTION_SUM_7D_HISTORICAL, 2) AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
    ROUND(AVG_TRANSACTION_SUM_7D_HISTORICAL, 2) AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
    
    -- Current + 1 day forward features
    ROUND(AVG_TRANSACTIONS_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
    ROUND(AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D, 2) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
    ROUND(TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
    ROUND(AVG_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D
FROM pattern_features
)

-- Final result: Transaction-level data with recipient features
SELECT 
    r.*,  -- All transaction-level columns
    -- Recipient aggregated features
    ra.* EXCLUDE(RCPI_ACCT_I, SSX_SNAP_D)
    
FROM cleaned_recipient_data r
LEFT JOIN recipient_aggregates ra ON r.RCPI_ACCT_I = ra.RCPI_ACCT_I
and r.SSX_SNAP_D = ra.SSX_SNAP_D);",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1783306,1783.306000,29.721767,0.495363,2X-LARGE,32,15.851616
01bebfd7-3204-c1f3-0000-c71d2bb2f42a,"CREATE OR REPLACE temporary TABLE transx AS 
select  
b.FRAUDTYPE
,b.DETECTION
,b.case_detection
,TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
,ssx_cust_num AS XQO_CUST_NUM
,chl_id_ob_userid AS HQO_OB_USERID
,TRY_TO_NUMBER(tgx_tran_amt, 38, 2) as TRAN_AMT
,TRY_TO_NUMBER(_A_CUSTOMER_AGE, 38, 2) as _A_CUSTOMER_AGE
,TRY_TO_NUMBER(_L_SE_SCORE, 38, 2) as _L_SE_SCORE
,TRY_TO_NUMBER(_L_BC_SCORE, 38, 2) as _L_BC_SCORE
,TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 4) as CERBERUS_SCORE
,TGX_BANK_NAME
,TGX_BANK_NUM
,TGX_BRANCH_ID
,TGX_ACCT_NUM
,TGX_NAME
,dtl_ex_1_5s_01     /* task id */
,dtl_ex_0_i_002 as FTP_ind
/* BC risk factors */
,_L_FLAT_PHONE
,_L_IS_RAT
,_L_IS_MOB_RAT
,_L_IS_RCNT_RAT
,_l_rat_in_sess
,_L_PREV_RAT_DT
,_L_FIRST_RAT_DT
,_L_IS_MOB_RAT_DT
,_L_SESS_CNT_MOB_SDK
,_L_DPI_CHANGE 
,_L_NEW_DEV
,_L_RARE_SCRN_SZ
,_L_scrn_res_anom
,_l_lrg_dist_known_loc
,_L_NEW_BROWSER
,_L_NEW_DESKTOP_USER
,_L_IS_ACTIVE_CALL 
,_L_IS_LONG_SESS
,_L_NEW_MOB_BROWSER_USER
,_L_DEV_CHANGE_ANOM
,_L_TZONE_MISMATCH  
,_L_ADV_KEY_COMBO
,_L_IP_CNTRY_CODE
,_L_NEW_IP
,_L_RISKY_IP
,_L_RISKY_ISP
,_i_all_logons_fdt
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_n_client_details_view, 38, 2), '1960-01-01 00:00:00'::timestamp) as _n_client_details_view
,TRY_TO_NUMBER(_A_CAPP_LOGON_CNT_1, 38, 2) as _A_CAPP_LOGON_CNT_1 /* capp login counts within last 24 hours, 2 is between 24 and 48 hours etc */
,TRY_TO_NUMBER(_A_NB_LOGONS_CNT_1, 38, 2) as _A_NB_LOGONS_CNT_1
,_A_TELSTRA_API_EVENT_ID /* this is task id e.g.C513B  */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_API_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _A_TELSTRA_API_EVENT_DT
,COALESCE(NULLIF(_A_TELSTRA_CALL_DURATION, ''), 0) / 60 as _A_TELSTRA_CALL_DURATION /* in minutes */
,_a_telstra_active_call 
-- trust 
,_l_trust_1000 
,_l_trust_900
,_L_PUSH_API_1
,_L_PUSH_API_2
,_L_PUSH_API_3
,_L_PUSH_API_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_RST_PSWD_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_RST_PSWD_DT /* reset password date */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') as _N_CLIENT_IDTO_PW
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_MOD_MOB_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_MOD_MOB_DT
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PHONE_CHG_ALL, 38, 2), '1960-01-01 00:00:00') as _A_PHONE_CHG_ALL /*mobile phone number change date*/
/* scam p indicators and dates */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT
,TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P21_MLW_DT
,TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT
,TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT
,TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND
/* CAPP rego */
,TRY_TO_NUMBER(_N_BC_NCRG_ATO_SCORE, 38, 2) as _N_BC_NCRG_ATO_SCORE
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_BC_NCRG_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _N_BC_NCRG_EVENT_DT
from        LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join   PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
    where   mid_event_ts >= '20250701'
    AND     mid_event_ts < '20250825'
order by    TRANSACTIONDATETIME;",WANGC34,R_USR_FRAUMD_LABMLFRD_RW,3563393,3563.393000,59.389883,0.989831,X-LARGE,16,15.837296
01bdeac8-3204-aa22-0000-c71d2549b242,"SELECT 
    t1.tts_tran_date_client,
    t1.tts_tran_time_client,
    REGEXP_REPLACE(LTRIM(t1._c_cmx_tran_id), '^[0-9]','') AS transactionnumber2,
    t1.ath_pc_pos,
    t1.rsp_action_code,
    t1.DTL_CA_auth_sys_dec,
    t1.DTL_CA_client_amt,
    t1.CHL_CT_term_owner_name,
    t1.dtl_ex_0_20s_004,
    t1.chl_id_card_num,
    t1.CHL_CT_mer_mcc,
    t1.dtl_ex_3_20s_001,
    t1.chl_ct_media,
    t1.dtl_ex_0_3s_002,
    t1.dtl_ca_reversal_ind,
    t1.dtl_ex_3_80s_003,
    t1._a_customer_age,
    REGEXP_REPLACE(LTRIM(t1.rsp_ex_2_30s_001), '^[0-9]','') AS transactionnumber,
    t1.ssx_cust_num
FROM
    PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT AS t1
WHERE 
    (
        t1.ssx_cust_num IN (
            SELECT DISTINCT
                CUSTID
            FROM LCL.CARD_ASES_BTCH_PEGA_CURR_STG
            WHERE custid IS NOT NULL AND custid <> ''
            AND BUSN_D = TO_DATE('2025-07-18')
        )
    ) or (
        t1.chl_id_card_num IN (
            SELECT DISTINCT
                BASECRDNUMBER
            FROM LCL.CARD_ASES_BTCH_PEGA_CURR_STG
            WHERE BUSN_D = TO_DATE('2025-07-18')

        )
    )
    and
    t1.tts_tran_date_client >= TO_CHAR(DATEADD(month, -6, CURRENT_DATE), 'YYYYMMDD')",SAKKAIB,R_USR_FRAUMD_LABMLFRD_RW,1773620,1773.620000,29.560333,0.492672,2X-LARGE,32,15.765504
01bdd3b3-3204-a617-0000-c71d249e8756,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DIGI_FRAUD_V6_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""DTL_EX_0_20S_001"" STRING(16777216), ""TGX_TRAN_AMT"" STRING(16777216), ""HOUR"" BIGINT, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_BTS_MAX_SE_DT"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_CRD_ACTIONCODE_DT_1"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_LO_DT"" BIGINT, ""_A_CC_DT"" BIGINT, ""_A_CAPP_NOTIFY_OPT_OUT_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_3"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_NPP_FTP_DATE2"" BIGINT, ""_A_P_P_3"" BIGINT, ""_A_CRD_NPP_PAYMENT_DT"" BIGINT, ""_A_IS_IP_DT_3"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_5_2"" BIGINT, ""_A_ONLINE_PL_DT"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_DTL_HID_UNHID_ACCT_DT_PREV"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_SCAMP1_MLW_DT"" BIGINT, ""_A_SCAMP2_MLW_DT"" BIGINT, ""_A_SCAMP5_MLW_DT"" BIGINT, ""_A_SCAMP7_MLW_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP4_DT"" BIGINT, ""_A_NB_LASTLOGON_DT_3"" BIGINT, ""_A_AUTO_DEC_CP_PP_DT"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_INB_ALL_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_1"" BIGINT, ""_A_RETRIEVE_STMT_DETAILS_DT"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_NPP_WHITELIST_CUS_ACCT_DT"" BIGINT, ""_A_NPP_WHITELIST_PAYID_DT"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_BLACKLIST_PAYID_DT"" BIGINT, ""_A_NPP_INB_OFI_PAYID_DT"" BIGINT, ""_A_NPP_OUT_CBA_PAYID_DT"" BIGINT, ""_A_AUS_IP_ACTIVITY"" BIGINT, ""_A_CIF_ESTABLISH_DT"" BIGINT, ""_A_ECV_DOCUMENT_DT"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_CLIENT_POSTCODE_DT_2"" BIGINT, ""_A_CLIENT_PORT_DATE_1"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_OPEN_LAST_PAYER_CIF_DT_10"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_NPP_OUT_CNT_DATE"" BIGINT, ""_I_ALL_LOGONS_FDT"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_PUSH_API_DT_2"" BIGINT, ""_L_PUSH_API_DT_3"" BIGINT, ""_L_PUSH_API_DT_4"" BIGINT, ""_L_FIRST_RAT_DT"" BIGINT, ""_L_M_C_5"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_MOB_RAT_DT"" BIGINT, ""_L_IS_RAT_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_1701_DT_1"" BIGINT, ""_N_D_P_C"" BIGINT, ""_N_T_3"" BIGINT, ""_N_1601_DT"" BIGINT, ""_N_F_3"" BIGINT, ""_N_NB_MEDIUM_PRIORITY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_CUST_NB_DEVICE_DT"" BIGINT, ""_N_CUST_NB_FIRST_DEVICE_DT"" BIGINT, ""_N_HCE_ADD_CARD"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CAPP_REG_DT_3"" BIGINT, ""_N_CAPP_REG_DT_5"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_PASSWORD_TEMP"" BIGINT, ""_X_D_2"" BIGINT, ""_A_BTS_BIO_SE"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_ECV_COMMSEC_FLAG"" NUMBER(38, 2), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_ATM_WITHDRAWAL_SUM_AMT"" NUMBER(38, 2), ""_A_NPP_INBOUND_SUM_AMT"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_DISTANCE"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_FTP_SUM_1"" NUMBER(38, 2), ""_A_MULTI_CNT"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_3"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_P_N_3"" STRING(16777216), ""_A_P_N_C"" STRING(16777216), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_CUST_AVG_ACCT_BAL"" NUMBER(38, 2), ""_A_E"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_T"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_CAPP_REGISTRATIONS_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_2"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_DEVICE_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_LOGON_NB_IP_PC"" STRING(16777216), ""_A_CURR_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE"" STRING(16777216), ""_A_PREV_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE_MODEL"" STRING(16777216), ""_A_PROF_CAPP_DEVICE_2"" STRING(16777216), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_2"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_3"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_5"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_MODEL_1"" STRING(16777216), ""_A_VPN_VPS_IP_LOGON_COUNT"" NUMBER(38, 2), ""_A_CC_CASH_ADVANCE_AMT"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_CNT_2"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NPP_FTP_SUM"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_5"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_7"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_SHORT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_CIF_ESTABLISH_EMAIL"" STRING(16777216), ""_A_CIF_ESTABLISH_PHONE"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_CLIENT_POSTCODE_FTP_SUM_3"" NUMBER(38, 2), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_CITY_CNT_1"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_3"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_2"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_5"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_6"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_7"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_BVT_NUMERIC_1"" NUMBER(38, 2), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_LIST_RL1_SCAM_TP_CIF"" NUMBER(38, 2), ""_B_NPP_OUT_FTP_SUM_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_4"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_5"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_6"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_7"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_4"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_2"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_3"" NUMBER(38, 2), ""_I_ALL_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_2"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_3"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_3M"" NUMBER(38, 2), ""_I_CUST_NET_L_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_4"" NUMBER(38, 2), ""_I_CUST_NET_CNT_LONG"" NUMBER(38, 2), ""_L_SCM_RSK_SCR_2"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_DPI_CHANGE"" NUMBER(38, 2), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_PLUGIN_CNT"" NUMBER(38, 2), ""_L_RARE_SIM_CNTRY_CODE"" NUMBER(38, 2), ""_L_ROOTED_DEV"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_SDID_CNT_1"" NUMBER(38, 2), ""_L_SDID_CNT_3"" NUMBER(38, 2), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_MATCH_NAME"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BC_AO_SCORE"" NUMBER(38, 2), ""_L_BRANCH_ID"" STRING(16777216), ""_L_DRAG_N_DROP"" NUMBER(38, 2), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_RCNT_HI_SCR_ON_DEV"" NUMBER(38, 2), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SCORE_1"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_ACCUM_AMT_ANOM"" NUMBER(38, 2), ""_L_FRST_PROXY"" NUMBER(38, 2), ""_L_NEW_LANG"" NUMBER(38, 2), ""_L_SCRN_RES_ANOM"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_SCORE_4"" NUMBER(38, 2), ""_L_SCORE_5"" NUMBER(38, 2), ""_L_RAT_CHECK"" NUMBER(38, 2), ""_L_M_L_1"" NUMBER(38, 2), ""_L_M_L_4"" NUMBER(38, 2), ""_L_M_L_C"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_BC_SESS_ID"" STRING(16777216), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_BC_SCORE"" NUMBER(38, 2), ""_L_BROWSER_AGE"" NUMBER(38, 2), ""_L_CITY_AGE"" NUMBER(38, 2), ""_L_CLIPB_EVENT_CNT"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_IOS"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_JS"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_DOM_HAND_CH_ANOMALY"" NUMBER(38, 2), ""_L_FT_RAT_APP_INST"" NUMBER(38, 2), ""_L_G_CON_DEV"" NUMBER(38, 2), ""_L_IP_AGE"" NUMBER(38, 2), ""_L_IS_ACTIVE_CALL"" NUMBER(38, 2), ""_L_ISP_AGE"" NUMBER(38, 2), ""_L_KEY_MOUSE_ANOMALY"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_LGN_IMPORT_ANOMALY"" NUMBER(38, 2), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_MINS_LST_LGN_CAPPED"" NUMBER(38, 2), ""_L_MOUSE_CNT"" NUMBER(38, 2), ""_L_MOUSE_DOODL"" NUMBER(38, 2), ""_L_NEW_BROWSER"" NUMBER(38, 2), ""_L_NEW_BROWSER_ANOMALY"" NUMBER(38, 2), ""_L_NEW_MOB_APP_USER"" NUMBER(38, 2), ""_L_NEW_MOB_BROWSER_USER"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_ORIENT_EVENT_CNT"" NUMBER(38, 2), ""_L_OS_CH_ANOMALY"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PRIV_BROWSING_ANOMALY"" NUMBER(38, 2), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SCRN_W"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_SDK"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_SESS_ID"" STRING(16777216), ""_L_SIM_IP_CNTRY_MISMATCH"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOTAL_SESS_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_L_TYPE_PATTERNS_ANOMALY"" NUMBER(38, 2), ""_L_UID_AGE"" NUMBER(38, 2), ""_N_BC_CR_BC_1"" NUMBER(38, 2), ""_N_FTP_CNT_1"" NUMBER(38, 2), ""_N_5_RCNT_M100S_1"" STRING(16777216), ""_N_5_RCNT_M100S_2"" STRING(16777216), ""_N_MPS_MNDT_CNT_24H_1"" NUMBER(38, 2), ""_N_MOB_OTH_TRAN_SUM_1"" NUMBER(38, 2), ""_N_NB_LOGON_USER_AGENT"" STRING(16777216), ""_N_CA_DEVICE_PROFILE_1"" NUMBER(38, 2), ""_N_CA_DEVICE_PROFILE_3"" NUMBER(38, 2), ""_N_P20_7D_CNT_1"" NUMBER(38, 2), ""_N_CA_LGN_CNT_24H_1"" NUMBER(38, 2), ""_N_NMCHK_CNT"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_IND_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CLIENT_SSID_NAME_1"" STRING(16777216), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_CRYPTO_RECIPIENT_SUM"" NUMBER(38, 2), ""_N_RP_SES_IP_1"" NUMBER(38, 2), ""_N_MULTI_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_NB_SUM_TPT_4"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_H_1"" NUMBER(38, 2), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_OPEN_FTP_SUM_7D"" NUMBER(38, 2), ""_N_CAPP_BPAY_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_CIF_SENDER_SUM"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_IND"" NUMBER(38, 2), ""_X_FT_OVER5K_RECIP_CNT"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_T_1"" NUMBER(38, 2), ""_X_T_2"" NUMBER(38, 2), ""_X_T_3"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_1"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_3"" NUMBER(38, 2))    AS  SELECT  *  FROM (
    SELECT
        TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
        SSX_CUST_NUM,
        TTS_TRAN_DATE_ALT,
        DTL_EX_0_20S_001,
        TGX_TRAN_AMT,
        TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
        	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_MAX_SE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CC_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CC_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CC_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_NOTIFY_OPT_OUT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_FTP_DATE2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_FTP_DATE2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_FTP_DATE2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_P_P_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_P_P_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_P_P_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_NPP_PAYMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_NPP_PAYMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_NPP_PAYMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IS_IP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ONLINE_PL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ONLINE_PL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ONLINE_PL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_HID_UNHID_ACCT_DT_PREV, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_HID_UNHID_ACCT_DT_PREV, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_HID_UNHID_ACCT_DT_PREV
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP1_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP2_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP5_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP7_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP4_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_LASTLOGON_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_LASTLOGON_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_LASTLOGON_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_AUTO_DEC_CP_PP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RETRIEVE_STMT_DETAILS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_CUS_ACCT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_CUS_ACCT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_WHITELIST_CUS_ACCT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_WHITELIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_BLACKLIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_BLACKLIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_BLACKLIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_OFI_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_CBA_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUS_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUS_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00'))
            END as _A_AUS_IP_ACTIVITY
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CIF_ESTABLISH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ECV_DOCUMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PORT_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PORT_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_PORT_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_10, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_10, 38, 2), '1960-01-01 00:00:00'))
            END as _B_OPEN_LAST_PAYER_CIF_DT_10
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00'))
            END as _I_ALL_LOGONS_FDT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_FIRST_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_C_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_C_5, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_C_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_MOB_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_MOB_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_MOB_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1701_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_D_P_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_T_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_T_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_T_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1601_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_F_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_F_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_F_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_MEDIUM_PRIORITY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_DEVICE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_DEVICE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_DEVICE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_FIRST_DEVICE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_FIRST_DEVICE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_FIRST_DEVICE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_HCE_ADD_CARD, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_HCE_ADD_CARD, 38, 2), '1960-01-01 00:00:00'))
            END as _N_HCE_ADD_CARD
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PASSWORD_TEMP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00'))
            END as _X_D_2
        
        ,             try_to_number(_a_bts_bio_se, 38, 2) as _a_bts_bio_se
            ,_A_BTS_BNFT
            ,try_to_number(_a_ecv_commsec_flag, 38, 2) as _a_ecv_commsec_flag
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,try_to_number(_a_atm_withdrawal_sum_amt, 38, 2) as _a_atm_withdrawal_sum_amt
            ,try_to_number(_a_npp_inbound_sum_amt, 38, 2) as _a_npp_inbound_sum_amt
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_distance, 38, 2) as _a_geo_distance
            ,_A_P_N_H
            ,try_to_number(_a_ftp_sum_1, 38, 2) as _a_ftp_sum_1
            ,try_to_number(_a_multi_cnt, 38, 2) as _a_multi_cnt
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_3, 38, 2) as _a_p_l_3
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,_A_P_N_3
            ,_A_P_N_C
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_cust_avg_acct_bal, 38, 2) as _a_cust_avg_acct_bal
            ,try_to_number(_a_e, 38, 2) as _a_e
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_t, 38, 2) as _a_t
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_capp_registrations_cnt_3, 38, 2) as _a_capp_registrations_cnt_3
            ,try_to_number(_a_nb_logons_cnt_2, 38, 2) as _a_nb_logons_cnt_2
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_DEVICE_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,_A_LOGON_NB_IP_PC
            ,try_to_number(_a_curr_capp_device_cnt, 38, 2) as _a_curr_capp_device_cnt
            ,_A_PREV_CAPP_DEVICE
            ,try_to_number(_a_prev_capp_device_cnt, 38, 2) as _a_prev_capp_device_cnt
            ,_A_PREV_CAPP_DEVICE_MODEL
            ,_A_PROF_CAPP_DEVICE_2
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,try_to_number(_a_prof_capp_device_cnt_2, 38, 2) as _a_prof_capp_device_cnt_2
            ,try_to_number(_a_prof_capp_device_cnt_3, 38, 2) as _a_prof_capp_device_cnt_3
            ,try_to_number(_a_prof_capp_device_cnt_5, 38, 2) as _a_prof_capp_device_cnt_5
            ,_A_PROF_CAPP_DEVICE_MODEL_1
            ,try_to_number(_a_vpn_vps_ip_logon_count, 38, 2) as _a_vpn_vps_ip_logon_count
            ,try_to_number(_a_cc_cash_advance_amt, 38, 2) as _a_cc_cash_advance_amt
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_nb_bpay_acct_cnt_2, 38, 2) as _a_nb_bpay_acct_cnt_2
            ,try_to_number(_a_nb_bpay_acct_sum_1, 38, 2) as _a_nb_bpay_acct_sum_1
            ,try_to_number(_a_npp_ftp_sum, 38, 2) as _a_npp_ftp_sum
            ,try_to_number(_a_cust_npp_out_sum_aaa_1, 38, 2) as _a_cust_npp_out_sum_aaa_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_5, 38, 2) as _a_cust_npp_out_sum_aaa_5
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_7, 38, 2) as _a_cust_sum_aaa_7
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_short, 38, 2) as _a_cust_sum_aaa_short
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_CIF_ESTABLISH_EMAIL
            ,_A_CIF_ESTABLISH_PHONE
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_client_postcode_ftp_sum_3, 38, 2) as _a_client_postcode_ftp_sum_3
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,try_to_number(_a_client_city_cnt_1, 38, 2) as _a_client_city_cnt_1
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_3
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_2, 38, 2) as _a_client_country_cnt_2
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_a_client_country_cnt_5, 38, 2) as _a_client_country_cnt_5
            ,try_to_number(_a_client_country_cnt_6, 38, 2) as _a_client_country_cnt_6
            ,try_to_number(_a_client_country_cnt_7, 38, 2) as _a_client_country_cnt_7
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_bvt_numeric_1, 38, 2) as _b_bvt_numeric_1
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_list_rl1_scam_tp_cif, 38, 2) as _b_list_rl1_scam_tp_cif
            ,try_to_number(_b_npp_out_ftp_sum_1, 38, 2) as _b_npp_out_ftp_sum_1
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_4, 38, 2) as _b_recip_sum_aaa_4
            ,try_to_number(_b_recip_sum_aaa_5, 38, 2) as _b_recip_sum_aaa_5
            ,try_to_number(_b_recip_sum_aaa_6, 38, 2) as _b_recip_sum_aaa_6
            ,try_to_number(_b_recip_sum_aaa_7, 38, 2) as _b_recip_sum_aaa_7
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_cnt_3, 38, 2) as _b_client_postcode_cnt_3
            ,try_to_number(_b_client_postcode_cnt_4, 38, 2) as _b_client_postcode_cnt_4
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_cust_tran_sum_1, 38, 2) as _i_cust_tran_sum_1
            ,try_to_number(_i_cust_tran_sum_2, 38, 2) as _i_cust_tran_sum_2
            ,try_to_number(_i_cust_tran_sum_3, 38, 2) as _i_cust_tran_sum_3
            ,try_to_number(_i_all_logons_cnt_1, 38, 2) as _i_all_logons_cnt_1
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,try_to_number(_i_capp_logons_perc_2, 38, 2) as _i_capp_logons_perc_2
            ,try_to_number(_i_capp_logons_perc_3, 38, 2) as _i_capp_logons_perc_3
            ,try_to_number(_i_capp_logons_perc_3m, 38, 2) as _i_capp_logons_perc_3m
            ,try_to_number(_i_cust_net_l_cnt_1, 38, 2) as _i_cust_net_l_cnt_1
            ,try_to_number(_i_cust_net_cnt_4, 38, 2) as _i_cust_net_cnt_4
            ,try_to_number(_i_cust_net_cnt_long, 38, 2) as _i_cust_net_cnt_long
            ,try_to_number(_l_scm_rsk_scr_2, 38, 2) as _l_scm_rsk_scr_2
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_dpi_change, 38, 2) as _l_dpi_change
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,try_to_number(_l_plugin_cnt, 38, 2) as _l_plugin_cnt
            ,try_to_number(_l_rare_sim_cntry_code, 38, 2) as _l_rare_sim_cntry_code
            ,try_to_number(_l_rooted_dev, 38, 2) as _l_rooted_dev
            ,_L_SDID_1
            ,try_to_number(_l_sdid_cnt_1, 38, 2) as _l_sdid_cnt_1
            ,try_to_number(_l_sdid_cnt_3, 38, 2) as _l_sdid_cnt_3
            ,_L_NC_ACCT_NUM
            ,_L_NC_MATCH_NAME
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,try_to_number(_l_bc_ao_score, 38, 2) as _l_bc_ao_score
            ,_L_BRANCH_ID
            ,try_to_number(_l_drag_n_drop, 38, 2) as _l_drag_n_drop
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_rcnt_hi_scr_on_dev, 38, 2) as _l_rcnt_hi_scr_on_dev
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_score_1, 38, 2) as _l_se_score_1
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_accum_amt_anom, 38, 2) as _l_accum_amt_anom
            ,try_to_number(_l_frst_proxy, 38, 2) as _l_frst_proxy
            ,try_to_number(_l_new_lang, 38, 2) as _l_new_lang
            ,try_to_number(_l_scrn_res_anom, 38, 2) as _l_scrn_res_anom
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_score_4, 38, 2) as _l_score_4
            ,try_to_number(_l_score_5, 38, 2) as _l_score_5
            ,try_to_number(_l_rat_check, 38, 2) as _l_rat_check
            ,try_to_number(_l_m_l_1, 38, 2) as _l_m_l_1
            ,try_to_number(_l_m_l_4, 38, 2) as _l_m_l_4
            ,try_to_number(_l_m_l_c, 38, 2) as _l_m_l_c
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,_L_BC_SESS_ID
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_bc_score, 38, 2) as _l_bc_score
            ,try_to_number(_l_browser_age, 38, 2) as _l_browser_age
            ,try_to_number(_l_city_age, 38, 2) as _l_city_age
            ,try_to_number(_l_clipb_event_cnt, 38, 2) as _l_clipb_event_cnt
            ,try_to_number(_l_days_lst_dev_ios, 38, 2) as _l_days_lst_dev_ios
            ,try_to_number(_l_days_lst_dev_js, 38, 2) as _l_days_lst_dev_js
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_dom_hand_ch_anomaly, 38, 2) as _l_dom_hand_ch_anomaly
            ,try_to_number(_l_ft_rat_app_inst, 38, 2) as _l_ft_rat_app_inst
            ,try_to_number(_l_g_con_dev, 38, 2) as _l_g_con_dev
            ,try_to_number(_l_ip_age, 38, 2) as _l_ip_age
            ,try_to_number(_l_is_active_call, 38, 2) as _l_is_active_call
            ,try_to_number(_l_isp_age, 38, 2) as _l_isp_age
            ,try_to_number(_l_key_mouse_anomaly, 38, 2) as _l_key_mouse_anomaly
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_lgn_import_anomaly, 38, 2) as _l_lgn_import_anomaly
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_mins_lst_lgn_capped, 38, 2) as _l_mins_lst_lgn_capped
            ,try_to_number(_l_mouse_cnt, 38, 2) as _l_mouse_cnt
            ,try_to_number(_l_mouse_doodl, 38, 2) as _l_mouse_doodl
            ,try_to_number(_l_new_browser, 38, 2) as _l_new_browser
            ,try_to_number(_l_new_browser_anomaly, 38, 2) as _l_new_browser_anomaly
            ,try_to_number(_l_new_mob_app_user, 38, 2) as _l_new_mob_app_user
            ,try_to_number(_l_new_mob_browser_user, 38, 2) as _l_new_mob_browser_user
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,try_to_number(_l_orient_event_cnt, 38, 2) as _l_orient_event_cnt
            ,try_to_number(_l_os_ch_anomaly, 38, 2) as _l_os_ch_anomaly
            ,_L_POLICY_NM
            ,try_to_number(_l_priv_browsing_anomaly, 38, 2) as _l_priv_browsing_anomaly
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_scrn_w, 38, 2) as _l_scrn_w
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_mob_sdk, 38, 2) as _l_sess_cnt_mob_sdk
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,_L_SESS_ID
            ,try_to_number(_l_sim_ip_cntry_mismatch, 38, 2) as _l_sim_ip_cntry_mismatch
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_total_sess_cnt, 38, 2) as _l_total_sess_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_l_type_patterns_anomaly, 38, 2) as _l_type_patterns_anomaly
            ,try_to_number(_l_uid_age, 38, 2) as _l_uid_age
            ,try_to_number(_n_bc_cr_bc_1, 38, 2) as _n_bc_cr_bc_1
            ,try_to_number(_n_ftp_cnt_1, 38, 2) as _n_ftp_cnt_1
            ,_N_5_RCNT_M100S_1
            ,_N_5_RCNT_M100S_2
            ,try_to_number(_n_mps_mndt_cnt_24h_1, 38, 2) as _n_mps_mndt_cnt_24h_1
            ,try_to_number(_n_mob_oth_tran_sum_1, 38, 2) as _n_mob_oth_tran_sum_1
            ,_N_NB_LOGON_USER_AGENT
            ,try_to_number(_n_ca_device_profile_1, 38, 2) as _n_ca_device_profile_1
            ,try_to_number(_n_ca_device_profile_3, 38, 2) as _n_ca_device_profile_3
            ,try_to_number(_n_p20_7d_cnt_1, 38, 2) as _n_p20_7d_cnt_1
            ,try_to_number(_n_ca_lgn_cnt_24h_1, 38, 2) as _n_ca_lgn_cnt_24h_1
            ,try_to_number(_n_nmchk_cnt, 38, 2) as _n_nmchk_cnt
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_ind_1, 38, 2) as _n_2wp_tran_ind_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,_N_CLIENT_SSID_NAME_1
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_crypto_recipient_sum, 38, 2) as _n_crypto_recipient_sum
            ,try_to_number(_n_rp_ses_ip_1, 38, 2) as _n_rp_ses_ip_1
            ,try_to_number(_n_multi_amt_1, 38, 2) as _n_multi_amt_1
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,try_to_number(_n_nb_sum_tpt_4, 38, 2) as _n_nb_sum_tpt_4
            ,_N_D_D_3
            ,try_to_number(_n_h_1, 38, 2) as _n_h_1
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_open_ftp_sum_7d, 38, 2) as _n_open_ftp_sum_7d
            ,try_to_number(_n_capp_bpay_cnt_1, 38, 2) as _n_capp_bpay_cnt_1
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_cif_sender_sum, 38, 2) as _x_cif_sender_sum
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_name_match_ind, 38, 2) as _x_name_match_ind
            ,try_to_number(_x_ft_over5k_recip_cnt, 38, 2) as _x_ft_over5k_recip_cnt
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_t_1, 38, 2) as _x_t_1
            ,try_to_number(_x_t_2, 38, 2) as _x_t_2
            ,try_to_number(_x_t_3, 38, 2) as _x_t_3
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_npp_out_sum_1, 38, 2) as _x_npp_out_sum_1
            ,try_to_number(_x_npp_out_sum_3, 38, 2) as _x_npp_out_sum_3

    FROM
        LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
    WHERE
        TTS_TRAN_DATE_ALT BETWEEN 20250716 AND 20250720
)",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1768117,1768.117000,29.468617,0.491144,2X-LARGE,32,15.716608
01bef321-3204-c93e-0000-c71d2d35d8ae,"create or replace temporary table NPP_TRAN as
select	distinct case   when b.fraudtype = 'CVL' then null
                else b.fraudtype
        end as FRAUDTYPE
		,b.detection
		,b.case_detection
        ,TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
		,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
		,a.tts_tran_date_alt
		,a.tts_tran_time_alt
		,a.dtl_ex_0_20s_001
		,a.dtl_ex_1_5s_01
		,a.ssx_cust_num
		,a.chl_id_ob_userid
		,a.tgx_bank_name
		,a.tgx_bank_num
		,a.tgx_branch_id
		,a.tgx_acct_num
		,a.tgx_name
		,a.tgx_description
		,TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as TRAN_AMT
		,a.dtl_ex_0_i_002 as FTP_IND
		
		-- BioCatch UVs
		,TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE
		,TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_SCORE
		,TRY_TO_NUMBER(a._l_adv_key_combo, 38, 2) as _L_ADV_KEY_COMBO
		,TRY_TO_NUMBER(a._l_clpbrd_evnt, 38, 2) as _L_CLPBRD_EVNT
		,TRY_TO_NUMBER(a._l_concurrent_sess, 38, 2) as _L_CONCURRENT_SESS
		,TRY_TO_NUMBER(a._l_export_data, 38, 2) as _L_EXPORT_DATA
		,TRY_TO_NUMBER(a._l_import_data, 38, 2) as _L_IMPORT_DATA
		,TRY_TO_NUMBER(a._l_is_rat, 38, 2) as _L_IS_RAT
		,TRY_TO_NUMBER(a._l_is_mob_rat, 38, 2) as _L_IS_MOB_RAT
		,TRY_TO_NUMBER(a._l_rat_in_sess, 38, 2) as _L_RAT_IN_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_hrisk_sess, 38, 2) as _L_IS_RCNT_HRISK_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_rat, 38, 2) as _L_IS_RCNT_RAT
		,TRY_TO_NUMBER(a._l_lrg_dist_known_loc, 38, 2) as _L_LRG_DIST_KNOWN_LOC
		,TRY_TO_NUMBER(a._l_rare_scrn_sz, 38, 2) as _L_RARE_SCRN_SZ
		,TRY_TO_NUMBER(a._l_risky_isp, 38, 2) as _L_RISKY_ISP
		,TRY_TO_NUMBER(a._l_risky_key_combo, 38, 2) as _L_RISKY_KEY_COMBO
		,TRY_TO_NUMBER(a._l_tzone_mismatch, 38, 2) as _L_TZONE_MISMATCH
		,TRY_TO_NUMBER(a._l_scm_rsk_hgh_scr, 38, 2) as _L_SCM_RSK_HGH_SCR
		,TRY_TO_NUMBER(a._l_keyb_nav_anom, 38, 2) as _L_KEYB_NAV_ANOM
		,TRY_TO_NUMBER(a._l_scrn_broadcast, 38, 2) as _L_SCRN_BROADCAST
		,TRY_TO_NUMBER(a._l_delay_to_input_pi, 38, 2) as _L_DELAY_TO_INPUT_PI
		,TRY_TO_NUMBER(a._l_input_otp_delay, 38, 2) as _L_INPUT_OTP_DELAY
		,TRY_TO_NUMBER(a._l_active_spoofing, 38, 2) as _L_ACTIVE_SPOOFING
		,TRY_TO_NUMBER(a._l_pmt_vloc_anom, 38, 2) as _L_PMT_VLOC_ANOM
		,TRY_TO_NUMBER(a._l_rcnt_hi_scr_on_dev, 38, 2) as _L_RCNT_HI_SCR_ON_DEV
		,TRY_TO_NUMBER(a._l_accum_amt_anom, 38, 2) as _L_ACCUM_AMT_ANOM
		,TRY_TO_NUMBER(a._l_app_togg, 38, 2) as _l_APP_TOGG
		,TRY_TO_NUMBER(a._l_is_active_call, 38, 2) as _L_IS_ACTIVE_CALL
		,TRY_TO_NUMBER(a._l_is_long_sess, 38, 2) as _L_IS_LONG_SESS
		,TRY_TO_NUMBER(a._l_type_patterns_anomaly, 38, 2) as _L_TYPE_PATTERNS_ANOMALY
		,TRY_TO_NUMBER(a._l_seg_typing_pi, 38, 2) as _L_SEG_TYPING_PI
		
		-- NameCheck UVs
		,a._l_nc_response_code
		,a._l_nc_match_name_conf
		
		-- H2O Score UVs
		,TRY_TO_NUMBER(a._l_cust_scamrisk_score, 38, 2) as _L_CUST_SCAMRISK_SCORE
		,a.dtl_ex_0_n_029
		,a.dtl_ex_0_n_034 as CERBERUS_SCORE
		
		-- Recipient Level UVs
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_short, 38, 2) as _B_RECIP_SUM_SHORT
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_long, 38, 2) as _B_RECIP_SUM_LONG
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_short, 38, 2) as _B_RECIP_FTP_CNT_SHORT
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_long, 38, 2) as _B_RECIP_FTP_CNT_LONG
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_any_cust_ftp_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_ANY_CUST_FTP_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_2
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_3
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_4
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_5
		
		-- Customer Level UVs
		,TRY_TO_NUMBER(a._a_customer_age, 38, 2) as _A_CUSTOMER_AGE
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_SHORT, 38, 2) as _A_CUST_SUM_AAA_SHORT
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_LONG, 38, 2) as _A_CUST_SUM_AAA_LONG
		,TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1
		,TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2
		,TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3
		,TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4
		,TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5
		,TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6
		,TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7
		,TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1
		,TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2
		,TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3
		,TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4
		,TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5
		,TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6
		,TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_NEW_CAPP_REGO_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CSE_CHG_DWL_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CIF_ESTABLISH_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00') as _A_NB_LASTLOGON_DT_1
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00') as _A_CURR_CAPP_DEVICE_DT
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_1, 38, 2) as _A_NB_LOGONS_CNT_1
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_2, 38, 2) as _A_NB_LOGONS_CNT_2
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_3, 38, 2) as _A_NB_LOGONS_CNT_3
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_1, 38, 2) as _A_CAPP_LOGON_CNT_1
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_2, 38, 2) as _A_CAPP_LOGON_CNT_2
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_3, 38, 2) as _A_CAPP_LOGON_CNT_3
		
		-- Customer-Recipient Relationship Level UVs
		,TRY_TO_NUMBER(a._x_cif_recipient_new_sum, 38, 2) + TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM
		,case   when a._x_cif_recipient_new_date = '0' then TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF')
                else TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00'::timestamp)
		end as _X_CIF_RECIPIENT_NEW_DATE
		,case   when a._x_cif_recipient_new_cnt = '0' then 1
                else TRY_TO_NUMBER(a._x_cif_recipient_new_cnt, 38, 2) + 1
		end as _X_CIF_RECIPIENT_NEW_CNT
		
		-- Telstra Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_TELSTRA_LONG_CALL
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_telstra_last_call_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _X_TELSTRA_LAST_CALL_DT
		,TRY_TO_NUMBER(a._x_telstra_last_call_dur, 38, 2) as _X_TELSTRA_LAST_CALL_DUR
		,TRY_TO_NUMBER(a._x_telstra_max_call_dur, 38, 2) as _X_TELSTRA_MAX_CALL_DUR
		,a._a_telstra_active_call
		
		-- Crypto UVs
		,TRY_TO_NUMBER(a._a_crypto_mnthly_sum, 38, 2) as _A_CRYPTO_MNTHLY_SUM
		,DATEADD(day, TRY_TO_NUMBER(a._a_crypto_last_pymnt_date, 38, 2), '1960-01-01') as _A_CRYPTO_LAST_PYMNT_DATE
		
		-- M100 Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP1_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP2_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP3_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP4_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP5_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP6_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP7_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP10_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp11_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP11_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp12_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP12_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp13_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP13_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP20_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP21_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_M100_P8_IND_DT
		
		-- M100 App Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P1_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P5_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P8_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P9_DT
 		
		-- CIF Profiling UVs
		,a._l_fingerprint_1
		,a._l_fingerprint_2
		,a._l_fingerprint_3
		,a._l_fingerprint_4

        -- Intelligent Friction UVs
                ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCTN_MSG_SNT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCTN_MSG_SNT
    
         ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCT_INTENT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCT_INTENT
        
from        lcl.fdp_customer_transactions_send_flat a
left join  prd_p01_dmn_fraumd.labmlfrd.dtl_fraudmaster b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where   a.mid_event_ts >= '20250701'
and     a.mid_event_ts >= '20250801'
and     a.dtl_ex_1_5s_01 in ('C205N'
							,'C207N'
							,'C242N'
							,'C244N'
							,'C246N'
							,'N205N'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'X232N'
							,'X243N'
							,'X246N')
and     a.hdr_source = 'NPP OUT'
and     tran_amt > 0
order by    chl_id_ob_userid
            ,transactiondatetime;",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,1767865,1767.865000,29.464417,0.491074,2X-LARGE,32,15.714368
01bf0f9a-3204-c93b-0000-c71d2e01094e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250915_054629(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250617
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1767787,1767.787000,29.463117,0.491052,2X-LARGE,32,15.713664
01bec65a-3204-c1f1-0000-c71d2be082d2,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""HF6LQX9C1ZU__PGH""()",WANGC34,R_USR_FRAUMD_LABMLFRD_RW,1758046,1758.046000,29.300767,0.488346,2X-LARGE,32,15.627072
01bddffa-3204-a614-0000-c71d24f68a3a,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""F2KSZQG4AD3S4ZO0""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,1734810,1734.810000,28.913500,0.481892,2X-LARGE,32,15.420544
01beafa5-3204-c1f7-0000-c71d2b3e893e,"CREATE OR REPLACE temporary TABLE transx AS 
select  
b.FRAUDTYPE
,b.DETECTION
,b.case_detection
,TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
,ssx_cust_num AS XQO_CUST_NUM
,chl_id_ob_userid AS HQO_OB_USERID
,TRY_TO_NUMBER(tgx_tran_amt, 38, 2) as TRAN_AMT
,TRY_TO_NUMBER(_A_CUSTOMER_AGE, 38, 2) as _A_CUSTOMER_AGE
,TRY_TO_NUMBER(_L_SE_SCORE, 38, 2) as _L_SE_SCORE
,TRY_TO_NUMBER(_L_BC_SCORE, 38, 2) as _L_BC_SCORE
,TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 4) as CERBERUS_SCORE
,TGX_BANK_NAME
,TGX_BANK_NUM
,TGX_BRANCH_ID
,TGX_ACCT_NUM
,TGX_NAME
,dtl_ex_1_5s_01     /* task id */
,dtl_ex_0_i_002 as FTP_ind
/* BC risk factors */
,_L_FLAT_PHONE
,_L_IS_RAT
,_L_IS_MOB_RAT
,_L_IS_RCNT_RAT
,_l_rat_in_sess
,_L_PREV_RAT_DT
,_L_FIRST_RAT_DT
,_L_IS_MOB_RAT_DT
,_L_SESS_CNT_MOB_SDK
,_L_DPI_CHANGE 
,_L_NEW_DEV
,_L_RARE_SCRN_SZ
,_L_scrn_res_anom
,_l_lrg_dist_known_loc
,_L_NEW_BROWSER
,_L_NEW_DESKTOP_USER
,_L_IS_ACTIVE_CALL 
,_L_IS_LONG_SESS
,_L_NEW_MOB_BROWSER_USER
,_L_DEV_CHANGE_ANOM
,_L_TZONE_MISMATCH  
,_L_ADV_KEY_COMBO
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_n_client_details_view, 38, 2), '1960-01-01 00:00:00'::timestamp) as _n_client_details_view
,TRY_TO_NUMBER(_A_CAPP_LOGON_CNT_1, 38, 2) as _A_CAPP_LOGON_CNT_1 /* capp login counts within last 24 hours, 2 is between 24 and 48 hours etc */
,TRY_TO_NUMBER(_A_NB_LOGONS_CNT_1, 38, 2) as _A_NB_LOGONS_CNT_1
,_A_TELSTRA_API_EVENT_ID /* this is task id e.g.C513B  */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_API_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _A_TELSTRA_API_EVENT_DT
,COALESCE(NULLIF(_A_TELSTRA_CALL_DURATION, ''), 0) / 60 as _A_TELSTRA_CALL_DURATION /* in minutes */
,_a_telstra_active_call 
,_l_trust_1000 
,_l_trust_900
,_L_PUSH_API_1
,_L_PUSH_API_2
,_L_PUSH_API_3
,_L_PUSH_API_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_RST_PSWD_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_RST_PSWD_DT /* reset password date */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') as _N_CLIENT_IDTO_PW
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_MOD_MOB_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_MOD_MOB_DT
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PHONE_CHG_ALL, 38, 2), '1960-01-01 00:00:00') as _A_PHONE_CHG_ALL /*mobile phone number change date*/
/* scam p indicators and dates */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT
,TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P21_MLW_DT
,TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT
,TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT
,TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND
/* CAPP rego */
,TRY_TO_NUMBER(_N_BC_NCRG_ATO_SCORE, 38, 2) as _N_BC_NCRG_ATO_SCORE
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_BC_NCRG_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _N_BC_NCRG_EVENT_DT
from        LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join   PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
    where   mid_event_ts >= '20250701'
    AND     mid_event_ts < '20250825'
order by    TRANSACTIONDATETIME;",WANGC34,R_USR_FRAUMD_LABMLFRD_RW,3454032,3454.032000,57.567200,0.959453,X-LARGE,16,15.351248
01beb5ae-3204-c1f6-0000-c71d2b707122,"(
WITH code1_data AS (
    SELECT DISTINCT

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d

,dtl_ex_0_20s_001
,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,

-- COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250717'
and     dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-17'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1725325,1725.325000,28.755417,0.479257,2X-LARGE,32,15.336224
01be95f6-3204-bee4-0000-c71d2a5e289a,"(WITH code1_data AS (
    SELECT DISTINCT
--         TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
-- (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
-- TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d,
-- TO_DATE(SUBSTR(mid_event_ts, 1, 8), 'YYYYMMDD') as evnt_d,
-- TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
-- CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
-- CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC
,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
--,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000   
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE

,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT


-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
--,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
--,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
--,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250601'
and  mid_event_ts < '20250701'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime



    -- FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT 
    -- where SSX_SNAP_D >= '2025-01-01'
),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2025-06-01'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1705439,1705.439000,28.423983,0.473733,2X-LARGE,32,15.159456
01bf1ef7-3204-cd71-0000-c71d2e7a7fc6,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250917_231934(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250616
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1686493,1686.493000,28.108217,0.468470,2X-LARGE,32,14.991040
01bf1972-3204-ccd0-0000-c71d2e4ed43a,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250916_234543(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250616
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1680541,1680.541000,28.009017,0.466817,2X-LARGE,32,14.938144
01beec4b-3204-c8b5-0000-c71d2cffb2ca,"create or replace temporary table NPP_TRAN as
select	distinct case   when b.fraudtype = 'CVL' then null
                else b.fraudtype
        end as FRAUDTYPE
		,b.detection
		,b.case_detection
        ,TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
		,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
		,a.tts_tran_date_alt
		,a.tts_tran_time_alt
		,a.dtl_ex_0_20s_001
		,a.dtl_ex_1_5s_01
		,a.ssx_cust_num
		,a.chl_id_ob_userid
		,a.tgx_bank_name
		,a.tgx_bank_num
		,a.tgx_branch_id
		,a.tgx_acct_num
		,a.tgx_name
		,a.tgx_description
		,TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as TRAN_AMT
		,a.dtl_ex_0_i_002 as FTP_IND
		
		-- BioCatch UVs
		,TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE
		,TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_SCORE
		,TRY_TO_NUMBER(a._l_adv_key_combo, 38, 2) as _L_ADV_KEY_COMBO
		,TRY_TO_NUMBER(a._l_clpbrd_evnt, 38, 2) as _L_CLPBRD_EVNT
		,TRY_TO_NUMBER(a._l_concurrent_sess, 38, 2) as _L_CONCURRENT_SESS
		,TRY_TO_NUMBER(a._l_export_data, 38, 2) as _L_EXPORT_DATA
		,TRY_TO_NUMBER(a._l_import_data, 38, 2) as _L_IMPORT_DATA
		,TRY_TO_NUMBER(a._l_is_rat, 38, 2) as _L_IS_RAT
		,TRY_TO_NUMBER(a._l_is_mob_rat, 38, 2) as _L_IS_MOB_RAT
		,TRY_TO_NUMBER(a._l_rat_in_sess, 38, 2) as _L_RAT_IN_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_hrisk_sess, 38, 2) as _L_IS_RCNT_HRISK_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_rat, 38, 2) as _L_IS_RCNT_RAT
		,TRY_TO_NUMBER(a._l_lrg_dist_known_loc, 38, 2) as _L_LRG_DIST_KNOWN_LOC
		,TRY_TO_NUMBER(a._l_rare_scrn_sz, 38, 2) as _L_RARE_SCRN_SZ
		,TRY_TO_NUMBER(a._l_risky_isp, 38, 2) as _L_RISKY_ISP
		,TRY_TO_NUMBER(a._l_risky_key_combo, 38, 2) as _L_RISKY_KEY_COMBO
		,TRY_TO_NUMBER(a._l_tzone_mismatch, 38, 2) as _L_TZONE_MISMATCH
		,TRY_TO_NUMBER(a._l_scm_rsk_hgh_scr, 38, 2) as _L_SCM_RSK_HGH_SCR
		,TRY_TO_NUMBER(a._l_keyb_nav_anom, 38, 2) as _L_KEYB_NAV_ANOM
		,TRY_TO_NUMBER(a._l_scrn_broadcast, 38, 2) as _L_SCRN_BROADCAST
		,TRY_TO_NUMBER(a._l_delay_to_input_pi, 38, 2) as _L_DELAY_TO_INPUT_PI
		,TRY_TO_NUMBER(a._l_input_otp_delay, 38, 2) as _L_INPUT_OTP_DELAY
		,TRY_TO_NUMBER(a._l_active_spoofing, 38, 2) as _L_ACTIVE_SPOOFING
		,TRY_TO_NUMBER(a._l_pmt_vloc_anom, 38, 2) as _L_PMT_VLOC_ANOM
		,TRY_TO_NUMBER(a._l_rcnt_hi_scr_on_dev, 38, 2) as _L_RCNT_HI_SCR_ON_DEV
		,TRY_TO_NUMBER(a._l_accum_amt_anom, 38, 2) as _L_ACCUM_AMT_ANOM
		,TRY_TO_NUMBER(a._l_app_togg, 38, 2) as _l_APP_TOGG
		,TRY_TO_NUMBER(a._l_is_active_call, 38, 2) as _L_IS_ACTIVE_CALL
		,TRY_TO_NUMBER(a._l_is_long_sess, 38, 2) as _L_IS_LONG_SESS
		,TRY_TO_NUMBER(a._l_type_patterns_anomaly, 38, 2) as _L_TYPE_PATTERNS_ANOMALY
		,TRY_TO_NUMBER(a._l_seg_typing_pi, 38, 2) as _L_SEG_TYPING_PI
		
		-- NameCheck UVs
		,a._l_nc_response_code
		,a._l_nc_match_name_conf
		
		-- H2O Score UVs
		,TRY_TO_NUMBER(a._l_cust_scamrisk_score, 38, 2) as _L_CUST_SCAMRISK_SCORE
		,a.dtl_ex_0_n_029
		,a.dtl_ex_0_n_034 as CERBERUS_SCORE
		
		-- Recipient Level UVs
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_short, 38, 2) as _B_RECIP_SUM_SHORT
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_long, 38, 2) as _B_RECIP_SUM_LONG
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_short, 38, 2) as _B_RECIP_FTP_CNT_SHORT
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_long, 38, 2) as _B_RECIP_FTP_CNT_LONG
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_any_cust_ftp_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_ANY_CUST_FTP_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_2
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_3
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_4
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_5
		
		-- Customer Level UVs
		,TRY_TO_NUMBER(a._a_customer_age, 38, 2) as _A_CUSTOMER_AGE
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_SHORT, 38, 2) as _A_CUST_SUM_AAA_SHORT
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_LONG, 38, 2) as _A_CUST_SUM_AAA_LONG
		,TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1
		,TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2
		,TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3
		,TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4
		,TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5
		,TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6
		,TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7
		,TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1
		,TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2
		,TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3
		,TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4
		,TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5
		,TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6
		,TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_NEW_CAPP_REGO_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CSE_CHG_DWL_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CIF_ESTABLISH_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00') as _A_NB_LASTLOGON_DT_1
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00') as _A_CURR_CAPP_DEVICE_DT
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_1, 38, 2) as _A_NB_LOGONS_CNT_1
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_2, 38, 2) as _A_NB_LOGONS_CNT_2
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_3, 38, 2) as _A_NB_LOGONS_CNT_3
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_1, 38, 2) as _A_CAPP_LOGON_CNT_1
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_2, 38, 2) as _A_CAPP_LOGON_CNT_2
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_3, 38, 2) as _A_CAPP_LOGON_CNT_3
		
		-- Customer-Recipient Relationship Level UVs
		,TRY_TO_NUMBER(a._x_cif_recipient_new_sum, 38, 2) + TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM
		,case   when a._x_cif_recipient_new_date = '0' then TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF')
                else TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00'::timestamp)
		end as _X_CIF_RECIPIENT_NEW_DATE
		,case   when a._x_cif_recipient_new_cnt = '0' then 1
                else TRY_TO_NUMBER(a._x_cif_recipient_new_cnt, 38, 2) + 1
		end as _X_CIF_RECIPIENT_NEW_CNT
		
		-- Telstra Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_TELSTRA_LONG_CALL
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_telstra_last_call_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _X_TELSTRA_LAST_CALL_DT
		,TRY_TO_NUMBER(a._x_telstra_last_call_dur, 38, 2) as _X_TELSTRA_LAST_CALL_DUR
		,TRY_TO_NUMBER(a._x_telstra_max_call_dur, 38, 2) as _X_TELSTRA_MAX_CALL_DUR
		,a._a_telstra_active_call
		
		-- Crypto UVs
		,TRY_TO_NUMBER(a._a_crypto_mnthly_sum, 38, 2) as _A_CRYPTO_MNTHLY_SUM
		,DATEADD(day, TRY_TO_NUMBER(a._a_crypto_last_pymnt_date, 38, 2), '1960-01-01') as _A_CRYPTO_LAST_PYMNT_DATE
		
		-- M100 Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP1_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP2_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP3_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP4_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP5_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP6_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP7_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP10_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp11_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP11_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp12_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP12_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp13_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP13_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP20_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP21_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_M100_P8_IND_DT
		
		-- M100 App Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P1_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P5_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P8_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P9_DT
 		
		-- CIF Profiling UVs
		,a._l_fingerprint_1
		,a._l_fingerprint_2
		,a._l_fingerprint_3
		,a._l_fingerprint_4

        -- Intelligent Friction UVs
                ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCTN_MSG_SNT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCTN_MSG_SNT
    
         ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCT_INTENT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCT_INTENT
        
from        lcl.fdp_customer_transactions_send_flat a
left join  prd_p01_dmn_fraumd.labmlfrd.dtl_fraudmaster b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where   a.mid_event_ts >= '20250701'
and     a.mid_event_ts >= '20250801'
and     a.dtl_ex_1_5s_01 in ('C205N'
							,'C207N'
							,'C242N'
							,'C244N'
							,'C246N'
							,'N205N'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'X232N'
							,'X243N'
							,'X246N')
and     a.hdr_source = 'NPP OUT'
and     tran_amt > 0
order by    chl_id_ob_userid
            ,transactiondatetime;",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,1672003,1672.003000,27.866717,0.464445,2X-LARGE,32,14.862240
01be9b79-3204-bee2-0000-c71d2a85449a,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT
as
(
select 
    -- identifier columns
    fdp.tran_id, -- use tran_id from the subquery
    SSX_CUST_NUM, -- we don't really need it for modeling, only for diagnostics
    chl_id_card_num,
    chl_ct_term_owner_id,
    chl_ct_acq_id,
    TRANSACTIONDATETIME,
    TRANSACTION_HOUR,
    -- SPLIT as SPLI,

    -- numerical UV columns, if missing then -1 as default
    COALESCE(CAST(DTL_CA_CLIENT_AMT AS FLOAT), -1) AS DTL_CA_CLIENT_AMT,
    COALESCE(CAST(_C_CC_GBL_N3D_1D_SUM_1 AS FLOAT), -1) AS _C_CC_GBL_N3D_1D_SUM_1,
    COALESCE(CAST(_c_cc_high_vel_apple_sum_1 AS FLOAT), -1) AS _c_cc_high_vel_apple_sum_1,
    COALESCE(CAST(_c_crd_apay_cnt_1 AS FLOAT), -1) AS _c_crd_apay_cnt_1,
    COALESCE(CAST(_C_CC_GBL_N3D_1D_CNT_1 AS FLOAT), -1) AS _C_CC_GBL_N3D_1D_CNT_1,
    COALESCE(CAST(_C_CC_CNP_VEL_6HR_SUM_1 AS FLOAT), -1) AS _C_CC_CNP_VEL_6HR_SUM_1,
    COALESCE(CAST(_C_CRD_APAY_SUM_1 AS FLOAT), -1) AS _C_CRD_APAY_SUM_1,
    COALESCE(CAST(_C_CRD_SAFE_MERCHANT AS FLOAT), -1) AS _C_CRD_SAFE_MERCHANT,
    COALESCE(CAST(_C_2WAY_CRD_FRD_RULE_FLAG AS FLOAT), -1) AS _C_2WAY_CRD_FRD_RULE_FLAG,
    COALESCE(CAST(_c_cc_cnp_ltrans_6hr_count_1 AS FLOAT), -1) AS _c_cc_cnp_ltrans_6hr_count_1,
    COALESCE(CAST(_c_cc_cnp_vel_6hr_count_1 AS FLOAT), -1) AS _c_cc_cnp_vel_6hr_count_1,
    COALESCE(CAST(_l_city_age AS FLOAT), -1) AS _l_city_age,
    COALESCE(CAST(_a_crd_npp_payment_amount AS FLOAT), -1) AS _a_crd_npp_payment_amount,
    COALESCE(CAST(_a_client_country_cnt_3 AS FLOAT), -1) AS _a_client_country_cnt_3,
    COALESCE(CAST(_a_customer_age AS FLOAT), -1) AS _a_customer_age,
    COALESCE(CAST(_a_client_country_cnt_10 AS FLOAT), -1) AS _a_client_country_cnt_10,
    COALESCE(CAST(_a_npp_ftp_sum AS FLOAT), -1) AS _a_npp_ftp_sum,
    COALESCE(CAST(_l_paste_in_login_cnt AS FLOAT), -1) AS _l_paste_in_login_cnt,
    COALESCE(CAST(_a_cust_sum_aaa_long AS FLOAT), -1) AS _a_cust_sum_aaa_long,
    COALESCE(CAST(_l_g_con_dev AS FLOAT), -1) AS _l_g_con_dev,
    COALESCE(CAST(_l_dev_fam_age AS FLOAT), -1) AS _l_dev_fam_age,
    COALESCE(CAST(_l_touch_cnt AS FLOAT), -1) AS _l_touch_cnt,
    COALESCE(CAST(_b_recip_sum_aaa_long AS FLOAT), -1) AS _b_recip_sum_aaa_long,
    COALESCE(CAST(_l_risky_key_combo AS FLOAT), -1) AS _l_risky_key_combo,
    COALESCE(CAST(_a_c_g AS FLOAT), -1) AS _a_c_g,
    COALESCE(CAST(_l_score_4 AS FLOAT), -1) AS _l_score_4,
    COALESCE(CAST(_a_e AS FLOAT), -1) AS _a_e,
    COALESCE(CAST(_a_npp_inb_pmt_val AS FLOAT), -1) AS _a_npp_inb_pmt_val,
    COALESCE(CAST(_a_client_country_cnt_2 AS FLOAT), -1) AS _a_client_country_cnt_2,
    COALESCE(CAST(_a_prof_capp_device_cnt_1 AS FLOAT), -1) AS _a_prof_capp_device_cnt_1,
    COALESCE(CAST(_a_crd_scam_supp_7d_sum_1 AS FLOAT), -1) AS _a_crd_scam_supp_7d_sum_1,
    COALESCE(CAST(_a_client_city_cnt_2 AS FLOAT), -1) AS _a_client_city_cnt_2,
    COALESCE(CAST(_l_uid_age AS FLOAT), -1) AS _l_uid_age,
    COALESCE(CAST(_l_scrn_w AS FLOAT), -1) AS _l_scrn_w,
    COALESCE(CAST(_l_asn_age AS FLOAT), -1) AS _l_asn_age,
    COALESCE(CAST(_l_score_2 AS FLOAT), -1) AS _l_score_2,
    COALESCE(CAST(_a_cust_npp_out_sum_aaa_5 AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_5,
    COALESCE(CAST(_l_bc_sess_cnt AS FLOAT), -1) AS _l_bc_sess_cnt,
    COALESCE(CAST(_l_acc_amt_1h AS FLOAT), -1) AS _l_acc_amt_1h,
    COALESCE(CAST(_a_list_wl_scam_drive_license AS FLOAT), -1) AS _a_list_wl_scam_drive_license,
    COALESCE(CAST(_a_cc_cash_advance_amt AS FLOAT), -1) AS _a_cc_cash_advance_amt,
    COALESCE(CAST(_a_cust_sum_aaa_short AS FLOAT), -1) AS _a_cust_sum_aaa_short,
    COALESCE(CAST(_a_p_l_1 AS FLOAT), -1) AS _a_p_l_1,
    COALESCE(CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
    COALESCE(CAST(_l_isp_age AS FLOAT), -1) AS _l_isp_age,
    COALESCE(CAST(_l_acc_amt_7d AS FLOAT), -1) AS _l_acc_amt_7d,
    COALESCE(CAST(_a_client_country_cnt_7 AS FLOAT), -1) AS _a_client_country_cnt_7,
    COALESCE(CAST(_l_concurrent_sess AS FLOAT), -1) AS _l_concurrent_sess,
    COALESCE(CAST(_a_capp_hce_cnt_1 AS FLOAT), -1) AS _a_capp_hce_cnt_1,
    COALESCE(CAST(_l_score_5 AS FLOAT), -1) AS _l_score_5,
    COALESCE(CAST(_l_muid_age_per_user AS FLOAT), -1) AS _l_muid_age_per_user,
    COALESCE(CAST(_a_cust_acct_bal AS FLOAT), -1) AS _a_cust_acct_bal,
    COALESCE(CAST(_l_cust_scamrisk_score AS FLOAT), -1) AS _l_cust_scamrisk_score,
    COALESCE(CAST(_a_atm_withdrawal_sum_amt AS FLOAT), -1) AS _a_atm_withdrawal_sum_amt,
    COALESCE(CAST(_l_tap_cnt AS FLOAT), -1) AS _l_tap_cnt,
    COALESCE(CAST(_a_list_wl_scam_tp_ip AS FLOAT), -1) AS _a_list_wl_scam_tp_ip,
    COALESCE(CAST(_l_max_30d_score AS FLOAT), -1) AS _l_max_30d_score,
    COALESCE(CAST(_b_recip_sum_aaa_1 AS FLOAT), -1) AS _b_recip_sum_aaa_1,
    COALESCE(CAST(_x_cif_sender_sum AS FLOAT), -1) AS _x_cif_sender_sum,
    COALESCE(CAST(_l_m_l_1 AS FLOAT), -1) AS _l_m_l_1,
    COALESCE(CAST(_l_scrn_h AS FLOAT), -1) AS _l_scrn_h,
    COALESCE(CAST(_a_cust_npp_out_sum_aaa_2 AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_2,
    COALESCE(CAST(_a_cust_action_ind AS FLOAT), -1) AS _a_cust_action_ind,
    COALESCE(CAST(_a_p_l_c AS FLOAT), -1) AS _a_p_l_c,
    COALESCE(CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
    COALESCE(CAST(_l_and_id_age AS FLOAT), -1) AS _l_and_id_age,
    COALESCE(CAST(_x_cif_rec_sum AS FLOAT), -1) AS _x_cif_rec_sum,
    COALESCE(CAST(_l_sess_cnt_mob_sdk AS FLOAT), -1) AS _l_sess_cnt_mob_sdk,
    COALESCE(CAST(_l_total_sess_cnt AS FLOAT), -1) AS _l_total_sess_cnt,
    COALESCE(CAST(_a_curr_capp_device_nftp_cnt AS FLOAT), -1) AS _a_curr_capp_device_nftp_cnt,
    COALESCE(CAST(_l_nc_acct_num_name_conf AS FLOAT), -1) AS _l_nc_acct_num_name_conf,
    COALESCE(CAST(_a_client_country_cnt_5 AS FLOAT), -1) AS _a_client_country_cnt_5,
    COALESCE(CAST(_a_u AS FLOAT), -1) AS _a_u,
    COALESCE(CAST(_b_recip_sum_aaa_7 AS FLOAT), -1) AS _b_recip_sum_aaa_7,
    COALESCE(CAST(_l_scm_rsk_scr_2 AS FLOAT), -1) AS _l_scm_rsk_scr_2,
    COALESCE(CAST(_b_recip_sum_aaa_4 AS FLOAT), -1) AS _b_recip_sum_aaa_4,
    COALESCE(CAST(_l_bc_score AS FLOAT), -1) AS _l_bc_score,
    COALESCE(CAST(_l_days_lst_dev_and AS FLOAT), -1) AS _l_days_lst_dev_and,
    COALESCE(CAST(_a_prof_capp_device_cnt_3 AS FLOAT), -1) AS _a_prof_capp_device_cnt_3,
    COALESCE(CAST(_l_days_lst_dev_ios AS FLOAT), -1) AS _l_days_lst_dev_ios,
    COALESCE(CAST(_x_last_n_txn_count AS FLOAT), -1) AS _x_last_n_txn_count,
    COALESCE(CAST(_a_t AS FLOAT), -1) AS _a_t,
    COALESCE(CAST(_a_cust_npp_in_sum_aaa_2 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_2,
    COALESCE(CAST(_l_mins_lst_lgn_capped AS FLOAT), -1) AS _l_mins_lst_lgn_capped,
    COALESCE(CAST(_l_acc_amt_2h AS FLOAT), -1) AS _l_acc_amt_2h,
    COALESCE(CAST(_l_acc_amt_4h AS FLOAT), -1) AS _l_acc_amt_4h,
    COALESCE(CAST(_a_list_bl_passport AS FLOAT), -1) AS _a_list_bl_passport,
    COALESCE(CAST(_a_list_wl_scam_passport AS FLOAT), -1) AS _a_list_wl_scam_passport,
    COALESCE(CAST(_a_list_bl_scam_passport AS FLOAT), -1) AS _a_list_bl_scam_passport,
    COALESCE(CAST(_b_recip_sum_aaa_6 AS FLOAT), -1) AS _b_recip_sum_aaa_6,
    COALESCE(CAST(_a_prof_capp_device_cnt_2 AS FLOAT), -1) AS _a_prof_capp_device_cnt_2,
    COALESCE(CAST(_a_client_country_cnt_6 AS FLOAT), -1) AS _a_client_country_cnt_6,
    COALESCE(CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
    COALESCE(CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
    COALESCE(CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
    COALESCE(CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
    COALESCE(CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
    COALESCE(CAST(_A_Q AS FLOAT), -1) AS _A_Q,
    COALESCE(CAST(_A_R AS FLOAT), -1) AS _A_R,
    COALESCE(CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
    COALESCE(CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
    COALESCE(CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
    COALESCE(CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
    COALESCE(CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
    COALESCE(CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
    COALESCE(CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
    COALESCE(CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
    COALESCE(CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
    COALESCE(CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
    COALESCE(CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
    COALESCE(CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
    COALESCE(CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
    COALESCE(CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
    COALESCE(CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
    COALESCE(CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
    COALESCE(CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
    COALESCE(CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
    COALESCE(CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
    COALESCE(CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
    COALESCE(CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
    COALESCE(CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
    COALESCE(CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,
    COALESCE(CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
    COALESCE(CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
    COALESCE(CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
    COALESCE(CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
    COALESCE(CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
    COALESCE(CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
    COALESCE(CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
    COALESCE(CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
    COALESCE(CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
    COALESCE(CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
    COALESCE(CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
    COALESCE(CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
    COALESCE(CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
    COALESCE(CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
    COALESCE(CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
    COALESCE(CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
    COALESCE(CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
    COALESCE(CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
    COALESCE(CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
    COALESCE(CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
    COALESCE(CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
    COALESCE(CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
    COALESCE(CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
    COALESCE(CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
    COALESCE(CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
    COALESCE(CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
    COALESCE(CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
    COALESCE(CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
    COALESCE(CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
    COALESCE(CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
    COALESCE(CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
    COALESCE(CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
    COALESCE(CAST(_a_list_bl_scam_tp_ip AS FLOAT), -1) AS _a_list_bl_scam_tp_ip,
    _b_crypto_risk, -- labelled as str but all num values?
    COALESCE(CAST(_a_list_bl_scam_drive_license AS FLOAT), -1) AS _a_list_bl_scam_drive_license,
    COALESCE(CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
    COALESCE(CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
    COALESCE(CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
    COALESCE(CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,

    -- categorical UV columns
    _a_cif_establish_channel, -- customer established channel (if = 'O' then it's electronic)
    _a_ecv_document_ip,
    _a_cust_os_ver,
    _a_cust_os_name,
    _A_2WAY_TYPE,
    _A_CLIENT_CITY_10,
    _L_PUSH_API_1,
    _L_PUSH_API_2,
    _L_PUSH_API_3,
    _L_PUSH_API_4,
    _a_client_city_6,
    _l_nc_winning_alg,
    _l_proxy_type,
    _l_lang_3,
    _l_lang_1,
    _l_lang_2,
    _l_nc_response_code,
    _a_prof_risk_ind,
    _a_latest_ncrg_isp,
    -- _C_CC_N3D_OVS_975_CNT_1,
    chl_ct_term_owner_name,
    -- _c_cc_n3d_dom_999_cnt_1,
    _C_CNP_MER_NM_CURR,
    -- _C_CRD_N3D_SCORE_SUM_1,
    dtl_ex_0_2s_002,
    dtl_ex_3_80s_002,
    case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
    case when dtl_ca_auth_sys_dec is NULL then 'unknown' else dtl_ca_auth_sys_dec || '_v' end as dtl_ca_auth_sys_dec,
    chl_ct_mer_mcc,
    -- case when chl_ct_mer_mcc is NULL then 'unknown' else chl_ct_mer_mcc || '_v' end as chl_ct_mer_mcc,
    case when ATH_PC_CUST_PRESENT is NULL then 'unknown' else ATH_PC_CUST_PRESENT || '_v' end as ATH_PC_CUST_PRESENT,
    case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,
    case when chl_ct_term_cntry_code in ('0', null) then 'unknown' else chl_ct_term_cntry_code || '_v' end as chl_ct_term_cntry_code,
    case when dtl_ca_merch_curr_code in ('0', null) then 'unknown' else dtl_ca_merch_curr_code || '_v' end as dtl_ca_merch_curr_code,

    -- features extracted from fingerprints data
    case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
    case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts 
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts 
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts 
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts 
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
    COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
    case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
    case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
    case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association   
    case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
    case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1  
    case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2  
    case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
    case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
    case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
    case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
    case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
    case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate  
    case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
    case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
    case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
    case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
    case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status     

    -- time differences
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_x_npp_out_sum_date AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) AS _x_npp_out_sum_date_diff,
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CC_DT AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _A_CC_DT_DIFF, -- customer recent credit card application datetime
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_ONLINE_PL_DT AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _A_ONLINE_PL_DT_DIFF, -- customer recent personal loan application datetime
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CIF_ESTABLISH_DT AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _A_CIF_ESTABLISH_DT_DIFF, -- when the customer is established
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_a_ecv_document_dt AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _a_ecv_document_dt_DIFF,
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_AUTO_DEC_CP_PP_DT AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CAPP_NOTIFY_OPT_OUT_DT AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP1_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _A_SCAMP1_MLW_DT_DIFF,
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP2_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _A_SCAMP2_MLW_DT_DIFF,
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP5_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP7_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _A_SCAMP7_MLW_DT_DIFF,
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_1 AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _L_PUSH_API_DT_1_DIFF,
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_2 AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _L_PUSH_API_DT_2_DIFF,
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_3 AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _L_PUSH_API_DT_3_DIFF,
    COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_4 AS FLOAT), '1960-01-01 00:00:00'), TRANSACTIONDATETIME), -1) as _L_PUSH_API_DT_4_DIFF,

    -- prediction targets
    COALESCE(l.target, 0) as target

from (
    select 
        to_number(dtl_ex_0_n_064)||dtl_ex_0_n_065||dtl_ex_0_n_066 as tran_id, -- create tran_id here
        *,
        TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
        EXTRACT(HOUR FROM TRANSACTIONDATETIME) + EXTRACT(MINUTE FROM TRANSACTIONDATETIME) / 60.0 as TRANSACTION_HOUR
    from PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT
    where TTS_TRAN_DATE_ALT between '20250301' and '20250701'
      and hdr_activity_type = 'CA'
      and SSX_CUST_NUM <> ''
      and SSX_CUST_NUM IS NOT NULL
      and DTL_CA_CLIENT_AMT IS NOT NULL
) fdp
left join (
    select tran_id, 1 as target
    from PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_SAI_CARDS_SCAMS_RETRO_LABELS
    where SSX_CUST_NUM IS NOT NULL
) l
on fdp.tran_id = l.tran_id
);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,1668577,1668.577000,27.809617,0.463494,2X-LARGE,32,14.831808
01bf0faf-3204-c93b-0000-c71d2e01b5f6,"CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_FPF AS (
-- -- INSERT INTO LABMLFRD.CARD_TRAN_PRFL (
    WITH TRAN AS (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS TRAN_I
            , TO_CHAR(SSX_CUST_NUM) AS CUST_I
        	, CHL_ID_CARD_NUM AS CARD_I
        	, DTL_EX_0_20S_004 AS DPAN_I
            , TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S
            , TRY_TO_DATE(TTS_TRAN_DATE_ALT, 'YYYYMMDD') AS TRAN_D
            , CAST(SUBSTR(TTS_TRAN_TIME_ALT,1,2) AS INT) AS TRAN_HOUR_T
            , UPPER(TO_CHAR(TO_DATE(TTS_TRAN_DATE_ALT, 'YYYYMMDD'), 'DY')) AS TRAN_DAY_X
        	, CASE WHEN CHL_CT_MEDIA = 'V' THEN 1 ELSE 0 END AS TOKN_F
            , TRY_TO_DATE(ATH_PC_CARD_EXP_DATE, 'YYYYMMDD') AS CARD_EXPY_D
            , CASE WHEN CHL_CT_WHICH_CARD IN (1,0) THEN 1 ELSE 0 END AS PRIM_CAHD_F
        	, DTL_CA_CLIENT_AMT AS TRAN_AMT_N
        	, ATH_PC_POS AS POS_ENTR_C
            , CASE WHEN DTL_CA_REVERSAL_IND = 'N' THEN 0 ELSE 1 END AS REVS_INDA_F
            , CASE WHEN ATH_PC_PIN_VRFY = 'V' THEN 0 ELSE 1 END AS PIN_VRFY_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'C' THEN 1 ELSE 0 END AS PAIN_CUST_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'M' THEN 1 ELSE 0 END AS PAIN_MERC_F
        	, CASE WHEN DTL_EX_0_I_022 = 'R' THEN 1 ELSE 0 END AS RCRR_F
        	, DTL_EX_0_3S_002 AS SECU_LEVL_INDA_C
            , SUBSTR(DTL_EX_3_80S_003,1,2) AS ACCT_AUTT_V
            , CASE WHEN ATH_PC_POS IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_NOT_PRES_INDA_F
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS ""3DS_INDA_F""
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 NOT IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS N3D_INDA_F
            , CASE WHEN ATH_PC_POS NOT IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_PRES_INDA_F
            , CASE WHEN CARD_PRES_INDA_F = '1' AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS ATM_TRAN_F
            , CASE WHEN POS_ENTR_C IN ('62','79','80') AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS FALL_BACK_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '05' THEN 1 ELSE 0 END AS CHIP_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '07' THEN 1 ELSE 0 END AS PAY_PASS_TRAN_INDA_F
        	, REPLACE(DTL_CA_AUTH_SYS_DEC,' ','') AS UPST_DCDE_C
        	, REPLACE(DTL_CA_AUTH_SYS_INFO,' ','') AS UPST_REAS_C
            , REPLACE(RSP_ACTION_CODE,' ','') AS FINL_DCDE_C
            , DTL_EX_0_2S_002
            , DTL_EX_3_80S_002
            , ATH_PC_CUST_PRESENT
            , CASE WHEN UPST_DCDE_C = '1' AND FINL_DCDE_C != '1' THEN 1 ELSE 0 END AS RULE_DCLN_F
        	, CASE WHEN FINL_DCDE_C = '1' THEN 1 ELSE 0 END AS FINL_APRD_TRAN_CNT_F
        	, CASE WHEN UPST_REAS_C IN ('20','21','22','81','BE') THEN 1 ELSE 0 END  AS INCO_EXPY_F
        	, CASE WHEN UPST_REAS_C IN ('30','31','34','36','41','42','43','44','45','46','47') THEN 1 ELSE 0 END AS INCO_CVVA_F
        	, CASE WHEN UPST_REAS_C IN ('11','12','CP','MP','PE','PM') THEN 1 ELSE 0 END AS INCO_PIN_F
        	, CASE WHEN UPST_REAS_C IN ('T7','CL','87','88','89','90','98') THEN 1 ELSE 0 END AS OVER_LIMT_DCLN_F /* $ OVER LIMIT, DELINQUANT OR TRASACTION LIMIT */
            
            , CHL_CT_ACQ_ID AS ACQR_I
        	, CHL_CT_TERM_OWNER_ID AS MERC_I
        	, REPLACE(CHL_CT_TERM_OWNER_NAME,' ','') AS MERC_M
        	, CHL_CT_TERM_ID AS MERC_TRML_I
        	, CHL_CT_TERM_CNTRY_CODE AS CNTY_C
        	, CHL_CT_MER_MCC AS MERC_CATG_C
            , CASE WHEN CHL_CT_TERM_CNTRY_CODE = '036' THEN 1 ELSE 0 END AS DOMS_TRAN_INDA_F

        	-- , RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X
         --    , SUBSTR(RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X
         --    , SUBSTR(RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F
        	-- , SUBSTR(RSP_EX_2_8S_002,8,1) AS PUSH_EXIT_C
         --    , CASE WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='1' AND RSP_EX_2_I_009='2' THEN '1WP_REG'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='2' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_DEV'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='3' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_DEV'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='4' AND RSP_EX_2_I_009='2' THEN '1WP_DMGD_CARD'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='5' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_DEV'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='A' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_CIF'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='B' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_CIF'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='G' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_CIF'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='H' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_DEV'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='I' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_CIF'
         --    	ELSE 'NO_PUSH' END AS PUSH_TYPE_QLFY_X
         
            , CASE WHEN DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(DTL_EX_3_8S_004) END AS MCRD_SCOR_N
            , dtl_ex_0_n_029 AS H2O_CNPv1_SCOR_N
            , dtl_ex_0_n_034 AS H2O_CNPv2_SCOR_N,

            -- numerical UV columns, if missing then -1 as default
            _C_CC_GBL_N3D_1D_CNT_1,
            _C_CC_CNP_VEL_6HR_SUM_1,
            _C_CRD_APAY_SUM_1,
            _C_CRD_SAFE_MERCHANT,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_CC_CNP_LTRANS_6HR_COUNT_1,
            _C_CC_CNP_VEL_6HR_COUNT_1,
            _L_CITY_AGE,
            _A_CRD_NPP_PAYMENT_AMOUNT,
            _A_CLIENT_COUNTRY_CNT_3,
            _A_CUSTOMER_AGE,
            _A_CLIENT_COUNTRY_CNT_10,
            _A_NPP_FTP_SUM,
            _L_PASTE_IN_LOGIN_CNT,
            _A_CUST_SUM_AAA_LONG,
            _L_G_CON_DEV,
            _L_DEV_FAM_AGE,
            _L_TOUCH_CNT,
            _B_RECIP_SUM_AAA_LONG,
            _L_RISKY_KEY_COMBO,
            _A_C_G,
            _L_SCORE_4,
            _A_E,
            _A_NPP_INB_PMT_VAL,
            _A_CLIENT_COUNTRY_CNT_2,
            _A_PROF_CAPP_DEVICE_CNT_1,
            _A_CRD_SCAM_SUPP_7D_SUM_1,
            _A_CLIENT_CITY_CNT_2,
            _L_UID_AGE,
            _L_SCRN_W,
            _L_ASN_AGE,
            _L_SCORE_2,
            _A_CUST_NPP_OUT_SUM_AAA_5,
            _L_BC_SESS_CNT,
            _L_ACC_AMT_1H,
            _A_LIST_WL_SCAM_DRIVE_LICENSE,
            _A_CC_CASH_ADVANCE_AMT,
            _A_CUST_SUM_AAA_SHORT,
            _A_P_L_1,
            _L_PMT_AMT,
            _L_ISP_AGE,
            _L_ACC_AMT_7D,
            _A_CLIENT_COUNTRY_CNT_7,
            _L_CONCURRENT_SESS,
            _A_CAPP_HCE_CNT_1,
            _L_SCORE_5,
            _L_MUID_AGE_PER_USER,
            _A_CUST_ACCT_BAL,
            _L_CUST_SCAMRISK_SCORE,
            _A_ATM_WITHDRAWAL_SUM_AMT,
            _L_TAP_CNT,
            _A_LIST_WL_SCAM_TP_IP,
            _L_MAX_30D_SCORE,
            _B_RECIP_SUM_AAA_1,
            _X_CIF_SENDER_SUM,
            _L_M_L_1,
            _L_SCRN_H,
            _A_CUST_NPP_OUT_SUM_AAA_2,
            _A_CUST_ACTION_IND,
            _A_P_L_C,
            _A_CUST_AVG_ACCT_BAL,
            _l_and_id_age,
            _X_CIF_REC_SUM,
            _L_SESS_CNT_MOB_SDK,
            _L_TOTAL_SESS_CNT,
            _A_CURR_CAPP_DEVICE_NFTP_CNT,
            _L_NC_ACCT_NUM_NAME_CONF,
            _A_CLIENT_COUNTRY_CNT_5,
            _A_U,
            _B_RECIP_SUM_AAA_7,
            _L_SCM_RSK_SCR_2,
            _B_RECIP_SUM_AAA_4,
            _L_BC_SCORE,
            _L_DAYS_LST_DEV_AND,
            _A_PROF_CAPP_DEVICE_CNT_3,
            _L_DAYS_LST_DEV_IOS,
            _X_LAST_N_TXN_COUNT,
            _A_T,
            _A_CUST_NPP_IN_SUM_AAA_2,
            _L_MINS_LST_LGN_CAPPED,
            _L_ACC_AMT_2H,
            _L_ACC_AMT_4H,
            _A_LIST_BL_PASSPORT,
            _A_LIST_WL_SCAM_PASSPORT,
            _A_LIST_BL_SCAM_PASSPORT,
            _B_RECIP_SUM_AAA_6,
            _A_PROF_CAPP_DEVICE_CNT_2,
            _A_CLIENT_COUNTRY_CNT_6,
            _A_BTS_BCH_SUM,
            _A_BTS_CUST_AGE,
            _A_CURR_CAPP_DEVICE_CNT,
            _A_CURR_NB_BROWSER_CNT,
            _A_PREV_CAPP_DEVICE_CNT,
            _A_Q,
            _A_R,
            _L_CNTRY_AGE,
            _A_NPP_IN_UNRELATED_SUM_24_1,
            _X_FT_OVER5K_RECIP_CNT,
            _X_CIF_RECIPIENT_NEW_CNT,
            _A_NPP_IN_UNRELATED_SUM_24_2,
            _B_NPP_OUT_SUM_1,
            _L_ACC_AMT_1D,
            _A_TRANSPORT_REG_CNT_1,
            _A_MULTI_CNT,
            _L_M_L_4,
            _A_PROF_CAPP_DEVICE_NFTP_1,
            _X_NAME_MATCH_CNT,
            _A_PROF_CAPP_DEVICE_CNT_5,
            _A_PROF_CAPP_DEVICE_CNT_4,
            _L_SESS_CNT_WEB,
            _B_RECIP_SUM_AAA_2,
            _L_M_L_C,
            _L_TIME_ZONE,
            _A_CUST_NPP_IN_SUM_AAA_1,
            _L_IP_AGE,
            _A_NPP_INBOUND_SUM_AMT,
            _X_FT_OVER5K_RECIP_SUM,
            _X_CIF_SENDER_CNT,
            _A_NB_LOGONS_CNT_2,
            _A_CLC_FTP_AMT,
            _L_TRVL_SPD,
            _B_RECIP_SUM_LONG,
            _A_CRYPTO_MNTHLY_SUM,
            _A_GL_TRF_ACC_BAL,
            _L_SESS_CNT_MOB_BROWSER,
            _L_SCORE_3,
            _A_CRD_CRYPTO_PROC_FLG,
            _B_NPP_OUT_CNT_2,
            _A_NPP_OUT_CNT_2,
            _A_SCH_AMT,
            _A_P_L_3,
            _B_NPP_OUT_FTP_SUM_1,
            _L_SDID_CNT_1,
            _A_CUST_NPP_OUT_SUM_AAA_LONG,
            _A_LIST_RL1_SCAM_CUST_CIF,
            _L_NUM_SESS_2H,
            _A_VPN_VPS_IP_LOGON_COUNT,
            _A_GEO_DISTANCE,
            _X_NAME_MATCH_IND,
            _A_NB_LOGONS_CNT_3,
            _L_DAYS_LST_DEV_JS,
            _A_FTP_SUM_1,
            _L_NUM_SESS_4H,
            _L_NC_MATCH_NAME_CONF,
            _B_RECIP_SUM_AAA_5,
            _L_DPI_CHANGE,
            _B_RECIP_SUM_1,
            _A_SCAM_RISKY_MCC_PRELEAD_AMT,
            _L_M_L_3,
            _X_CIF_REC_CNT,
            _A_LIST_BL_SCAM_TP_IP,

            _A_LIST_BL_SCAM_DRIVE_LICENSE,
            _B_RECIP_SUM_AAA_SHORT,
            _L_CLIPB_EVENT_CNT,
            _B_LIST_RL1_SCAM_TP_CIF,
            _B_NPP_BLACKLIST_RECIP_FLAG,

            -- categorical UV columns
            _A_CIF_ESTABLISH_CHANNEL,-- customer established channel (if = 'O' then it's electronic)
            _A_ECV_DOCUMENT_IP,
            _A_CUST_OS_VER,
            _A_CUST_OS_NAME,
            _A_2WAY_TYPE,
            _A_CLIENT_CITY_10,
            _L_PUSH_API_1,
            _L_PUSH_API_2,
            _L_PUSH_API_3,
            _L_PUSH_API_4,
            _A_CLIENT_CITY_6,
            _L_NC_WINNING_ALG,
            _L_PROXY_TYPE,
            _L_LANG_3,
            _L_LANG_1,
            _L_LANG_2,
            _L_NC_RESPONSE_CODE,
            _A_PROF_RISK_IND,
            _A_LATEST_NCRG_ISP,
            _A_MRISK_FOREIGN_IP_CNTRY_CODE,
            _A_CIF_ESTABLISH_CUST_PCODE,
        
            -- features extracted from fingerprints data
            case when substr(_L_FINGERPRINT_1, 1, 1) in ('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else NULL end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
            case when substr(_L_FINGERPRINT_1, 2, 1) in ('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else NULL end as GENDER, -- M or F
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 3, 1)) AS DMC_CNT, -- count of scheme debit cards
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 4, 1)) AS YCS_CNT, -- count of travel money cards    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 5, 1)) AS TRAN_CNT, -- count of personal txn accts   
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 6, 1)) AS DPST_CNT, -- count of money management accounts    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 7, 1)) AS CC_CNT, -- count of credit cards    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 8, 1)) AS TRD_CNT, -- count of trading accounts    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 9, 1)) AS PL_CNT, -- count of personal loan accounts 
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 10, 1)) AS INVST_CNT, -- count of investment accounts 
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 11, 1)) AS MORT_CNT, -- count of mortgage accounts 
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 12, 1)) AS INSRNC_CNT, -- count of insurance accounts 
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 13, 1)) AS BTA_CNT, -- count of business txn accounts    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 14, 1)) AS BUS_LN_CNT, -- count of business loans    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 15, 1)) AS OTH_CNT, -- count of other accounts    

            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 16, 1)) as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 17, 1)) as REL_MNG, -- indicates whether the customer is relationship managed    
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 1, 2)) as FA_1, -- 1st known foreign association   
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 3, 2)) as FA_2, -- 2nd known foreign association    
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 5, 2)) as NO_1, -- name association 1  
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 7, 2)) as NO_2, -- name association 2  
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 11, 2)) as FA, -- foreign address    
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 13, 2)) as FP, -- foreign phone number 
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 1, 1)) as GOVT_BENE, -- government benefits code    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 2, 1)) as PRVT_CUST, -- private customer flag    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 3, 1)) as HL_ASOC, -- any association with a home loan
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 4, 1)) as CORP_EMPL, -- employed by large corporate
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 6, 1)) as TRUSTEE, -- trustee flag/part of a trust fund
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 16, 1)) as INTL_STU, -- international student flag
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 12, 1)) as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 13, 1)) as EMPL_CLAS_LGL_STS, -- employment classification or org status
            TRY_TO_NUMBER(SUBSTR(_L_FINGERPRINT_3, 14, 1)) as HOME_OWN, -- home ownership status
            
            -- time differences
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_x_npp_out_sum_date AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) AS _x_npp_out_sum_date_diff,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CC_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CC_DT_DIFF, -- customer recent credit card application datetime
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_ONLINE_PL_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_ONLINE_PL_DT_DIFF, -- customer recent personal loan application datetime
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CIF_ESTABLISH_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CIF_ESTABLISH_DT_DIFF, -- when the customer is established
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_a_ecv_document_dt AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _a_ecv_document_dt_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_AUTO_DEC_CP_PP_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CAPP_NOTIFY_OPT_OUT_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP1_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP1_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP2_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP2_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP5_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP5_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP7_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP7_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_1 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_1_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_2 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_2_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_3 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_3_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_4 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_4_DIFF,

            /* H2O UVS NOT ALREADY LISTED ABOVE */
            _c_cc_n3d_ovs_975_sum_1,
            dtl_ex_0_n_009,
            _c_crd_n3d_score_sum_1,
            _c_cc_ind_tran_3d,
            dtl_ex_3_8s_007,
            ssa_c_bal,
            _c_cc_n3d_dom_999_cnt_1,
            _c_crd_apay_cnt_1,
            _c_crd_cnp_trn_cnt_1,
            dtl_ca_auth_sys_info,
            _c_crd_cnp_trn_cnt_5,
            _c_cc_recov_trans_sum_1,
            _c_cc_high_vel_apple_sum_1,
            _c_crd_cnp_trn_sum_1,
            _c_crd_all_trn_cnt_2,
            _c_n3d_merc_id_sum_1,
            _c_cc_tran_account_bin,
            chl_ct_mer_mcc,
            _c_n3d_merc_id_sum_2,
            _c_os_retail_keyed_cnt_1,
            _c_n3d_merc_id_1,
            chl_ct_ch_post_code,
            ssa_c_cash_limit,
            dtl_ca_client_tran_type,
            _c_n3d_merc_id_2,
            _c_crd_cnp_trn_cnt_2,
            _c_cc_gbl_n3d_cnt_2,
            _c_crd_cnp_trn_sum_3,
            _c_crd_cnp_trn_sum_2,
            _c_cc_cnp_vel_6hr_count_2,
            _c_n3d_merc_id_sum_3,
            _c_crd_cnp_trn_sum_4,
            _c_cc_sfw_microsoft_cnt_1,
            _c_vul_velo_cnp_sum_1,
            _a_all_bpay_acct_sum_3,
            _a_capp_logon_cnt_3,
            _a_client_branch_1,
            _a_client_country_1,
            _a_client_country_cnt_1,
            _a_client_postcode_cnt_2,
            _a_curr_capp_device_os,
            _a_devcie_geo_long_avg_incl,
            _a_fire_ct,
            _a_joint_acct_num_1,
            _a_open_ml_suppress_prob_scr,
            _a_open_ml_suppress_raw_scr,
            _a_sso_capp_netbank_cnt,
            _c_apay_dpan_cnt_1,
            _c_cc_cnp_ltrans_6hr_count_4,
            _c_cc_gbl_n3d_cnt_1,
            _c_cc_gbl_n3d_sum_2,
            _c_cc_ind_card_credit,
            _c_cc_ind_mer_domestic,
            _c_cc_list_ind_p03,
            _c_cc_payment_amount,
            _c_cc_recov_trans_cnt_1,
            _c_crd_all_trn_sum_1,
            _c_crd_all_trn_sum_2,
            _c_crd_cnp_trn_cnt_4,
            _c_crd_dom_cnp_hv_sum_1,
            _c_crd_n3d_visa_score_sum_1,
            _c_crd_n3d_visa_score_sum_2,
            _c_crd_n3d_visa_score_sum_dt,
            _c_mdes_dpan_2,
            _c_n3d_merc_id_3,
            _c_n3d_merc_id_7,
            _c_n3d_merc_id_sum_4,
            _c_n3d_merc_id_sum_5,
            _c_n3d_merc_id_sum_6,
            _c_n3d_merc_id_sum_9,
            ssa_c_open_to_buy,
            ssa_acct_num,
            chl_ct_acq_cntry_code,
            rsp_score_3,
            dtl_ca_client_amt,
            dtl_ca_merch_amt
            
        FROM 
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
        WHERE
            TTS_TRAN_DATE >= TO_CHAR($END_D-90,'YYYYMMDD')
            AND TTS_TRAN_DATE <= TO_CHAR($END_D,'YYYYMMDD')
            
            AND HDR_ACTIVITY_TYPE = 'CA'
            AND SSX_CUST_NUM != ''
            AND CHL_ID_CARD_NUM != ''
    )
    -- , CUST_TRAN_PRFL AS (
    -- SELECT 
    --     CUST_I

    --     -- Digital events
    --     , CAPP_PSWD_CHNG_CNT_Q
    -- 	, CAPP_PSWD_CHNG_LAST_S
    -- 	, CAPP_DVIC_REGR_CNT_Q
    -- 	, CAPP_DVIC_REGR_LAST_S
    -- 	, CAPP_LOGN_CNT_Q
    -- 	, CAPP_LOGN_LAST_S
    -- 	, NTB_LOGN_CNT_Q
    -- 	, NTB_LOGN_LAST_S
    -- 	, VIEW_CARD_DETL_CNT_Q
    -- 	, VIEW_CARD_DETL_LAST_S
    -- FROM
    --     LCL.CUST_TRAN_PRFL
    -- WHERE
    --     CUST_I IN (SELECT CUST_I FROM TRAN)
    -- )
    --  -- Analyst declined disputed transactions
    -- , CONFIRMED_FPF AS (
    --     SELECT
    --         b.DSPT_CASE_I
    --         , b.DSPT_CASE_EVNT_I
    --         , b.DSPT_CASE_CRAT_S
    --         , b.DSPT_TRAN_I
    --         , a.TRAN_ID
    --         , 1 AS FPF_INDA_F
    --     FROM 
    --         LABMLFRD.CARD_TRAN_GROS_FRAU a
    --     LEFT JOIN
    --         LABMLFRD.CARD_TRAN_DAIS_DSPT b
    --     ON
    --         a.TRAN_ID=b.TRAN_I
    --     WHERE 
    --         a.OUTCOME IN ('Resolved-CLOSED: INVEST DECLINE')
    --         AND b.DSPT_TRAN_DCDE_X IN ('Fraud Referral','Customer Liable')
    -- )
    , LABELS AS (
        SELECT 
            CUST_I,
            TRAN_I,
            PEGA_CASENUMBER,
            DSPT_CASE_I,
            MIN(FPF_INDA_F) AS FPF_INDA_F
        FROM (
            -- STP
            SELECT DISTINCT
                CUST_I,
                TRAN_I, 
                '' AS PEGA_CASENUMBER,
                DSPT_CASE_I,
                '9' AS FPF_INDA_F
            FROM LABMLFRD.CARD_TRAN_DAIS_DSPT
            WHERE UPPER(DSPT_TRAN_DCDE_X) LIKE ANY ('%CHARGE%OFF%','%CHARGEBACK%','%WRITE%OFF%')
                AND DSPT_SRCE_SYST_M != 'GS'
                AND TRAN_I IS NOT NULL
                AND CUST_I IS NOT NULL
            UNION ALL
            -- Analyst declined
            SELECT DISTINCT
                COALESCE(TO_CHAR(a.SSX_CUST_NUM),b.CUST_I) AS CUST_I,
                a.TRAN_ID AS TRAN_I,
                PEGA_CASENUMBER,
                DSPT_CASE_I,
                '1' AS FPF_INDA_F
            FROM LABMLFRD.CARD_TRAN_GROS_FRAU a
            LEFT JOIN LABMLFRD.CARD_TRAN_DAIS_DSPT b ON a.TRAN_ID=b.TRAN_I
            WHERE CUST_I IS NOT NULL
                AND UPPER(A.OUTCOME) LIKE ('%CLOSED%INVEST%DECLINE%')
                AND UPPER(b.DSPT_TRAN_DCDE_X) LIKE ANY ('%FRAUD%REFERRAL%','%CUSTOMER%LIABLE%')
                AND b.TRAN_I IS NOT NULL
        )
        GROUP BY ALL 
    )
    , FRAUD_TRANS AS (
        SELECT
            *
        FROM (
            SELECT TRAN_ID AS TRAN_I
            FROM LABMLFRD.CARD_TRAN_GROS_FRAU
            WHERE TRAN_I IS NOT NULL
            UNION ALL
            SELECT TRAN_I
            FROM LABMLFRD.CARD_TRAN_DAIS_DSPT
            WHERE TRAN_I IS NOT NULL
        )
        WHERE 
            TRAN_I NOT IN (SELECT TRAN_I FROM LABELS)
    )   
    -- Daisy case information
    , DNA_CASE AS (
    SELECT 
        a.PATY_I
        
        , COUNT(DISTINCT a.DSPT_CASE_I) AS DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , SUM(a.DSPT_CASE_TRAN_Q) AS DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , SUM(a.TOTL_TRAN_AND_FEE_A) AS DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
    FROM 
        (SELECT DISTINCT
            PATY_I
            , DSPT_CASE_I
            , DSPT_CASE_EVNT_I
            , DSPT_CASE_CRAT_S
            , DSPT_CASE_TRAN_Q
            , TOTL_TRAN_AND_FEE_A
        FROM
            CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
        WHERE
            DSPT_TYPE_C = 'DT1'
        QUALIFY 
            ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) a
    LEFT JOIN
        (SELECT DISTINCT DSPT_CASE_I 
        FROM LABELS WHERE FPF_INDA_F='1') b
    ON 
        a.DSPT_CASE_I = b.DSPT_CASE_I
    LEFT JOIN 
        (SELECT DISTINCT DSPT_CASE_I 
        FROM LABELS WHERE FPF_INDA_F='9') c
    ON
        a.DSPT_CASE_I = c.DSPT_CASE_I
    GROUP BY
        a.PATY_I
    )
    -- Output
    SELECT DISTINCT
    	a.* -- Transaction info, including UVs (e.g. WPR rego date, etc)

        , dai.DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , dai.DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , dai.DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , dai.DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , dai.DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , dai.DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , dai.DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , dai.DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , dai.DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , dai.DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , dai.DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , dai.DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , dai.DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , dai.DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , dai.DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , dai.DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days

        , dai.DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , dai.DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , dai.DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , dai.DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , dai.DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , dai.DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , dai.DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , dai.DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , dai.DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
        , IFNULL(fpf.FPF_INDA_F,'0') AS FPF_INDA_F
        , CASE WHEN frd.TRAN_I IS NOT NULL THEN 1 ELSE 0 END AS FRAUDTAG
        
    FROM
    	TRAN a
    LEFT JOIN 
        DNA_CASE dai
    ON 
        a.CUST_I = dai.PATY_I
    LEFT JOIN
        LABELS fpf
    ON
        a.TRAN_I = fpf.TRAN_I
    LEFT JOIN
        FRAUD_TRANS frd
    ON
        a.TRAN_I = frd.TRAN_I
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,1666536,1666.536000,27.775600,0.462927,2X-LARGE,32,14.813664
01be966c-3204-bee4-0000-c71d2a61d566,"SELECT DISTINCT
--         TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
-- (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
-- TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d,
-- TO_DATE(SUBSTR(mid_event_ts, 1, 8), 'YYYYMMDD') as evnt_d,
-- TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
-- CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
-- CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC
,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
--,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000   
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE

,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT


-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
--,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
--,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
--,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250601'
and  mid_event_ts < '20250701'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1654428,1654.428000,27.573800,0.459563,2X-LARGE,32,14.706016
01bea9d8-3204-c1f1-0000-c71d2b07983e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""RSP_ACTION_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_CUST_SPEND_SUM_AAA_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_CC_RECOV_TRANS_SUM_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_C_N3D_TST_CNT_1"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_AUTH_COUNT"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_Q_NON_AU_IND"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_C_CC_GBL_N3D_1D_CNT_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CC_SFW_GOOGLE_CNT_2"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""_Q_COF_DECL_CNT_DAY_1"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_L_MAX_30D_SCORE_H2O"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_L_ACC_AMT_7D"" DOUBLE, ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_C_CRD_DOM_CNP_HV_SUM_1"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""CHL_CT_TERM_OWNER_ID"" STRING(16777216), ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_A_Q"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_3"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""_A_GEO_LONG_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_2"" DOUBLE, ""_C_N3D_MERC_ID_1"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_2"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, DTL_EX_3_8S_009, _M_TOTAL_COUNT, DTL_CA_AUTH_SYS_INFO, _C_CC_GBL_N3D_SUM_1, _C_CC_GBL_N3D_CNT_1, _C_N3D_OVS_6H_SUM_1, DTL_CA_MERCH_CURR_CODE, _C_CRD_SAFE_MERCHANT, RSP_ACTION_CODE, _Q_MER_FRAUD_SCORE_CNT_6, DTL_EX_3_20S_004, _Q_KEYED_APVD_CNT_DAY_1, _A_CUST_SPEND_SUM_AAA_1, _C_N3D_MERC_ID_SUM_2, _C_CC_RECOV_TRANS_SUM_1, _A_D_D_1, ATH_PC_CUST_PRESENT, _Q_MER_FRAUD_SCORE_CNT_5, ATH_PC_ACS_REFER_CODE, _Q_MER_FRAUD_SCORE_SUM_6, _C_N3D_MERC_ID_SUM_1, _L_BC_SESS_ID, _C_N3D_TST_CNT_1, _M_FIRST_USE_DATE, _Q_AUTH_COUNT, _M_TOTAL_SUM, _C_2WAY_5X_CRD_CNT, _Q_MER_FRAUD_SCORE_CNT_3, CHL_CT_TERM_CNTRY_CODE, _A_BTS_CUST_AGE, _C_N3D_MERC_ID_SUM_3, _Q_NON_AU_IND, _A_CRD_NPP_PAYMENT_AMOUNT, _C_CC_GBL_N3D_1D_CNT_1, DTL_EX_3_80S_001, _C_CRD_VISA_MERC_SUM_1, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_2, _C_CC_SFW_GOOGLE_CNT_2, _A_D_D_3, _Q_COF_DECL_CNT_DAY_1, _A_AUS_IP_ACTIVITY, _A_BTS_CUST_DOB, _L_MAX_30D_SCORE_H2O, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _C_CC_2DAY_AMT_6, _A_D_D_2, _L_ACC_AMT_7D, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _A_PROF_CAPP_DEVICE_1, _C_CRD_DOM_CNP_HV_SUM_1, _L_BC_SCORE_H2O, _C_CC_CNP_VEL_6HR_COUNT_1, CHL_CT_TERM_OWNER_ID, _C_CC_OS_FB_CNT_3, _A_Q, _Q_MER_FRAUD_SCORE_SUM_1, _C_CRD_DOM_CNP_HV_CNT_1, _Q_MER_FRAUD_SCORE_SUM_3, _C_CRD_3D_TRN_SUM_1, _A_GEO_LONG_1, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_1, _C_CC_GBL_N3D_CNT_2, CHL_CT_MER_MCC
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250826 and 20250828
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1648715,1648.715000,27.478583,0.457976,2X-LARGE,32,14.655232
01bdea0e-3204-aa1f-0000-c71d25439586,"SELECT 
    t1.tts_tran_date_client,
    t1.tts_tran_time_client,
    REGEXP_REPLACE(LTRIM(t1._c_cmx_tran_id), '^[0-9]','') AS transactionnumber2,
    t1.ath_pc_pos,
    t1.rsp_action_code,
    t1.DTL_CA_auth_sys_dec,
    t1.DTL_CA_client_amt,
    t1.CHL_CT_term_owner_name,
    t1.dtl_ex_0_20s_004,
    t1.chl_id_card_num,
    t1.CHL_CT_mer_mcc,
    t1.dtl_ex_3_20s_001,
    t1.chl_ct_media,
    t1.dtl_ex_0_3s_002,
    t1.dtl_ca_reversal_ind,
    t1.dtl_ex_3_80s_003,
    t1._a_customer_age,
    REGEXP_REPLACE(LTRIM(t1.rsp_ex_2_30s_001), '^[0-9]','') AS transactionnumber,
    t1.ssx_cust_num,
    
FROM
PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT AS t1
WHERE 
    (
        t1.ssx_cust_num IN (
            SELECT DISTINCT
                CUSTID
            FROM LCL.CARD_ASES_BTCH_PEGA_CURR_STG
            WHERE BUSN_D = TO_DATE('2025-07-18')
            and custid IS NOT NULL AND custid <> ''
        )
    ) or (
        t1.chl_id_card_num IN (
            SELECT DISTINCT
                BASECRDNUMBER
            FROM LCL.CARD_ASES_BTCH_PEGA_CURR_STG
            WHERE BUSN_D = TO_DATE('2025-07-18')
        )
    )
    and
    t1.tts_tran_date_client >= TO_CHAR(DATEADD(month, -6, CURRENT_DATE), 'YYYYMMDD')
",SAKKAIB,R_USR_FRAUMD_LABMLFRD_RW,3280570,3280.570000,54.676167,0.911269,X-LARGE,16,14.580304
01be9094-3204-bee3-0000-c71d2a3b189a,"SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1630575,1630.575000,27.176250,0.452938,2X-LARGE,32,14.494016
01bdfbe4-3204-aa21-0000-c71d25c0c99a,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""VVLVYQYQ846NIRCJ""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,1584249,1584.249000,26.404150,0.440069,2X-LARGE,32,14.082208
01be8fc6-3204-bee2-0000-c71d2a31ea22,"create or replace table LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as 
(WITH code1_data AS (
    SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-16'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1578235,1578.235000,26.303917,0.438399,2X-LARGE,32,14.028768
01be2775-3204-afed-0000-c71d26fcc066,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""F2KSZQG4AD3S4ZO0""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,1576859,1576.859000,26.280983,0.438016,2X-LARGE,32,14.016512
01bdeb1e-3204-aa21-0000-c71d254bc236,"with pre_toby as(
    SELECT DISTINCT 
    'CARD' AS CHANNEL,
    --ACTIONTAKEN
    --CARDNUMBER
    --CASENUMBER
    --FRAUDTYPE
    concat(to_decimal(dtl_ex_0_n_064),dtl_ex_0_n_065,dtl_ex_0_n_066) as id_key, --CMX_TRAN_ID REPLACEMENT
    SSX_CUST_NUM as CUSTOMER_ID, --XQO_CUST_NUM
    ssx_cust_post_code, --XQO_CUST_POST_CODE
    CHL_ID_CARD_NUM, --HQO_CARD_NUM
    TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TTS_TRAN_DATE_ALT,
    TTS_TRAN_TIME_ALT,
    CHL_CT_MER_MCC, --TRANSACTIONDATETIME
    CHL_CT_TERM_OWNER_ID, --hct_term_owner_id
    CHL_CT_TERM_OWNER_NAME, --HCT_TERM_OWNER_NAME
    CHL_CT_TERM_ID, --HCT_TERM_ID
    chl_ct_term_cntry_code, --hct_term_cntry_code
    dtl_ca_client_amt, --TCA_client_amt
    dtl_ca_cash_back_amt, --TCA_cash_back_amt
    dtl_ca_auth_sys_dec, --TCA_auth_sys_dec
    dtl_ca_auth_sys_info, --TCA_auth_sys_info
    dtl_ca_reversal_ind, --TCA_reversal_ind
    RSP_ACTION_CODE, --RRR_ACTION_CODE
    dtl_ex_0_3s_002 AS SLI, --RUA_3BYTE_STRING_002
    UPPER(SUBSTR(dtl_ex_0_3s_002,1,2)) AS AAV, --DUA_80BYTE_STRING_003
    ath_pc_pos AS POS_ENTRY, --ucm_pos
    chl_ct_media, --hct_media
    dtl_ex_0_20s_004 AS DPAN, --RUA_20BYTE_STRING_004
    dtl_ex_3_20s_004 AS WALLET_ID, --DUA_20BYTE_STRING_004
    dtl_ex_3_20s_001 AS TRID, --DUA_20BYTE_STRING_001
    dtl_ex_3_8s_001 AS ISSUE_DATE, --DUA_8BYTE_STRING_001
    ATH_PC_PIN_VRFY AS PIN_VERIFIED, --UCM_PIN_VRFY
    --CQF_RULE_C_ID
    rsp_ex_2_8s_001, --rur_8byte_string_001
    rsp_ex_2_8s_004, --rur_8byte_string_004
    _C_CRD_SAFE_MERCHANT,
    rsp_ex_2_i_009 AS RSP_CODE_2WP,
    _A_2WP_NO_CNT, --RELATED TO 2WP
    _C_2WP_FRAUD_DEC_ALL_DT,--RELATED TO 2WP
    _C_2WP_HR_NO_RESP_DT_1,--RELATED TO 2WP
    _C_2WP_NO_RESP_DT_1,--RELATED TO 2WP
     LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_ERR_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_ERROR, /* 2wp error */
    -- LAG(_C_2WDWP_ERR_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_ERROR, /* 2wp error */
    -- LAG(_C_2WDWP_DISMISS_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_DISMISS_NOTIFICATION, /* 2wp dismiss notification */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_DISMISS_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_DISMISS_NOTIFICATION, /* 2wp dismiss notification */
    
    -- LAG(_C_2WDWP_NRP_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_NO_RESPONSE, /* 2wp no response */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_NRP_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_NO_RESPONSE, /* 2wp no response */
    
    -- LAG(_C_2WDWP_FRD_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_FRAUD_RESPONSE, /* 2wp fraud response */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_FRD_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_FRAUD_RESPONSE, /* 2wp fraud response */
   
    -- LAG(_C_2WDWP_GEN_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_GENUINE_RESPONSE, /* 2wp genuine response */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_GEN_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_GENUINE_RESPONSE, /* 2wp genuine response */
   
    _C_MDES_DPAN_CURR, --RELATED TO MDES DATA
    _C_TKN_MDES_DPAN_1,--RELATED TO MDES DATA
    CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS MDES_DPAN_REGO_DT,
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00') AS MDES_DPAN_REGO_DT,--RELATED TO MDES DATA
    _L_SE_SCORE, /* scam score */
    _L_BC_MULE_RISK_LVL, /* mule score */
    _L_BC_SCORE, /* bio catch score*/
    _L_IS_RAT_DT, /* remote access software dates */
    _L_IS_MOB_RAT_DT, /* remote access software dates */
    case
          WHEN RSP_ACTION_CODE = '1'                                   THEN 'Approved'
          WHEN dtl_ca_auth_sys_dec = '4'                                  THEN 'Declined (Sys)'
          WHEN dtl_ca_auth_sys_dec = '3'                                  THEN 'Future Use'
          WHEN dtl_ca_auth_sys_dec = '5'                                  THEN 'Pick Up'
          WHEN dtl_ca_auth_sys_dec = '1' AND RSP_ACTION_CODE IN ('4')     THEN 'Declined (FDP)'
          WHEN dtl_ca_auth_sys_dec = '1' AND RSP_ACTION_CODE IN ('2')     THEN 'Declined (DXC)'
    END AS DECISION,
    CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_2,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_3,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_4,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_5,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_6,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_7,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_8,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_9,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_10,

     CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_2,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_3,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_4,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_5,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_6,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_7,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_8,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_9,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_10,
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_2, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_3, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_4, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_5, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_6, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_7, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_8, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_9, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_10, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_2, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_3, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_4, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_5, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_6, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_7, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_8, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_9, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_10, -- DIGITAL WALLET REGO DATE
    _M_MERCHANT_CORP_IND, --SPENDING PATTERN FREQUENCY
    _M_MERCHANT_RETAIL_IND, --SPENDING PATTERN FREQUENCY
    CASE
        WHEN _M_MERCHANT_RETAIL_IND = '1' THEN 'Weekly User' 
        WHEN _M_MERCHANT_RETAIL_IND = '2' THEN 'Monthly User' 
        WHEN _M_MERCHANT_RETAIL_IND = '3' THEN 'Infrequent User' 
        WHEN _M_MERCHANT_RETAIL_IND = '4' THEN 'Recent User' 
        WHEN _M_MERCHANT_RETAIL_IND = '5' THEN 'Used before but not recently (within three months)' 
        ELSE 'No Spending Frequency'
    END AS RETAIL_SPENDING_FREQUENCY,
    CASE  
        WHEN _M_MERCHANT_CORP_IND = '1' THEN 'Weekly User'
        WHEN _M_MERCHANT_CORP_IND = '2' THEN 'Monthly User' 
        WHEN _M_MERCHANT_CORP_IND = '3' THEN 'Infrequent User' 
        WHEN _M_MERCHANT_CORP_IND = '4' THEN 'Recent User' 
        WHEN _M_MERCHANT_CORP_IND = '5' THEN 'Used before but not recently (within three months)'
        ELSE 'No Spending Frequency'
    END AS CORPORATE_SPENDING_FREQUENCY
    




    
     
    FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT A
        
    
    WHERE 1=1
    AND to_date(TTS_TRAN_DATE_ALT, 'YYYYMMDD') BETWEEN CURRENT_DATE() -100 AND CURRENT_DATE()
    --     mid_event_ts <= TO_CHAR(TIMESTAMPADD(day, (-1), CURRENT_TIMESTAMP()), 'YYYYMMDDHH24MISSFF6') and
    -- mid_event_ts >= TO_CHAR(TIMESTAMPADD(day, (-2), CURRENT_TIMESTAMP()), 'YYYYMMDDHH24MISSFF6')
    -- and (_C_2WDWP_ERR_DT<>'0'/* 2wp error */
    -- or _C_2WDWP_DISMISS_DT<>'0'/* 2wp dismiss notification */
    -- or _C_2WDWP_NRP_DT<>'0' /* 2wp no response */
    -- or _C_2WDWP_FRD_DT<>'0' /* 2wp fraud response */
    -- or _C_2WDWP_GEN_DT<>'0')
    -- to_date(TTS_TRAN_DATE_ALT, 'YYYYMMDD') = current_date()
)
,

toby as (
select a.*,
    b.ACTIONTAKEN,
    b.CARDNUMBER,
    b.CASENUMBER,
    b.FRAUDTYPE,
    b.RULE_FIRED,
    b.RULE_VERSION

from pre_toby a
    left join PRD_P01_DMN_FRAUMD.LABMLFRD.TOBY_ALERTS_TRANSACTIONS b 
            on a.id_key = b.id

),

TOBY_EVENTS AS(
select *
from toby
    UNPIVOT EXCLUDE NULLS(EVENT_DT FOR EVENT_NAME IN ( 
    -- TRANSACTIONDATETIME,
    _2WP_ERROR,
    _2WP_DISMISS_NOTIFICATION, 
    _2WP_NO_RESPONSE, 
    _2WP_FRAUD_RESPONSE,
    _2WP_GENUINE_RESPONSE,
    MDES_DPAN_REGO_DT,
    _C_TKN_APL_DPAN_REGO_DT_1,
    _C_TKN_APL_DPAN_REGO_DT_2,
    _C_TKN_APL_DPAN_REGO_DT_3,
    _C_TKN_APL_DPAN_REGO_DT_4,
    _C_TKN_APL_DPAN_REGO_DT_5,
    _C_TKN_APL_DPAN_REGO_DT_6,
    _C_TKN_APL_DPAN_REGO_DT_7,
    _C_TKN_APL_DPAN_REGO_DT_8,
    _C_TKN_APL_DPAN_REGO_DT_9,
    _C_TKN_APL_DPAN_REGO_DT_10,
    _C_APAY_DPAN_REGO_DT_1,
    _C_APAY_DPAN_REGO_DT_2,
    _C_APAY_DPAN_REGO_DT_3,
    _C_APAY_DPAN_REGO_DT_4,
    _C_APAY_DPAN_REGO_DT_5,
    _C_APAY_DPAN_REGO_DT_6,
    _C_APAY_DPAN_REGO_DT_7,
    _C_APAY_DPAN_REGO_DT_8,
    _C_APAY_DPAN_REGO_DT_9,
    _C_APAY_DPAN_REGO_DT_10))
ORDER BY ID_KEY, EVENT_DT
),



TOBY_TXN_EVENTS AS(
select
CHANNEL,
 ACTIONTAKEN,
    CARDNUMBER,
    CASENUMBER,
    FRAUDTYPE,
ID_KEY,
CUSTOMER_ID,
SSX_CUST_POST_CODE,
CHL_ID_CARD_NUM,
'TXN' as EVENT_NAME,
TRANSACTIONDATETIME,
TTS_TRAN_DATE_ALT,
TTS_TRAN_TIME_ALT,
CHL_CT_MER_MCC,
CHL_CT_TERM_OWNER_ID,
CHL_CT_TERM_OWNER_NAME,
CHL_CT_TERM_ID,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_CLIENT_AMT,
DTL_CA_CASH_BACK_AMT,
DTL_CA_AUTH_SYS_DEC,
DTL_CA_AUTH_SYS_INFO,
DTL_CA_REVERSAL_IND,
RSP_ACTION_CODE,
SLI,
AAV,
POS_ENTRY,
CHL_CT_MEDIA,
DPAN,
WALLET_ID,
TRID,
ISSUE_DATE,
PIN_VERIFIED,
RSP_EX_2_8S_001,
RSP_EX_2_8S_004,
_C_CRD_SAFE_MERCHANT,
-- RSP_CODE_2WP,
-- _A_2WP_NO_CNT,
-- _C_2WP_FRAUD_DEC_ALL_DT,
-- _C_2WP_HR_NO_RESP_DT_1,
-- _C_2WP_NO_RESP_DT_1,
-- _C_MDES_DPAN_CURR,
-- _C_TKN_MDES_DPAN_1,
_L_SE_SCORE,
_L_BC_MULE_RISK_LVL,
_L_BC_SCORE,
_L_IS_RAT_DT,
_L_IS_MOB_RAT_DT,
DECISION,
RULE_FIRED,
_M_MERCHANT_CORP_IND,
_M_MERCHANT_RETAIL_IND,
RETAIL_SPENDING_FREQUENCY,
CORPORATE_SPENDING_FREQUENCY
FROM TOBY

UNION ALL

SELECT 
CHANNEL,
ACTIONTAKEN,
CARDNUMBER,
CASENUMBER,
FRAUDTYPE,
ID_KEY,
CUSTOMER_ID,
SSX_CUST_POST_CODE,
CHL_ID_CARD_NUM,
EVENT_NAME,
EVENT_DT AS TRANSACTIONDATETIME,
TTS_TRAN_DATE_ALT,
TTS_TRAN_TIME_ALT,
CHL_CT_MER_MCC,
CHL_CT_TERM_OWNER_ID,
CHL_CT_TERM_OWNER_NAME,
CHL_CT_TERM_ID,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_CLIENT_AMT,
DTL_CA_CASH_BACK_AMT,
DTL_CA_AUTH_SYS_DEC,
DTL_CA_AUTH_SYS_INFO,
DTL_CA_REVERSAL_IND,
RSP_ACTION_CODE,
SLI,
AAV,
POS_ENTRY,
CHL_CT_MEDIA,
DPAN,
WALLET_ID,
TRID,
ISSUE_DATE,
PIN_VERIFIED,
RSP_EX_2_8S_001,
RSP_EX_2_8S_004,
_C_CRD_SAFE_MERCHANT,
-- RSP_CODE_2WP,
-- _A_2WP_NO_CNT,
-- _C_2WP_FRAUD_DEC_ALL_DT,
-- _C_2WP_HR_NO_RESP_DT_1,
-- _C_2WP_NO_RESP_DT_1,
-- _C_MDES_DPAN_CURR,
-- _C_TKN_MDES_DPAN_1,
_L_SE_SCORE,
_L_BC_MULE_RISK_LVL,
_L_BC_SCORE,
_L_IS_RAT_DT,
_L_IS_MOB_RAT_DT,
DECISION,
RULE_FIRED,
_M_MERCHANT_CORP_IND,
_M_MERCHANT_RETAIL_IND,
RETAIL_SPENDING_FREQUENCY,
CORPORATE_SPENDING_FREQUENCY

FROM TOBY_EVENTS

WHERE EVENT_DT > '1960-01-01 00:00:00'
)
,

toby_final_events as(
SELECT * FROM TOBY_TXN_EVENTS
ORDER BY ID_KEY, TRANSACTIONDATETIME
)
,

-- select SNOWFLAKE.CORTEX.COMPLETE('llama3.1-70b', 'select all the columns and rows from a CTE where each column is pupolated with at least one value that is not empty or null using dynamic SQL');



toby_metrics as(
select  
         ACTIONTAKEN
        ,CARDNUMBER AS ENTITY 
        ,CASENUMBER
        ,FRAUDTYPE
        ,COUNT(DISTINCT ID_KEY) AS TOTAL_TRANS
        ,COUNT(DISTINCT CASE WHEN RSP_ACTION_CODE = '1' THEN ID_KEY END) AS TOTAL_APPROVED_TRANS
        ,SUM(DTL_CA_CLIENT_AMT) AS TOTAL_SUM
        ,SUM(CASE WHEN RSP_ACTION_CODE = '1' THEN DTL_CA_CLIENT_AMT END) AS TOTAL_SUM_APPROVED
        

from TOBY_FINAL_EVENTS
GROUP BY 1,2,3,4
)

select 
a.CHANNEL,
a.ACTIONTAKEN,
a.CARDNUMBER,
a.CASENUMBER,
a.FRAUDTYPE,
ID_KEY,
CUSTOMER_ID,
SSX_CUST_POST_CODE,
CHL_ID_CARD_NUM,
EVENT_NAME,
TRANSACTIONDATETIME,
TTS_TRAN_DATE_ALT,
TTS_TRAN_TIME_ALT,
CHL_CT_MER_MCC,
CHL_CT_TERM_OWNER_ID,
CHL_CT_TERM_OWNER_NAME,
CHL_CT_TERM_ID,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_CLIENT_AMT,
DTL_CA_CASH_BACK_AMT,
DTL_CA_AUTH_SYS_DEC,
DTL_CA_AUTH_SYS_INFO,
DTL_CA_REVERSAL_IND,
RSP_ACTION_CODE,
SLI,
AAV,
POS_ENTRY,
CHL_CT_MEDIA,
DPAN,
WALLET_ID,
TRID,
ISSUE_DATE,
PIN_VERIFIED,
RSP_EX_2_8S_001,
RSP_EX_2_8S_004,
_C_CRD_SAFE_MERCHANT,
_L_SE_SCORE,
_L_BC_MULE_RISK_LVL,
_L_BC_SCORE,
_L_IS_RAT_DT,
_L_IS_MOB_RAT_DT,
DECISION,
RETAIL_SPENDING_FREQUENCY,
RULE_FIRED,
TOTAL_TRANS,
TOTAL_APPROVED_TRANS,
TOTAL_SUM,
TOTAL_SUM_APPROVED


from toby_final_events a
    left join toby_metrics b
        on a.CARDNUMBER = b.ENTITY

-- WHERE TOTAL_SUM > 20000
WHERE A.ACTIONTAKEN IS NOT NULL

-- alter table PRD_P01_DMN_FRAUMD.LABMLFRD.TOBY_CARDS set tag PRD_RBAC.tags.classification_lab = 'CUS';  ",GAREAJU,R_USR_FRAUMD_LABMLFRD_RW,1564427,1564.427000,26.073783,0.434563,2X-LARGE,32,13.906016
01be48d6-3204-b365-0000-c71d27ea5f1e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""RSP_ACTION_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_CUST_SPEND_SUM_AAA_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_CC_RECOV_TRANS_SUM_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_C_N3D_TST_CNT_1"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_AUTH_COUNT"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_Q_NON_AU_IND"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_C_CC_GBL_N3D_1D_CNT_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CC_SFW_GOOGLE_CNT_2"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""_Q_COF_DECL_CNT_DAY_1"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_L_MAX_30D_SCORE_H2O"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_L_ACC_AMT_7D"" DOUBLE, ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_C_CRD_DOM_CNP_HV_SUM_1"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""CHL_CT_TERM_OWNER_ID"" STRING(16777216), ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_A_Q"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_3"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""_A_GEO_LONG_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_2"" DOUBLE, ""_C_N3D_MERC_ID_1"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_2"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, DTL_EX_3_8S_009, _M_TOTAL_COUNT, DTL_CA_AUTH_SYS_INFO, _C_CC_GBL_N3D_SUM_1, _C_CC_GBL_N3D_CNT_1, _C_N3D_OVS_6H_SUM_1, DTL_CA_MERCH_CURR_CODE, _C_CRD_SAFE_MERCHANT, RSP_ACTION_CODE, _Q_MER_FRAUD_SCORE_CNT_6, DTL_EX_3_20S_004, _Q_KEYED_APVD_CNT_DAY_1, _A_CUST_SPEND_SUM_AAA_1, _C_N3D_MERC_ID_SUM_2, _C_CC_RECOV_TRANS_SUM_1, _A_D_D_1, ATH_PC_CUST_PRESENT, _Q_MER_FRAUD_SCORE_CNT_5, ATH_PC_ACS_REFER_CODE, _Q_MER_FRAUD_SCORE_SUM_6, _C_N3D_MERC_ID_SUM_1, _L_BC_SESS_ID, _C_N3D_TST_CNT_1, _M_FIRST_USE_DATE, _Q_AUTH_COUNT, _M_TOTAL_SUM, _C_2WAY_5X_CRD_CNT, _Q_MER_FRAUD_SCORE_CNT_3, CHL_CT_TERM_CNTRY_CODE, _A_BTS_CUST_AGE, _C_N3D_MERC_ID_SUM_3, _Q_NON_AU_IND, _A_CRD_NPP_PAYMENT_AMOUNT, _C_CC_GBL_N3D_1D_CNT_1, DTL_EX_3_80S_001, _C_CRD_VISA_MERC_SUM_1, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_2, _C_CC_SFW_GOOGLE_CNT_2, _A_D_D_3, _Q_COF_DECL_CNT_DAY_1, _A_AUS_IP_ACTIVITY, _A_BTS_CUST_DOB, _L_MAX_30D_SCORE_H2O, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _C_CC_2DAY_AMT_6, _A_D_D_2, _L_ACC_AMT_7D, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _A_PROF_CAPP_DEVICE_1, _C_CRD_DOM_CNP_HV_SUM_1, _L_BC_SCORE_H2O, _C_CC_CNP_VEL_6HR_COUNT_1, CHL_CT_TERM_OWNER_ID, _C_CC_OS_FB_CNT_3, _A_Q, _Q_MER_FRAUD_SCORE_SUM_1, _C_CRD_DOM_CNP_HV_CNT_1, _Q_MER_FRAUD_SCORE_SUM_3, _C_CRD_3D_TRN_SUM_1, _A_GEO_LONG_1, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_1, _C_CC_GBL_N3D_CNT_2, CHL_CT_MER_MCC
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250717 and 20250810
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1558747,1558.747000,25.979117,0.432985,2X-LARGE,32,13.855520
01be86ce-3204-bc99-0000-c71d29e435ea,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_ENG_TEST_OB(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

    
            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 and 20250710
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1558379,1558.379000,25.972983,0.432883,2X-LARGE,32,13.852256
01bebb57-3204-c1f6-0000-c71d2b93fd46,"SELECT DISTINCT

    -- Transaction datetime (parsed from alternate date/time fields)
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
    -- Transaction ID (concatenation of 3 fields)x
    ,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
    -- Snapshot date of transaction (parsed from MID_EVENT_TS)
    ,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
    -- Account identifier (bank, branch, account number)
    ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
    -- Party identifier (customer number padded)
    ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
    -- Transaction date (alternate format)
    ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d

    -- Feature from leaky.txt, no description
    ,dtl_ex_0_20s_001
    -- Feature from leaky.txt, no description
    -- ,dtl_ex_1_5s_01
    -- Customer number (must be present, dropped for modelling)
    ,SSX_CUST_NUM
    -- Transaction amount
    -- ,tgx_tran_amt
    -- -- Max 30-day risk score
    -- ,_l_max_30d_score
    -- -- BC risk score
    -- ,_l_bc_score
    -- -- Max 30-day mule risk score
    -- ,_l_max_30d_mule_score

    ,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

-- ,_l_adv_key_combo
-- ,_l_clpbrd_evnt
-- ,_l_concurrent_sess
-- ,_l_export_data
-- ,_l_import_data
-- ,_l_rat_in_sess
-- ,_l_is_rcnt_hrisk_sess
,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS

-- ,_l_scrn_broadcast
-- ,_l_delay_to_input_pi
-- ,_l_active_spoofing
-- ,_l_pmt_vloc_anom
-- ,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM

-- ,_l_accum_amt_anom
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM

-- ,_l_is_active_call
-- ,_l_is_long_sess
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,_L_TRUST_900
-- ,_L_TRUST_NEW_PAYEE
-- ,_L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE

-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYEE
-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYER
-- ,_L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,_l_cust_scamrisk_score
-- ,_b_recip_sum_short
-- ,_b_recip_sum_long
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG

-- ,_a_customer_age
-- ,_a_cust_sum_aaa_short
-- ,_a_cust_sum_aaa_long
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M

-- ,_x_cif_recipient_new_sum
------------------
-- Keep other columns as VARCHAR (mostly text)
,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,_x_cif_recipient_new_cnt
-- ,_x_telstra_last_call_dur
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_3
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_2
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_4
-- ,REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '') as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
-- REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '') as _N_NEW_IP_LOGON_PCODE,
-- REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '') as _A_LOGON_198_IP_PC,
-- REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '') as _A_LOGON_NB_IP_PC,
-- COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,


,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT

-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE


,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT


-- ,_x_telstra_max_call_dur
-- -- ,_a_telstra_active_call
-- ,_a_telstra_tp_outbnd_avg_dur
-- ,_a_telstra_multi_calls
-- ,_a_crypto_mnthly_sum
-- COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
-- COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
-- COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM

,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250717'
and     dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     TRAN_AMT > 0
order by    transactiondatetime",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,3116466,3116.466000,51.941100,0.865685,X-LARGE,16,13.850960
01beed29-3204-c93f-0000-c71d2d06522e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PKE2E_ENGINEER_TEST_1(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1551191,1551.191000,25.853183,0.430886,2X-LARGE,32,13.788352
01bee6b1-3204-c555-0000-c71d2cd4faae,"CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-30
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            -- AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        -- AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,1542330,1542.330000,25.705500,0.428425,2X-LARGE,32,13.709600
01bdcd52-3204-a617-0000-c71d2473541e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DIGI_SCAM_D001_V2(""DETECTION"" STRING(16777216), ""CASE_DETECTION"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TGX_TRAN_AMT"" NUMBER(14, 2), ""HOUR"" BIGINT, ""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""CATEGORY"" STRING(134217728), ""LABEL"" BIGINT, ""DTL_EX_0_20S_001"" STRING(16777216), ""FRAUDTYPE"" STRING(16777216), ""RUA_20BYTE_STRING_001"" STRING(16777216), ""_A_BTS_BIO_SE"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_NPP_INBOUND_SUM_AMT"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_DISTANCE"" NUMBER(38, 2), ""_A_GEO_LONG_1"" NUMBER(38, 2), ""_A_GEO_LONG_2"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_MULTI_CNT"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_CUST_AVG_ACCT_BAL"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_T"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_CAPP_DEREGISTARATION_CNT_3"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_2"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_DEVICE_SIM_VENDOR_RATIO_EXC"" NUMBER(38, 2), ""_A_DEVICE_SIMILAR_VENDOR_RATIO"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_CC_CASH_ADVANCE_AMT"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_ALL_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NPP_FTP_SUM"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_4"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_7"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_SHORT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_CLIENT_POSTCODE_FTP_SUM_3"" NUMBER(38, 2), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_CITY_CNT_1"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_7"" NUMBER(38, 2), ""_B_SAFE_RECIP_FRD_EXCLUDED_IND"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_BVT_NUMERIC_1"" NUMBER(38, 2), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_3"" NUMBER(38, 2), ""_I_ALL_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_NETBANK_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_L_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_SHORT"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_SDID_CNT_1"" NUMBER(38, 2), ""_L_SDID_CNT_3"" NUMBER(38, 2), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BRANCH_ID"" STRING(16777216), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_DATETIME_FP_2"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_SCORE_5"" NUMBER(38, 2), ""_L_M_L_4"" NUMBER(38, 2), ""_L_M_L_C"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_ACC_AMT_7D"" NUMBER(38, 2), ""_L_ADV_KEY_COMBO"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_JS"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_FT_RAT_APP_INST"" NUMBER(38, 2), ""_L_HI_DEAD_TIME"" NUMBER(38, 2), ""_L_IS_ACTIVE_CALL"" NUMBER(38, 2), ""_L_IS_LONG_SESS"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_LGN_IMPORT_ANOMALY"" NUMBER(38, 2), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_MINS_LST_LGN_CAPPED"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_SDK"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_N_CRYPTO_CON_N_CNT"" NUMBER(38, 2), ""_N_CRYPTO_POT_N_SUM"" NUMBER(38, 2), ""_N_MPS_MNDT_CNT_24H_1"" NUMBER(38, 2), ""_N_MOB_OTH_TRAN_SUM_1"" NUMBER(38, 2), ""_N_CA_DEVICE_PROFILE_1"" NUMBER(38, 2), ""_N_CA_LGN_CNT_24H_1"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_ID_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_NB_SUM_TPT_4"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_T_2"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_3"" NUMBER(38, 2), ""_A_BTS_MAX_SE_DT"" BIGINT, ""_A_NM_DECLINE_FLAG_DT"" BIGINT, ""_A_TELSTRA_LONG_CALL"" BIGINT, ""_A_CONFIRMED_FRAUD_DT"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_DTL_ACTIONCODE_DT_2"" BIGINT, ""_A_CRD_ACTIONCODE_DT_1"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_GEO_DT_2"" BIGINT, ""_A_DEVICEANOM_MLW_DT"" BIGINT, ""_A_CAPP_PASSWORD_CHANGE_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_2"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_SCH_DT"" BIGINT, ""_A_NPP_OUT_ALL_FTP_DT"" BIGINT, ""_A_BTS_TRF_CNT_DT"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_4_1"" BIGINT, ""_A_5_2"" BIGINT, ""_A_MTH_BTS_WDL_CNT_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP10_DT"" BIGINT, ""_A_CSE_ADD_AUTH_DT"" BIGINT, ""_A_SEC_INTER_SHOP_DT"" BIGINT, ""_A_CLIENT_LOGON_CSR"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_UA_DEVICE_DT_2"" BIGINT, ""_A_SCAMP3_MLW_DT"" BIGINT, ""_A_SCAMP7_MLW_DT"" BIGINT, ""_A_SCAMP_RULEPRIORITISED_DT"" BIGINT, ""_A_CURR_NB_BROWSER_PREV_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP3_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP4_DT"" BIGINT, ""_A_NB_BPAY_LIMIT_INCREASE_DT"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_INB_ALL_DT"" BIGINT, ""_A_NPP_OUT_DECLINE_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_INITIAL_DT"" BIGINT, ""_A_RT_DECLINE_INITIAL_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_2"" BIGINT, ""_A_RETRIEVE_STMT_DETAILS_DT"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_2"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_5"" BIGINT, ""_A_NB_BPAY_ACCT_DT_4"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_PAYID_TRANSFER_OUT"" BIGINT, ""_A_NPP_INB_OFI_PAYID_DT"" BIGINT, ""_A_NPP_OUT_CBA_PAYID_DT"" BIGINT, ""_A_CIF_ESTABLISH_DT"" BIGINT, ""_A_ECV_DOCUMENT_DT"" BIGINT, ""_A_CLIENT_PW_FORGOT"" BIGINT, ""_A_BTS_WDL_CNT_DT"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_NB_GROUP_DT_3"" BIGINT, ""_A_CLIENT_POSTCODE_DT_5"" BIGINT, ""_A_ACCT_AGG_DT"" BIGINT, ""_A_CLIENT_CITY_DATE_10"" BIGINT, ""_A_CLIENT_CITY_DATE_3"" BIGINT, ""_A_CLIENT_CITY_DATE_5"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_NPP_WHITELIST_PAYID_DT"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_NPP_OUT_CNT_DATE"" BIGINT, ""_B_BOND_CNT_DATE"" BIGINT, ""_B_BOND_SUM_DATE"" BIGINT, ""_B_HRISK_BILL_PROF_CNT_DT"" BIGINT, ""_B_RECIP_LINK_SUM_DATE"" BIGINT, ""_I_ALL_LOGONS_FDT"" BIGINT, ""_L_LST_BC_SNOOP_LOGON_DT"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_PUSH_API_DT_2"" BIGINT, ""_L_FIRST_RAT_DT"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_RAT_DT"" BIGINT, ""_N_CRYPTO_CON_DT_LST"" BIGINT, ""_N_TELSTRA_NCRG_DT"" BIGINT, ""_N_FRD_DCLN_COMMS_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_2WP_MN_FRD_RESP_BL_END_DT"" BIGINT, ""_N_2WP_TRAN_DT_1"" BIGINT, ""_N_MRISK_ISP_NCRG_DT"" BIGINT, ""_N_M100_P23_MLW_DT"" BIGINT, ""_N_D_P_C"" BIGINT, ""_N_S_1"" BIGINT, ""_N_S_3"" BIGINT, ""_N_1601_DT"" BIGINT, ""_N_A_3"" BIGINT, ""_N_G_C"" BIGINT, ""_N_NB_MEDIUM_PRIORITY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_CUST_NB_PREV_DT"" BIGINT, ""_N_UA_DEVICE_FIRST_DT_2"" BIGINT, ""_N_SCAMP3_MLW_DT"" BIGINT, ""_N_ALL_LOGON_DT"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_NB_RECIPIENT_DT_3"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON_CSR"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_LOGON_TOKEN"" BIGINT, ""_N_CLIENT_PASSWORD_TEMP"" BIGINT, ""_N_CLIENT_PW_FORGOT"" BIGINT, ""_N_CLIENT_QA_CHG"" BIGINT, ""_N_CLIENT_UNLOCK"" BIGINT, ""_X_NPP_OUT_CNT_DATE"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            A.DETECTION,
            A.CASE_DETECTION,
            B.TTS_TRAN_DATE_ALT,
            B.TGX_TRAN_AMT,
            TRY_CAST(SUBSTR(B.TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            A.CMX_TRAN_ID
, A.SSX_CUST_NUM
, A.CATEGORY
, A.LABEL
, A.DTL_EX_0_20S_001
, A.FRAUDTYPE
, A.RUA_20BYTE_STRING_001,
            B._A_BTS_BIO_SE
, B._A_BTS_BNFT
, B._A_NPP_INB_PMT_VAL
, B._A_PROF_RISK_IND
, B._A_CUST_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_2
, B._A_NPP_INBOUND_SUM_AMT
, B._A_TELSTRA_ACTIVE_CALL
, B._A_TELSTRA_API_EVENT_ID
, B._A_TELSTRA_EXISTING_RELATION
, B._A_LATEST_NCRG_ISP
, B._A_GEO_DISTANCE
, B._A_GEO_LONG_1
, B._A_GEO_LONG_2
, B._A_P_N_H
, B._A_MULTI_CNT
, B._A_CRD_SCAM_SUPP_7D_SUM_1
, B._A_BTS_CUST_AGE
, B._A_P_L_1
, B._A_P_L_C
, B._A_CRD_NPP_PAYMENT_AMOUNT
, B._A_CURR_CAPP_DEVICE_NFTP_CNT
, B._A_2WAY_TYPE
, B._A_CUST_ACCT_BAL
, B._A_CUST_AVG_ACCT_BAL
, B._A_R
, B._A_T
, B._A_U
, B._A_CAPP_DEREGISTARATION_CNT_3
, B._A_CAPP_LOGON_CNT_2
, B._A_CAPP_LOGON_CNT_3
, B._A_NB_LOGONS_CNT_2
, B._A_NB_LOGONS_CNT_3
, B._A_CUST_BROWSER_CNT_3
, B._A_CUST_BROWSER_VER
, B._A_CUST_OS_NAME
, B._A_CUST_OS_VER
, B._A_CURR_NB_BROWSER_CNT
, B._A_DEVICE_SIM_VENDOR_RATIO_EXC
, B._A_DEVICE_SIMILAR_VENDOR_RATIO
, B._A_CIF_ESTABLISH_CUST_PCODE
, B._A_LIST_RL1_SCAM_CUST_CIF
, B._A_PREV_CAPP_DEVICE_CNT
, B._A_PROF_CAPP_DEVICE_CNT_1
, B._A_CC_CASH_ADVANCE_AMT
, B._A_MRISK_FOREIGN_IP_CNTRY_CODE
, B._A_ALL_BPAY_ACCT_2
, B._A_ALL_BPAY_ACCT_SUM_1
, B._A_ALL_BPAY_ACCT_SUM_3
, B._A_NB_BPAY_ACCT_SUM_1
, B._A_NB_BPAY_ACCT_SUM_3
, B._A_NPP_FTP_SUM
, B._A_CUST_NPP_OUT_SUM_AAA_1
, B._A_CUST_NPP_OUT_SUM_AAA_2
, B._A_CUST_NPP_OUT_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_4
, B._A_CUST_SUM_AAA_7
, B._A_CUST_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_SHORT
, B._A_CIF_ESTABLISH_CHANNEL
, B._A_ECV_DOCUMENT_IP
, B._A_CLIENT_POSTCODE_FTP_SUM_3
, B._A_BTS_BCH_SUM
, B._A_MONTHLY_TRANSFER_COUNT_2
, B._A_MONTHLY_TRANSFER_COUNT_3
, B._A_MONTHLY_TRANSFER_COUNT_4
, B._A_MONTHLY_TRANSFER_SUM_4
, B._A_CLIENT_CITY_10
, B._A_CLIENT_CITY_6
, B._A_CLIENT_CITY_CNT_1
, B._A_CLIENT_COUNTRY_1
, B._A_CLIENT_COUNTRY_8
, B._A_CLIENT_COUNTRY_CNT_3
, B._A_CLIENT_COUNTRY_CNT_7
, B._B_SAFE_RECIP_FRD_EXCLUDED_IND
, B._B_RECIP_PROFILE_GLOB_ERROR
, B._B_BVT_NUMERIC_1
, B._B_RECIP_SUM_TODAY
, B._B_CRYPTO_RISK
, B._B_OPEN_LAST_PAYER_CIF_10
, B._B_RECIP_SUM_AAA_1
, B._B_RECIP_SUM_AAA_2
, B._B_RECIP_SUM_AAA_LONG
, B._B_CLIENT_POSTCODE_1
, B._B_CLIENT_POSTCODE_2
, B._B_CLIENT_POSTCODE_3
, B._B_CLIENT_POSTCODE_CNT_1
, B._B_CLIENT_POSTCODE_CNT_2
, B._B_CLIENT_POSTCODE_SUM_1
, B._B_CLIENT_POSTCODE_SUM_2
, B._B_CLIENT_POSTCODE_SUM_3
, B._B_CLIENT_POSTCODE_SUM_5
, B._B_RECIP_SUM_1
, B._I_CUST_TRAN_SUM_3
, B._I_ALL_LOGONS_CNT_1
, B._I_ALL_LOGONS_PERC_1
, B._I_ALL_LOGONS_PERC_3M
, B._I_CAPP_LOGONS_CNT_1
, B._I_CAPP_LOGONS_CNT_3M
, B._I_CAPP_LOGONS_PERC_1
, B._I_NETBANK_LOGONS_CNT_1
, B._I_CUST_NET_L_CNT_1
, B._I_CUST_NET_CNT_1
, B._I_CUST_NET_CNT_SHORT
, B._L_PAYTO_MANDATE_ID
, B._L_PUSH_API_1
, B._L_PUSH_API_2
, B._L_PUSH_API_3
, B._L_PUSH_API_4
, B._L_BC_CONTEXT
, B._L_MUID_AGE_PER_USER
, B._L_SDID_1
, B._L_SDID_CNT_1
, B._L_SDID_CNT_3
, B._L_NC_ACCT_NUM
, B._L_NC_RESPONSE_CODE
, B._L_NC_WINNING_ALG
, B._L_BRANCH_ID
, B._L_PMT_AMT
, B._L_PMT_DESCR
, B._L_SE_SCORE
, B._L_SE_SESS_CNT
, B._L_DATETIME_FP_2
, B._L_FINGERPRINT_1
, B._L_FINGERPRINT_2
, B._L_FINGERPRINT_3
, B._L_FINGERPRINT_4
, B._L_FINGERPRINT_5
, B._L_SCORE_1
, B._L_SCORE_2
, B._L_SCORE_3
, B._L_SCORE_5
, B._L_M_L_4
, B._L_M_L_C
, B._L_BC_SESS_CNT
, B._L_ACC_AMT_1D
, B._L_ACC_AMT_1H
, B._L_ACC_AMT_7D
, B._L_ADV_KEY_COMBO
, B._L_AND_ID_AGE
, B._L_DAYS_LST_DEV_JS
, B._L_DEV_FAM
, B._L_DEV_FAM_AGE
, B._L_FT_RAT_APP_INST
, B._L_HI_DEAD_TIME
, B._L_IS_ACTIVE_CALL
, B._L_IS_LONG_SESS
, B._L_LANG_1
, B._L_LANG_2
, B._L_LANG_3
, B._L_LGN_IMPORT_ANOMALY
, B._L_MAX_30D_SCORE
, B._L_MINS_LST_LGN_CAPPED
, B._L_NUM_SESS_2H
, B._L_NUM_SESS_4H
, B._L_POLICY_NM
, B._L_PROXY_TYPE
, B._L_SCRN_H
, B._L_SESS_CNT_MOB_BROWSER
, B._L_SESS_CNT_MOB_SDK
, B._L_SESS_CNT_WEB
, B._L_TAP_CNT
, B._L_TOUCH_CNT
, B._N_CRYPTO_CON_N_CNT
, B._N_CRYPTO_POT_N_SUM
, B._N_MPS_MNDT_CNT_24H_1
, B._N_MOB_OTH_TRAN_SUM_1
, B._N_CA_DEVICE_PROFILE_1
, B._N_CA_LGN_CNT_24H_1
, B._N_NMCHK_RECIP_CNT_1
, B._N_2WP_TRAN_ID_1
, B._N_CA_DEV_BL_FLAG_2
, B._N_CUST_TXN_COUNT
, B._N_NB_RECIPIENT_AMT_1
, B._N_NB_RECIPIENT_AMT_3
, B._N_NB_SUM_TPT_4
, B._N_D_D_3
, B._N_CUST_NB_DEVICE_CNT
, B._N_CAPP_LINKED_CNT_1
, B._N_CAPP_LINKED_CNT_2
, B._N_CAPP_LOGON_CNT_2
, B._N_ESTAB_SCHEDULE_2
, B._N_LOG_SCR_CONS_2
, B._N_LINKED_RECIP
, B._N_CLIENT_IDCHNG_NB
, B._N_CLIENT_NEW_PAYEE_1
, B._N_CLIENT_NEW_PAYEE_2
, B._N_CLIENT_NEW_PAYEE_3
, B._X_CIF_SENDER_CNT
, B._X_NAME_MATCH_CNT
, B._X_LAST_N_TXN_COUNT
, B._X_T_2
, B._X_T_5
, B._X_NPP_OUT_SUM_3,
            B._A_BTS_MAX_SE_DT
, B._A_NM_DECLINE_FLAG_DT
, B._A_TELSTRA_LONG_CALL
, B._A_CONFIRMED_FRAUD_DT
, B._A_DTL_ACTIONCODE_DT_1
, B._A_DTL_ACTIONCODE_DT_2
, B._A_CRD_ACTIONCODE_DT_1
, B._A_NPP_INBOUND_DATETIME
, B._A_GEO_DT_2
, B._A_DEVICEANOM_MLW_DT
, B._A_CAPP_PASSWORD_CHANGE_DT
, B._A_CD_RTR_DT_1
, B._A_CD_RTR_DT_2
, B._A_IVR_LOGON_DT
, B._A_SCH_DT
, B._A_NPP_OUT_ALL_FTP_DT
, B._A_BTS_TRF_CNT_DT
, B._A_CAPP_DEV_RETR_DT
, B._A_4_1
, B._A_5_2
, B._A_MTH_BTS_WDL_CNT_DT
, B._A_REVERSE_IND_SCAMP10_DT
, B._A_CSE_ADD_AUTH_DT
, B._A_SEC_INTER_SHOP_DT
, B._A_CLIENT_LOGON_CSR
, B._A_DTL_CAPP_NBANK_SSO_DT
, B._A_CLIENT_DETAILS_VIEW
, B._A_MANUAL_NB_LOCK_DT
, B._A_CUST_BROWSER_PREV_DT_2
, B._A_UA_DEVICE_DT_2
, B._A_SCAMP3_MLW_DT
, B._A_SCAMP7_MLW_DT
, B._A_SCAMP_RULEPRIORITISED_DT
, B._A_CURR_NB_BROWSER_PREV_DT
, B._A_REVERSE_IND_SCAMP3_DT
, B._A_REVERSE_IND_SCAMP4_DT
, B._A_NB_BPAY_LIMIT_INCREASE_DT
, B._A_NPP_OUT_PAYID_DT
, B._A_NPP_INB_ALL_DT
, B._A_NPP_OUT_DECLINE_COMMSEE_DT
, B._A_NPP_OUT_HOLD_COMMSEE_DT
, B._A_NPP_OUT_HOLD_INITIAL_DT
, B._A_RT_DECLINE_INITIAL_DT
, B._A_PROF_CAPP_DEVICE_DT_2
, B._A_RETRIEVE_STMT_DETAILS_DT
, B._A_CAPP_REGO_DT
, B._A_ALL_BPAY_ACCT_DT_2
, B._A_ALL_BPAY_ACCT_DT_5
, B._A_NB_BPAY_ACCT_DT_4
, B._A_NB_BPAY_ACCT_FTP_DT_1
, B._A_NPP_PAYID_TRANSFER_OUT
, B._A_NPP_INB_OFI_PAYID_DT
, B._A_NPP_OUT_CBA_PAYID_DT
, B._A_CIF_ESTABLISH_DT
, B._A_ECV_DOCUMENT_DT
, B._A_CLIENT_PW_FORGOT
, B._A_BTS_WDL_CNT_DT
, B._A_NB_GROUP_DT_2
, B._A_NB_GROUP_DT_3
, B._A_CLIENT_POSTCODE_DT_5
, B._A_ACCT_AGG_DT
, B._A_CLIENT_CITY_DATE_10
, B._A_CLIENT_CITY_DATE_3
, B._A_CLIENT_CITY_DATE_5
, B._A_CLIENT_COUNTRY_DATE_1
, B._B_NPP_WHITELIST_PAYID_DT
, B._B_NPP_WHITELIST_SENDER_DT
, B._B_ANY_CUST_FTP_DT
, B._B_NPP_OUT_CNT_DATE
, B._B_BOND_CNT_DATE
, B._B_BOND_SUM_DATE
, B._B_HRISK_BILL_PROF_CNT_DT
, B._B_RECIP_LINK_SUM_DATE
, B._I_ALL_LOGONS_FDT
, B._L_LST_BC_SNOOP_LOGON_DT
, B._L_PUSH_API_DT_1
, B._L_PUSH_API_DT_2
, B._L_FIRST_RAT_DT
, B._L_M_F_2
, B._L_M_F_C
, B._L_IS_RAT_DT
, B._N_CRYPTO_CON_DT_LST
, B._N_TELSTRA_NCRG_DT
, B._N_FRD_DCLN_COMMS_DT
, B._N_2WP_SNT_TRAN_HOLD_END_DT
, B._N_2WP_MN_FRD_RESP_BL_END_DT
, B._N_2WP_TRAN_DT_1
, B._N_MRISK_ISP_NCRG_DT
, B._N_M100_P23_MLW_DT
, B._N_D_P_C
, B._N_S_1
, B._N_S_3
, B._N_1601_DT
, B._N_A_3
, B._N_G_C
, B._N_NB_MEDIUM_PRIORITY_FIRE
, B._N_CUST_BROWSER_FIRST_DT_2
, B._N_CUST_NB_PREV_DT
, B._N_UA_DEVICE_FIRST_DT_2
, B._N_SCAMP3_MLW_DT
, B._N_ALL_LOGON_DT
, B._N_MALWARE_DT
, B._N_NB_RECIPIENT_DT_3
, B._N_CAPP_REG_DT_2
, B._N_CLIENT_IDTO_PW
, B._N_CLIENT_LOGON_CSR
, B._N_CLIENT_LOGON_FINEST
, B._N_CLIENT_LOGON_TOKEN
, B._N_CLIENT_PASSWORD_TEMP
, B._N_CLIENT_PW_FORGOT
, B._N_CLIENT_QA_CHG
, B._N_CLIENT_UNLOCK
, B._X_NPP_OUT_CNT_DATE
        FROM
            LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_TEMP_DIGI_SCAM_D001_V2 AS A
            INNER JOIN (
               SELECT
                   TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
                   TTS_TRAN_DATE_ALT, 
                   TTS_TRAN_TIME_ALT,
                   TRY_CAST(TGX_TRAN_AMT AS DECIMAL(14,2)) AS TGX_TRAN_AMT,
                   	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_MAX_SE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NM_DECLINE_FLAG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00'))
            END as _A_TELSTRA_LONG_CALL
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CONFIRMED_FRAUD_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_GEO_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DEVICEANOM_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_PASSWORD_CHANGE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_ALL_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_TRF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_4_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MTH_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP10_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CSE_ADD_AUTH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SEC_INTER_SHOP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP7_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP_RULEPRIORITISED_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CURR_NB_BROWSER_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP3_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP4_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_LIMIT_INCREASE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_DECLINE_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RT_DECLINE_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RETRIEVE_STMT_DETAILS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_PAYID_TRANSFER_OUT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_OFI_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_CBA_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CIF_ESTABLISH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ECV_DOCUMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ACCT_AGG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_10
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_HRISK_BILL_PROF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_RECIP_LINK_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00'))
            END as _I_ALL_LOGONS_FDT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_LST_BC_SNOOP_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_FIRST_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CRYPTO_CON_DT_LST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_TELSTRA_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_FRD_DCLN_COMMS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_MN_FRD_RESP_BL_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_TRAN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MRISK_ISP_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_M100_P23_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_D_P_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1601_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_A_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_G_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_MEDIUM_PRIORITY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_UA_DEVICE_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_ALL_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_RECIPIENT_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_TOKEN
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PASSWORD_TEMP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_QA_CHG
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_UNLOCK
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _X_NPP_OUT_CNT_DATE
        
                   ,             try_to_number(_a_bts_bio_se, 38, 2) as _a_bts_bio_se
            ,_A_BTS_BNFT
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,try_to_number(_a_npp_inbound_sum_amt, 38, 2) as _a_npp_inbound_sum_amt
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_distance, 38, 2) as _a_geo_distance
            ,try_to_number(_a_geo_long_1, 38, 2) as _a_geo_long_1
            ,try_to_number(_a_geo_long_2, 38, 2) as _a_geo_long_2
            ,_A_P_N_H
            ,try_to_number(_a_multi_cnt, 38, 2) as _a_multi_cnt
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_cust_avg_acct_bal, 38, 2) as _a_cust_avg_acct_bal
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_t, 38, 2) as _a_t
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_capp_deregistaration_cnt_3, 38, 2) as _a_capp_deregistaration_cnt_3
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_nb_logons_cnt_2, 38, 2) as _a_nb_logons_cnt_2
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,try_to_number(_a_cust_browser_cnt_3, 38, 2) as _a_cust_browser_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,try_to_number(_a_device_sim_vendor_ratio_exc, 38, 2) as _a_device_sim_vendor_ratio_exc
            ,try_to_number(_a_device_similar_vendor_ratio, 38, 2) as _a_device_similar_vendor_ratio
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,try_to_number(_a_prev_capp_device_cnt, 38, 2) as _a_prev_capp_device_cnt
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,try_to_number(_a_cc_cash_advance_amt, 38, 2) as _a_cc_cash_advance_amt
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_all_bpay_acct_sum_3, 38, 2) as _a_all_bpay_acct_sum_3
            ,try_to_number(_a_nb_bpay_acct_sum_1, 38, 2) as _a_nb_bpay_acct_sum_1
            ,try_to_number(_a_nb_bpay_acct_sum_3, 38, 2) as _a_nb_bpay_acct_sum_3
            ,try_to_number(_a_npp_ftp_sum, 38, 2) as _a_npp_ftp_sum
            ,try_to_number(_a_cust_npp_out_sum_aaa_1, 38, 2) as _a_cust_npp_out_sum_aaa_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_4, 38, 2) as _a_cust_sum_aaa_4
            ,try_to_number(_a_cust_sum_aaa_7, 38, 2) as _a_cust_sum_aaa_7
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_short, 38, 2) as _a_cust_sum_aaa_short
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_client_postcode_ftp_sum_3, 38, 2) as _a_client_postcode_ftp_sum_3
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,try_to_number(_a_client_city_cnt_1, 38, 2) as _a_client_city_cnt_1
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_a_client_country_cnt_7, 38, 2) as _a_client_country_cnt_7
            ,try_to_number(_b_safe_recip_frd_excluded_ind, 38, 2) as _b_safe_recip_frd_excluded_ind
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_bvt_numeric_1, 38, 2) as _b_bvt_numeric_1
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_cust_tran_sum_3, 38, 2) as _i_cust_tran_sum_3
            ,try_to_number(_i_all_logons_cnt_1, 38, 2) as _i_all_logons_cnt_1
            ,try_to_number(_i_all_logons_perc_1, 38, 2) as _i_all_logons_perc_1
            ,try_to_number(_i_all_logons_perc_3m, 38, 2) as _i_all_logons_perc_3m
            ,try_to_number(_i_capp_logons_cnt_1, 38, 2) as _i_capp_logons_cnt_1
            ,try_to_number(_i_capp_logons_cnt_3m, 38, 2) as _i_capp_logons_cnt_3m
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,try_to_number(_i_netbank_logons_cnt_1, 38, 2) as _i_netbank_logons_cnt_1
            ,try_to_number(_i_cust_net_l_cnt_1, 38, 2) as _i_cust_net_l_cnt_1
            ,try_to_number(_i_cust_net_cnt_1, 38, 2) as _i_cust_net_cnt_1
            ,try_to_number(_i_cust_net_cnt_short, 38, 2) as _i_cust_net_cnt_short
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,_L_SDID_1
            ,try_to_number(_l_sdid_cnt_1, 38, 2) as _l_sdid_cnt_1
            ,try_to_number(_l_sdid_cnt_3, 38, 2) as _l_sdid_cnt_3
            ,_L_NC_ACCT_NUM
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,_L_BRANCH_ID
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_datetime_fp_2, 38, 2) as _l_datetime_fp_2
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_score_5, 38, 2) as _l_score_5
            ,try_to_number(_l_m_l_4, 38, 2) as _l_m_l_4
            ,try_to_number(_l_m_l_c, 38, 2) as _l_m_l_c
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_acc_amt_7d, 38, 2) as _l_acc_amt_7d
            ,try_to_number(_l_adv_key_combo, 38, 2) as _l_adv_key_combo
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_days_lst_dev_js, 38, 2) as _l_days_lst_dev_js
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_ft_rat_app_inst, 38, 2) as _l_ft_rat_app_inst
            ,try_to_number(_l_hi_dead_time, 38, 2) as _l_hi_dead_time
            ,try_to_number(_l_is_active_call, 38, 2) as _l_is_active_call
            ,try_to_number(_l_is_long_sess, 38, 2) as _l_is_long_sess
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_lgn_import_anomaly, 38, 2) as _l_lgn_import_anomaly
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_mins_lst_lgn_capped, 38, 2) as _l_mins_lst_lgn_capped
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,_L_POLICY_NM
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_mob_sdk, 38, 2) as _l_sess_cnt_mob_sdk
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_n_crypto_con_n_cnt, 38, 2) as _n_crypto_con_n_cnt
            ,try_to_number(_n_crypto_pot_n_sum, 38, 2) as _n_crypto_pot_n_sum
            ,try_to_number(_n_mps_mndt_cnt_24h_1, 38, 2) as _n_mps_mndt_cnt_24h_1
            ,try_to_number(_n_mob_oth_tran_sum_1, 38, 2) as _n_mob_oth_tran_sum_1
            ,try_to_number(_n_ca_device_profile_1, 38, 2) as _n_ca_device_profile_1
            ,try_to_number(_n_ca_lgn_cnt_24h_1, 38, 2) as _n_ca_lgn_cnt_24h_1
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_id_1, 38, 2) as _n_2wp_tran_id_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,try_to_number(_n_nb_sum_tpt_4, 38, 2) as _n_nb_sum_tpt_4
            ,_N_D_D_3
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,try_to_number(_n_capp_logon_cnt_2, 38, 2) as _n_capp_logon_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_t_2, 38, 2) as _x_t_2
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_npp_out_sum_3, 38, 2) as _x_npp_out_sum_3
                FROM
                   LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
                WHERE
                    TTS_TRAN_DATE_ALT BETWEEN 20241207 AND 20250714
            ) AS B
        ON
            A.CMX_TRAN_ID = B.CMX_TRAN_ID
            AND A.TTS_TRAN_DATE_ALT = B.TTS_TRAN_DATE_ALT
    )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1528528,1528.528000,25.475467,0.424591,2X-LARGE,32,13.586912
01bdcd36-3204-a614-0000-c71d2472f092,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DIGI_SCAM_D001_V1(""DETECTION"" STRING(16777216), ""CASE_DETECTION"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TGX_TRAN_AMT"" NUMBER(14, 2), ""HOUR"" BIGINT, ""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""CATEGORY"" STRING(134217728), ""LABEL"" BIGINT, ""DTL_EX_0_20S_001"" STRING(16777216), ""FRAUDTYPE"" STRING(16777216), ""RUA_20BYTE_STRING_001"" STRING(16777216), ""_A_BTS_BIO_SE"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_NPP_INBOUND_SUM_AMT"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_DISTANCE"" NUMBER(38, 2), ""_A_GEO_LONG_1"" NUMBER(38, 2), ""_A_GEO_LONG_2"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_MULTI_CNT"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_CUST_AVG_ACCT_BAL"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_T"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_CAPP_DEREGISTARATION_CNT_3"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_2"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_DEVICE_SIM_VENDOR_RATIO_EXC"" NUMBER(38, 2), ""_A_DEVICE_SIMILAR_VENDOR_RATIO"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_CC_CASH_ADVANCE_AMT"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_ALL_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NPP_FTP_SUM"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_4"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_7"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_SHORT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_CLIENT_POSTCODE_FTP_SUM_3"" NUMBER(38, 2), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_CITY_CNT_1"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_7"" NUMBER(38, 2), ""_B_SAFE_RECIP_FRD_EXCLUDED_IND"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_BVT_NUMERIC_1"" NUMBER(38, 2), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_3"" NUMBER(38, 2), ""_I_ALL_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_NETBANK_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_L_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_SHORT"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_SDID_CNT_1"" NUMBER(38, 2), ""_L_SDID_CNT_3"" NUMBER(38, 2), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BRANCH_ID"" STRING(16777216), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_DATETIME_FP_2"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_SCORE_5"" NUMBER(38, 2), ""_L_M_L_4"" NUMBER(38, 2), ""_L_M_L_C"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_ACC_AMT_7D"" NUMBER(38, 2), ""_L_ADV_KEY_COMBO"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_JS"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_FT_RAT_APP_INST"" NUMBER(38, 2), ""_L_HI_DEAD_TIME"" NUMBER(38, 2), ""_L_IS_ACTIVE_CALL"" NUMBER(38, 2), ""_L_IS_LONG_SESS"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_LGN_IMPORT_ANOMALY"" NUMBER(38, 2), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_MINS_LST_LGN_CAPPED"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_SDK"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_N_CRYPTO_CON_N_CNT"" NUMBER(38, 2), ""_N_CRYPTO_POT_N_SUM"" NUMBER(38, 2), ""_N_MPS_MNDT_CNT_24H_1"" NUMBER(38, 2), ""_N_MOB_OTH_TRAN_SUM_1"" NUMBER(38, 2), ""_N_CA_DEVICE_PROFILE_1"" NUMBER(38, 2), ""_N_CA_LGN_CNT_24H_1"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_ID_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_NB_SUM_TPT_4"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_T_2"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_3"" NUMBER(38, 2), ""_A_BTS_MAX_SE_DT"" BIGINT, ""_A_NM_DECLINE_FLAG_DT"" BIGINT, ""_A_TELSTRA_LONG_CALL"" BIGINT, ""_A_CONFIRMED_FRAUD_DT"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_DTL_ACTIONCODE_DT_2"" BIGINT, ""_A_CRD_ACTIONCODE_DT_1"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_GEO_DT_2"" BIGINT, ""_A_DEVICEANOM_MLW_DT"" BIGINT, ""_A_CAPP_PASSWORD_CHANGE_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_2"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_SCH_DT"" BIGINT, ""_A_NPP_OUT_ALL_FTP_DT"" BIGINT, ""_A_BTS_TRF_CNT_DT"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_4_1"" BIGINT, ""_A_5_2"" BIGINT, ""_A_MTH_BTS_WDL_CNT_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP10_DT"" BIGINT, ""_A_CSE_ADD_AUTH_DT"" BIGINT, ""_A_SEC_INTER_SHOP_DT"" BIGINT, ""_A_CLIENT_LOGON_CSR"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_UA_DEVICE_DT_2"" BIGINT, ""_A_SCAMP3_MLW_DT"" BIGINT, ""_A_SCAMP7_MLW_DT"" BIGINT, ""_A_SCAMP_RULEPRIORITISED_DT"" BIGINT, ""_A_CURR_NB_BROWSER_PREV_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP3_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP4_DT"" BIGINT, ""_A_NB_BPAY_LIMIT_INCREASE_DT"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_INB_ALL_DT"" BIGINT, ""_A_NPP_OUT_DECLINE_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_INITIAL_DT"" BIGINT, ""_A_RT_DECLINE_INITIAL_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_2"" BIGINT, ""_A_RETRIEVE_STMT_DETAILS_DT"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_2"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_5"" BIGINT, ""_A_NB_BPAY_ACCT_DT_4"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_PAYID_TRANSFER_OUT"" BIGINT, ""_A_NPP_INB_OFI_PAYID_DT"" BIGINT, ""_A_NPP_OUT_CBA_PAYID_DT"" BIGINT, ""_A_CIF_ESTABLISH_DT"" BIGINT, ""_A_ECV_DOCUMENT_DT"" BIGINT, ""_A_CLIENT_PW_FORGOT"" BIGINT, ""_A_BTS_WDL_CNT_DT"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_NB_GROUP_DT_3"" BIGINT, ""_A_CLIENT_POSTCODE_DT_5"" BIGINT, ""_A_ACCT_AGG_DT"" BIGINT, ""_A_CLIENT_CITY_DATE_10"" BIGINT, ""_A_CLIENT_CITY_DATE_3"" BIGINT, ""_A_CLIENT_CITY_DATE_5"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_NPP_WHITELIST_PAYID_DT"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_NPP_OUT_CNT_DATE"" BIGINT, ""_B_BOND_CNT_DATE"" BIGINT, ""_B_BOND_SUM_DATE"" BIGINT, ""_B_HRISK_BILL_PROF_CNT_DT"" BIGINT, ""_B_RECIP_LINK_SUM_DATE"" BIGINT, ""_I_ALL_LOGONS_FDT"" BIGINT, ""_L_LST_BC_SNOOP_LOGON_DT"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_PUSH_API_DT_2"" BIGINT, ""_L_FIRST_RAT_DT"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_RAT_DT"" BIGINT, ""_N_CRYPTO_CON_DT_LST"" BIGINT, ""_N_TELSTRA_NCRG_DT"" BIGINT, ""_N_FRD_DCLN_COMMS_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_2WP_MN_FRD_RESP_BL_END_DT"" BIGINT, ""_N_2WP_TRAN_DT_1"" BIGINT, ""_N_MRISK_ISP_NCRG_DT"" BIGINT, ""_N_M100_P23_MLW_DT"" BIGINT, ""_N_D_P_C"" BIGINT, ""_N_S_1"" BIGINT, ""_N_S_3"" BIGINT, ""_N_1601_DT"" BIGINT, ""_N_A_3"" BIGINT, ""_N_G_C"" BIGINT, ""_N_NB_MEDIUM_PRIORITY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_CUST_NB_PREV_DT"" BIGINT, ""_N_UA_DEVICE_FIRST_DT_2"" BIGINT, ""_N_SCAMP3_MLW_DT"" BIGINT, ""_N_ALL_LOGON_DT"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_NB_RECIPIENT_DT_3"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON_CSR"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_LOGON_TOKEN"" BIGINT, ""_N_CLIENT_PASSWORD_TEMP"" BIGINT, ""_N_CLIENT_PW_FORGOT"" BIGINT, ""_N_CLIENT_QA_CHG"" BIGINT, ""_N_CLIENT_UNLOCK"" BIGINT, ""_X_NPP_OUT_CNT_DATE"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            A.DETECTION,
            A.CASE_DETECTION,
            B.TTS_TRAN_DATE_ALT,
            B.TGX_TRAN_AMT,
            TRY_CAST(SUBSTR(B.TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            A.CMX_TRAN_ID
, A.SSX_CUST_NUM
, A.CATEGORY
, A.LABEL
, A.DTL_EX_0_20S_001
, A.FRAUDTYPE
, A.RUA_20BYTE_STRING_001,
            B._A_BTS_BIO_SE
, B._A_BTS_BNFT
, B._A_NPP_INB_PMT_VAL
, B._A_PROF_RISK_IND
, B._A_CUST_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_2
, B._A_NPP_INBOUND_SUM_AMT
, B._A_TELSTRA_ACTIVE_CALL
, B._A_TELSTRA_API_EVENT_ID
, B._A_TELSTRA_EXISTING_RELATION
, B._A_LATEST_NCRG_ISP
, B._A_GEO_DISTANCE
, B._A_GEO_LONG_1
, B._A_GEO_LONG_2
, B._A_P_N_H
, B._A_MULTI_CNT
, B._A_CRD_SCAM_SUPP_7D_SUM_1
, B._A_BTS_CUST_AGE
, B._A_P_L_1
, B._A_P_L_C
, B._A_CRD_NPP_PAYMENT_AMOUNT
, B._A_CURR_CAPP_DEVICE_NFTP_CNT
, B._A_2WAY_TYPE
, B._A_CUST_ACCT_BAL
, B._A_CUST_AVG_ACCT_BAL
, B._A_R
, B._A_T
, B._A_U
, B._A_CAPP_DEREGISTARATION_CNT_3
, B._A_CAPP_LOGON_CNT_2
, B._A_CAPP_LOGON_CNT_3
, B._A_NB_LOGONS_CNT_2
, B._A_NB_LOGONS_CNT_3
, B._A_CUST_BROWSER_CNT_3
, B._A_CUST_BROWSER_VER
, B._A_CUST_OS_NAME
, B._A_CUST_OS_VER
, B._A_CURR_NB_BROWSER_CNT
, B._A_DEVICE_SIM_VENDOR_RATIO_EXC
, B._A_DEVICE_SIMILAR_VENDOR_RATIO
, B._A_CIF_ESTABLISH_CUST_PCODE
, B._A_LIST_RL1_SCAM_CUST_CIF
, B._A_PREV_CAPP_DEVICE_CNT
, B._A_PROF_CAPP_DEVICE_CNT_1
, B._A_CC_CASH_ADVANCE_AMT
, B._A_MRISK_FOREIGN_IP_CNTRY_CODE
, B._A_ALL_BPAY_ACCT_2
, B._A_ALL_BPAY_ACCT_SUM_1
, B._A_ALL_BPAY_ACCT_SUM_3
, B._A_NB_BPAY_ACCT_SUM_1
, B._A_NB_BPAY_ACCT_SUM_3
, B._A_NPP_FTP_SUM
, B._A_CUST_NPP_OUT_SUM_AAA_1
, B._A_CUST_NPP_OUT_SUM_AAA_2
, B._A_CUST_NPP_OUT_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_4
, B._A_CUST_SUM_AAA_7
, B._A_CUST_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_SHORT
, B._A_CIF_ESTABLISH_CHANNEL
, B._A_ECV_DOCUMENT_IP
, B._A_CLIENT_POSTCODE_FTP_SUM_3
, B._A_BTS_BCH_SUM
, B._A_MONTHLY_TRANSFER_COUNT_2
, B._A_MONTHLY_TRANSFER_COUNT_3
, B._A_MONTHLY_TRANSFER_COUNT_4
, B._A_MONTHLY_TRANSFER_SUM_4
, B._A_CLIENT_CITY_10
, B._A_CLIENT_CITY_6
, B._A_CLIENT_CITY_CNT_1
, B._A_CLIENT_COUNTRY_1
, B._A_CLIENT_COUNTRY_8
, B._A_CLIENT_COUNTRY_CNT_3
, B._A_CLIENT_COUNTRY_CNT_7
, B._B_SAFE_RECIP_FRD_EXCLUDED_IND
, B._B_RECIP_PROFILE_GLOB_ERROR
, B._B_BVT_NUMERIC_1
, B._B_RECIP_SUM_TODAY
, B._B_CRYPTO_RISK
, B._B_OPEN_LAST_PAYER_CIF_10
, B._B_RECIP_SUM_AAA_1
, B._B_RECIP_SUM_AAA_2
, B._B_RECIP_SUM_AAA_LONG
, B._B_CLIENT_POSTCODE_1
, B._B_CLIENT_POSTCODE_2
, B._B_CLIENT_POSTCODE_3
, B._B_CLIENT_POSTCODE_CNT_1
, B._B_CLIENT_POSTCODE_CNT_2
, B._B_CLIENT_POSTCODE_SUM_1
, B._B_CLIENT_POSTCODE_SUM_2
, B._B_CLIENT_POSTCODE_SUM_3
, B._B_CLIENT_POSTCODE_SUM_5
, B._B_RECIP_SUM_1
, B._I_CUST_TRAN_SUM_3
, B._I_ALL_LOGONS_CNT_1
, B._I_ALL_LOGONS_PERC_1
, B._I_ALL_LOGONS_PERC_3M
, B._I_CAPP_LOGONS_CNT_1
, B._I_CAPP_LOGONS_CNT_3M
, B._I_CAPP_LOGONS_PERC_1
, B._I_NETBANK_LOGONS_CNT_1
, B._I_CUST_NET_L_CNT_1
, B._I_CUST_NET_CNT_1
, B._I_CUST_NET_CNT_SHORT
, B._L_PAYTO_MANDATE_ID
, B._L_PUSH_API_1
, B._L_PUSH_API_2
, B._L_PUSH_API_3
, B._L_PUSH_API_4
, B._L_BC_CONTEXT
, B._L_MUID_AGE_PER_USER
, B._L_SDID_1
, B._L_SDID_CNT_1
, B._L_SDID_CNT_3
, B._L_NC_ACCT_NUM
, B._L_NC_RESPONSE_CODE
, B._L_NC_WINNING_ALG
, B._L_BRANCH_ID
, B._L_PMT_AMT
, B._L_PMT_DESCR
, B._L_SE_SCORE
, B._L_SE_SESS_CNT
, B._L_DATETIME_FP_2
, B._L_FINGERPRINT_1
, B._L_FINGERPRINT_2
, B._L_FINGERPRINT_3
, B._L_FINGERPRINT_4
, B._L_FINGERPRINT_5
, B._L_SCORE_1
, B._L_SCORE_2
, B._L_SCORE_3
, B._L_SCORE_5
, B._L_M_L_4
, B._L_M_L_C
, B._L_BC_SESS_CNT
, B._L_ACC_AMT_1D
, B._L_ACC_AMT_1H
, B._L_ACC_AMT_7D
, B._L_ADV_KEY_COMBO
, B._L_AND_ID_AGE
, B._L_DAYS_LST_DEV_JS
, B._L_DEV_FAM
, B._L_DEV_FAM_AGE
, B._L_FT_RAT_APP_INST
, B._L_HI_DEAD_TIME
, B._L_IS_ACTIVE_CALL
, B._L_IS_LONG_SESS
, B._L_LANG_1
, B._L_LANG_2
, B._L_LANG_3
, B._L_LGN_IMPORT_ANOMALY
, B._L_MAX_30D_SCORE
, B._L_MINS_LST_LGN_CAPPED
, B._L_NUM_SESS_2H
, B._L_NUM_SESS_4H
, B._L_POLICY_NM
, B._L_PROXY_TYPE
, B._L_SCRN_H
, B._L_SESS_CNT_MOB_BROWSER
, B._L_SESS_CNT_MOB_SDK
, B._L_SESS_CNT_WEB
, B._L_TAP_CNT
, B._L_TOUCH_CNT
, B._N_CRYPTO_CON_N_CNT
, B._N_CRYPTO_POT_N_SUM
, B._N_MPS_MNDT_CNT_24H_1
, B._N_MOB_OTH_TRAN_SUM_1
, B._N_CA_DEVICE_PROFILE_1
, B._N_CA_LGN_CNT_24H_1
, B._N_NMCHK_RECIP_CNT_1
, B._N_2WP_TRAN_ID_1
, B._N_CA_DEV_BL_FLAG_2
, B._N_CUST_TXN_COUNT
, B._N_NB_RECIPIENT_AMT_1
, B._N_NB_RECIPIENT_AMT_3
, B._N_NB_SUM_TPT_4
, B._N_D_D_3
, B._N_CUST_NB_DEVICE_CNT
, B._N_CAPP_LINKED_CNT_1
, B._N_CAPP_LINKED_CNT_2
, B._N_CAPP_LOGON_CNT_2
, B._N_ESTAB_SCHEDULE_2
, B._N_LOG_SCR_CONS_2
, B._N_LINKED_RECIP
, B._N_CLIENT_IDCHNG_NB
, B._N_CLIENT_NEW_PAYEE_1
, B._N_CLIENT_NEW_PAYEE_2
, B._N_CLIENT_NEW_PAYEE_3
, B._X_CIF_SENDER_CNT
, B._X_NAME_MATCH_CNT
, B._X_LAST_N_TXN_COUNT
, B._X_T_2
, B._X_T_5
, B._X_NPP_OUT_SUM_3,
            B._A_BTS_MAX_SE_DT
, B._A_NM_DECLINE_FLAG_DT
, B._A_TELSTRA_LONG_CALL
, B._A_CONFIRMED_FRAUD_DT
, B._A_DTL_ACTIONCODE_DT_1
, B._A_DTL_ACTIONCODE_DT_2
, B._A_CRD_ACTIONCODE_DT_1
, B._A_NPP_INBOUND_DATETIME
, B._A_GEO_DT_2
, B._A_DEVICEANOM_MLW_DT
, B._A_CAPP_PASSWORD_CHANGE_DT
, B._A_CD_RTR_DT_1
, B._A_CD_RTR_DT_2
, B._A_IVR_LOGON_DT
, B._A_SCH_DT
, B._A_NPP_OUT_ALL_FTP_DT
, B._A_BTS_TRF_CNT_DT
, B._A_CAPP_DEV_RETR_DT
, B._A_4_1
, B._A_5_2
, B._A_MTH_BTS_WDL_CNT_DT
, B._A_REVERSE_IND_SCAMP10_DT
, B._A_CSE_ADD_AUTH_DT
, B._A_SEC_INTER_SHOP_DT
, B._A_CLIENT_LOGON_CSR
, B._A_DTL_CAPP_NBANK_SSO_DT
, B._A_CLIENT_DETAILS_VIEW
, B._A_MANUAL_NB_LOCK_DT
, B._A_CUST_BROWSER_PREV_DT_2
, B._A_UA_DEVICE_DT_2
, B._A_SCAMP3_MLW_DT
, B._A_SCAMP7_MLW_DT
, B._A_SCAMP_RULEPRIORITISED_DT
, B._A_CURR_NB_BROWSER_PREV_DT
, B._A_REVERSE_IND_SCAMP3_DT
, B._A_REVERSE_IND_SCAMP4_DT
, B._A_NB_BPAY_LIMIT_INCREASE_DT
, B._A_NPP_OUT_PAYID_DT
, B._A_NPP_INB_ALL_DT
, B._A_NPP_OUT_DECLINE_COMMSEE_DT
, B._A_NPP_OUT_HOLD_COMMSEE_DT
, B._A_NPP_OUT_HOLD_INITIAL_DT
, B._A_RT_DECLINE_INITIAL_DT
, B._A_PROF_CAPP_DEVICE_DT_2
, B._A_RETRIEVE_STMT_DETAILS_DT
, B._A_CAPP_REGO_DT
, B._A_ALL_BPAY_ACCT_DT_2
, B._A_ALL_BPAY_ACCT_DT_5
, B._A_NB_BPAY_ACCT_DT_4
, B._A_NB_BPAY_ACCT_FTP_DT_1
, B._A_NPP_PAYID_TRANSFER_OUT
, B._A_NPP_INB_OFI_PAYID_DT
, B._A_NPP_OUT_CBA_PAYID_DT
, B._A_CIF_ESTABLISH_DT
, B._A_ECV_DOCUMENT_DT
, B._A_CLIENT_PW_FORGOT
, B._A_BTS_WDL_CNT_DT
, B._A_NB_GROUP_DT_2
, B._A_NB_GROUP_DT_3
, B._A_CLIENT_POSTCODE_DT_5
, B._A_ACCT_AGG_DT
, B._A_CLIENT_CITY_DATE_10
, B._A_CLIENT_CITY_DATE_3
, B._A_CLIENT_CITY_DATE_5
, B._A_CLIENT_COUNTRY_DATE_1
, B._B_NPP_WHITELIST_PAYID_DT
, B._B_NPP_WHITELIST_SENDER_DT
, B._B_ANY_CUST_FTP_DT
, B._B_NPP_OUT_CNT_DATE
, B._B_BOND_CNT_DATE
, B._B_BOND_SUM_DATE
, B._B_HRISK_BILL_PROF_CNT_DT
, B._B_RECIP_LINK_SUM_DATE
, B._I_ALL_LOGONS_FDT
, B._L_LST_BC_SNOOP_LOGON_DT
, B._L_PUSH_API_DT_1
, B._L_PUSH_API_DT_2
, B._L_FIRST_RAT_DT
, B._L_M_F_2
, B._L_M_F_C
, B._L_IS_RAT_DT
, B._N_CRYPTO_CON_DT_LST
, B._N_TELSTRA_NCRG_DT
, B._N_FRD_DCLN_COMMS_DT
, B._N_2WP_SNT_TRAN_HOLD_END_DT
, B._N_2WP_MN_FRD_RESP_BL_END_DT
, B._N_2WP_TRAN_DT_1
, B._N_MRISK_ISP_NCRG_DT
, B._N_M100_P23_MLW_DT
, B._N_D_P_C
, B._N_S_1
, B._N_S_3
, B._N_1601_DT
, B._N_A_3
, B._N_G_C
, B._N_NB_MEDIUM_PRIORITY_FIRE
, B._N_CUST_BROWSER_FIRST_DT_2
, B._N_CUST_NB_PREV_DT
, B._N_UA_DEVICE_FIRST_DT_2
, B._N_SCAMP3_MLW_DT
, B._N_ALL_LOGON_DT
, B._N_MALWARE_DT
, B._N_NB_RECIPIENT_DT_3
, B._N_CAPP_REG_DT_2
, B._N_CLIENT_IDTO_PW
, B._N_CLIENT_LOGON_CSR
, B._N_CLIENT_LOGON_FINEST
, B._N_CLIENT_LOGON_TOKEN
, B._N_CLIENT_PASSWORD_TEMP
, B._N_CLIENT_PW_FORGOT
, B._N_CLIENT_QA_CHG
, B._N_CLIENT_UNLOCK
, B._X_NPP_OUT_CNT_DATE
        FROM
            LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_TEMP_DIGI_SCAM_D001_V1 AS A
            INNER JOIN (
               SELECT
                   TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
                   TTS_TRAN_DATE_ALT, 
                   TTS_TRAN_TIME_ALT,
                   TRY_CAST(TGX_TRAN_AMT AS DECIMAL(14,2)) AS TGX_TRAN_AMT,
                   	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_MAX_SE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NM_DECLINE_FLAG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00'))
            END as _A_TELSTRA_LONG_CALL
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CONFIRMED_FRAUD_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_GEO_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DEVICEANOM_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_PASSWORD_CHANGE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_ALL_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_TRF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_4_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MTH_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP10_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CSE_ADD_AUTH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SEC_INTER_SHOP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP7_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP_RULEPRIORITISED_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CURR_NB_BROWSER_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP3_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP4_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_LIMIT_INCREASE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_DECLINE_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RT_DECLINE_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RETRIEVE_STMT_DETAILS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_PAYID_TRANSFER_OUT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_OFI_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_CBA_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CIF_ESTABLISH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ECV_DOCUMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ACCT_AGG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_10
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_HRISK_BILL_PROF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_RECIP_LINK_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00'))
            END as _I_ALL_LOGONS_FDT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_LST_BC_SNOOP_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_FIRST_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CRYPTO_CON_DT_LST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_TELSTRA_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_FRD_DCLN_COMMS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_MN_FRD_RESP_BL_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_TRAN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MRISK_ISP_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_M100_P23_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_D_P_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1601_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_A_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_G_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_MEDIUM_PRIORITY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_UA_DEVICE_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_ALL_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_RECIPIENT_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_TOKEN
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PASSWORD_TEMP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_QA_CHG
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_UNLOCK
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _X_NPP_OUT_CNT_DATE
        
                   ,             try_to_number(_a_bts_bio_se, 38, 2) as _a_bts_bio_se
            ,_A_BTS_BNFT
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,try_to_number(_a_npp_inbound_sum_amt, 38, 2) as _a_npp_inbound_sum_amt
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_distance, 38, 2) as _a_geo_distance
            ,try_to_number(_a_geo_long_1, 38, 2) as _a_geo_long_1
            ,try_to_number(_a_geo_long_2, 38, 2) as _a_geo_long_2
            ,_A_P_N_H
            ,try_to_number(_a_multi_cnt, 38, 2) as _a_multi_cnt
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_cust_avg_acct_bal, 38, 2) as _a_cust_avg_acct_bal
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_t, 38, 2) as _a_t
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_capp_deregistaration_cnt_3, 38, 2) as _a_capp_deregistaration_cnt_3
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_nb_logons_cnt_2, 38, 2) as _a_nb_logons_cnt_2
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,try_to_number(_a_cust_browser_cnt_3, 38, 2) as _a_cust_browser_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,try_to_number(_a_device_sim_vendor_ratio_exc, 38, 2) as _a_device_sim_vendor_ratio_exc
            ,try_to_number(_a_device_similar_vendor_ratio, 38, 2) as _a_device_similar_vendor_ratio
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,try_to_number(_a_prev_capp_device_cnt, 38, 2) as _a_prev_capp_device_cnt
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,try_to_number(_a_cc_cash_advance_amt, 38, 2) as _a_cc_cash_advance_amt
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_all_bpay_acct_sum_3, 38, 2) as _a_all_bpay_acct_sum_3
            ,try_to_number(_a_nb_bpay_acct_sum_1, 38, 2) as _a_nb_bpay_acct_sum_1
            ,try_to_number(_a_nb_bpay_acct_sum_3, 38, 2) as _a_nb_bpay_acct_sum_3
            ,try_to_number(_a_npp_ftp_sum, 38, 2) as _a_npp_ftp_sum
            ,try_to_number(_a_cust_npp_out_sum_aaa_1, 38, 2) as _a_cust_npp_out_sum_aaa_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_4, 38, 2) as _a_cust_sum_aaa_4
            ,try_to_number(_a_cust_sum_aaa_7, 38, 2) as _a_cust_sum_aaa_7
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_short, 38, 2) as _a_cust_sum_aaa_short
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_client_postcode_ftp_sum_3, 38, 2) as _a_client_postcode_ftp_sum_3
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,try_to_number(_a_client_city_cnt_1, 38, 2) as _a_client_city_cnt_1
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_a_client_country_cnt_7, 38, 2) as _a_client_country_cnt_7
            ,try_to_number(_b_safe_recip_frd_excluded_ind, 38, 2) as _b_safe_recip_frd_excluded_ind
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_bvt_numeric_1, 38, 2) as _b_bvt_numeric_1
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_cust_tran_sum_3, 38, 2) as _i_cust_tran_sum_3
            ,try_to_number(_i_all_logons_cnt_1, 38, 2) as _i_all_logons_cnt_1
            ,try_to_number(_i_all_logons_perc_1, 38, 2) as _i_all_logons_perc_1
            ,try_to_number(_i_all_logons_perc_3m, 38, 2) as _i_all_logons_perc_3m
            ,try_to_number(_i_capp_logons_cnt_1, 38, 2) as _i_capp_logons_cnt_1
            ,try_to_number(_i_capp_logons_cnt_3m, 38, 2) as _i_capp_logons_cnt_3m
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,try_to_number(_i_netbank_logons_cnt_1, 38, 2) as _i_netbank_logons_cnt_1
            ,try_to_number(_i_cust_net_l_cnt_1, 38, 2) as _i_cust_net_l_cnt_1
            ,try_to_number(_i_cust_net_cnt_1, 38, 2) as _i_cust_net_cnt_1
            ,try_to_number(_i_cust_net_cnt_short, 38, 2) as _i_cust_net_cnt_short
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,_L_SDID_1
            ,try_to_number(_l_sdid_cnt_1, 38, 2) as _l_sdid_cnt_1
            ,try_to_number(_l_sdid_cnt_3, 38, 2) as _l_sdid_cnt_3
            ,_L_NC_ACCT_NUM
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,_L_BRANCH_ID
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_datetime_fp_2, 38, 2) as _l_datetime_fp_2
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_score_5, 38, 2) as _l_score_5
            ,try_to_number(_l_m_l_4, 38, 2) as _l_m_l_4
            ,try_to_number(_l_m_l_c, 38, 2) as _l_m_l_c
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_acc_amt_7d, 38, 2) as _l_acc_amt_7d
            ,try_to_number(_l_adv_key_combo, 38, 2) as _l_adv_key_combo
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_days_lst_dev_js, 38, 2) as _l_days_lst_dev_js
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_ft_rat_app_inst, 38, 2) as _l_ft_rat_app_inst
            ,try_to_number(_l_hi_dead_time, 38, 2) as _l_hi_dead_time
            ,try_to_number(_l_is_active_call, 38, 2) as _l_is_active_call
            ,try_to_number(_l_is_long_sess, 38, 2) as _l_is_long_sess
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_lgn_import_anomaly, 38, 2) as _l_lgn_import_anomaly
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_mins_lst_lgn_capped, 38, 2) as _l_mins_lst_lgn_capped
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,_L_POLICY_NM
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_mob_sdk, 38, 2) as _l_sess_cnt_mob_sdk
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_n_crypto_con_n_cnt, 38, 2) as _n_crypto_con_n_cnt
            ,try_to_number(_n_crypto_pot_n_sum, 38, 2) as _n_crypto_pot_n_sum
            ,try_to_number(_n_mps_mndt_cnt_24h_1, 38, 2) as _n_mps_mndt_cnt_24h_1
            ,try_to_number(_n_mob_oth_tran_sum_1, 38, 2) as _n_mob_oth_tran_sum_1
            ,try_to_number(_n_ca_device_profile_1, 38, 2) as _n_ca_device_profile_1
            ,try_to_number(_n_ca_lgn_cnt_24h_1, 38, 2) as _n_ca_lgn_cnt_24h_1
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_id_1, 38, 2) as _n_2wp_tran_id_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,try_to_number(_n_nb_sum_tpt_4, 38, 2) as _n_nb_sum_tpt_4
            ,_N_D_D_3
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,try_to_number(_n_capp_logon_cnt_2, 38, 2) as _n_capp_logon_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_t_2, 38, 2) as _x_t_2
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_npp_out_sum_3, 38, 2) as _x_npp_out_sum_3
                FROM
                   LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
                WHERE
                    TTS_TRAN_DATE_ALT BETWEEN 20241207 AND 20250714
            ) AS B
        ON
            A.CMX_TRAN_ID = B.CMX_TRAN_ID
            AND A.TTS_TRAN_DATE_ALT = B.TTS_TRAN_DATE_ALT
    )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1523531,1523.531000,25.392183,0.423203,2X-LARGE,32,13.542496
01bee6cd-3204-c554-0000-c71d2cd5f7f6,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-32
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,1512939,1512.939000,25.215650,0.420261,2X-LARGE,32,13.448352
01bee6ec-3204-c557-0000-c71d2cd63c1a,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-32
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,1503621,1503.621000,25.060350,0.417673,2X-LARGE,32,13.365536
01bee70a-3204-c557-0000-c71d2cd7d5d2,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-32
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,1496683,1496.683000,24.944717,0.415745,2X-LARGE,32,13.303840
01be908c-3204-bee4-0000-c71d2a3ad472,"WITH cleaned_recipient_data AS (
    -- Clean and prepare recipient transaction data for LAST 6 MONTHS
    SELECT
        TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
        TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
        (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
        CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
        dtl_ex_0_20s_001,
        SSX_CUST_NUM,
        TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS transaction_date,
        -- Extract hour from timestamp
        EXTRACT(HOUR FROM TRY_TO_TIMESTAMP(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF')) as C_hour,
        
        -- Day features from SSX_SNAP_D (DATE)
        DAYOFWEEK(TRANSACTIONDATETIME) as C_day_of_week,
        DAY(SSX_SNAP_D) as C_day_of_month,
        MONTH(SSX_SNAP_D) as C_month_of_year,
        -- Clean transaction amount
        -- CASE
        --     WHEN TGX_TRAN_AMT IS NULL OR TGX_TRAN_AMT = '' OR TGX_TRAN_AMT = ' ' THEN NULL
        --     ELSE TRY_CAST(TGX_TRAN_AMT AS DECIMAL(18,2))
        -- END AS clean_transaction_amount,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_SCAM_VICTIM_FLAG, '[^0-9.-]', '')), -1) as _A_SCAM_VICTIM_FLAG,
        -- Primary risk indicator y
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,
        -- Blacklist and scam indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_acct,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl1_scam_tp_cif, '[^0-9.-]', '')), -1) as _b_list_rl1_scam_tp_cif,
        -- High-risk biller metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_1,
        -- NPP blacklist flags
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_recip_flag,
        -- NPP outbound transaction metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_sum_1,
        -- NPP first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_2,
        -- NPP watchlist flags
        -- Other risk indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_open_listed_last_cif_2, '[^0-9.-]', '')), -1) as _b_open_listed_last_cif_2,
        -- Recipient first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_long, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_long,
        -- Recipient link sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_short,
        -- Recipient transaction sums (various time periods)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_4, '[^0-9.-]', '')), -1) as _b_recip_sum_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_7, '[^0-9.-]', '')), -1) as _b_recip_sum_7,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_today, '[^0-9.-]', '')), -1) as _b_recip_sum_today,
        -- Recipient AAA transaction sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_1, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_4, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_short,
        -- Fixed: _b_rfm_whitelist_ind (was incorrectly aliased)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_rfm_whitelist_ind, '[^0-9.-]', '')), -1) as _b_rfm_whitelist_ind,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_1d_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_1d_out,

        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(RSP_ACTION_CODE, '[^0-9.-]', '')), -1) as RSP_ACTION_CODE,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_apps, '[^0-9.-]', '')), -1) as _l_risky_apps,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_browser, '[^0-9.-]', '')), -1) as _l_risky_browser,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_accel_event_cnt, '[^0-9.-]', '')), -1) as _l_accel_event_cnt,
        COALESCE(CAST(_l_recip_ftp AS VARCHAR(50)), '-1') as _l_recip_ftp,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_amt, '[^0-9.-]', '')), -1) as _l_risky_amt,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_tzone_mismatch, '[^0-9.-]', '')), -1) as _l_tzone_mismatch,

        -- Original features
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_REGISTRATIONS_CNT_1, '[^0-9.-]', '')), -1) as _A_CAPP_REGISTRATIONS_CNT_1,   
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_LOGON_CNT_1, '[^0-9.-]', '')), -1) as _A_CAPP_LOGON_CNT_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_REGO_1D_IND, '[^0-9.-]', '')), -1) as _A_CAPP_REGO_1D_IND,
        
        -- Clean transaction amount
        -- CASE
        --     WHEN TGX_TRAN_AMT IS NULL OR TGX_TRAN_AMT = '' OR TGX_TRAN_AMT = ' ' THEN NULL
        --     ELSE TRY_CAST(TGX_TRAN_AMT AS DECIMAL(18,2))
        -- END AS clean_transaction_amount,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(RSP_ACTION_CODE, '[^0-9.-]', '')), -1) as RSP_ACTION_CODE,
        -- Original TGX_TRAN_AMT for backward compatibility
        COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TGX_TRAN_AMT,
        
        -- Primary risk indicators
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_SCAM_VICTIM_FLAG, '[^0-9.-]', '')), -1) as _A_SCAM_VICTIM_FLAG,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,

        
    FROM LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
    WHERE SSX_SNAP_D >= '2024-09-20'
        AND SSX_SNAP_D < '2025-07-17'
        AND HDR_SOURCE = 'NPP OUT'
        AND TGX_BANK_NUM <> ''
        AND TGX_BRANCH_ID <> ''
        AND TGX_ACCT_NUM <> ''
),

-- Calculate daily aggregates
daily_aggregates AS (
    SELECT
        NPP.RCPI_ACCT_I,
        NPP.SSX_SNAP_D,
        
        -- Original aggregates
        MAX(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS MAX_SEND_CAPP_REGR_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS TOTL_SEND_CAPP_REGR_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_CAPP_REGR_Q,
        
        MIN(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MIN_SEND_CAPP_LOGN_Q,
        MAX(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MAX_SEND_CAPP_LOGN_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS TOTL_SEND_CAPP_LOGN_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_CAPP_LOGN_Q,
        
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGO_1D_IND) = '' OR TRIM(NPP._A_CAPP_REGO_1D_IND) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGO_1D_IND) END) AS TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_CAPP_REGO_1D_IND) = '' OR TRIM(NPP._A_CAPP_REGO_1D_IND) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_NEW_CAPP_REGR_1D_INDA_Q,
        
        MAX(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS MAX_SEND_SCAM_VCTM_Q,
        SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS TOTL_SEND_SCAM_VCTM_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_SCAM_VCTM_FLAG_Q,
        
        MIN(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MIN_FNCL_TRAN_A,
        MAX(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN -9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MAX_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS TOTL_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE 1 END) AS CNT_FNCL_TRAN_AMT_Q,
        
        -- Unique sender count
        COUNT(DISTINCT NPP.SSX_CUST_NUM) AS UNIQUE_SENDERS_DAILY,
        
        -- Transaction count and sum for calculations
        COUNT(*) AS DAILY_TRANSACTION_COUNT,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS DAILY_TRANSACTION_SUM,
        
        -- NEW: Risk indicator aggregations
        MAX(NPP._b_crypto_risk) AS MAX_CRYPTO_RISK_DAILY,
        
        
    FROM cleaned_recipient_data NPP    
    GROUP BY NPP.RCPI_ACCT_I, NPP.SSX_SNAP_D
),

-- Calculate SEPARATE window patterns
pattern_features AS (
    SELECT *,
        -- Account history sufficiency check
        COUNT(*) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
        ) AS HISTORICAL_DAYS_AVAILABLE,
        
        -- New account flags
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) = 0 THEN 1 ELSE 0
        END AS IS_NEW_ACCOUNT_FLAG,
        
        DATEDIFF('day', 
            MIN(SSX_SNAP_D) OVER (PARTITION BY RCPI_ACCT_I),
            SSX_SNAP_D
        ) AS DAYS_SINCE_FIRST_TRANSACTION,
        
        -- PATTERN 1: 7-DAY HISTORICAL LOOKBACK (excluding current day)
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3  -- At least 3 days of history
            THEN AVG(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) 
            ELSE 0
        END AS AVG_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN SUM(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS ACTIVE_DAYS_7D_HISTORICAL,
        
        -- PATTERN 2: CURRENT DAY + 1 FOLLOWING DAY (2-day forward pattern)
        AVG(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
        
        AVG(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        SUM(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        AVG(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        MAX(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_TRANSACTIONS_CURRENT_PLUS_1D,
        
        MAX(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS ACTIVE_DAYS_CURRENT_PLUS_1D
        
    FROM daily_aggregates
),

-- Final output with BOTH pattern types
recipient_aggregates as (SELECT
    RCPI_ACCT_I,
    SSX_SNAP_D,
    MAX_SEND_CAPP_REGR_Q,
    TOTL_SEND_CAPP_REGR_Q,
    -- CNT_SEND_CAPP_REGR_Q,
    MIN_SEND_CAPP_LOGN_Q,
    MAX_SEND_CAPP_LOGN_Q,
    TOTL_SEND_CAPP_LOGN_Q,
    -- CNT_SEND_CAPP_LOGN_Q,
    TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
    -- CNT_SEND_NEW_CAPP_REGR_1D_INDA_Q,
    MAX_SEND_SCAM_VCTM_Q,
    TOTL_SEND_SCAM_VCTM_Q,
    -- CNT_SEND_SCAM_VCTM_FLAG_Q,
    MIN_FNCL_TRAN_A,
    MAX_FNCL_TRAN_A,
    TOTL_FNCL_TRAN_A,
    CNT_FNCL_TRAN_AMT_Q,
    
     -- Current day metrics
    UNIQUE_SENDERS_DAILY,
    ROUND(UNIQUE_SENDERS_DAILY::DECIMAL / NULLIF(DAILY_TRANSACTION_COUNT, 0), 3) AS SENDER_DIVERSITY_RATIO_DAILY,
    DAILY_TRANSACTION_COUNT,
    ROUND(DAILY_TRANSACTION_SUM, 2) AS DAILY_TRANSACTION_SUM,
    
    -- Account history indicators
    IS_NEW_ACCOUNT_FLAG,
    DAYS_SINCE_FIRST_TRANSACTION,
    HISTORICAL_DAYS_AVAILABLE,
    
    -- 7-day historical features (0 for accounts without history)
    ROUND(AVG_TRANSACTIONS_7D_HISTORICAL, 2) AS AVG_TRANSACTIONS_7D_HISTORICAL,
    ROUND(AVG_UNIQUE_SENDERS_7D_HISTORICAL, 2) AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
    ROUND(TOTAL_TRANSACTION_SUM_7D_HISTORICAL, 2) AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
    ROUND(AVG_TRANSACTION_SUM_7D_HISTORICAL, 2) AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
    
    -- Current + 1 day forward features
    ROUND(AVG_TRANSACTIONS_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
    ROUND(AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D, 2) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
    ROUND(TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
    ROUND(AVG_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D
FROM pattern_features
)

-- Final result: Transaction-level data with recipient features
SELECT 
    r.*,  -- All transaction-level columns
    -- Recipient aggregated features
    ra.*
    
FROM cleaned_recipient_data r
LEFT JOIN recipient_aggregates ra ON r.RCPI_ACCT_I = ra.RCPI_ACCT_I
and r.SSX_SNAP_D = ra.SSX_SNAP_D

",DEHURYSK,PUBLIC,1485623,1485.623000,24.760383,0.412673,2X-LARGE,32,13.205536
01bdeb4b-3204-aa1f-0000-c71d254d1a02,"create or replace table toby_cards as

with pre_toby as(
    SELECT DISTINCT 
    'CARD' AS CHANNEL,
    --ACTIONTAKEN
    --CARDNUMBER
    --CASENUMBER
    --FRAUDTYPE
    concat(to_decimal(dtl_ex_0_n_064),dtl_ex_0_n_065,dtl_ex_0_n_066) as id_key, --CMX_TRAN_ID REPLACEMENT
    SSX_CUST_NUM as CUSTOMER_ID, --XQO_CUST_NUM
    ssx_cust_post_code, --XQO_CUST_POST_CODE
    CHL_ID_CARD_NUM, --HQO_CARD_NUM
    TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TTS_TRAN_DATE_ALT,
    TTS_TRAN_TIME_ALT,
    CHL_CT_MER_MCC, --TRANSACTIONDATETIME
    CHL_CT_TERM_OWNER_ID, --hct_term_owner_id
    CHL_CT_TERM_OWNER_NAME, --HCT_TERM_OWNER_NAME
    CHL_CT_TERM_ID, --HCT_TERM_ID
    chl_ct_term_cntry_code, --hct_term_cntry_code
    dtl_ca_client_amt, --TCA_client_amt
    dtl_ca_cash_back_amt, --TCA_cash_back_amt
    dtl_ca_auth_sys_dec, --TCA_auth_sys_dec
    dtl_ca_auth_sys_info, --TCA_auth_sys_info
    dtl_ca_reversal_ind, --TCA_reversal_ind
    RSP_ACTION_CODE, --RRR_ACTION_CODE
    dtl_ex_0_3s_002 AS SLI, --RUA_3BYTE_STRING_002
    UPPER(SUBSTR(dtl_ex_0_3s_002,1,2)) AS AAV, --DUA_80BYTE_STRING_003
    ath_pc_pos AS POS_ENTRY, --ucm_pos
    chl_ct_media, --hct_media
    dtl_ex_0_20s_004 AS DPAN, --RUA_20BYTE_STRING_004
    dtl_ex_3_20s_004 AS WALLET_ID, --DUA_20BYTE_STRING_004
    dtl_ex_3_20s_001 AS TRID, --DUA_20BYTE_STRING_001
    dtl_ex_3_8s_001 AS ISSUE_DATE, --DUA_8BYTE_STRING_001
    ATH_PC_PIN_VRFY AS PIN_VERIFIED, --UCM_PIN_VRFY
    --CQF_RULE_C_ID
    rsp_ex_2_8s_001, --rur_8byte_string_001
    rsp_ex_2_8s_004, --rur_8byte_string_004
    _C_CRD_SAFE_MERCHANT,
    rsp_ex_2_i_009 AS RSP_CODE_2WP,
    _A_2WP_NO_CNT, --RELATED TO 2WP
    _C_2WP_FRAUD_DEC_ALL_DT,--RELATED TO 2WP
    _C_2WP_HR_NO_RESP_DT_1,--RELATED TO 2WP
    _C_2WP_NO_RESP_DT_1,--RELATED TO 2WP
     LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_ERR_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_ERROR, /* 2wp error */
    -- LAG(_C_2WDWP_ERR_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_ERROR, /* 2wp error */
    -- LAG(_C_2WDWP_DISMISS_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_DISMISS_NOTIFICATION, /* 2wp dismiss notification */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_DISMISS_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_DISMISS_NOTIFICATION, /* 2wp dismiss notification */
    
    -- LAG(_C_2WDWP_NRP_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_NO_RESPONSE, /* 2wp no response */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_NRP_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_NO_RESPONSE, /* 2wp no response */
    
    -- LAG(_C_2WDWP_FRD_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_FRAUD_RESPONSE, /* 2wp fraud response */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_FRD_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_FRAUD_RESPONSE, /* 2wp fraud response */
   
    -- LAG(_C_2WDWP_GEN_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_GENUINE_RESPONSE, /* 2wp genuine response */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_GEN_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_GENUINE_RESPONSE, /* 2wp genuine response */
   
    _C_MDES_DPAN_CURR, --RELATED TO MDES DATA
    _C_TKN_MDES_DPAN_1,--RELATED TO MDES DATA
    CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS MDES_DPAN_REGO_DT,
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00') AS MDES_DPAN_REGO_DT,--RELATED TO MDES DATA
    _L_SE_SCORE, /* scam score */
    _L_BC_MULE_RISK_LVL, /* mule score */
    _L_BC_SCORE, /* bio catch score*/
    _L_IS_RAT_DT, /* remote access software dates */
    _L_IS_MOB_RAT_DT, /* remote access software dates */
    case
          WHEN RSP_ACTION_CODE = '1'                                   THEN 'Approved'
          WHEN dtl_ca_auth_sys_dec = '4'                                  THEN 'Declined (Sys)'
          WHEN dtl_ca_auth_sys_dec = '3'                                  THEN 'Future Use'
          WHEN dtl_ca_auth_sys_dec = '5'                                  THEN 'Pick Up'
          WHEN dtl_ca_auth_sys_dec = '1' AND RSP_ACTION_CODE IN ('4')     THEN 'Declined (FDP)'
          WHEN dtl_ca_auth_sys_dec = '1' AND RSP_ACTION_CODE IN ('2')     THEN 'Declined (DXC)'
    END AS DECISION,
    CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_2,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_3,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_4,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_5,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_6,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_7,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_8,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_9,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_10,

     CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_2,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_3,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_4,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_5,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_6,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_7,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_8,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_9,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_10,
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_2, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_3, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_4, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_5, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_6, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_7, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_8, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_9, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_10, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_2, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_3, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_4, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_5, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_6, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_7, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_8, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_9, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_10, -- DIGITAL WALLET REGO DATE
    _M_MERCHANT_CORP_IND, --SPENDING PATTERN FREQUENCY
    _M_MERCHANT_RETAIL_IND, --SPENDING PATTERN FREQUENCY
    CASE
        WHEN _M_MERCHANT_RETAIL_IND = '1' THEN 'Weekly User' 
        WHEN _M_MERCHANT_RETAIL_IND = '2' THEN 'Monthly User' 
        WHEN _M_MERCHANT_RETAIL_IND = '3' THEN 'Infrequent User' 
        WHEN _M_MERCHANT_RETAIL_IND = '4' THEN 'Recent User' 
        WHEN _M_MERCHANT_RETAIL_IND = '5' THEN 'Used before but not recently (within three months)' 
        ELSE 'No Spending Frequency'
    END AS RETAIL_SPENDING_FREQUENCY,
    CASE  
        WHEN _M_MERCHANT_CORP_IND = '1' THEN 'Weekly User'
        WHEN _M_MERCHANT_CORP_IND = '2' THEN 'Monthly User' 
        WHEN _M_MERCHANT_CORP_IND = '3' THEN 'Infrequent User' 
        WHEN _M_MERCHANT_CORP_IND = '4' THEN 'Recent User' 
        WHEN _M_MERCHANT_CORP_IND = '5' THEN 'Used before but not recently (within three months)'
        ELSE 'No Spending Frequency'
    END AS CORPORATE_SPENDING_FREQUENCY
    




    
     
    FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT A
        
    
    WHERE 1=1
    AND to_date(TTS_TRAN_DATE_ALT, 'YYYYMMDD') BETWEEN CURRENT_DATE() -100 AND CURRENT_DATE()
    --     mid_event_ts <= TO_CHAR(TIMESTAMPADD(day, (-1), CURRENT_TIMESTAMP()), 'YYYYMMDDHH24MISSFF6') and
    -- mid_event_ts >= TO_CHAR(TIMESTAMPADD(day, (-2), CURRENT_TIMESTAMP()), 'YYYYMMDDHH24MISSFF6')
    -- and (_C_2WDWP_ERR_DT<>'0'/* 2wp error */
    -- or _C_2WDWP_DISMISS_DT<>'0'/* 2wp dismiss notification */
    -- or _C_2WDWP_NRP_DT<>'0' /* 2wp no response */
    -- or _C_2WDWP_FRD_DT<>'0' /* 2wp fraud response */
    -- or _C_2WDWP_GEN_DT<>'0')
    -- to_date(TTS_TRAN_DATE_ALT, 'YYYYMMDD') = current_date()
)
,

toby as (
select a.*,
    b.ACTIONTAKEN,
    b.CARDNUMBER,
    b.CASENUMBER,
    b.FRAUDTYPE,
    b.RULE_FIRED,
    b.RULE_VERSION

from pre_toby a
    left join PRD_P01_DMN_FRAUMD.LABMLFRD.TOBY_ALERTS_TRANSACTIONS b 
            on a.id_key = b.id

),

TOBY_EVENTS AS(
select *
from toby
    UNPIVOT EXCLUDE NULLS(EVENT_DT FOR EVENT_NAME IN ( 
    -- TRANSACTIONDATETIME,
    _2WP_ERROR,
    _2WP_DISMISS_NOTIFICATION, 
    _2WP_NO_RESPONSE, 
    _2WP_FRAUD_RESPONSE,
    _2WP_GENUINE_RESPONSE,
    MDES_DPAN_REGO_DT,
    _C_TKN_APL_DPAN_REGO_DT_1,
    _C_TKN_APL_DPAN_REGO_DT_2,
    _C_TKN_APL_DPAN_REGO_DT_3,
    _C_TKN_APL_DPAN_REGO_DT_4,
    _C_TKN_APL_DPAN_REGO_DT_5,
    _C_TKN_APL_DPAN_REGO_DT_6,
    _C_TKN_APL_DPAN_REGO_DT_7,
    _C_TKN_APL_DPAN_REGO_DT_8,
    _C_TKN_APL_DPAN_REGO_DT_9,
    _C_TKN_APL_DPAN_REGO_DT_10,
    _C_APAY_DPAN_REGO_DT_1,
    _C_APAY_DPAN_REGO_DT_2,
    _C_APAY_DPAN_REGO_DT_3,
    _C_APAY_DPAN_REGO_DT_4,
    _C_APAY_DPAN_REGO_DT_5,
    _C_APAY_DPAN_REGO_DT_6,
    _C_APAY_DPAN_REGO_DT_7,
    _C_APAY_DPAN_REGO_DT_8,
    _C_APAY_DPAN_REGO_DT_9,
    _C_APAY_DPAN_REGO_DT_10))
ORDER BY ID_KEY, EVENT_DT
),



TOBY_TXN_EVENTS AS(
select
CHANNEL,
 ACTIONTAKEN,
    CARDNUMBER,
    CASENUMBER,
    FRAUDTYPE,
ID_KEY,
CUSTOMER_ID,
SSX_CUST_POST_CODE,
CHL_ID_CARD_NUM,
'TXN' as EVENT_NAME,
TRANSACTIONDATETIME,
TTS_TRAN_DATE_ALT,
TTS_TRAN_TIME_ALT,
CHL_CT_MER_MCC,
CHL_CT_TERM_OWNER_ID,
CHL_CT_TERM_OWNER_NAME,
CHL_CT_TERM_ID,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_CLIENT_AMT,
DTL_CA_CASH_BACK_AMT,
DTL_CA_AUTH_SYS_DEC,
DTL_CA_AUTH_SYS_INFO,
DTL_CA_REVERSAL_IND,
RSP_ACTION_CODE,
SLI,
AAV,
POS_ENTRY,
CHL_CT_MEDIA,
DPAN,
WALLET_ID,
TRID,
ISSUE_DATE,
PIN_VERIFIED,
RSP_EX_2_8S_001,
RSP_EX_2_8S_004,
_C_CRD_SAFE_MERCHANT,
-- RSP_CODE_2WP,
-- _A_2WP_NO_CNT,
-- _C_2WP_FRAUD_DEC_ALL_DT,
-- _C_2WP_HR_NO_RESP_DT_1,
-- _C_2WP_NO_RESP_DT_1,
-- _C_MDES_DPAN_CURR,
-- _C_TKN_MDES_DPAN_1,
_L_SE_SCORE,
_L_BC_MULE_RISK_LVL,
_L_BC_SCORE,
_L_IS_RAT_DT,
_L_IS_MOB_RAT_DT,
DECISION,
RULE_FIRED,
_M_MERCHANT_CORP_IND,
_M_MERCHANT_RETAIL_IND,
RETAIL_SPENDING_FREQUENCY,
CORPORATE_SPENDING_FREQUENCY
FROM TOBY

UNION ALL

SELECT 
CHANNEL,
ACTIONTAKEN,
CARDNUMBER,
CASENUMBER,
FRAUDTYPE,
ID_KEY,
CUSTOMER_ID,
SSX_CUST_POST_CODE,
CHL_ID_CARD_NUM,
EVENT_NAME,
EVENT_DT AS TRANSACTIONDATETIME,
TTS_TRAN_DATE_ALT,
TTS_TRAN_TIME_ALT,
CHL_CT_MER_MCC,
CHL_CT_TERM_OWNER_ID,
CHL_CT_TERM_OWNER_NAME,
CHL_CT_TERM_ID,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_CLIENT_AMT,
DTL_CA_CASH_BACK_AMT,
DTL_CA_AUTH_SYS_DEC,
DTL_CA_AUTH_SYS_INFO,
DTL_CA_REVERSAL_IND,
RSP_ACTION_CODE,
SLI,
AAV,
POS_ENTRY,
CHL_CT_MEDIA,
DPAN,
WALLET_ID,
TRID,
ISSUE_DATE,
PIN_VERIFIED,
RSP_EX_2_8S_001,
RSP_EX_2_8S_004,
_C_CRD_SAFE_MERCHANT,
-- RSP_CODE_2WP,
-- _A_2WP_NO_CNT,
-- _C_2WP_FRAUD_DEC_ALL_DT,
-- _C_2WP_HR_NO_RESP_DT_1,
-- _C_2WP_NO_RESP_DT_1,
-- _C_MDES_DPAN_CURR,
-- _C_TKN_MDES_DPAN_1,
_L_SE_SCORE,
_L_BC_MULE_RISK_LVL,
_L_BC_SCORE,
_L_IS_RAT_DT,
_L_IS_MOB_RAT_DT,
DECISION,
RULE_FIRED,
_M_MERCHANT_CORP_IND,
_M_MERCHANT_RETAIL_IND,
RETAIL_SPENDING_FREQUENCY,
CORPORATE_SPENDING_FREQUENCY

FROM TOBY_EVENTS

WHERE EVENT_DT > '1960-01-01 00:00:00'
)
,

toby_final_events as(
SELECT * FROM TOBY_TXN_EVENTS
ORDER BY ID_KEY, TRANSACTIONDATETIME
)
,

-- select SNOWFLAKE.CORTEX.COMPLETE('llama3.1-70b', 'select all the columns and rows from a CTE where each column is pupolated with at least one value that is not empty or null using dynamic SQL');



toby_metrics as(
select  
         ACTIONTAKEN
        ,CARDNUMBER AS ENTITY 
        ,CASENUMBER
        ,FRAUDTYPE
        ,COUNT(DISTINCT ID_KEY) AS TOTAL_TRANS
        ,COUNT(DISTINCT CASE WHEN RSP_ACTION_CODE = '1' THEN ID_KEY END) AS TOTAL_APPROVED_TRANS
        ,SUM(DTL_CA_CLIENT_AMT) AS TOTAL_SUM
        ,SUM(CASE WHEN RSP_ACTION_CODE = '1' THEN DTL_CA_CLIENT_AMT END) AS TOTAL_SUM_APPROVED
        

from TOBY_FINAL_EVENTS
GROUP BY 1,2,3,4
)

select 
a.CHANNEL,
a.ACTIONTAKEN,
a.CARDNUMBER,
a.CASENUMBER,
a.FRAUDTYPE,
ID_KEY,
CUSTOMER_ID,
SSX_CUST_POST_CODE,
CHL_ID_CARD_NUM,
EVENT_NAME,
TRANSACTIONDATETIME,
TTS_TRAN_DATE_ALT,
TTS_TRAN_TIME_ALT,
CHL_CT_MER_MCC,
CHL_CT_TERM_OWNER_ID,
CHL_CT_TERM_OWNER_NAME,
CHL_CT_TERM_ID,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_CLIENT_AMT,
DTL_CA_CASH_BACK_AMT,
DTL_CA_AUTH_SYS_DEC,
DTL_CA_AUTH_SYS_INFO,
DTL_CA_REVERSAL_IND,
RSP_ACTION_CODE,
SLI,
AAV,
POS_ENTRY,
CHL_CT_MEDIA,
DPAN,
WALLET_ID,
TRID,
ISSUE_DATE,
PIN_VERIFIED,
RSP_EX_2_8S_001,
RSP_EX_2_8S_004,
_C_CRD_SAFE_MERCHANT,
_L_SE_SCORE,
_L_BC_MULE_RISK_LVL,
_L_BC_SCORE,
_L_IS_RAT_DT,
_L_IS_MOB_RAT_DT,
DECISION,
RETAIL_SPENDING_FREQUENCY,
RULE_FIRED,
TOTAL_TRANS,
TOTAL_APPROVED_TRANS,
TOTAL_SUM,
TOTAL_SUM_APPROVED


from toby_final_events a
    left join toby_metrics b
        on a.CARDNUMBER = b.ENTITY

-- WHERE TOTAL_SUM > 20000
WHERE A.ACTIONTAKEN IS NOT NULL

-- alter table PRD_P01_DMN_FRAUMD.LABMLFRD.TOBY_CARDS set tag PRD_RBAC.tags.classification_lab = 'CUS';  ",GAREAJU,R_USR_FRAUMD_LABMLFRD_RW,1475911,1475.911000,24.598517,0.409975,2X-LARGE,32,13.119200
01bdfad7-3204-aa21-0000-c71d25ba4246,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""VVLVYQYQ846NIRCJ""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,1453468,1453.468000,24.224467,0.403741,2X-LARGE,32,12.919712
01bdd4aa-3204-a619-0000-c71d24a5d2b6,"with pre_toby as(
    SELECT DISTINCT 
    'CARD' AS CHANNEL,
    --ACTIONTAKEN
    --CARDNUMBER
    --CASENUMBER
    --FRAUDTYPE
    concat(to_decimal(dtl_ex_0_n_064),dtl_ex_0_n_065,dtl_ex_0_n_066) as id_key, --CMX_TRAN_ID REPLACEMENT
    SSX_CUST_NUM as CUSTOMER_ID, --XQO_CUST_NUM
    ssx_cust_post_code, --XQO_CUST_POST_CODE
    CHL_ID_CARD_NUM, --HQO_CARD_NUM
    TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TTS_TRAN_DATE_ALT,
    TTS_TRAN_TIME_ALT,
    CHL_CT_MER_MCC, --TRANSACTIONDATETIME
    CHL_CT_TERM_OWNER_ID, --hct_term_owner_id
    CHL_CT_TERM_OWNER_NAME, --HCT_TERM_OWNER_NAME
    CHL_CT_TERM_ID, --HCT_TERM_ID
    chl_ct_term_cntry_code, --hct_term_cntry_code
    dtl_ca_client_amt, --TCA_client_amt
    dtl_ca_cash_back_amt, --TCA_cash_back_amt
    dtl_ca_auth_sys_dec, --TCA_auth_sys_dec
    dtl_ca_auth_sys_info, --TCA_auth_sys_info
    dtl_ca_reversal_ind, --TCA_reversal_ind
    RSP_ACTION_CODE, --RRR_ACTION_CODE
    dtl_ex_0_3s_002 AS SLI, --RUA_3BYTE_STRING_002
    UPPER(SUBSTR(dtl_ex_0_3s_002,1,2)) AS AAV, --DUA_80BYTE_STRING_003
    ath_pc_pos AS POS_ENTRY, --ucm_pos
    chl_ct_media, --hct_media
    dtl_ex_0_20s_004 AS DPAN, --RUA_20BYTE_STRING_004
    dtl_ex_3_20s_004 AS WALLET_ID, --DUA_20BYTE_STRING_004
    dtl_ex_3_20s_001 AS TRID, --DUA_20BYTE_STRING_001
    dtl_ex_3_8s_001 AS ISSUE_DATE, --DUA_8BYTE_STRING_001
    ATH_PC_PIN_VRFY AS PIN_VERIFIED, --UCM_PIN_VRFY
    --CQF_RULE_C_ID
    rsp_ex_2_8s_001, --rur_8byte_string_001
    rsp_ex_2_8s_004, --rur_8byte_string_004
    _C_CRD_SAFE_MERCHANT,
    rsp_ex_2_i_009 AS RSP_CODE_2WP,
    _A_2WP_NO_CNT, --RELATED TO 2WP
    _C_2WP_FRAUD_DEC_ALL_DT,--RELATED TO 2WP
    _C_2WP_HR_NO_RESP_DT_1,--RELATED TO 2WP
    _C_2WP_NO_RESP_DT_1,--RELATED TO 2WP
     LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_ERR_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_ERROR, /* 2wp error */
    -- LAG(_C_2WDWP_ERR_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_ERROR, /* 2wp error */
    -- LAG(_C_2WDWP_DISMISS_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_DISMISS_NOTIFICATION, /* 2wp dismiss notification */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_DISMISS_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_DISMISS_NOTIFICATION, /* 2wp dismiss notification */
    
    -- LAG(_C_2WDWP_NRP_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_NO_RESPONSE, /* 2wp no response */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_NRP_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_NO_RESPONSE, /* 2wp no response */
    
    -- LAG(_C_2WDWP_FRD_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_FRAUD_RESPONSE, /* 2wp fraud response */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_FRD_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_FRAUD_RESPONSE, /* 2wp fraud response */
   
    -- LAG(_C_2WDWP_GEN_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_GENUINE_RESPONSE, /* 2wp genuine response */

LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_GEN_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_GENUINE_RESPONSE, /* 2wp genuine response */
   
    _C_MDES_DPAN_CURR, --RELATED TO MDES DATA
    _C_TKN_MDES_DPAN_1,--RELATED TO MDES DATA
    CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS MDES_DPAN_REGO_DT,
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00') AS MDES_DPAN_REGO_DT,--RELATED TO MDES DATA
    _L_SE_SCORE, /* scam score */
    _L_BC_MULE_RISK_LVL, /* mule score */
    _L_BC_SCORE, /* bio catch score*/
    _L_IS_RAT_DT, /* remote access software dates */
    _L_IS_MOB_RAT_DT, /* remote access software dates */
    case
          WHEN RSP_ACTION_CODE = '1'                                   THEN 'Approved'
          WHEN dtl_ca_auth_sys_dec = '4'                                  THEN 'Declined (Sys)'
          WHEN dtl_ca_auth_sys_dec = '3'                                  THEN 'Future Use'
          WHEN dtl_ca_auth_sys_dec = '5'                                  THEN 'Pick Up'
          WHEN dtl_ca_auth_sys_dec = '1' AND RSP_ACTION_CODE IN ('4')     THEN 'Declined (FDP)'
          WHEN dtl_ca_auth_sys_dec = '1' AND RSP_ACTION_CODE IN ('2')     THEN 'Declined (DXC)'
    END AS DECISION,
    CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_2,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_3,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_4,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_5,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_6,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_7,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_8,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_9,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_10,

     CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_2,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_3,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_4,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_5,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_6,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_7,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_8,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_9,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_10,
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_2, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_3, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_4, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_5, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_6, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_7, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_8, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_9, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_10, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_2, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_3, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_4, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_5, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_6, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_7, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_8, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_9, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_10, -- DIGITAL WALLET REGO DATE
    _M_MERCHANT_CORP_IND, --SPENDING PATTERN FREQUENCY
    _M_MERCHANT_RETAIL_IND, --SPENDING PATTERN FREQUENCY
    CASE
        WHEN _M_MERCHANT_RETAIL_IND = '1' THEN 'Weekly User' 
        WHEN _M_MERCHANT_RETAIL_IND = '2' THEN 'Monthly User' 
        WHEN _M_MERCHANT_RETAIL_IND = '3' THEN 'Infrequent User' 
        WHEN _M_MERCHANT_RETAIL_IND = '4' THEN 'Recent User' 
        WHEN _M_MERCHANT_RETAIL_IND = '5' THEN 'Used before but not recently (within three months)' 
        ELSE 'No Spending Frequency'
    END AS RETAIL_SPENDING_FREQUENCY,
    CASE  
        WHEN _M_MERCHANT_CORP_IND = '1' THEN 'Weekly User'
        WHEN _M_MERCHANT_CORP_IND = '2' THEN 'Monthly User' 
        WHEN _M_MERCHANT_CORP_IND = '3' THEN 'Infrequent User' 
        WHEN _M_MERCHANT_CORP_IND = '4' THEN 'Recent User' 
        WHEN _M_MERCHANT_CORP_IND = '5' THEN 'Used before but not recently (within three months)'
        ELSE 'No Spending Frequency'
    END AS CORPORATE_SPENDING_FREQUENCY
    




    
     
    FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT A
        
    
    WHERE 1=1
    AND to_date(TTS_TRAN_DATE_ALT, 'YYYYMMDD') BETWEEN CURRENT_DATE() -100 AND CURRENT_DATE()
    --     mid_event_ts <= TO_CHAR(TIMESTAMPADD(day, (-1), CURRENT_TIMESTAMP()), 'YYYYMMDDHH24MISSFF6') and
    -- mid_event_ts >= TO_CHAR(TIMESTAMPADD(day, (-2), CURRENT_TIMESTAMP()), 'YYYYMMDDHH24MISSFF6')
    -- and (_C_2WDWP_ERR_DT<>'0'/* 2wp error */
    -- or _C_2WDWP_DISMISS_DT<>'0'/* 2wp dismiss notification */
    -- or _C_2WDWP_NRP_DT<>'0' /* 2wp no response */
    -- or _C_2WDWP_FRD_DT<>'0' /* 2wp fraud response */
    -- or _C_2WDWP_GEN_DT<>'0')
    -- to_date(TTS_TRAN_DATE_ALT, 'YYYYMMDD') = current_date()
)
,

toby as (
select a.*,
    b.ACTIONTAKEN,
    b.CARDNUMBER,
    b.CASENUMBER,
    b.FRAUDTYPE,
    b.RULE_FIRED,
    b.RULE_VERSION

from pre_toby a
    left join PRD_P01_DMN_FRAUMD.LABMLFRD.TOBY_ALERTS_TRANSACTIONS b 
            on a.id_key = b.id

),

TOBY_EVENTS AS(
select *
from toby
    UNPIVOT EXCLUDE NULLS(EVENT_DT FOR EVENT_NAME IN ( 
    -- TRANSACTIONDATETIME,
    _2WP_ERROR,
    _2WP_DISMISS_NOTIFICATION, 
    _2WP_NO_RESPONSE, 
    _2WP_FRAUD_RESPONSE,
    _2WP_GENUINE_RESPONSE,
    MDES_DPAN_REGO_DT,
    _C_TKN_APL_DPAN_REGO_DT_1,
    _C_TKN_APL_DPAN_REGO_DT_2,
    _C_TKN_APL_DPAN_REGO_DT_3,
    _C_TKN_APL_DPAN_REGO_DT_4,
    _C_TKN_APL_DPAN_REGO_DT_5,
    _C_TKN_APL_DPAN_REGO_DT_6,
    _C_TKN_APL_DPAN_REGO_DT_7,
    _C_TKN_APL_DPAN_REGO_DT_8,
    _C_TKN_APL_DPAN_REGO_DT_9,
    _C_TKN_APL_DPAN_REGO_DT_10,
    _C_APAY_DPAN_REGO_DT_1,
    _C_APAY_DPAN_REGO_DT_2,
    _C_APAY_DPAN_REGO_DT_3,
    _C_APAY_DPAN_REGO_DT_4,
    _C_APAY_DPAN_REGO_DT_5,
    _C_APAY_DPAN_REGO_DT_6,
    _C_APAY_DPAN_REGO_DT_7,
    _C_APAY_DPAN_REGO_DT_8,
    _C_APAY_DPAN_REGO_DT_9,
    _C_APAY_DPAN_REGO_DT_10))
ORDER BY ID_KEY, EVENT_DT
),



TOBY_TXN_EVENTS AS(
select
CHANNEL,
 ACTIONTAKEN,
    CARDNUMBER,
    CASENUMBER,
    FRAUDTYPE,
ID_KEY,
CUSTOMER_ID,
SSX_CUST_POST_CODE,
CHL_ID_CARD_NUM,
'TXN' as EVENT_NAME,
TRANSACTIONDATETIME,
TTS_TRAN_DATE_ALT,
TTS_TRAN_TIME_ALT,
CHL_CT_MER_MCC,
CHL_CT_TERM_OWNER_ID,
CHL_CT_TERM_OWNER_NAME,
CHL_CT_TERM_ID,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_CLIENT_AMT,
DTL_CA_CASH_BACK_AMT,
DTL_CA_AUTH_SYS_DEC,
DTL_CA_AUTH_SYS_INFO,
DTL_CA_REVERSAL_IND,
RSP_ACTION_CODE,
SLI,
AAV,
POS_ENTRY,
CHL_CT_MEDIA,
DPAN,
WALLET_ID,
TRID,
ISSUE_DATE,
PIN_VERIFIED,
RSP_EX_2_8S_001,
RSP_EX_2_8S_004,
_C_CRD_SAFE_MERCHANT,
-- RSP_CODE_2WP,
-- _A_2WP_NO_CNT,
-- _C_2WP_FRAUD_DEC_ALL_DT,
-- _C_2WP_HR_NO_RESP_DT_1,
-- _C_2WP_NO_RESP_DT_1,
-- _C_MDES_DPAN_CURR,
-- _C_TKN_MDES_DPAN_1,
_L_SE_SCORE,
_L_BC_MULE_RISK_LVL,
_L_BC_SCORE,
_L_IS_RAT_DT,
_L_IS_MOB_RAT_DT,
DECISION,
RULE_FIRED,
_M_MERCHANT_CORP_IND,
_M_MERCHANT_RETAIL_IND,
RETAIL_SPENDING_FREQUENCY,
CORPORATE_SPENDING_FREQUENCY
FROM TOBY

UNION ALL

SELECT 
CHANNEL,
ACTIONTAKEN,
CARDNUMBER,
CASENUMBER,
FRAUDTYPE,
ID_KEY,
CUSTOMER_ID,
SSX_CUST_POST_CODE,
CHL_ID_CARD_NUM,
EVENT_NAME,
EVENT_DT AS TRANSACTIONDATETIME,
TTS_TRAN_DATE_ALT,
TTS_TRAN_TIME_ALT,
CHL_CT_MER_MCC,
CHL_CT_TERM_OWNER_ID,
CHL_CT_TERM_OWNER_NAME,
CHL_CT_TERM_ID,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_CLIENT_AMT,
DTL_CA_CASH_BACK_AMT,
DTL_CA_AUTH_SYS_DEC,
DTL_CA_AUTH_SYS_INFO,
DTL_CA_REVERSAL_IND,
RSP_ACTION_CODE,
SLI,
AAV,
POS_ENTRY,
CHL_CT_MEDIA,
DPAN,
WALLET_ID,
TRID,
ISSUE_DATE,
PIN_VERIFIED,
RSP_EX_2_8S_001,
RSP_EX_2_8S_004,
_C_CRD_SAFE_MERCHANT,
-- RSP_CODE_2WP,
-- _A_2WP_NO_CNT,
-- _C_2WP_FRAUD_DEC_ALL_DT,
-- _C_2WP_HR_NO_RESP_DT_1,
-- _C_2WP_NO_RESP_DT_1,
-- _C_MDES_DPAN_CURR,
-- _C_TKN_MDES_DPAN_1,
_L_SE_SCORE,
_L_BC_MULE_RISK_LVL,
_L_BC_SCORE,
_L_IS_RAT_DT,
_L_IS_MOB_RAT_DT,
DECISION,
RULE_FIRED,
_M_MERCHANT_CORP_IND,
_M_MERCHANT_RETAIL_IND,
RETAIL_SPENDING_FREQUENCY,
CORPORATE_SPENDING_FREQUENCY

FROM TOBY_EVENTS

WHERE EVENT_DT > '1960-01-01 00:00:00'
)
,

toby_final_events as(
SELECT * FROM TOBY_TXN_EVENTS
ORDER BY ID_KEY, TRANSACTIONDATETIME
)
,

-- select SNOWFLAKE.CORTEX.COMPLETE('llama3.1-70b', 'select all the columns and rows from a CTE where each column is pupolated with at least one value that is not empty or null using dynamic SQL');



toby_metrics as(
select  
         ACTIONTAKEN
        ,CARDNUMBER AS ENTITY 
        ,CASENUMBER
        ,FRAUDTYPE
        ,COUNT(DISTINCT ID_KEY) AS TOTAL_TRANS
        ,COUNT(DISTINCT CASE WHEN RSP_ACTION_CODE = '1' THEN ID_KEY END) AS TOTAL_APPROVED_TRANS
        ,SUM(DTL_CA_CLIENT_AMT) AS TOTAL_SUM
        ,SUM(CASE WHEN RSP_ACTION_CODE = '1' THEN DTL_CA_CLIENT_AMT END) AS TOTAL_SUM_APPROVED
        

from TOBY_FINAL_EVENTS
GROUP BY 1,2,3,4
)

select 
a.CHANNEL,
a.ACTIONTAKEN,
a.CARDNUMBER,
a.CASENUMBER,
a.FRAUDTYPE,
ID_KEY,
CUSTOMER_ID,
SSX_CUST_POST_CODE,
CHL_ID_CARD_NUM,
EVENT_NAME,
TRANSACTIONDATETIME,
TTS_TRAN_DATE_ALT,
TTS_TRAN_TIME_ALT,
CHL_CT_MER_MCC,
CHL_CT_TERM_OWNER_ID,
CHL_CT_TERM_OWNER_NAME,
CHL_CT_TERM_ID,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_CLIENT_AMT,
DTL_CA_CASH_BACK_AMT,
DTL_CA_AUTH_SYS_DEC,
DTL_CA_AUTH_SYS_INFO,
DTL_CA_REVERSAL_IND,
RSP_ACTION_CODE,
SLI,
AAV,
POS_ENTRY,
CHL_CT_MEDIA,
DPAN,
WALLET_ID,
TRID,
ISSUE_DATE,
PIN_VERIFIED,
RSP_EX_2_8S_001,
RSP_EX_2_8S_004,
_C_CRD_SAFE_MERCHANT,
_L_SE_SCORE,
_L_BC_MULE_RISK_LVL,
_L_BC_SCORE,
_L_IS_RAT_DT,
_L_IS_MOB_RAT_DT,
DECISION,
RETAIL_SPENDING_FREQUENCY,
RULE_FIRED,
TOTAL_TRANS,
TOTAL_APPROVED_TRANS,
TOTAL_SUM,
TOTAL_SUM_APPROVED


from toby_final_events a
    left join toby_metrics b
        on a.CARDNUMBER = b.ENTITY

-- WHERE TOTAL_SUM > 20000
WHERE A.ACTIONTAKEN IS NOT NULL

-- alter table PRD_P01_DMN_FRAUMD.LABMLFRD.TOBY_CARDS set tag PRD_RBAC.tags.classification_lab = 'CUS';  ",GAREAJU,R_USR_FRAUMD_LABMLFRD_RW,1445648,1445.648000,24.094133,0.401569,2X-LARGE,32,12.850208
01be86d6-3204-bc99-0000-c71d29e439b6,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_TRANSACTIONS_ENCODED_FRAUDENGINEERING_TESTING_CHK_JOIN_COND(""CMX_TRAN_ID"" STRING(134217728), ""CATEGORY"" STRING(134217728), ""LABEL"" BIGINT, ""HDR_ACTIVITY_TYPE"" STRING(16777216), ""DTL_CA_AUTH_SYS_DEC"" STRING(16777216), ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""CHL_ID_CARD_NUM_SUBSTR"" STRING(7) NOT NULL , ""ATH_PC_POS"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  *  FROM (
SELECT 
    tt_enc.CMX_TRAN_ID,
    tt_enc.CATEGORY,
    tt_enc.LABEL,
    fdp.HDR_ACTIVITY_TYPE,
    fdp.DTL_CA_AUTH_SYS_DEC,
    fdp.DTL_CA_AUTH_SYS_INFO,
    CASE WHEN 
        SUBSTR(REPLACE(fdp.CHL_ID_CARD_NUM, ' ', ''), 1, 6)  != '903601'
        THEN 'VALID' 
        ELSE 'INVALID' 
    END AS CHL_ID_CARD_NUM_SUBSTR,
    fdp.ATH_PC_POS,
    LAG(fdp._C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY fdp.CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(fdp.TTS_TRAN_DATE_ALT, fdp.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
    LAG(fdp._C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY fdp.CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(fdp.TTS_TRAN_DATE_ALT, fdp.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
FROM 
    TECHDS_MARVIN_CCA_TRANSACTIONS_ENCODED_FRAUDENGINEERING_TESTING tt_enc
INNER JOIN 
    LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT fdp
ON 
    TO_NUMBER(fdp.DTL_EX_0_N_064) || fdp.DTL_EX_0_N_065 || fdp.DTL_EX_0_N_066 = tt_enc.CMX_TRAN_ID
WHERE 
    fdp.TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
)",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1440359,1440.359000,24.005983,0.400100,2X-LARGE,32,12.803200
01bde4f4-3204-a7ec-0000-c71d251c9392,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D012_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_CNP_LTRANS_6HR_COUNT_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_4"" DOUBLE, ""DTL_EX_2_ENTITY_ID_6"" STRING(16777216), ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""DTL_CA_CLIENT_TRAN_TYPE"" STRING(16777216), ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_M_TOTAL_COUNT"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_A_U"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_CC_2DAY_VEL_6"" DOUBLE, ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CRD_CNP_TRN_SUM_3"" DOUBLE, ""_A_DTL_CAPP_NBANK_SSO_DT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_A_D_D_1"" DOUBLE, ""_M_MERCHANT_RETAIL_IND"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_A_GEO_LONG_1"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_A_CAPP_REGO_IP_ADDRESS"" STRING(16777216), ""_M_TOTAL_SUM_RETAIL"" DOUBLE, ""CHL_CT_CH_POST_CODE"" STRING(16777216), ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_2"" DOUBLE, ""_Q_DOM_DECL_CNT_DAY_1"" DOUBLE, ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_C_CC_2DAY_VEL_4"" DOUBLE, ""_C_CRD_3D_TRN_SUM_3"" DOUBLE, ""_C_N3D_DOM_6H_SUM_1"" DOUBLE, ""_L_SE_SCORE_5"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_CC_TRAN_ACCOUNT_BIN"" STRING(16777216), ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_Q_KEYED_DECL_CNT_DAY_1"" DOUBLE, ""_C_MDES_DPAN_CNT_CURR"" DOUBLE, ""_C_CC_SCR_ATTCK_30SEC_COUNT_2"" DOUBLE, ""_A_24H_CNP_DC_RTL_SUM_CURR_MAX"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_L_SCORE_H2O_5"" DOUBLE, ""SSA_D_AVAIL_BAL"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_UA_DEVICE_PREV_DT_4"" BIGINT, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, _C_CC_CNP_LTRANS_6HR_COUNT_1, ATH_PC_CUST_PRESENT, DTL_EX_3_8S_009, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _Q_MER_FRAUD_SCORE_CNT_5, _Q_MER_FRAUD_SCORE_SUM_6, _M_TOTAL_SUM, _C_N3D_TST_CNT_1, _Q_MER_FRAUD_SCORE_CNT_4, DTL_EX_2_ENTITY_ID_6, _C_CC_CNP_VEL_6HR_COUNT_1, DTL_CA_CLIENT_TRAN_TYPE, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_1, DTL_EX_3_80S_001, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _M_TOTAL_COUNT, CHL_CT_MER_MCC, _Q_AUTH_COUNT, _C_N3D_MERC_ID_SUM_3, _A_U, _C_N3D_MERC_ID_SUM_2, _C_N3D_MERC_ID_SUM_1, _A_BTS_CUST_AGE, _C_CC_2DAY_VEL_6, _L_MAX_30D_MULE_SCORE, _C_CRD_CNP_TRN_SUM_3, _A_DTL_CAPP_NBANK_SSO_DT, _A_PROF_CAPP_DEVICE_1, _A_D_D_1, _M_MERCHANT_RETAIL_IND, _C_CC_GBL_N3D_CNT_1, _L_BC_SESS_ID, _A_GEO_LONG_1, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CAPP_REGO_IP_ADDRESS, _M_TOTAL_SUM_RETAIL, CHL_CT_CH_POST_CODE, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _Q_MER_FRAUD_SCORE_CNT_2, _Q_DOM_DECL_CNT_DAY_1, _C_CC_2DAY_AMT_6, _C_CC_2DAY_VEL_4, _C_CRD_3D_TRN_SUM_3, _C_N3D_DOM_6H_SUM_1, _L_SE_SCORE_5, _C_2WAY_5X_CRD_CNT, _C_CC_TRAN_ACCOUNT_BIN, _C_N3D_OVS_6H_SUM_1, _Q_KEYED_DECL_CNT_DAY_1, _C_MDES_DPAN_CNT_CURR, _C_CC_SCR_ATTCK_30SEC_COUNT_2, _A_24H_CNP_DC_RTL_SUM_CURR_MAX, _Q_MER_FRAUD_SCORE_CNT_3, DTL_CA_AUTH_SYS_INFO, _L_SCORE_H2O_5, SSA_D_AVAIL_BAL
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_PREV_DT_4,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250711 and 20250724
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1437769,1437.769000,23.962817,0.399380,2X-LARGE,32,12.780160
01becaaf-3204-c555-0000-c71d2c01a296,"create or replace temporary table NPP_TRAN as
select	distinct case   when b.fraudtype = 'CVL' then null
                else b.fraudtype
        end as FRAUDTYPE
		,b.detection
		,b.case_detection
        ,TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
		,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
		,a.tts_tran_date_alt
		,a.tts_tran_time_alt
		,a.dtl_ex_0_20s_001
		,a.dtl_ex_1_5s_01
		,a.ssx_cust_num
		,a.chl_id_ob_userid
		,a.tgx_bank_name
		,a.tgx_bank_num
		,a.tgx_branch_id
		,a.tgx_acct_num
		,a.tgx_name
		,a.tgx_description
		,TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as TRAN_AMT
		,a.dtl_ex_0_i_002 as FTP_IND
		
		-- BioCatch UVs
		,TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE
		,TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_SCORE
		,TRY_TO_NUMBER(a._l_adv_key_combo, 38, 2) as _L_ADV_KEY_COMBO
		,TRY_TO_NUMBER(a._l_clpbrd_evnt, 38, 2) as _L_CLPBRD_EVNT
		,TRY_TO_NUMBER(a._l_concurrent_sess, 38, 2) as _L_CONCURRENT_SESS
		,TRY_TO_NUMBER(a._l_export_data, 38, 2) as _L_EXPORT_DATA
		,TRY_TO_NUMBER(a._l_import_data, 38, 2) as _L_IMPORT_DATA
		,TRY_TO_NUMBER(a._l_is_rat, 38, 2) as _L_IS_RAT
		,TRY_TO_NUMBER(a._l_is_mob_rat, 38, 2) as _L_IS_MOB_RAT
		,TRY_TO_NUMBER(a._l_rat_in_sess, 38, 2) as _L_RAT_IN_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_hrisk_sess, 38, 2) as _L_IS_RCNT_HRISK_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_rat, 38, 2) as _L_IS_RCNT_RAT
		,TRY_TO_NUMBER(a._l_lrg_dist_known_loc, 38, 2) as _L_LRG_DIST_KNOWN_LOC
		,TRY_TO_NUMBER(a._l_rare_scrn_sz, 38, 2) as _L_RARE_SCRN_SZ
		,TRY_TO_NUMBER(a._l_risky_isp, 38, 2) as _L_RISKY_ISP
		,TRY_TO_NUMBER(a._l_risky_key_combo, 38, 2) as _L_RISKY_KEY_COMBO
		,TRY_TO_NUMBER(a._l_tzone_mismatch, 38, 2) as _L_TZONE_MISMATCH
		,TRY_TO_NUMBER(a._l_scm_rsk_hgh_scr, 38, 2) as _L_SCM_RSK_HGH_SCR
		,TRY_TO_NUMBER(a._l_keyb_nav_anom, 38, 2) as _L_KEYB_NAV_ANOM
		,TRY_TO_NUMBER(a._l_scrn_broadcast, 38, 2) as _L_SCRN_BROADCAST
		,TRY_TO_NUMBER(a._l_delay_to_input_pi, 38, 2) as _L_DELAY_TO_INPUT_PI
		,TRY_TO_NUMBER(a._l_input_otp_delay, 38, 2) as _L_INPUT_OTP_DELAY
		,TRY_TO_NUMBER(a._l_active_spoofing, 38, 2) as _L_ACTIVE_SPOOFING
		,TRY_TO_NUMBER(a._l_pmt_vloc_anom, 38, 2) as _L_PMT_VLOC_ANOM
		,TRY_TO_NUMBER(a._l_rcnt_hi_scr_on_dev, 38, 2) as _L_RCNT_HI_SCR_ON_DEV
		,TRY_TO_NUMBER(a._l_accum_amt_anom, 38, 2) as _L_ACCUM_AMT_ANOM
		,TRY_TO_NUMBER(a._l_app_togg, 38, 2) as _l_APP_TOGG
		,TRY_TO_NUMBER(a._l_is_active_call, 38, 2) as _L_IS_ACTIVE_CALL
		,TRY_TO_NUMBER(a._l_is_long_sess, 38, 2) as _L_IS_LONG_SESS
		,TRY_TO_NUMBER(a._l_type_patterns_anomaly, 38, 2) as _L_TYPE_PATTERNS_ANOMALY
		,TRY_TO_NUMBER(a._l_seg_typing_pi, 38, 2) as _L_SEG_TYPING_PI
		
		-- NameCheck UVs
		,a._l_nc_response_code
		,a._l_nc_match_name_conf
		
		-- H2O Score UVs
		,TRY_TO_NUMBER(a._l_cust_scamrisk_score, 38, 2) as _L_CUST_SCAMRISK_SCORE
		,a.dtl_ex_0_n_029
		,a.dtl_ex_0_n_034 as CERBERUS_SCORE
		
		-- Recipient Level UVs
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_short, 38, 2) as _B_RECIP_SUM_SHORT
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_long, 38, 2) as _B_RECIP_SUM_LONG
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_short, 38, 2) as _B_RECIP_FTP_CNT_SHORT
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_long, 38, 2) as _B_RECIP_FTP_CNT_LONG
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_any_cust_ftp_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_ANY_CUST_FTP_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_2
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_3
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_4
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_5
		
		-- Customer Level UVs
		,TRY_TO_NUMBER(a._a_customer_age, 38, 2) as _A_CUSTOMER_AGE
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_SHORT, 38, 2) as _A_CUST_SUM_AAA_SHORT
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_LONG, 38, 2) as _A_CUST_SUM_AAA_LONG
		,TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1
		,TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2
		,TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3
		,TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4
		,TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5
		,TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6
		,TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7
		,TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1
		,TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2
		,TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3
		,TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4
		,TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5
		,TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6
		,TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_NEW_CAPP_REGO_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CSE_CHG_DWL_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CIF_ESTABLISH_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00') as _A_NB_LASTLOGON_DT_1
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00') as _A_CURR_CAPP_DEVICE_DT
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_1, 38, 2) as _A_NB_LOGONS_CNT_1
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_2, 38, 2) as _A_NB_LOGONS_CNT_2
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_3, 38, 2) as _A_NB_LOGONS_CNT_3
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_1, 38, 2) as _A_CAPP_LOGON_CNT_1
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_2, 38, 2) as _A_CAPP_LOGON_CNT_2
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_3, 38, 2) as _A_CAPP_LOGON_CNT_3
		
		-- Customer-Recipient Relationship Level UVs
		,TRY_TO_NUMBER(a._x_cif_recipient_new_sum, 38, 2) + TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM
		,case   when a._x_cif_recipient_new_date = '0' then TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF')
                else TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00'::timestamp)
		end as _X_CIF_RECIPIENT_NEW_DATE
		,case   when a._x_cif_recipient_new_cnt = '0' then 1
                else TRY_TO_NUMBER(a._x_cif_recipient_new_cnt, 38, 2) + 1
		end as _X_CIF_RECIPIENT_NEW_CNT
		
		-- Telstra Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_TELSTRA_LONG_CALL
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_telstra_last_call_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _X_TELSTRA_LAST_CALL_DT
		,TRY_TO_NUMBER(a._x_telstra_last_call_dur, 38, 2) as _X_TELSTRA_LAST_CALL_DUR
		,TRY_TO_NUMBER(a._x_telstra_max_call_dur, 38, 2) as _X_TELSTRA_MAX_CALL_DUR
		,a._a_telstra_active_call
		
		-- Crypto UVs
		,TRY_TO_NUMBER(a._a_crypto_mnthly_sum, 38, 2) as _A_CRYPTO_MNTHLY_SUM
		,DATEADD(day, TRY_TO_NUMBER(a._a_crypto_last_pymnt_date, 38, 2), '1960-01-01') as _A_CRYPTO_LAST_PYMNT_DATE
		
		-- M100 Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP1_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP2_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP3_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP4_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP5_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP6_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP7_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP10_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp11_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP11_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp12_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP12_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp13_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP13_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP20_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP21_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_M100_P8_IND_DT
		
		-- M100 App Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P1_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P5_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P8_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P9_DT
 		
		-- CIF Profiling UVs
		,a._l_fingerprint_1
		,a._l_fingerprint_2
		,a._l_fingerprint_3
		,a._l_fingerprint_4

        -- Intelligent Friction UVs
                ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCTN_MSG_SNT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCTN_MSG_SNT
    
         ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCT_INTENT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCT_INTENT
        
from        lcl.fdp_customer_transactions_send_flat a
left join  prd_p01_dmn_fraumd.labmlfrd.dtl_fraudmaster b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where   a.mid_event_ts >= '20250701'
and     a.mid_event_ts >= '20250801'
and     a.dtl_ex_1_5s_01 in ('C205N'
							,'C207N'
							,'C242N'
							,'C244N'
							,'C246N'
							,'N205N'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'X232N'
							,'X243N'
							,'X246N')
and     a.hdr_source = 'NPP OUT'
and     tran_amt > 0
order by    chl_id_ob_userid
            ,transactiondatetime;",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,1436819,1436.819000,23.946983,0.399116,2X-LARGE,32,12.771712
01bdc9aa-3204-a616-0000-c71d2454345a,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DIGI_RAS_D001_V3(""DETECTION"" STRING(16777216), ""CASE_DETECTION"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TGX_TRAN_AMT"" NUMBER(14, 2), ""HOUR"" BIGINT, ""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""CATEGORY"" STRING(134217728), ""LABEL"" BIGINT, ""DTL_EX_0_20S_001"" STRING(16777216), ""FRAUDTYPE"" STRING(16777216), ""RUA_20BYTE_STRING_001"" STRING(16777216), ""_A_BTS_BIO_SE"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_NPP_INBOUND_SUM_AMT"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_DISTANCE"" NUMBER(38, 2), ""_A_GEO_LONG_1"" NUMBER(38, 2), ""_A_GEO_LONG_2"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_MULTI_CNT"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_CUST_AVG_ACCT_BAL"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_T"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_CAPP_DEREGISTARATION_CNT_3"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_2"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_DEVICE_SIM_VENDOR_RATIO_EXC"" NUMBER(38, 2), ""_A_DEVICE_SIMILAR_VENDOR_RATIO"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_CC_CASH_ADVANCE_AMT"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_ALL_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NPP_FTP_SUM"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_4"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_7"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_SHORT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_CLIENT_POSTCODE_FTP_SUM_3"" NUMBER(38, 2), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_CITY_CNT_1"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_7"" NUMBER(38, 2), ""_B_SAFE_RECIP_FRD_EXCLUDED_IND"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_BVT_NUMERIC_1"" NUMBER(38, 2), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_3"" NUMBER(38, 2), ""_I_ALL_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_NETBANK_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_L_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_SHORT"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_SDID_CNT_1"" NUMBER(38, 2), ""_L_SDID_CNT_3"" NUMBER(38, 2), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BRANCH_ID"" STRING(16777216), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_DATETIME_FP_2"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_SCORE_5"" NUMBER(38, 2), ""_L_M_L_4"" NUMBER(38, 2), ""_L_M_L_C"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_ACC_AMT_7D"" NUMBER(38, 2), ""_L_ADV_KEY_COMBO"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_JS"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_FT_RAT_APP_INST"" NUMBER(38, 2), ""_L_HI_DEAD_TIME"" NUMBER(38, 2), ""_L_IS_ACTIVE_CALL"" NUMBER(38, 2), ""_L_IS_LONG_SESS"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_LGN_IMPORT_ANOMALY"" NUMBER(38, 2), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_MINS_LST_LGN_CAPPED"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_SDK"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_N_CRYPTO_CON_N_CNT"" NUMBER(38, 2), ""_N_CRYPTO_POT_N_SUM"" NUMBER(38, 2), ""_N_MPS_MNDT_CNT_24H_1"" NUMBER(38, 2), ""_N_MOB_OTH_TRAN_SUM_1"" NUMBER(38, 2), ""_N_CA_DEVICE_PROFILE_1"" NUMBER(38, 2), ""_N_CA_LGN_CNT_24H_1"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_ID_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_NB_SUM_TPT_4"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_T_2"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_3"" NUMBER(38, 2), ""_A_BTS_MAX_SE_DT"" BIGINT, ""_A_NM_DECLINE_FLAG_DT"" BIGINT, ""_A_TELSTRA_LONG_CALL"" BIGINT, ""_A_CONFIRMED_FRAUD_DT"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_DTL_ACTIONCODE_DT_2"" BIGINT, ""_A_CRD_ACTIONCODE_DT_1"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_GEO_DT_2"" BIGINT, ""_A_DEVICEANOM_MLW_DT"" BIGINT, ""_A_CAPP_PASSWORD_CHANGE_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_2"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_SCH_DT"" BIGINT, ""_A_NPP_OUT_ALL_FTP_DT"" BIGINT, ""_A_BTS_TRF_CNT_DT"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_4_1"" BIGINT, ""_A_5_2"" BIGINT, ""_A_MTH_BTS_WDL_CNT_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP10_DT"" BIGINT, ""_A_CSE_ADD_AUTH_DT"" BIGINT, ""_A_SEC_INTER_SHOP_DT"" BIGINT, ""_A_CLIENT_LOGON_CSR"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_UA_DEVICE_DT_2"" BIGINT, ""_A_SCAMP3_MLW_DT"" BIGINT, ""_A_SCAMP7_MLW_DT"" BIGINT, ""_A_SCAMP_RULEPRIORITISED_DT"" BIGINT, ""_A_CURR_NB_BROWSER_PREV_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP3_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP4_DT"" BIGINT, ""_A_NB_BPAY_LIMIT_INCREASE_DT"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_INB_ALL_DT"" BIGINT, ""_A_NPP_OUT_DECLINE_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_INITIAL_DT"" BIGINT, ""_A_RT_DECLINE_INITIAL_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_2"" BIGINT, ""_A_RETRIEVE_STMT_DETAILS_DT"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_2"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_5"" BIGINT, ""_A_NB_BPAY_ACCT_DT_4"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_PAYID_TRANSFER_OUT"" BIGINT, ""_A_NPP_INB_OFI_PAYID_DT"" BIGINT, ""_A_NPP_OUT_CBA_PAYID_DT"" BIGINT, ""_A_CIF_ESTABLISH_DT"" BIGINT, ""_A_ECV_DOCUMENT_DT"" BIGINT, ""_A_CLIENT_PW_FORGOT"" BIGINT, ""_A_BTS_WDL_CNT_DT"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_NB_GROUP_DT_3"" BIGINT, ""_A_CLIENT_POSTCODE_DT_5"" BIGINT, ""_A_ACCT_AGG_DT"" BIGINT, ""_A_CLIENT_CITY_DATE_10"" BIGINT, ""_A_CLIENT_CITY_DATE_3"" BIGINT, ""_A_CLIENT_CITY_DATE_5"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_NPP_WHITELIST_PAYID_DT"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_NPP_OUT_CNT_DATE"" BIGINT, ""_B_BOND_CNT_DATE"" BIGINT, ""_B_BOND_SUM_DATE"" BIGINT, ""_B_HRISK_BILL_PROF_CNT_DT"" BIGINT, ""_B_RECIP_LINK_SUM_DATE"" BIGINT, ""_I_ALL_LOGONS_FDT"" BIGINT, ""_L_LST_BC_SNOOP_LOGON_DT"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_PUSH_API_DT_2"" BIGINT, ""_L_FIRST_RAT_DT"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_RAT_DT"" BIGINT, ""_N_CRYPTO_CON_DT_LST"" BIGINT, ""_N_TELSTRA_NCRG_DT"" BIGINT, ""_N_FRD_DCLN_COMMS_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_2WP_MN_FRD_RESP_BL_END_DT"" BIGINT, ""_N_2WP_TRAN_DT_1"" BIGINT, ""_N_MRISK_ISP_NCRG_DT"" BIGINT, ""_N_M100_P23_MLW_DT"" BIGINT, ""_N_D_P_C"" BIGINT, ""_N_S_1"" BIGINT, ""_N_S_3"" BIGINT, ""_N_1601_DT"" BIGINT, ""_N_A_3"" BIGINT, ""_N_G_C"" BIGINT, ""_N_NB_MEDIUM_PRIORITY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_CUST_NB_PREV_DT"" BIGINT, ""_N_UA_DEVICE_FIRST_DT_2"" BIGINT, ""_N_SCAMP3_MLW_DT"" BIGINT, ""_N_ALL_LOGON_DT"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_NB_RECIPIENT_DT_3"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON_CSR"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_LOGON_TOKEN"" BIGINT, ""_N_CLIENT_PASSWORD_TEMP"" BIGINT, ""_N_CLIENT_PW_FORGOT"" BIGINT, ""_N_CLIENT_QA_CHG"" BIGINT, ""_N_CLIENT_UNLOCK"" BIGINT, ""_X_NPP_OUT_CNT_DATE"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            A.DETECTION,
            A.CASE_DETECTION,
            B.TTS_TRAN_DATE_ALT,
            B.TGX_TRAN_AMT,
            TRY_CAST(SUBSTR(B.TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            A.CMX_TRAN_ID
, A.SSX_CUST_NUM
, A.CATEGORY
, A.LABEL
, A.DTL_EX_0_20S_001
, A.FRAUDTYPE
, A.RUA_20BYTE_STRING_001,
            B._A_BTS_BIO_SE
, B._A_BTS_BNFT
, B._A_NPP_INB_PMT_VAL
, B._A_PROF_RISK_IND
, B._A_CUST_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_2
, B._A_NPP_INBOUND_SUM_AMT
, B._A_TELSTRA_ACTIVE_CALL
, B._A_TELSTRA_API_EVENT_ID
, B._A_TELSTRA_EXISTING_RELATION
, B._A_LATEST_NCRG_ISP
, B._A_GEO_DISTANCE
, B._A_GEO_LONG_1
, B._A_GEO_LONG_2
, B._A_P_N_H
, B._A_MULTI_CNT
, B._A_CRD_SCAM_SUPP_7D_SUM_1
, B._A_BTS_CUST_AGE
, B._A_P_L_1
, B._A_P_L_C
, B._A_CRD_NPP_PAYMENT_AMOUNT
, B._A_CURR_CAPP_DEVICE_NFTP_CNT
, B._A_2WAY_TYPE
, B._A_CUST_ACCT_BAL
, B._A_CUST_AVG_ACCT_BAL
, B._A_R
, B._A_T
, B._A_U
, B._A_CAPP_DEREGISTARATION_CNT_3
, B._A_CAPP_LOGON_CNT_2
, B._A_CAPP_LOGON_CNT_3
, B._A_NB_LOGONS_CNT_2
, B._A_NB_LOGONS_CNT_3
, B._A_CUST_BROWSER_CNT_3
, B._A_CUST_BROWSER_VER
, B._A_CUST_OS_NAME
, B._A_CUST_OS_VER
, B._A_CURR_NB_BROWSER_CNT
, B._A_DEVICE_SIM_VENDOR_RATIO_EXC
, B._A_DEVICE_SIMILAR_VENDOR_RATIO
, B._A_CIF_ESTABLISH_CUST_PCODE
, B._A_LIST_RL1_SCAM_CUST_CIF
, B._A_PREV_CAPP_DEVICE_CNT
, B._A_PROF_CAPP_DEVICE_CNT_1
, B._A_CC_CASH_ADVANCE_AMT
, B._A_MRISK_FOREIGN_IP_CNTRY_CODE
, B._A_ALL_BPAY_ACCT_2
, B._A_ALL_BPAY_ACCT_SUM_1
, B._A_ALL_BPAY_ACCT_SUM_3
, B._A_NB_BPAY_ACCT_SUM_1
, B._A_NB_BPAY_ACCT_SUM_3
, B._A_NPP_FTP_SUM
, B._A_CUST_NPP_OUT_SUM_AAA_1
, B._A_CUST_NPP_OUT_SUM_AAA_2
, B._A_CUST_NPP_OUT_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_4
, B._A_CUST_SUM_AAA_7
, B._A_CUST_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_SHORT
, B._A_CIF_ESTABLISH_CHANNEL
, B._A_ECV_DOCUMENT_IP
, B._A_CLIENT_POSTCODE_FTP_SUM_3
, B._A_BTS_BCH_SUM
, B._A_MONTHLY_TRANSFER_COUNT_2
, B._A_MONTHLY_TRANSFER_COUNT_3
, B._A_MONTHLY_TRANSFER_COUNT_4
, B._A_MONTHLY_TRANSFER_SUM_4
, B._A_CLIENT_CITY_10
, B._A_CLIENT_CITY_6
, B._A_CLIENT_CITY_CNT_1
, B._A_CLIENT_COUNTRY_1
, B._A_CLIENT_COUNTRY_8
, B._A_CLIENT_COUNTRY_CNT_3
, B._A_CLIENT_COUNTRY_CNT_7
, B._B_SAFE_RECIP_FRD_EXCLUDED_IND
, B._B_RECIP_PROFILE_GLOB_ERROR
, B._B_BVT_NUMERIC_1
, B._B_RECIP_SUM_TODAY
, B._B_CRYPTO_RISK
, B._B_OPEN_LAST_PAYER_CIF_10
, B._B_RECIP_SUM_AAA_1
, B._B_RECIP_SUM_AAA_2
, B._B_RECIP_SUM_AAA_LONG
, B._B_CLIENT_POSTCODE_1
, B._B_CLIENT_POSTCODE_2
, B._B_CLIENT_POSTCODE_3
, B._B_CLIENT_POSTCODE_CNT_1
, B._B_CLIENT_POSTCODE_CNT_2
, B._B_CLIENT_POSTCODE_SUM_1
, B._B_CLIENT_POSTCODE_SUM_2
, B._B_CLIENT_POSTCODE_SUM_3
, B._B_CLIENT_POSTCODE_SUM_5
, B._B_RECIP_SUM_1
, B._I_CUST_TRAN_SUM_3
, B._I_ALL_LOGONS_CNT_1
, B._I_ALL_LOGONS_PERC_1
, B._I_ALL_LOGONS_PERC_3M
, B._I_CAPP_LOGONS_CNT_1
, B._I_CAPP_LOGONS_CNT_3M
, B._I_CAPP_LOGONS_PERC_1
, B._I_NETBANK_LOGONS_CNT_1
, B._I_CUST_NET_L_CNT_1
, B._I_CUST_NET_CNT_1
, B._I_CUST_NET_CNT_SHORT
, B._L_PAYTO_MANDATE_ID
, B._L_PUSH_API_1
, B._L_PUSH_API_2
, B._L_PUSH_API_3
, B._L_PUSH_API_4
, B._L_BC_CONTEXT
, B._L_MUID_AGE_PER_USER
, B._L_SDID_1
, B._L_SDID_CNT_1
, B._L_SDID_CNT_3
, B._L_NC_ACCT_NUM
, B._L_NC_RESPONSE_CODE
, B._L_NC_WINNING_ALG
, B._L_BRANCH_ID
, B._L_PMT_AMT
, B._L_PMT_DESCR
, B._L_SE_SCORE
, B._L_SE_SESS_CNT
, B._L_DATETIME_FP_2
, B._L_FINGERPRINT_1
, B._L_FINGERPRINT_2
, B._L_FINGERPRINT_3
, B._L_FINGERPRINT_4
, B._L_FINGERPRINT_5
, B._L_SCORE_1
, B._L_SCORE_2
, B._L_SCORE_3
, B._L_SCORE_5
, B._L_M_L_4
, B._L_M_L_C
, B._L_BC_SESS_CNT
, B._L_ACC_AMT_1D
, B._L_ACC_AMT_1H
, B._L_ACC_AMT_7D
, B._L_ADV_KEY_COMBO
, B._L_AND_ID_AGE
, B._L_DAYS_LST_DEV_JS
, B._L_DEV_FAM
, B._L_DEV_FAM_AGE
, B._L_FT_RAT_APP_INST
, B._L_HI_DEAD_TIME
, B._L_IS_ACTIVE_CALL
, B._L_IS_LONG_SESS
, B._L_LANG_1
, B._L_LANG_2
, B._L_LANG_3
, B._L_LGN_IMPORT_ANOMALY
, B._L_MAX_30D_SCORE
, B._L_MINS_LST_LGN_CAPPED
, B._L_NUM_SESS_2H
, B._L_NUM_SESS_4H
, B._L_POLICY_NM
, B._L_PROXY_TYPE
, B._L_SCRN_H
, B._L_SESS_CNT_MOB_BROWSER
, B._L_SESS_CNT_MOB_SDK
, B._L_SESS_CNT_WEB
, B._L_TAP_CNT
, B._L_TOUCH_CNT
, B._N_CRYPTO_CON_N_CNT
, B._N_CRYPTO_POT_N_SUM
, B._N_MPS_MNDT_CNT_24H_1
, B._N_MOB_OTH_TRAN_SUM_1
, B._N_CA_DEVICE_PROFILE_1
, B._N_CA_LGN_CNT_24H_1
, B._N_NMCHK_RECIP_CNT_1
, B._N_2WP_TRAN_ID_1
, B._N_CA_DEV_BL_FLAG_2
, B._N_CUST_TXN_COUNT
, B._N_NB_RECIPIENT_AMT_1
, B._N_NB_RECIPIENT_AMT_3
, B._N_NB_SUM_TPT_4
, B._N_D_D_3
, B._N_CUST_NB_DEVICE_CNT
, B._N_CAPP_LINKED_CNT_1
, B._N_CAPP_LINKED_CNT_2
, B._N_CAPP_LOGON_CNT_2
, B._N_ESTAB_SCHEDULE_2
, B._N_LOG_SCR_CONS_2
, B._N_LINKED_RECIP
, B._N_CLIENT_IDCHNG_NB
, B._N_CLIENT_NEW_PAYEE_1
, B._N_CLIENT_NEW_PAYEE_2
, B._N_CLIENT_NEW_PAYEE_3
, B._X_CIF_SENDER_CNT
, B._X_NAME_MATCH_CNT
, B._X_LAST_N_TXN_COUNT
, B._X_T_2
, B._X_T_5
, B._X_NPP_OUT_SUM_3,
            B._A_BTS_MAX_SE_DT
, B._A_NM_DECLINE_FLAG_DT
, B._A_TELSTRA_LONG_CALL
, B._A_CONFIRMED_FRAUD_DT
, B._A_DTL_ACTIONCODE_DT_1
, B._A_DTL_ACTIONCODE_DT_2
, B._A_CRD_ACTIONCODE_DT_1
, B._A_NPP_INBOUND_DATETIME
, B._A_GEO_DT_2
, B._A_DEVICEANOM_MLW_DT
, B._A_CAPP_PASSWORD_CHANGE_DT
, B._A_CD_RTR_DT_1
, B._A_CD_RTR_DT_2
, B._A_IVR_LOGON_DT
, B._A_SCH_DT
, B._A_NPP_OUT_ALL_FTP_DT
, B._A_BTS_TRF_CNT_DT
, B._A_CAPP_DEV_RETR_DT
, B._A_4_1
, B._A_5_2
, B._A_MTH_BTS_WDL_CNT_DT
, B._A_REVERSE_IND_SCAMP10_DT
, B._A_CSE_ADD_AUTH_DT
, B._A_SEC_INTER_SHOP_DT
, B._A_CLIENT_LOGON_CSR
, B._A_DTL_CAPP_NBANK_SSO_DT
, B._A_CLIENT_DETAILS_VIEW
, B._A_MANUAL_NB_LOCK_DT
, B._A_CUST_BROWSER_PREV_DT_2
, B._A_UA_DEVICE_DT_2
, B._A_SCAMP3_MLW_DT
, B._A_SCAMP7_MLW_DT
, B._A_SCAMP_RULEPRIORITISED_DT
, B._A_CURR_NB_BROWSER_PREV_DT
, B._A_REVERSE_IND_SCAMP3_DT
, B._A_REVERSE_IND_SCAMP4_DT
, B._A_NB_BPAY_LIMIT_INCREASE_DT
, B._A_NPP_OUT_PAYID_DT
, B._A_NPP_INB_ALL_DT
, B._A_NPP_OUT_DECLINE_COMMSEE_DT
, B._A_NPP_OUT_HOLD_COMMSEE_DT
, B._A_NPP_OUT_HOLD_INITIAL_DT
, B._A_RT_DECLINE_INITIAL_DT
, B._A_PROF_CAPP_DEVICE_DT_2
, B._A_RETRIEVE_STMT_DETAILS_DT
, B._A_CAPP_REGO_DT
, B._A_ALL_BPAY_ACCT_DT_2
, B._A_ALL_BPAY_ACCT_DT_5
, B._A_NB_BPAY_ACCT_DT_4
, B._A_NB_BPAY_ACCT_FTP_DT_1
, B._A_NPP_PAYID_TRANSFER_OUT
, B._A_NPP_INB_OFI_PAYID_DT
, B._A_NPP_OUT_CBA_PAYID_DT
, B._A_CIF_ESTABLISH_DT
, B._A_ECV_DOCUMENT_DT
, B._A_CLIENT_PW_FORGOT
, B._A_BTS_WDL_CNT_DT
, B._A_NB_GROUP_DT_2
, B._A_NB_GROUP_DT_3
, B._A_CLIENT_POSTCODE_DT_5
, B._A_ACCT_AGG_DT
, B._A_CLIENT_CITY_DATE_10
, B._A_CLIENT_CITY_DATE_3
, B._A_CLIENT_CITY_DATE_5
, B._A_CLIENT_COUNTRY_DATE_1
, B._B_NPP_WHITELIST_PAYID_DT
, B._B_NPP_WHITELIST_SENDER_DT
, B._B_ANY_CUST_FTP_DT
, B._B_NPP_OUT_CNT_DATE
, B._B_BOND_CNT_DATE
, B._B_BOND_SUM_DATE
, B._B_HRISK_BILL_PROF_CNT_DT
, B._B_RECIP_LINK_SUM_DATE
, B._I_ALL_LOGONS_FDT
, B._L_LST_BC_SNOOP_LOGON_DT
, B._L_PUSH_API_DT_1
, B._L_PUSH_API_DT_2
, B._L_FIRST_RAT_DT
, B._L_M_F_2
, B._L_M_F_C
, B._L_IS_RAT_DT
, B._N_CRYPTO_CON_DT_LST
, B._N_TELSTRA_NCRG_DT
, B._N_FRD_DCLN_COMMS_DT
, B._N_2WP_SNT_TRAN_HOLD_END_DT
, B._N_2WP_MN_FRD_RESP_BL_END_DT
, B._N_2WP_TRAN_DT_1
, B._N_MRISK_ISP_NCRG_DT
, B._N_M100_P23_MLW_DT
, B._N_D_P_C
, B._N_S_1
, B._N_S_3
, B._N_1601_DT
, B._N_A_3
, B._N_G_C
, B._N_NB_MEDIUM_PRIORITY_FIRE
, B._N_CUST_BROWSER_FIRST_DT_2
, B._N_CUST_NB_PREV_DT
, B._N_UA_DEVICE_FIRST_DT_2
, B._N_SCAMP3_MLW_DT
, B._N_ALL_LOGON_DT
, B._N_MALWARE_DT
, B._N_NB_RECIPIENT_DT_3
, B._N_CAPP_REG_DT_2
, B._N_CLIENT_IDTO_PW
, B._N_CLIENT_LOGON_CSR
, B._N_CLIENT_LOGON_FINEST
, B._N_CLIENT_LOGON_TOKEN
, B._N_CLIENT_PASSWORD_TEMP
, B._N_CLIENT_PW_FORGOT
, B._N_CLIENT_QA_CHG
, B._N_CLIENT_UNLOCK
, B._X_NPP_OUT_CNT_DATE
        FROM
            LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_TEMP_DIGI_RAS_D001_V3 AS A
            INNER JOIN (
               SELECT
                   TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
                   TTS_TRAN_DATE_ALT, 
                   TTS_TRAN_TIME_ALT,
                   TRY_CAST(TGX_TRAN_AMT AS DECIMAL(14,2)) AS TGX_TRAN_AMT,
                   	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_MAX_SE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NM_DECLINE_FLAG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00'))
            END as _A_TELSTRA_LONG_CALL
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CONFIRMED_FRAUD_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_GEO_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DEVICEANOM_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_PASSWORD_CHANGE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_ALL_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_TRF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_4_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MTH_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP10_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CSE_ADD_AUTH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SEC_INTER_SHOP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP7_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP_RULEPRIORITISED_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CURR_NB_BROWSER_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP3_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP4_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_LIMIT_INCREASE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_DECLINE_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RT_DECLINE_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RETRIEVE_STMT_DETAILS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_PAYID_TRANSFER_OUT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_OFI_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_CBA_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CIF_ESTABLISH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ECV_DOCUMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ACCT_AGG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_10
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_HRISK_BILL_PROF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_RECIP_LINK_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00'))
            END as _I_ALL_LOGONS_FDT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_LST_BC_SNOOP_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_FIRST_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CRYPTO_CON_DT_LST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_TELSTRA_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_FRD_DCLN_COMMS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_MN_FRD_RESP_BL_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_TRAN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MRISK_ISP_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_M100_P23_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_D_P_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1601_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_A_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_G_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_MEDIUM_PRIORITY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_UA_DEVICE_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_ALL_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_RECIPIENT_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_TOKEN
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PASSWORD_TEMP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_QA_CHG
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_UNLOCK
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _X_NPP_OUT_CNT_DATE
        
                   ,             try_to_number(_a_bts_bio_se, 38, 2) as _a_bts_bio_se
            ,_A_BTS_BNFT
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,try_to_number(_a_npp_inbound_sum_amt, 38, 2) as _a_npp_inbound_sum_amt
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_distance, 38, 2) as _a_geo_distance
            ,try_to_number(_a_geo_long_1, 38, 2) as _a_geo_long_1
            ,try_to_number(_a_geo_long_2, 38, 2) as _a_geo_long_2
            ,_A_P_N_H
            ,try_to_number(_a_multi_cnt, 38, 2) as _a_multi_cnt
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_cust_avg_acct_bal, 38, 2) as _a_cust_avg_acct_bal
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_t, 38, 2) as _a_t
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_capp_deregistaration_cnt_3, 38, 2) as _a_capp_deregistaration_cnt_3
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_nb_logons_cnt_2, 38, 2) as _a_nb_logons_cnt_2
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,try_to_number(_a_cust_browser_cnt_3, 38, 2) as _a_cust_browser_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,try_to_number(_a_device_sim_vendor_ratio_exc, 38, 2) as _a_device_sim_vendor_ratio_exc
            ,try_to_number(_a_device_similar_vendor_ratio, 38, 2) as _a_device_similar_vendor_ratio
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,try_to_number(_a_prev_capp_device_cnt, 38, 2) as _a_prev_capp_device_cnt
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,try_to_number(_a_cc_cash_advance_amt, 38, 2) as _a_cc_cash_advance_amt
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_all_bpay_acct_sum_3, 38, 2) as _a_all_bpay_acct_sum_3
            ,try_to_number(_a_nb_bpay_acct_sum_1, 38, 2) as _a_nb_bpay_acct_sum_1
            ,try_to_number(_a_nb_bpay_acct_sum_3, 38, 2) as _a_nb_bpay_acct_sum_3
            ,try_to_number(_a_npp_ftp_sum, 38, 2) as _a_npp_ftp_sum
            ,try_to_number(_a_cust_npp_out_sum_aaa_1, 38, 2) as _a_cust_npp_out_sum_aaa_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_4, 38, 2) as _a_cust_sum_aaa_4
            ,try_to_number(_a_cust_sum_aaa_7, 38, 2) as _a_cust_sum_aaa_7
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_short, 38, 2) as _a_cust_sum_aaa_short
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_client_postcode_ftp_sum_3, 38, 2) as _a_client_postcode_ftp_sum_3
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,try_to_number(_a_client_city_cnt_1, 38, 2) as _a_client_city_cnt_1
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_a_client_country_cnt_7, 38, 2) as _a_client_country_cnt_7
            ,try_to_number(_b_safe_recip_frd_excluded_ind, 38, 2) as _b_safe_recip_frd_excluded_ind
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_bvt_numeric_1, 38, 2) as _b_bvt_numeric_1
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_cust_tran_sum_3, 38, 2) as _i_cust_tran_sum_3
            ,try_to_number(_i_all_logons_cnt_1, 38, 2) as _i_all_logons_cnt_1
            ,try_to_number(_i_all_logons_perc_1, 38, 2) as _i_all_logons_perc_1
            ,try_to_number(_i_all_logons_perc_3m, 38, 2) as _i_all_logons_perc_3m
            ,try_to_number(_i_capp_logons_cnt_1, 38, 2) as _i_capp_logons_cnt_1
            ,try_to_number(_i_capp_logons_cnt_3m, 38, 2) as _i_capp_logons_cnt_3m
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,try_to_number(_i_netbank_logons_cnt_1, 38, 2) as _i_netbank_logons_cnt_1
            ,try_to_number(_i_cust_net_l_cnt_1, 38, 2) as _i_cust_net_l_cnt_1
            ,try_to_number(_i_cust_net_cnt_1, 38, 2) as _i_cust_net_cnt_1
            ,try_to_number(_i_cust_net_cnt_short, 38, 2) as _i_cust_net_cnt_short
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,_L_SDID_1
            ,try_to_number(_l_sdid_cnt_1, 38, 2) as _l_sdid_cnt_1
            ,try_to_number(_l_sdid_cnt_3, 38, 2) as _l_sdid_cnt_3
            ,_L_NC_ACCT_NUM
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,_L_BRANCH_ID
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_datetime_fp_2, 38, 2) as _l_datetime_fp_2
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_score_5, 38, 2) as _l_score_5
            ,try_to_number(_l_m_l_4, 38, 2) as _l_m_l_4
            ,try_to_number(_l_m_l_c, 38, 2) as _l_m_l_c
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_acc_amt_7d, 38, 2) as _l_acc_amt_7d
            ,try_to_number(_l_adv_key_combo, 38, 2) as _l_adv_key_combo
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_days_lst_dev_js, 38, 2) as _l_days_lst_dev_js
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_ft_rat_app_inst, 38, 2) as _l_ft_rat_app_inst
            ,try_to_number(_l_hi_dead_time, 38, 2) as _l_hi_dead_time
            ,try_to_number(_l_is_active_call, 38, 2) as _l_is_active_call
            ,try_to_number(_l_is_long_sess, 38, 2) as _l_is_long_sess
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_lgn_import_anomaly, 38, 2) as _l_lgn_import_anomaly
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_mins_lst_lgn_capped, 38, 2) as _l_mins_lst_lgn_capped
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,_L_POLICY_NM
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_mob_sdk, 38, 2) as _l_sess_cnt_mob_sdk
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_n_crypto_con_n_cnt, 38, 2) as _n_crypto_con_n_cnt
            ,try_to_number(_n_crypto_pot_n_sum, 38, 2) as _n_crypto_pot_n_sum
            ,try_to_number(_n_mps_mndt_cnt_24h_1, 38, 2) as _n_mps_mndt_cnt_24h_1
            ,try_to_number(_n_mob_oth_tran_sum_1, 38, 2) as _n_mob_oth_tran_sum_1
            ,try_to_number(_n_ca_device_profile_1, 38, 2) as _n_ca_device_profile_1
            ,try_to_number(_n_ca_lgn_cnt_24h_1, 38, 2) as _n_ca_lgn_cnt_24h_1
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_id_1, 38, 2) as _n_2wp_tran_id_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,try_to_number(_n_nb_sum_tpt_4, 38, 2) as _n_nb_sum_tpt_4
            ,_N_D_D_3
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,try_to_number(_n_capp_logon_cnt_2, 38, 2) as _n_capp_logon_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_t_2, 38, 2) as _x_t_2
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_npp_out_sum_3, 38, 2) as _x_npp_out_sum_3
                FROM
                   LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
                WHERE
                    TTS_TRAN_DATE_ALT BETWEEN 20241207 AND 20250714
            ) AS B
        ON
            A.CMX_TRAN_ID = B.CMX_TRAN_ID
            AND A.TTS_TRAN_DATE_ALT = B.TTS_TRAN_DATE_ALT
    )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1433258,1433.258000,23.887633,0.398127,2X-LARGE,32,12.740064
01bdca7b-3204-a619-0000-c71d245c503a,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DIGI_RAS_D001_V5(""DETECTION"" STRING(16777216), ""CASE_DETECTION"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TGX_TRAN_AMT"" NUMBER(14, 2), ""HOUR"" BIGINT, ""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""CATEGORY"" STRING(134217728), ""LABEL"" BIGINT, ""DTL_EX_0_20S_001"" STRING(16777216), ""FRAUDTYPE"" STRING(16777216), ""RUA_20BYTE_STRING_001"" STRING(16777216), ""_A_BTS_BIO_SE"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_NPP_INBOUND_SUM_AMT"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_DISTANCE"" NUMBER(38, 2), ""_A_GEO_LONG_1"" NUMBER(38, 2), ""_A_GEO_LONG_2"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_MULTI_CNT"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_CUST_AVG_ACCT_BAL"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_T"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_CAPP_DEREGISTARATION_CNT_3"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_2"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_DEVICE_SIM_VENDOR_RATIO_EXC"" NUMBER(38, 2), ""_A_DEVICE_SIMILAR_VENDOR_RATIO"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_CC_CASH_ADVANCE_AMT"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_ALL_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NPP_FTP_SUM"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_4"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_7"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_SHORT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_CLIENT_POSTCODE_FTP_SUM_3"" NUMBER(38, 2), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_CITY_CNT_1"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_7"" NUMBER(38, 2), ""_B_SAFE_RECIP_FRD_EXCLUDED_IND"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_BVT_NUMERIC_1"" NUMBER(38, 2), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_3"" NUMBER(38, 2), ""_I_ALL_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_NETBANK_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_L_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_SHORT"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_SDID_CNT_1"" NUMBER(38, 2), ""_L_SDID_CNT_3"" NUMBER(38, 2), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BRANCH_ID"" STRING(16777216), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_DATETIME_FP_2"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_SCORE_5"" NUMBER(38, 2), ""_L_M_L_4"" NUMBER(38, 2), ""_L_M_L_C"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_ACC_AMT_7D"" NUMBER(38, 2), ""_L_ADV_KEY_COMBO"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_JS"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_FT_RAT_APP_INST"" NUMBER(38, 2), ""_L_HI_DEAD_TIME"" NUMBER(38, 2), ""_L_IS_ACTIVE_CALL"" NUMBER(38, 2), ""_L_IS_LONG_SESS"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_LGN_IMPORT_ANOMALY"" NUMBER(38, 2), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_MINS_LST_LGN_CAPPED"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_SDK"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_N_CRYPTO_CON_N_CNT"" NUMBER(38, 2), ""_N_CRYPTO_POT_N_SUM"" NUMBER(38, 2), ""_N_MPS_MNDT_CNT_24H_1"" NUMBER(38, 2), ""_N_MOB_OTH_TRAN_SUM_1"" NUMBER(38, 2), ""_N_CA_DEVICE_PROFILE_1"" NUMBER(38, 2), ""_N_CA_LGN_CNT_24H_1"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_ID_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_NB_SUM_TPT_4"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_T_2"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_3"" NUMBER(38, 2), ""_A_BTS_MAX_SE_DT"" BIGINT, ""_A_NM_DECLINE_FLAG_DT"" BIGINT, ""_A_TELSTRA_LONG_CALL"" BIGINT, ""_A_CONFIRMED_FRAUD_DT"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_DTL_ACTIONCODE_DT_2"" BIGINT, ""_A_CRD_ACTIONCODE_DT_1"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_GEO_DT_2"" BIGINT, ""_A_DEVICEANOM_MLW_DT"" BIGINT, ""_A_CAPP_PASSWORD_CHANGE_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_2"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_SCH_DT"" BIGINT, ""_A_NPP_OUT_ALL_FTP_DT"" BIGINT, ""_A_BTS_TRF_CNT_DT"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_4_1"" BIGINT, ""_A_5_2"" BIGINT, ""_A_MTH_BTS_WDL_CNT_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP10_DT"" BIGINT, ""_A_CSE_ADD_AUTH_DT"" BIGINT, ""_A_SEC_INTER_SHOP_DT"" BIGINT, ""_A_CLIENT_LOGON_CSR"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_UA_DEVICE_DT_2"" BIGINT, ""_A_SCAMP3_MLW_DT"" BIGINT, ""_A_SCAMP7_MLW_DT"" BIGINT, ""_A_SCAMP_RULEPRIORITISED_DT"" BIGINT, ""_A_CURR_NB_BROWSER_PREV_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP3_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP4_DT"" BIGINT, ""_A_NB_BPAY_LIMIT_INCREASE_DT"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_INB_ALL_DT"" BIGINT, ""_A_NPP_OUT_DECLINE_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_INITIAL_DT"" BIGINT, ""_A_RT_DECLINE_INITIAL_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_2"" BIGINT, ""_A_RETRIEVE_STMT_DETAILS_DT"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_2"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_5"" BIGINT, ""_A_NB_BPAY_ACCT_DT_4"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_PAYID_TRANSFER_OUT"" BIGINT, ""_A_NPP_INB_OFI_PAYID_DT"" BIGINT, ""_A_NPP_OUT_CBA_PAYID_DT"" BIGINT, ""_A_CIF_ESTABLISH_DT"" BIGINT, ""_A_ECV_DOCUMENT_DT"" BIGINT, ""_A_CLIENT_PW_FORGOT"" BIGINT, ""_A_BTS_WDL_CNT_DT"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_NB_GROUP_DT_3"" BIGINT, ""_A_CLIENT_POSTCODE_DT_5"" BIGINT, ""_A_ACCT_AGG_DT"" BIGINT, ""_A_CLIENT_CITY_DATE_10"" BIGINT, ""_A_CLIENT_CITY_DATE_3"" BIGINT, ""_A_CLIENT_CITY_DATE_5"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_NPP_WHITELIST_PAYID_DT"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_NPP_OUT_CNT_DATE"" BIGINT, ""_B_BOND_CNT_DATE"" BIGINT, ""_B_BOND_SUM_DATE"" BIGINT, ""_B_HRISK_BILL_PROF_CNT_DT"" BIGINT, ""_B_RECIP_LINK_SUM_DATE"" BIGINT, ""_I_ALL_LOGONS_FDT"" BIGINT, ""_L_LST_BC_SNOOP_LOGON_DT"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_PUSH_API_DT_2"" BIGINT, ""_L_FIRST_RAT_DT"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_RAT_DT"" BIGINT, ""_N_CRYPTO_CON_DT_LST"" BIGINT, ""_N_TELSTRA_NCRG_DT"" BIGINT, ""_N_FRD_DCLN_COMMS_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_2WP_MN_FRD_RESP_BL_END_DT"" BIGINT, ""_N_2WP_TRAN_DT_1"" BIGINT, ""_N_MRISK_ISP_NCRG_DT"" BIGINT, ""_N_M100_P23_MLW_DT"" BIGINT, ""_N_D_P_C"" BIGINT, ""_N_S_1"" BIGINT, ""_N_S_3"" BIGINT, ""_N_1601_DT"" BIGINT, ""_N_A_3"" BIGINT, ""_N_G_C"" BIGINT, ""_N_NB_MEDIUM_PRIORITY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_CUST_NB_PREV_DT"" BIGINT, ""_N_UA_DEVICE_FIRST_DT_2"" BIGINT, ""_N_SCAMP3_MLW_DT"" BIGINT, ""_N_ALL_LOGON_DT"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_NB_RECIPIENT_DT_3"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON_CSR"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_LOGON_TOKEN"" BIGINT, ""_N_CLIENT_PASSWORD_TEMP"" BIGINT, ""_N_CLIENT_PW_FORGOT"" BIGINT, ""_N_CLIENT_QA_CHG"" BIGINT, ""_N_CLIENT_UNLOCK"" BIGINT, ""_X_NPP_OUT_CNT_DATE"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            A.DETECTION,
            A.CASE_DETECTION,
            B.TTS_TRAN_DATE_ALT,
            B.TGX_TRAN_AMT,
            TRY_CAST(SUBSTR(B.TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            A.CMX_TRAN_ID
, A.SSX_CUST_NUM
, A.CATEGORY
, A.LABEL
, A.DTL_EX_0_20S_001
, A.FRAUDTYPE
, A.RUA_20BYTE_STRING_001,
            B._A_BTS_BIO_SE
, B._A_BTS_BNFT
, B._A_NPP_INB_PMT_VAL
, B._A_PROF_RISK_IND
, B._A_CUST_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_2
, B._A_NPP_INBOUND_SUM_AMT
, B._A_TELSTRA_ACTIVE_CALL
, B._A_TELSTRA_API_EVENT_ID
, B._A_TELSTRA_EXISTING_RELATION
, B._A_LATEST_NCRG_ISP
, B._A_GEO_DISTANCE
, B._A_GEO_LONG_1
, B._A_GEO_LONG_2
, B._A_P_N_H
, B._A_MULTI_CNT
, B._A_CRD_SCAM_SUPP_7D_SUM_1
, B._A_BTS_CUST_AGE
, B._A_P_L_1
, B._A_P_L_C
, B._A_CRD_NPP_PAYMENT_AMOUNT
, B._A_CURR_CAPP_DEVICE_NFTP_CNT
, B._A_2WAY_TYPE
, B._A_CUST_ACCT_BAL
, B._A_CUST_AVG_ACCT_BAL
, B._A_R
, B._A_T
, B._A_U
, B._A_CAPP_DEREGISTARATION_CNT_3
, B._A_CAPP_LOGON_CNT_2
, B._A_CAPP_LOGON_CNT_3
, B._A_NB_LOGONS_CNT_2
, B._A_NB_LOGONS_CNT_3
, B._A_CUST_BROWSER_CNT_3
, B._A_CUST_BROWSER_VER
, B._A_CUST_OS_NAME
, B._A_CUST_OS_VER
, B._A_CURR_NB_BROWSER_CNT
, B._A_DEVICE_SIM_VENDOR_RATIO_EXC
, B._A_DEVICE_SIMILAR_VENDOR_RATIO
, B._A_CIF_ESTABLISH_CUST_PCODE
, B._A_LIST_RL1_SCAM_CUST_CIF
, B._A_PREV_CAPP_DEVICE_CNT
, B._A_PROF_CAPP_DEVICE_CNT_1
, B._A_CC_CASH_ADVANCE_AMT
, B._A_MRISK_FOREIGN_IP_CNTRY_CODE
, B._A_ALL_BPAY_ACCT_2
, B._A_ALL_BPAY_ACCT_SUM_1
, B._A_ALL_BPAY_ACCT_SUM_3
, B._A_NB_BPAY_ACCT_SUM_1
, B._A_NB_BPAY_ACCT_SUM_3
, B._A_NPP_FTP_SUM
, B._A_CUST_NPP_OUT_SUM_AAA_1
, B._A_CUST_NPP_OUT_SUM_AAA_2
, B._A_CUST_NPP_OUT_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_4
, B._A_CUST_SUM_AAA_7
, B._A_CUST_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_SHORT
, B._A_CIF_ESTABLISH_CHANNEL
, B._A_ECV_DOCUMENT_IP
, B._A_CLIENT_POSTCODE_FTP_SUM_3
, B._A_BTS_BCH_SUM
, B._A_MONTHLY_TRANSFER_COUNT_2
, B._A_MONTHLY_TRANSFER_COUNT_3
, B._A_MONTHLY_TRANSFER_COUNT_4
, B._A_MONTHLY_TRANSFER_SUM_4
, B._A_CLIENT_CITY_10
, B._A_CLIENT_CITY_6
, B._A_CLIENT_CITY_CNT_1
, B._A_CLIENT_COUNTRY_1
, B._A_CLIENT_COUNTRY_8
, B._A_CLIENT_COUNTRY_CNT_3
, B._A_CLIENT_COUNTRY_CNT_7
, B._B_SAFE_RECIP_FRD_EXCLUDED_IND
, B._B_RECIP_PROFILE_GLOB_ERROR
, B._B_BVT_NUMERIC_1
, B._B_RECIP_SUM_TODAY
, B._B_CRYPTO_RISK
, B._B_OPEN_LAST_PAYER_CIF_10
, B._B_RECIP_SUM_AAA_1
, B._B_RECIP_SUM_AAA_2
, B._B_RECIP_SUM_AAA_LONG
, B._B_CLIENT_POSTCODE_1
, B._B_CLIENT_POSTCODE_2
, B._B_CLIENT_POSTCODE_3
, B._B_CLIENT_POSTCODE_CNT_1
, B._B_CLIENT_POSTCODE_CNT_2
, B._B_CLIENT_POSTCODE_SUM_1
, B._B_CLIENT_POSTCODE_SUM_2
, B._B_CLIENT_POSTCODE_SUM_3
, B._B_CLIENT_POSTCODE_SUM_5
, B._B_RECIP_SUM_1
, B._I_CUST_TRAN_SUM_3
, B._I_ALL_LOGONS_CNT_1
, B._I_ALL_LOGONS_PERC_1
, B._I_ALL_LOGONS_PERC_3M
, B._I_CAPP_LOGONS_CNT_1
, B._I_CAPP_LOGONS_CNT_3M
, B._I_CAPP_LOGONS_PERC_1
, B._I_NETBANK_LOGONS_CNT_1
, B._I_CUST_NET_L_CNT_1
, B._I_CUST_NET_CNT_1
, B._I_CUST_NET_CNT_SHORT
, B._L_PAYTO_MANDATE_ID
, B._L_PUSH_API_1
, B._L_PUSH_API_2
, B._L_PUSH_API_3
, B._L_PUSH_API_4
, B._L_BC_CONTEXT
, B._L_MUID_AGE_PER_USER
, B._L_SDID_1
, B._L_SDID_CNT_1
, B._L_SDID_CNT_3
, B._L_NC_ACCT_NUM
, B._L_NC_RESPONSE_CODE
, B._L_NC_WINNING_ALG
, B._L_BRANCH_ID
, B._L_PMT_AMT
, B._L_PMT_DESCR
, B._L_SE_SCORE
, B._L_SE_SESS_CNT
, B._L_DATETIME_FP_2
, B._L_FINGERPRINT_1
, B._L_FINGERPRINT_2
, B._L_FINGERPRINT_3
, B._L_FINGERPRINT_4
, B._L_FINGERPRINT_5
, B._L_SCORE_1
, B._L_SCORE_2
, B._L_SCORE_3
, B._L_SCORE_5
, B._L_M_L_4
, B._L_M_L_C
, B._L_BC_SESS_CNT
, B._L_ACC_AMT_1D
, B._L_ACC_AMT_1H
, B._L_ACC_AMT_7D
, B._L_ADV_KEY_COMBO
, B._L_AND_ID_AGE
, B._L_DAYS_LST_DEV_JS
, B._L_DEV_FAM
, B._L_DEV_FAM_AGE
, B._L_FT_RAT_APP_INST
, B._L_HI_DEAD_TIME
, B._L_IS_ACTIVE_CALL
, B._L_IS_LONG_SESS
, B._L_LANG_1
, B._L_LANG_2
, B._L_LANG_3
, B._L_LGN_IMPORT_ANOMALY
, B._L_MAX_30D_SCORE
, B._L_MINS_LST_LGN_CAPPED
, B._L_NUM_SESS_2H
, B._L_NUM_SESS_4H
, B._L_POLICY_NM
, B._L_PROXY_TYPE
, B._L_SCRN_H
, B._L_SESS_CNT_MOB_BROWSER
, B._L_SESS_CNT_MOB_SDK
, B._L_SESS_CNT_WEB
, B._L_TAP_CNT
, B._L_TOUCH_CNT
, B._N_CRYPTO_CON_N_CNT
, B._N_CRYPTO_POT_N_SUM
, B._N_MPS_MNDT_CNT_24H_1
, B._N_MOB_OTH_TRAN_SUM_1
, B._N_CA_DEVICE_PROFILE_1
, B._N_CA_LGN_CNT_24H_1
, B._N_NMCHK_RECIP_CNT_1
, B._N_2WP_TRAN_ID_1
, B._N_CA_DEV_BL_FLAG_2
, B._N_CUST_TXN_COUNT
, B._N_NB_RECIPIENT_AMT_1
, B._N_NB_RECIPIENT_AMT_3
, B._N_NB_SUM_TPT_4
, B._N_D_D_3
, B._N_CUST_NB_DEVICE_CNT
, B._N_CAPP_LINKED_CNT_1
, B._N_CAPP_LINKED_CNT_2
, B._N_CAPP_LOGON_CNT_2
, B._N_ESTAB_SCHEDULE_2
, B._N_LOG_SCR_CONS_2
, B._N_LINKED_RECIP
, B._N_CLIENT_IDCHNG_NB
, B._N_CLIENT_NEW_PAYEE_1
, B._N_CLIENT_NEW_PAYEE_2
, B._N_CLIENT_NEW_PAYEE_3
, B._X_CIF_SENDER_CNT
, B._X_NAME_MATCH_CNT
, B._X_LAST_N_TXN_COUNT
, B._X_T_2
, B._X_T_5
, B._X_NPP_OUT_SUM_3,
            B._A_BTS_MAX_SE_DT
, B._A_NM_DECLINE_FLAG_DT
, B._A_TELSTRA_LONG_CALL
, B._A_CONFIRMED_FRAUD_DT
, B._A_DTL_ACTIONCODE_DT_1
, B._A_DTL_ACTIONCODE_DT_2
, B._A_CRD_ACTIONCODE_DT_1
, B._A_NPP_INBOUND_DATETIME
, B._A_GEO_DT_2
, B._A_DEVICEANOM_MLW_DT
, B._A_CAPP_PASSWORD_CHANGE_DT
, B._A_CD_RTR_DT_1
, B._A_CD_RTR_DT_2
, B._A_IVR_LOGON_DT
, B._A_SCH_DT
, B._A_NPP_OUT_ALL_FTP_DT
, B._A_BTS_TRF_CNT_DT
, B._A_CAPP_DEV_RETR_DT
, B._A_4_1
, B._A_5_2
, B._A_MTH_BTS_WDL_CNT_DT
, B._A_REVERSE_IND_SCAMP10_DT
, B._A_CSE_ADD_AUTH_DT
, B._A_SEC_INTER_SHOP_DT
, B._A_CLIENT_LOGON_CSR
, B._A_DTL_CAPP_NBANK_SSO_DT
, B._A_CLIENT_DETAILS_VIEW
, B._A_MANUAL_NB_LOCK_DT
, B._A_CUST_BROWSER_PREV_DT_2
, B._A_UA_DEVICE_DT_2
, B._A_SCAMP3_MLW_DT
, B._A_SCAMP7_MLW_DT
, B._A_SCAMP_RULEPRIORITISED_DT
, B._A_CURR_NB_BROWSER_PREV_DT
, B._A_REVERSE_IND_SCAMP3_DT
, B._A_REVERSE_IND_SCAMP4_DT
, B._A_NB_BPAY_LIMIT_INCREASE_DT
, B._A_NPP_OUT_PAYID_DT
, B._A_NPP_INB_ALL_DT
, B._A_NPP_OUT_DECLINE_COMMSEE_DT
, B._A_NPP_OUT_HOLD_COMMSEE_DT
, B._A_NPP_OUT_HOLD_INITIAL_DT
, B._A_RT_DECLINE_INITIAL_DT
, B._A_PROF_CAPP_DEVICE_DT_2
, B._A_RETRIEVE_STMT_DETAILS_DT
, B._A_CAPP_REGO_DT
, B._A_ALL_BPAY_ACCT_DT_2
, B._A_ALL_BPAY_ACCT_DT_5
, B._A_NB_BPAY_ACCT_DT_4
, B._A_NB_BPAY_ACCT_FTP_DT_1
, B._A_NPP_PAYID_TRANSFER_OUT
, B._A_NPP_INB_OFI_PAYID_DT
, B._A_NPP_OUT_CBA_PAYID_DT
, B._A_CIF_ESTABLISH_DT
, B._A_ECV_DOCUMENT_DT
, B._A_CLIENT_PW_FORGOT
, B._A_BTS_WDL_CNT_DT
, B._A_NB_GROUP_DT_2
, B._A_NB_GROUP_DT_3
, B._A_CLIENT_POSTCODE_DT_5
, B._A_ACCT_AGG_DT
, B._A_CLIENT_CITY_DATE_10
, B._A_CLIENT_CITY_DATE_3
, B._A_CLIENT_CITY_DATE_5
, B._A_CLIENT_COUNTRY_DATE_1
, B._B_NPP_WHITELIST_PAYID_DT
, B._B_NPP_WHITELIST_SENDER_DT
, B._B_ANY_CUST_FTP_DT
, B._B_NPP_OUT_CNT_DATE
, B._B_BOND_CNT_DATE
, B._B_BOND_SUM_DATE
, B._B_HRISK_BILL_PROF_CNT_DT
, B._B_RECIP_LINK_SUM_DATE
, B._I_ALL_LOGONS_FDT
, B._L_LST_BC_SNOOP_LOGON_DT
, B._L_PUSH_API_DT_1
, B._L_PUSH_API_DT_2
, B._L_FIRST_RAT_DT
, B._L_M_F_2
, B._L_M_F_C
, B._L_IS_RAT_DT
, B._N_CRYPTO_CON_DT_LST
, B._N_TELSTRA_NCRG_DT
, B._N_FRD_DCLN_COMMS_DT
, B._N_2WP_SNT_TRAN_HOLD_END_DT
, B._N_2WP_MN_FRD_RESP_BL_END_DT
, B._N_2WP_TRAN_DT_1
, B._N_MRISK_ISP_NCRG_DT
, B._N_M100_P23_MLW_DT
, B._N_D_P_C
, B._N_S_1
, B._N_S_3
, B._N_1601_DT
, B._N_A_3
, B._N_G_C
, B._N_NB_MEDIUM_PRIORITY_FIRE
, B._N_CUST_BROWSER_FIRST_DT_2
, B._N_CUST_NB_PREV_DT
, B._N_UA_DEVICE_FIRST_DT_2
, B._N_SCAMP3_MLW_DT
, B._N_ALL_LOGON_DT
, B._N_MALWARE_DT
, B._N_NB_RECIPIENT_DT_3
, B._N_CAPP_REG_DT_2
, B._N_CLIENT_IDTO_PW
, B._N_CLIENT_LOGON_CSR
, B._N_CLIENT_LOGON_FINEST
, B._N_CLIENT_LOGON_TOKEN
, B._N_CLIENT_PASSWORD_TEMP
, B._N_CLIENT_PW_FORGOT
, B._N_CLIENT_QA_CHG
, B._N_CLIENT_UNLOCK
, B._X_NPP_OUT_CNT_DATE
        FROM
            LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_TEMP_DIGI_RAS_D001_V5 AS A
            INNER JOIN (
               SELECT
                   TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
                   TTS_TRAN_DATE_ALT, 
                   TTS_TRAN_TIME_ALT,
                   TRY_CAST(TGX_TRAN_AMT AS DECIMAL(14,2)) AS TGX_TRAN_AMT,
                   	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_MAX_SE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NM_DECLINE_FLAG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00'))
            END as _A_TELSTRA_LONG_CALL
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CONFIRMED_FRAUD_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_GEO_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DEVICEANOM_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_PASSWORD_CHANGE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_ALL_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_TRF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_4_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MTH_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP10_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CSE_ADD_AUTH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SEC_INTER_SHOP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP7_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP_RULEPRIORITISED_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CURR_NB_BROWSER_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP3_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP4_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_LIMIT_INCREASE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_DECLINE_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RT_DECLINE_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RETRIEVE_STMT_DETAILS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_PAYID_TRANSFER_OUT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_OFI_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_CBA_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CIF_ESTABLISH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ECV_DOCUMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ACCT_AGG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_10
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_HRISK_BILL_PROF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_RECIP_LINK_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00'))
            END as _I_ALL_LOGONS_FDT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_LST_BC_SNOOP_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_FIRST_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CRYPTO_CON_DT_LST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_TELSTRA_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_FRD_DCLN_COMMS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_MN_FRD_RESP_BL_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_TRAN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MRISK_ISP_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_M100_P23_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_D_P_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1601_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_A_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_G_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_MEDIUM_PRIORITY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_UA_DEVICE_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_ALL_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_RECIPIENT_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_TOKEN
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PASSWORD_TEMP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_QA_CHG
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_UNLOCK
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _X_NPP_OUT_CNT_DATE
        
                   ,             try_to_number(_a_bts_bio_se, 38, 2) as _a_bts_bio_se
            ,_A_BTS_BNFT
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,try_to_number(_a_npp_inbound_sum_amt, 38, 2) as _a_npp_inbound_sum_amt
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_distance, 38, 2) as _a_geo_distance
            ,try_to_number(_a_geo_long_1, 38, 2) as _a_geo_long_1
            ,try_to_number(_a_geo_long_2, 38, 2) as _a_geo_long_2
            ,_A_P_N_H
            ,try_to_number(_a_multi_cnt, 38, 2) as _a_multi_cnt
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_cust_avg_acct_bal, 38, 2) as _a_cust_avg_acct_bal
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_t, 38, 2) as _a_t
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_capp_deregistaration_cnt_3, 38, 2) as _a_capp_deregistaration_cnt_3
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_nb_logons_cnt_2, 38, 2) as _a_nb_logons_cnt_2
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,try_to_number(_a_cust_browser_cnt_3, 38, 2) as _a_cust_browser_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,try_to_number(_a_device_sim_vendor_ratio_exc, 38, 2) as _a_device_sim_vendor_ratio_exc
            ,try_to_number(_a_device_similar_vendor_ratio, 38, 2) as _a_device_similar_vendor_ratio
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,try_to_number(_a_prev_capp_device_cnt, 38, 2) as _a_prev_capp_device_cnt
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,try_to_number(_a_cc_cash_advance_amt, 38, 2) as _a_cc_cash_advance_amt
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_all_bpay_acct_sum_3, 38, 2) as _a_all_bpay_acct_sum_3
            ,try_to_number(_a_nb_bpay_acct_sum_1, 38, 2) as _a_nb_bpay_acct_sum_1
            ,try_to_number(_a_nb_bpay_acct_sum_3, 38, 2) as _a_nb_bpay_acct_sum_3
            ,try_to_number(_a_npp_ftp_sum, 38, 2) as _a_npp_ftp_sum
            ,try_to_number(_a_cust_npp_out_sum_aaa_1, 38, 2) as _a_cust_npp_out_sum_aaa_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_4, 38, 2) as _a_cust_sum_aaa_4
            ,try_to_number(_a_cust_sum_aaa_7, 38, 2) as _a_cust_sum_aaa_7
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_short, 38, 2) as _a_cust_sum_aaa_short
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_client_postcode_ftp_sum_3, 38, 2) as _a_client_postcode_ftp_sum_3
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,try_to_number(_a_client_city_cnt_1, 38, 2) as _a_client_city_cnt_1
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_a_client_country_cnt_7, 38, 2) as _a_client_country_cnt_7
            ,try_to_number(_b_safe_recip_frd_excluded_ind, 38, 2) as _b_safe_recip_frd_excluded_ind
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_bvt_numeric_1, 38, 2) as _b_bvt_numeric_1
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_cust_tran_sum_3, 38, 2) as _i_cust_tran_sum_3
            ,try_to_number(_i_all_logons_cnt_1, 38, 2) as _i_all_logons_cnt_1
            ,try_to_number(_i_all_logons_perc_1, 38, 2) as _i_all_logons_perc_1
            ,try_to_number(_i_all_logons_perc_3m, 38, 2) as _i_all_logons_perc_3m
            ,try_to_number(_i_capp_logons_cnt_1, 38, 2) as _i_capp_logons_cnt_1
            ,try_to_number(_i_capp_logons_cnt_3m, 38, 2) as _i_capp_logons_cnt_3m
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,try_to_number(_i_netbank_logons_cnt_1, 38, 2) as _i_netbank_logons_cnt_1
            ,try_to_number(_i_cust_net_l_cnt_1, 38, 2) as _i_cust_net_l_cnt_1
            ,try_to_number(_i_cust_net_cnt_1, 38, 2) as _i_cust_net_cnt_1
            ,try_to_number(_i_cust_net_cnt_short, 38, 2) as _i_cust_net_cnt_short
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,_L_SDID_1
            ,try_to_number(_l_sdid_cnt_1, 38, 2) as _l_sdid_cnt_1
            ,try_to_number(_l_sdid_cnt_3, 38, 2) as _l_sdid_cnt_3
            ,_L_NC_ACCT_NUM
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,_L_BRANCH_ID
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_datetime_fp_2, 38, 2) as _l_datetime_fp_2
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_score_5, 38, 2) as _l_score_5
            ,try_to_number(_l_m_l_4, 38, 2) as _l_m_l_4
            ,try_to_number(_l_m_l_c, 38, 2) as _l_m_l_c
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_acc_amt_7d, 38, 2) as _l_acc_amt_7d
            ,try_to_number(_l_adv_key_combo, 38, 2) as _l_adv_key_combo
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_days_lst_dev_js, 38, 2) as _l_days_lst_dev_js
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_ft_rat_app_inst, 38, 2) as _l_ft_rat_app_inst
            ,try_to_number(_l_hi_dead_time, 38, 2) as _l_hi_dead_time
            ,try_to_number(_l_is_active_call, 38, 2) as _l_is_active_call
            ,try_to_number(_l_is_long_sess, 38, 2) as _l_is_long_sess
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_lgn_import_anomaly, 38, 2) as _l_lgn_import_anomaly
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_mins_lst_lgn_capped, 38, 2) as _l_mins_lst_lgn_capped
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,_L_POLICY_NM
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_mob_sdk, 38, 2) as _l_sess_cnt_mob_sdk
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_n_crypto_con_n_cnt, 38, 2) as _n_crypto_con_n_cnt
            ,try_to_number(_n_crypto_pot_n_sum, 38, 2) as _n_crypto_pot_n_sum
            ,try_to_number(_n_mps_mndt_cnt_24h_1, 38, 2) as _n_mps_mndt_cnt_24h_1
            ,try_to_number(_n_mob_oth_tran_sum_1, 38, 2) as _n_mob_oth_tran_sum_1
            ,try_to_number(_n_ca_device_profile_1, 38, 2) as _n_ca_device_profile_1
            ,try_to_number(_n_ca_lgn_cnt_24h_1, 38, 2) as _n_ca_lgn_cnt_24h_1
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_id_1, 38, 2) as _n_2wp_tran_id_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,try_to_number(_n_nb_sum_tpt_4, 38, 2) as _n_nb_sum_tpt_4
            ,_N_D_D_3
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,try_to_number(_n_capp_logon_cnt_2, 38, 2) as _n_capp_logon_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_t_2, 38, 2) as _x_t_2
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_npp_out_sum_3, 38, 2) as _x_npp_out_sum_3
                FROM
                   LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
                WHERE
                    TTS_TRAN_DATE_ALT BETWEEN 20241207 AND 20250714
            ) AS B
        ON
            A.CMX_TRAN_ID = B.CMX_TRAN_ID
            AND A.TTS_TRAN_DATE_ALT = B.TTS_TRAN_DATE_ALT
    )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1432330,1432.330000,23.872167,0.397869,2X-LARGE,32,12.731808
01beee48-3204-c939-0000-c71d2d0ebb06,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250904140303_scored_1 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO2('modelname=pipeline_it1_F2_xval_zero_day_20250904140303.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CRD_APAY_CNT_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_2WAY_CRD_FRD_RULE_FLAG, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_G_CON_DEV, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_RISKY_KEY_COMBO, _A_C_G, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_CONCURRENT_SESS, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_NPP_OUT_SUM_AAA_2, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_NPP_IN_UNRELATED_SUM_24_1, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _A_CUST_NPP_IN_SUM_AAA_1, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _L_NUM_SESS_2H, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_DPI_CHANGE, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _L_CLIPB_EVENT_CNT, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _L_NC_RESPONSE_CODE, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, BUS_LN_CNT, OTH_CNT, REL_MNG, FA_1, FA_2, NO_1, NO_2, FP, GOVT_BENE, PRVT_CUST, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,2858020,2858.020000,47.633667,0.793894,X-LARGE,16,12.702304
01bec696-3204-c1f2-0000-c71d2be2b292,"create or replace temporary table NPP_TRAN as
select	distinct case   when b.fraudtype = 'CVL' then null
                else b.fraudtype
        end as FRAUDTYPE
		,b.detection
		,b.case_detection
        ,TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
		,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
		,a.tts_tran_date_alt
		,a.tts_tran_time_alt
		,a.dtl_ex_0_20s_001
		,a.dtl_ex_1_5s_01
		,a.ssx_cust_num
		,a.chl_id_ob_userid
		,a.tgx_bank_name
		,a.tgx_bank_num
		,a.tgx_branch_id
		,a.tgx_acct_num
		,a.tgx_name
		,a.tgx_description
		,TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as TRAN_AMT
		,a.dtl_ex_0_i_002 as FTP_IND
		
		-- BioCatch UVs
		,TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE
		,TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_SCORE
		,TRY_TO_NUMBER(a._l_adv_key_combo, 38, 2) as _L_ADV_KEY_COMBO
		,TRY_TO_NUMBER(a._l_clpbrd_evnt, 38, 2) as _L_CLPBRD_EVNT
		,TRY_TO_NUMBER(a._l_concurrent_sess, 38, 2) as _L_CONCURRENT_SESS
		,TRY_TO_NUMBER(a._l_export_data, 38, 2) as _L_EXPORT_DATA
		,TRY_TO_NUMBER(a._l_import_data, 38, 2) as _L_IMPORT_DATA
		,TRY_TO_NUMBER(a._l_is_rat, 38, 2) as _L_IS_RAT
		,TRY_TO_NUMBER(a._l_is_mob_rat, 38, 2) as _L_IS_MOB_RAT
		,TRY_TO_NUMBER(a._l_rat_in_sess, 38, 2) as _L_RAT_IN_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_hrisk_sess, 38, 2) as _L_IS_RCNT_HRISK_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_rat, 38, 2) as _L_IS_RCNT_RAT
		,TRY_TO_NUMBER(a._l_lrg_dist_known_loc, 38, 2) as _L_LRG_DIST_KNOWN_LOC
		,TRY_TO_NUMBER(a._l_rare_scrn_sz, 38, 2) as _L_RARE_SCRN_SZ
		,TRY_TO_NUMBER(a._l_risky_isp, 38, 2) as _L_RISKY_ISP
		,TRY_TO_NUMBER(a._l_risky_key_combo, 38, 2) as _L_RISKY_KEY_COMBO
		,TRY_TO_NUMBER(a._l_tzone_mismatch, 38, 2) as _L_TZONE_MISMATCH
		,TRY_TO_NUMBER(a._l_scm_rsk_hgh_scr, 38, 2) as _L_SCM_RSK_HGH_SCR
		,TRY_TO_NUMBER(a._l_keyb_nav_anom, 38, 2) as _L_KEYB_NAV_ANOM
		,TRY_TO_NUMBER(a._l_scrn_broadcast, 38, 2) as _L_SCRN_BROADCAST
		,TRY_TO_NUMBER(a._l_delay_to_input_pi, 38, 2) as _L_DELAY_TO_INPUT_PI
		,TRY_TO_NUMBER(a._l_input_otp_delay, 38, 2) as _L_INPUT_OTP_DELAY
		,TRY_TO_NUMBER(a._l_active_spoofing, 38, 2) as _L_ACTIVE_SPOOFING
		,TRY_TO_NUMBER(a._l_pmt_vloc_anom, 38, 2) as _L_PMT_VLOC_ANOM
		,TRY_TO_NUMBER(a._l_rcnt_hi_scr_on_dev, 38, 2) as _L_RCNT_HI_SCR_ON_DEV
		,TRY_TO_NUMBER(a._l_accum_amt_anom, 38, 2) as _L_ACCUM_AMT_ANOM
		,TRY_TO_NUMBER(a._l_app_togg, 38, 2) as _l_APP_TOGG
		,TRY_TO_NUMBER(a._l_is_active_call, 38, 2) as _L_IS_ACTIVE_CALL
		,TRY_TO_NUMBER(a._l_is_long_sess, 38, 2) as _L_IS_LONG_SESS
		,TRY_TO_NUMBER(a._l_type_patterns_anomaly, 38, 2) as _L_TYPE_PATTERNS_ANOMALY
		,TRY_TO_NUMBER(a._l_seg_typing_pi, 38, 2) as _L_SEG_TYPING_PI
		
		-- NameCheck UVs
		,a._l_nc_response_code
		,a._l_nc_match_name_conf
		
		-- H2O Score UVs
		,TRY_TO_NUMBER(a._l_cust_scamrisk_score, 38, 2) as _L_CUST_SCAMRISK_SCORE
		,a.dtl_ex_0_n_029
		,a.dtl_ex_0_n_034 as CERBERUS_SCORE
		
		-- Recipient Level UVs
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_short, 38, 2) as _B_RECIP_SUM_SHORT
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_long, 38, 2) as _B_RECIP_SUM_LONG
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_short, 38, 2) as _B_RECIP_FTP_CNT_SHORT
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_long, 38, 2) as _B_RECIP_FTP_CNT_LONG
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_any_cust_ftp_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_ANY_CUST_FTP_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_2
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_3
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_4
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_5
		
		-- Customer Level UVs
		,TRY_TO_NUMBER(a._a_customer_age, 38, 2) as _A_CUSTOMER_AGE
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_SHORT, 38, 2) as _A_CUST_SUM_AAA_SHORT
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_LONG, 38, 2) as _A_CUST_SUM_AAA_LONG
		,TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1
		,TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2
		,TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3
		,TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4
		,TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5
		,TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6
		,TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7
		,TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1
		,TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2
		,TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3
		,TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4
		,TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5
		,TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6
		,TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_NEW_CAPP_REGO_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CSE_CHG_DWL_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CIF_ESTABLISH_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00') as _A_NB_LASTLOGON_DT_1
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00') as _A_CURR_CAPP_DEVICE_DT
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_1, 38, 2) as _A_NB_LOGONS_CNT_1
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_2, 38, 2) as _A_NB_LOGONS_CNT_2
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_3, 38, 2) as _A_NB_LOGONS_CNT_3
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_1, 38, 2) as _A_CAPP_LOGON_CNT_1
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_2, 38, 2) as _A_CAPP_LOGON_CNT_2
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_3, 38, 2) as _A_CAPP_LOGON_CNT_3
		
		-- Customer-Recipient Relationship Level UVs
		,TRY_TO_NUMBER(a._x_cif_recipient_new_sum, 38, 2) + TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM
		,case   when a._x_cif_recipient_new_date = '0' then TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF')
                else TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00'::timestamp)
		end as _X_CIF_RECIPIENT_NEW_DATE
		,case   when a._x_cif_recipient_new_cnt = '0' then 1
                else TRY_TO_NUMBER(a._x_cif_recipient_new_cnt, 38, 2) + 1
		end as _X_CIF_RECIPIENT_NEW_CNT
		
		-- Telstra Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_TELSTRA_LONG_CALL
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_telstra_last_call_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _X_TELSTRA_LAST_CALL_DT
		,TRY_TO_NUMBER(a._x_telstra_last_call_dur, 38, 2) as _X_TELSTRA_LAST_CALL_DUR
		,TRY_TO_NUMBER(a._x_telstra_max_call_dur, 38, 2) as _X_TELSTRA_MAX_CALL_DUR
		,a._a_telstra_active_call
		
		-- Crypto UVs
		,TRY_TO_NUMBER(a._a_crypto_mnthly_sum, 38, 2) as _A_CRYPTO_MNTHLY_SUM
		,DATEADD(day, TRY_TO_NUMBER(a._a_crypto_last_pymnt_date, 38, 2), '1960-01-01') as _A_CRYPTO_LAST_PYMNT_DATE
		
		-- M100 Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP1_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP2_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP3_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP4_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP5_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP6_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP7_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP10_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp11_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP11_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp12_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP12_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp13_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP13_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP20_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP21_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_M100_P8_IND_DT
		
		-- M100 App Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P1_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P5_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P8_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P9_DT
 		
		-- CIF Profiling UVs
		,a._l_fingerprint_1
		,a._l_fingerprint_2
		,a._l_fingerprint_3
		,a._l_fingerprint_4

        -- Intelligent Friction UVs
                ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCTN_MSG_SNT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCTN_MSG_SNT
    
         ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCT_INTENT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCT_INTENT
        
from        lcl.fdp_customer_transactions_send_flat a
left join  prd_p01_dmn_fraumd.labmlfrd.dtl_fraudmaster b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where   a.mid_event_ts >= '20250701'
and     a.mid_event_ts >= '20250801'
and     a.dtl_ex_1_5s_01 in ('C205N'
							,'C207N'
							,'C242N'
							,'C244N'
							,'C246N'
							,'N205N'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'X232N'
							,'X243N'
							,'X246N')
and     a.hdr_source = 'NPP OUT'
and     tran_amt > 0
order by    chl_id_ob_userid
            ,transactiondatetime;",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,1421450,1421.450000,23.690833,0.394847,2X-LARGE,32,12.635104
01be2d49-3204-b1e5-0000-c71d27277596,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D011_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""DTL_EX_3_8S_009"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""DTL_EX_0_2S_002"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_3"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""SSA_C_CASH_LIMIT"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_NON_AU_IND"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_A_CLIENT_CITY_DATE_2"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_L_SDID_H2O"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CC_2DAY_VEL_2"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_C_CNP_MER_NM_1"" STRING(16777216), ""_C_CNP_APL_VEL_CNT"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_L_SCORE_H2O_5"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_A_CAPP_LOGON_CNT_2"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, _M_TOTAL_COUNT, _A_PROF_CAPP_DEVICE_1, DTL_CA_AUTH_SYS_INFO, _Q_AUTH_COUNT, DTL_EX_3_8S_009, DTL_CA_MERCH_CURR_CODE, _C_CC_GBL_N3D_CNT_1, DTL_EX_3_20S_004, _C_CC_GBL_N3D_SUM_1, _C_N3D_OVS_6H_SUM_1, _M_TOTAL_SUM, ATH_PC_CUST_PRESENT, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _A_BTS_BIO_SE, _A_BTS_CUST_AGE, CHL_CT_TERM_CNTRY_CODE, _Q_KEYED_APVD_CNT_DAY_1, _A_D_D_1, DTL_EX_0_2S_002, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _Q_CRD_F2F_BIN_ATTACK_CNTRY_3, _Q_MER_FRAUD_SCORE_CNT_3, _A_D_D_3, SSA_C_CASH_LIMIT, _C_N3D_TST_CNT_1, _C_N3D_MERC_ID_SUM_1, _C_CC_CNP_VEL_6HR_COUNT_1, _C_2WAY_5X_CRD_CNT, _C_N3D_MERC_ID_SUM_2, DTL_EX_3_80S_001, _Q_NON_AU_IND, _A_AUS_IP_ACTIVITY, _L_BC_SCORE_H2O, _A_BTS_CUST_DOB, _A_CLIENT_CITY_DATE_2, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _L_SDID_H2O, _C_CRD_VISA_MERC_SUM_1, _Q_MER_FRAUD_SCORE_CNT_5, _L_BC_SESS_ID, _L_MAX_30D_MULE_SCORE, _C_CC_2DAY_VEL_2, _Q_MER_FRAUD_SCORE_SUM_2, _C_CRD_3D_TRN_SUM_1, ATH_PC_ACS_REFER_CODE, _C_CNP_MER_NM_1, _C_CNP_APL_VEL_CNT, _A_D_D_2, _C_CC_OS_FB_CNT_3, _L_SCORE_H2O_5, _C_CRD_DOM_CNP_HV_CNT_1, _A_CAPP_LOGON_CNT_2
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250717 and 20250805
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1413758,1413.758000,23.562633,0.392711,2X-LARGE,32,12.566752
01be4ff3-3204-b35f-0000-c71d282b527a,"select DISTINCT 
    'CARD' AS CHANNEL,
    --ACTIONTAKEN
    --CARDNUMBER
    --CASENUMBER
    --FRAUDTYPE
    concat(to_decimal(dtl_ex_0_n_064),dtl_ex_0_n_065,dtl_ex_0_n_066) as id_key, --CMX_TRAN_ID REPLACEMENT
    SSX_CUST_NUM as CUSTOMER_ID, --XQO_CUST_NUM
    ssx_cust_post_code, --XQO_CUST_POST_CODE
    CHL_ID_CARD_NUM, --HQO_CARD_NUM
    TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TTS_TRAN_DATE_ALT,
    TTS_TRAN_TIME_ALT,
    CHL_CT_MER_MCC, --TRANSACTIONDATETIME
    CHL_CT_TERM_OWNER_ID, --hct_term_owner_id
    CHL_CT_TERM_OWNER_NAME, --HCT_TERM_OWNER_NAME
    CHL_CT_TERM_ID, --HCT_TERM_ID
    chl_ct_term_cntry_code, --hct_term_cntry_code
    dtl_ca_client_amt, --TCA_client_amt
    dtl_ca_cash_back_amt, --TCA_cash_back_amt
    dtl_ca_auth_sys_dec, --TCA_auth_sys_dec
    dtl_ca_auth_sys_info, --TCA_auth_sys_info
    dtl_ca_reversal_ind, --TCA_reversal_ind
    RSP_ACTION_CODE, --RRR_ACTION_CODE
    dtl_ex_0_3s_002 AS SLI, --RUA_3BYTE_STRING_002
    UPPER(SUBSTR(dtl_ex_0_3s_002,1,2)) AS AAV, --DUA_80BYTE_STRING_003
    ath_pc_pos AS POS_ENTRY, --ucm_pos
    chl_ct_media, --hct_media
    dtl_ex_0_20s_004 AS DPAN, --RUA_20BYTE_STRING_004
    dtl_ex_3_20s_004 AS WALLET_ID, --DUA_20BYTE_STRING_004
    dtl_ex_3_20s_001 AS TRID, --DUA_20BYTE_STRING_001
    dtl_ex_3_8s_001 AS ISSUE_DATE, --DUA_8BYTE_STRING_001
    ATH_PC_PIN_VRFY AS PIN_VERIFIED, --UCM_PIN_VRFY
    --CQF_RULE_C_ID
    rsp_ex_2_8s_001, --rur_8byte_string_001
    rsp_ex_2_8s_004, --rur_8byte_string_004
    _C_CRD_SAFE_MERCHANT,
    rsp_ex_2_i_009 AS RSP_CODE_2WP,
    _A_2WP_NO_CNT, --RELATED TO 2WP
    _C_2WP_FRAUD_DEC_ALL_DT,--RELATED TO 2WP
    _C_2WP_HR_NO_RESP_DT_1,--RELATED TO 2WP
    _C_2WP_NO_RESP_DT_1,--RELATED TO 2WP
     LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_ERR_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_ERROR, /* 2wp error */
    -- LAG(_C_2WDWP_ERR_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_ERROR, /* 2wp error */
    -- LAG(_C_2WDWP_DISMISS_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_DISMISS_NOTIFICATION, /* 2wp dismiss notification */
    lag(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_DISMISS_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_DISMISS_NOTIFICATION, /* 2wp dismiss notification */
    -- LAG(_C_2WDWP_NRP_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_NO_RESPONSE, /* 2wp no response */
    LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_NRP_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_NO_RESPONSE, /* 2wp no response */
    -- LAG(_C_2WDWP_FRD_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_FRAUD_RESPONSE, /* 2wp fraud response */
    LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_FRD_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_FRAUD_RESPONSE, /* 2wp fraud response */   
    -- LAG(_C_2WDWP_GEN_DT,-1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_GENUINE_RESPONSE, /* 2wp genuine response */
    LAG(TIMESTAMPADD(SECOND, TO_NUMBER(_C_2WDWP_GEN_DT, 38, 2), '1960-01-01 00:00:00'),1) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) AS _2WP_GENUINE_RESPONSE, /* 2wp genuine response */
    _C_MDES_DPAN_CURR, --RELATED TO MDES DATA
    _C_TKN_MDES_DPAN_1,--RELATED TO MDES DATA
    CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS MDES_DPAN_REGO_DT,
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_MDES_DPAN_REG_DT_CURR, 38, 2), '1960-01-01 00:00:00') AS MDES_DPAN_REGO_DT,--RELATED TO MDES DATA
    _L_SE_SCORE, /* scam score */
    _L_BC_MULE_RISK_LVL, /* mule score */
    _L_BC_SCORE, /* bio catch score*/
    _L_IS_RAT_DT, /* remote access software dates */
    _L_IS_MOB_RAT_DT, /* remote access software dates */
    case
        WHEN RSP_ACTION_CODE = '1'                                   THEN 'Approved'
        WHEN dtl_ca_auth_sys_dec = '4'                                  THEN 'Declined (Sys)'
        WHEN dtl_ca_auth_sys_dec = '3'                                  THEN 'Future Use'
        WHEN dtl_ca_auth_sys_dec = '5'                                  THEN 'Pick Up'
        WHEN dtl_ca_auth_sys_dec = '1' AND RSP_ACTION_CODE IN ('4')     THEN 'Declined (FDP)'
        WHEN dtl_ca_auth_sys_dec = '1' AND RSP_ACTION_CODE IN ('2')     THEN 'Declined (DXC)'
    end AS DECISION,
    CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_2,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_3,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_4,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_5,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_6,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_7,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_8,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_9,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_TKN_APL_DPAN_REGO_DT_10,
    case 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_2,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_3,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_4,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_5,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_6,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_7,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_8,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_9,
        CASE 
    WHEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') between DATEADD(DAY, -7, CURRENT_TIMESTAMP()) and current_timestamp THEN TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00')
        ELSE NULL END AS _C_APAY_DPAN_REGO_DT_10,
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_2, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_3, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_4, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_5, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_6, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_7, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_8, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_9, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_TKN_APL_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') AS _C_TKN_APL_DPAN_REGO_DT_10, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_1, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_1, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_2, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_2, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_3, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_3, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_4, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_4, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_5, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_5, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_6, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_6, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_7, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_7, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_8, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_8, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_9, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_9, -- DIGITAL WALLET REGO DATE
    -- TIMESTAMPADD(SECOND, TO_NUMBER(_C_APAY_DPAN_REGO_DT_10, 38, 2), '1960-01-01 00:00:00') AS _C_APAY_DPAN_REGO_DT_10, -- DIGITAL WALLET REGO DATE
    _M_MERCHANT_CORP_IND, --SPENDING PATTERN FREQUENCY
    _M_MERCHANT_RETAIL_IND, --SPENDING PATTERN FREQUENCY
    CASE
        WHEN _M_MERCHANT_RETAIL_IND = '1' THEN 'Weekly User' 
        WHEN _M_MERCHANT_RETAIL_IND = '2' THEN 'Monthly User' 
        WHEN _M_MERCHANT_RETAIL_IND = '3' THEN 'Infrequent User' 
        WHEN _M_MERCHANT_RETAIL_IND = '4' THEN 'Recent User' 
        WHEN _M_MERCHANT_RETAIL_IND = '5' THEN 'Used before but not recently (within three months)' 
        ELSE 'No Spending Frequency'
    end AS RETAIL_SPENDING_FREQUENCY,
    CASE  
        WHEN _M_MERCHANT_CORP_IND = '1' THEN 'Weekly User'
        WHEN _M_MERCHANT_CORP_IND = '2' THEN 'Monthly User' 
        WHEN _M_MERCHANT_CORP_IND = '3' THEN 'Infrequent User' 
        WHEN _M_MERCHANT_CORP_IND = '4' THEN 'Recent User' 
        WHEN _M_MERCHANT_CORP_IND = '5' THEN 'Used before but not recently (within three months)'
        ELSE 'No Spending Frequency'
    end AS CORPORATE_SPENDING_FREQUENCY
    FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT A
    WHERE 1=1
    AND to_date(TTS_TRAN_DATE_ALT, 'YYYYMMDD') BETWEEN CURRENT_DATE() -40 AND CURRENT_DATE()-10
    and (mid_event_ts <= TO_CHAR(TIMESTAMPADD(day, (-10), CURRENT_TIMESTAMP()), 'YYYYMMDDHH24MISSFF6') and
    mid_event_ts >= TO_CHAR(TIMESTAMPADD(day, (-40), CURRENT_TIMESTAMP()), 'YYYYMMDDHH24MISSFF6'))",GAREAJU,R_USR_FRAUMD_LABMLFRD_RW,1409141,1409.141000,23.485683,0.391428,2X-LARGE,32,12.525696
01bed201-3204-c556-0000-c71d2c3f45d2,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_TAPI_SHROFFPR as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    OR c.BAD = 1 THEN 1
    ELSE 0
  END AS final_target,
  SSX_CUST_NUM,
  DTL_EX_0_20S_001,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 -- TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250201 and 20250601
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",SHROFFPR,R_USR_FRAUMD_LABMLFRD_RW,1409123,1409.123000,23.485383,0.391423,2X-LARGE,32,12.525536
01bef8df-3204-c93b-0000-c71d2d5f0322,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250911_044636(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1398193,1398.193000,23.303217,0.388387,2X-LARGE,32,12.428384
01bf0fa5-3204-c93d-0000-c71d2e01482e,"WITH TOBY_EXTRACT AS (
        SELECT 
            LAST_VALUE(id_key2 IGNORE NULLS) OVER (partition by hqo_ob_userid order by tran_date, tran_time ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS ID_KEY
            ,CASENUMBER
            ,HQO_OB_USERID AS CUST_ID
            ,TO_TIMESTAMP(transactiondatetime, 'DDMONYYYY:HH24:MI:SS.FF') AS transactiondatetime
            ,TO_CHAR(TO_TIMESTAMP(transactiondatetime, 'DDMONYYYY:HH24:MI:SS.FF'), 'YYYY-MM-DD') AS DATE
            ,TO_CHAR(TO_TIMESTAMP(transactiondatetime, 'DDMONYYYY:HH24:MI:SS.FF'), 'HH24:MI:SS') AS TIME
            ,RULE_NAME
            ,RULE_DESC
            ,STRATEGY_NAME
            ,CQF_ENTITY_VALUE_O AS CARD_NUM
            ,FRAUDTYPE
            ,DESCRIPTION
            ,FRAUD_TAG
            ,COALESCE(CQF_RULE_O_ID,CQF_RULE_X_ID) AS RULE_FIRED
            ,COALESCE(CQF_RULE_VERSION_O_NBR,CQF_RULE_VERSION_X_NBR) AS RULE_VERSION
            ,RECIP_FIRST_DT
            ,CMX_TRAN_ID
            ,TPP_TRAN_AMT
            ,LOSS
            ,LHD AS DECISION
            ,CASE 
                WHEN ACTIONTAKEN = 1 THEN 'Skip'
                WHEN ACTIONTAKEN = 2 THEN 'Reschedule'
                WHEN ACTIONTAKEN = 3 THEN 'Save Pending'
                WHEN ACTIONTAKEN = 4 THEN 'Save Pending w/ Block'
                WHEN ACTIONTAKEN = 5 THEN 'Reroute'
                WHEN ACTIONTAKEN = 6 THEN 'Verified Activity'
                WHEN ACTIONTAKEN = 7 THEN 'Confirmed Fraud'
                WHEN ACTIONTAKEN = 50100 THEN 'Confirmed Fraud - Reroute'
                WHEN ACTIONTAKEN = 50110 THEN 'Suspect Scam'
                WHEN ACTIONTAKEN = 50109 THEN 'Reported Scam'
                ELSE ' '
            END AS ACTION_TAKEN
        FROM LABMLFRD.TOBY_DIGI_EXTRACT2
        )
        ,TOBY_SUMMARY AS (
            SELECT 
                CASENUMBER
                ,CUST_ID
                ,ACTION_TAKEN
                ,FRAUDTYPE
                ,COUNT(CMX_TRAN_ID) AS TOTAL_TRANS
                ,COUNT(CASE WHEN DESCRIPTION = 'NON_MON_TXN' THEN 1 END) AS TOTAL_NON_MON
                ,COUNT(DISTINCT CASE WHEN LOSS = 'Y' THEN CMX_TRAN_ID END) AS TOTAL_APPROVED_TRANS
                ,SUM(CASE WHEN LOSS = 'Y' THEN TPP_TRAN_AMT END) AS TOTAL_SUM_APPROVED 
                ,SUM(TPP_TRAN_AMT) AS TOTAL_SUM 
            FROM TOBY_EXTRACT
            WHERE ACTION_TAKEN IS NOT NULL
            AND FRAUDTYPE IS NOT NULL
            GROUP BY 1,2,3,4
        )
        ,SNOWFLAKE_DATA AS (
            SELECT DISTINCT 
                CONCAT(TO_DECIMAL(dtl_ex_0_n_064), dtl_ex_0_n_065, dtl_ex_0_n_066) as ID_KEY1
                ,TRY_TO_NUMERIC(chl_id_ob_userid) as CMX_ID
                ,TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') AS TRANSACTIONDATETIME_SF
                ,TO_CHAR(to_date(tts_tran_date_alt, 'YYYYMMDD'), 'YYYY-MM-DD') as DATE_DT
                ,TO_CHAR(TO_TIME(tts_tran_time_alt, 'HH24:MI:SS.FF'), 'HH24:MI:SS') AS TIME_DT
                ,dtl_ex_1_5s_01 as TASK_ID
                ,rsp_ex_2_30s_001 as DECISION_SF
                ,tgx_description as PAYMENT_DESC --Payment Description
                ,SSX_CUST_NUM as NB_ID -- NB ID
                ,ssx_cust_name as CUST_NAME
                ,tgx_name as RECIPIENT_NAME
                ,hdr_channel_type as CHANNEL_TYPE
                ,TRY_TO_DATE(dtl_ex_0_n_009, 'YYYYMMDD') AS CUST_DOB
                ,TRY_TO_DATE(dtl_ex_1_date_01, 'YYYYMMDD') AS CUST_EST_DATE
                ,tgx_acct_num as ACCT_NUM
                ,TRY_TO_NUMERIC(TGX_TRAN_AMT) as TRANSACTION_AMOUNT
                ,tgx_bank_name as BANK_NAME
                ,tgx_bank_num as BANK_NUM
                ,tgx_branch_id as BRANCH_ID
                ,dtl_bt_billing_ref_num as REFERENCE_NUM
                ,chl_ob_ip_cntry_code as IP_CNTRY_CODE
                ,chl_ob_ip_city as IP_CITY
                ,ssx_cust_city as CUST_CITY
                ,chl_ob_ip_address as IP_ADDRESS
                ,chl_ob_ip_address_v6 as IP_ADDRESS_V6
                ,chl_ob_ip_latitude as IP_LATITUDE
                ,chl_ob_ip_longitude as IP_LONGITUDE
                ,chl_ob_ip_isp as IP_ISP
                ,chl_ob_ip_post_code as IP_POSTODE
                ,chl_ob_device as DEVICE
                ,chl_id_device_id_type as DEVICE_TYPE
                ,dtl_ex_0_80s_001 as USER_AGENT
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_all_ftp_dt, 38, 2),'1960-01-01 00:00:00') as FTP_DATE 
                ,CASE
                    WHEN (rsp_ex_2_4s_009 in ('FTPH', 'FTPE', 'LVPE', 'EXQJ') or substr(rsp_ex_2_4s_009, 1, 1) = 'X') 
                    THEN 1 ELSE 0 END AS FTP_IND
                ,CASE
                    WHEN try_to_number(_a_telstra_existing_relation) = 0
                    AND try_to_number(_a_telstra_call_duration) >= 900
                    AND _a_telstra_active_call in ('O', 'I')
                    AND _a_telstra_num_type in ('H', 'M', 'W') THEN 1
                    ELSE 0 END AS TELSTRA_LONG_CALL
                ,REPLACE(SPLIT_PART (dtl_ex_3_40s_002,';', 1),' ', '') AS WISDOM_NUMBER
                ,SPLIT_PART (dtl_ex_3_40s_002,';', 2) AS WISDOM_ACC_NAME
                ,rsp_ex_2_4s_005 AS WISDOM_FLAG
                ,try_to_numeric(dtl_ex_0_n_023) AS WISDOM_NO_PAYMENTS
                ,try_to_date(dtl_ex_0_n_021, 'YYYYMMDD') AS WISDOM_PAYMENT_DT
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_M100_APP_P1_IND_DT, 38, 2), '1960-01-01 00:00:00') as M100_APP_P1_IND
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_M100_APP_P8_IND_DT, 38, 2), '1960-01-01 00:00:00') as M100_APP_P8_IND
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_M100_P99_IND_DT, 38, 2), '1960-01-01 00:00:00') as M100_P99_IND
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP1_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP2_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP3_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP4_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP5_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP6_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP7_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP10_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP10_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP_MLW
                ,TRY_TO_NUMERIC(_L_BC_MULE_RISK_LVL) AS MULE_SCORE
                ,TRY_TO_NUMERIC(_L_SE_SCORE) as BC_SE_SCORE
                ,MIN(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_SE_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS min_bcse_score_30days
                ,MAX(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_SE_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS max_bcse_score_30days
                ,AVG(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_SE_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS avg_bcse_score_30days
                ,TRY_TO_NUMERIC(_L_BC_SCORE) as BC_ATO_SCORE
                ,MIN(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_ATO_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS min_bcato_score_30days
                ,MAX(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_ATO_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS max_bcato_score_30days
                ,AVG(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_ATO_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS avg_bcato_score_30days
                ,TRY_TO_NUMERIC(_L_CUST_SCAMRISK_SCORE) as SUSC_SCORE
                ,TRY_TO_DECIMAL(DTL_EX_0_N_029, 38, 12) as JIS_SCORE
                ,TRY_TO_DECIMAL(dtl_ex_0_n_034, 38, 12) as CERBERUS_SCORE
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_NC_EVENT_DT, 38, 2),'1960-01-01 00:00:00') as NC_EVENT_DT
                ,rsp_ex_2_4s_006 AS NC_RSP_ACTION_CODE              -- NAMECHECK RESPONSE CODE,
                ,dtl_ex_3_n_002 AS NC_CONFIDENCE                    -- NAMECHECK CONFIDENCE,
                ,CONCAT(dtl_ex_3_80s_002, dtl_ex_3_80s_003) AS NC_MATCHED_NAME -- NAMECHECK MATCHED NAME,
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2) as TRUST_RCNT_HI_ATO_AS_PAYEE -- BC TRUST UV's
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2) as TRUST_RCNT_HI_ATO_AS_PAYER
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2) as TRUST_RCNT_HI_SES_AS_PAYEE
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2) as TRUST_RCNT_HI_SES_AS_PAYER
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2) as TRUST_RCNT_HI_MS_AS_PAYEE
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2) as TRUST_RCNT_HI_MS_AS_PAYER
                
                FROM
                    LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
                WHERE
                hdr_source = 'NPP OUT'
                    AND (mid_event_ts >= TO_CHAR(DATE_TRUNC(MONTH,TIMESTAMPADD(MONTH, (-3), CURRENT_TIMESTAMP())),'YYYYMMDDHH24MISSFF6')
                    AND mid_event_ts < TO_CHAR(DATE_TRUNC(MONTH, CURRENT_TIMESTAMP()),'YYYYMMDDHH24MISSFF6'))
        )
        ,snowflake_nonmon AS (
        SELECT
            DISTINCT
                TRY_TO_NUMERIC(chl_id_ob_userid) AS CMX_ID_NM
                ,'NON MON TXN' AS TXN_TYPE
                ,SSX_CUST_NUM AS NB_ID_NM    -- NB ID
                ,TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') AS NM_TRANSACTIONDATETIME
                ,TO_CHAR(to_date(tts_tran_date_alt, 'YYYYMMDD'), 'YYYY-MM-DD') AS NON_MON_DATE
                ,TO_CHAR(TO_TIME(tts_tran_time_alt, 'HH24:MI:SS.FF'), 'HH24:MI:SS') AS NON_MON_TIME
                ,_N_CUST_DEVICE_KEY_1 AS CUST_DEVICE
                ,CASE 
                    WHEN dtl_ex_1_5s_01 = 'T0101' then 1 else 0 end as t0101_event -- T0101 (Telstra Scam Call Indicator)
                ,CASE
                    WHEN dtl_ex_1_5s_01 = 'A1901' then 1 else 0 end as a1901_event -- A1901 (LOAD CARD DETAILS)
                ,CASE
                    WHEN dtl_ex_1_5s_01 = 'C198' then 1 else 0 end as c198_event   -- C198(COMMSEC_LOGON)
        FROM LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT
            WHERE 
                mid_event_ts >= TO_CHAR(DATE_TRUNC(MONTH,TIMESTAMPADD(MONTH, (-3), CURRENT_TIMESTAMP())),'YYYYMMDDHH24MISSFF6')
                AND mid_event_ts < TO_CHAR(DATE_TRUNC(MONTH, CURRENT_TIMESTAMP()),'YYYYMMDDHH24MISSFF6')
            ORDER BY NM_TRANSACTIONDATETIME
            )
            ,combined_txns as (
            SELECT
                S.*
                ,SF.TASK_ID
                ,SF.PAYMENT_DESC 
                ,SF.NB_ID 
                ,SF.CUST_NAME
                ,SF.RECIPIENT_NAME
                ,SF.CHANNEL_TYPE
                ,SF.DECISION_SF
                ,SF.CUST_DOB
                ,SF.CUST_EST_DATE
                ,SF.ACCT_NUM
                ,SF.TRANSACTION_AMOUNT
                ,SF.BANK_NAME
                ,SF.BANK_NUM
                ,SF.BRANCH_ID
                ,SF.REFERENCE_NUM
                ,SF.IP_CNTRY_CODE
                ,SF.IP_CITY
                ,SF.CUST_CITY
                ,SF.IP_ADDRESS
                ,SF.IP_ADDRESS_V6
                ,SF.IP_LATITUDE
                ,SF.IP_LONGITUDE
                ,SF.IP_ISP
                ,SF.IP_POSTODE
                ,SF.DEVICE
                ,SF.DEVICE_TYPE
                ,SF.USER_AGENT
                ,SF.FTP_DATE
                ,SF.FTP_IND
                ,SF.TELSTRA_LONG_CALL
                ,SF.wisdom_number 
                ,SF.wisdom_acc_name 
                ,SF.wisdom_flag
                ,SF.wisdom_no_payments
                ,SF.WISDOM_PAYMENT_DT
                ,SF.M100_APP_P1_IND
                ,SF.M100_APP_P8_IND
                ,SF.M100_P99_IND
                ,SF.SCAMP1_MLW
                ,SF.SCAMP2_MLW
                ,SF.SCAMP3_MLW
                ,SF.SCAMP4_MLW
                ,SF.SCAMP5_MLW
                ,SF.SCAMP6_MLW
                ,SF.SCAMP7_MLW
                ,SF.SCAMP10_MLW
                ,SF.SCAMP_MLW
                ,SF.MULE_SCORE
                ,SF.BC_SE_SCORE
                ,SF.MIN_BCSE_SCORE_30DAYS
                ,SF.MAX_BCSE_SCORE_30DAYS
                ,SF.AVG_BCSE_SCORE_30DAYS
                ,SF.BC_ATO_SCORE
                ,SF.MIN_BCATO_SCORE_30DAYS
                ,SF.MAX_BCATO_SCORE_30DAYS
                ,SF.AVG_BCATO_SCORE_30DAYS
                ,SF.SUSC_SCORE
                ,SF.JIS_SCORE
                ,SF.CERBERUS_SCORE
                ,SF.NC_EVENT_DT
                ,SF.NC_RSP_ACTION_CODE
                ,SF.NC_CONFIDENCE
                ,SF.NC_MATCHED_NAME
                ,SF.TRUST_RCNT_HI_ATO_AS_PAYEE
                ,SF.TRUST_RCNT_HI_ATO_AS_PAYER
                ,SF.TRUST_RCNT_HI_SES_AS_PAYEE
                ,SF.TRUST_RCNT_HI_SES_AS_PAYER
                ,SF.TRUST_RCNT_HI_MS_AS_PAYEE
                ,SF.TRUST_RCNT_HI_MS_AS_PAYER

                ,NM.TXN_TYPE
                ,NM.NON_MON_DATE
                ,NM.NON_MON_TIME
                ,NM.CUST_DEVICE
                ,NM.t0101_event
                ,NM.a1901_event
                ,NM.c198_event

                ,TS.TOTAL_TRANS
                ,TS.TOTAL_APPROVED_TRANS
                ,TS.TOTAL_SUM_APPROVED
                ,TS.TOTAL_SUM

            FROM
                TOBY_EXTRACT S
               LEFT JOIN snowflake_data SF ON S.ID_KEY = SF.ID_KEY1
                AND S.CUST_ID = SF.CMX_ID
                AND S.DATE = SF.DATE_DT
                AND S.TIME = SF.TIME_DT

                LEFT JOIN snowflake_nonmon NM 
                ON NM.CMX_ID_NM = S.CUST_ID
                AND NM.NON_MON_DATE = S.DATE

                LEFT JOIN TOBY_SUMMARY TS
                ON S.CUST_ID = TS.CUST_ID
                AND S.CASENUMBER = TS.CASENUMBER

                ORDER BY S.CASENUMBER,S.CUST_ID, S.DATE, S.TIME
            )
            , nm_txn_count as (
            SELECT 
                cust_id, 
                date,
                sum(case when DESCRIPTION = 'NON_MON_TXN' then 1 else 0 end) AS NM_TXN_COUNT
            FROM combined_txns
            group by 1,2
         )
         select 
             a.*, 
             b.nm_txn_count
         from combined_txns a
             left join nm_txn_count b 
                 on a.cust_id = b.cust_id
                 and a.date = b.date;",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,1391701,1391.701000,23.195017,0.386584,2X-LARGE,32,12.370688
01bdcfd5-3204-a61b-0000-c71d24817f3a,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DIGI_SCAM_D001_V3(""DETECTION"" STRING(16777216), ""CASE_DETECTION"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TGX_TRAN_AMT"" NUMBER(14, 2), ""HOUR"" BIGINT, ""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""CATEGORY"" STRING(134217728), ""LABEL"" BIGINT, ""DTL_EX_0_20S_001"" STRING(16777216), ""FRAUDTYPE"" STRING(16777216), ""RUA_20BYTE_STRING_001"" STRING(16777216), ""_A_24H_CDP_DC_RTL_CNT_PREV_MAX"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_SUPER_AMNT"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_LONG_2"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_FTP_SUM_1"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_DOM_IP_SWITCH_CNT_2"" NUMBER(38, 2), ""_A_CAPP_CARD_LIMIT_CNT_1"" NUMBER(38, 2), ""_A_CAPP_DEREGISTARATION_CNT_3"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_DEVICE_SIM_VENDOR_RATIO_EXC"" NUMBER(38, 2), ""_A_PL_LV_3"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_ALL_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NPP_OUT_FTP_CNT_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_1"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_B_SAFE_RECIP_FRD_EXCLUDED_IND"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_LIST_BL_SCAM_TP_ACCT"" NUMBER(38, 2), ""_B_LIST_RL1_TP_ACCT"" NUMBER(38, 2), ""_B_NPP_BLACKLIST_RECIP_FLAG"" NUMBER(38, 2), ""_B_NPP_BLACKLIST_SENDER_FLAG"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_LGN_METHOD_ANOM"" NUMBER(38, 2), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BRANCH_ID"" STRING(16777216), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_PMT_VLOC_ANOM"" NUMBER(38, 2), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SCORE_1"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_DATETIME_FP_2"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_ADV_KEY_COMBO"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_BC_SCORE"" NUMBER(38, 2), ""_L_CLIPB_PASTE_CNT"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_IS_RCNT_HRISK_SESS"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_NEW_PAYEE_PER_USER"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_POLICY_ID"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_N_CRYPTO_CON_N_CNT"" NUMBER(38, 2), ""_N_CRYPTO_CON_N_SUM"" NUMBER(38, 2), ""_N_CRYPTO_POT_N_SUM"" NUMBER(38, 2), ""_N_CRYPTO_CON_IND"" NUMBER(38, 2), ""_N_CRYPTO_POT_IND"" NUMBER(38, 2), ""_N_FTP_CNT_1"" NUMBER(38, 2), ""_N_FTP_SUM_1"" NUMBER(38, 2), ""_N_NMCHK_CNT"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_ID_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_4"" NUMBER(38, 2), ""_N_COMPRESSED_ID_TRACKING_VARS"" NUMBER(38, 2), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_OPEN_FTP_CNT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_OPEN_FTP_SUM_1"" NUMBER(38, 2), ""_N_OPEN_FTP_SUM_2"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_CAPP_CLCW_NF_SUM_1"" NUMBER(38, 2), ""_N_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CRYPTO_TRACK_CON_IND"" NUMBER(38, 2), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_IND"" NUMBER(38, 2), ""_X_FTP_BC_RAT"" NUMBER(38, 2), ""_X_FTP_BC_SCORE"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_F_1"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_CIF_RECIPIENT_CNT"" NUMBER(38, 2), ""_A_24H_CDP_DC_RTL_DT"" BIGINT, ""_A_SCAM_FLAG_INITIAL_DT"" BIGINT, ""_A_TELSTRA_LONG_CALL"" BIGINT, ""_A_CONFIRMED_FRAUD_DT"" BIGINT, ""_A_CUST_ACTIONCODE_DT_1"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_DTL_ACTIONCODE_DT_2"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_M100_P99_IND_DT"" BIGINT, ""_A_GEO_DT_2"" BIGINT, ""_A_LO_DT"" BIGINT, ""_A_CAPP_PASSWORD_CHANGE_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_2"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_NPP_OUT_ALL_FTP_DT"" BIGINT, ""_A_IS_IP_DT_1"" BIGINT, ""_A_S_L_D"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_4_1"" BIGINT, ""_A_5_2"" BIGINT, ""_A_CSE_DLT_EML_DT"" BIGINT, ""_A_SEC_INTER_SHOP_DT"" BIGINT, ""_A_CLIENT_LOGON_CSR"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_DTL_LIMT_LOAD_DT"" BIGINT, ""_A_RULE_52079_FIRE_DT"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_UA_DEVICE_DT_2"" BIGINT, ""_A_REVERSE_IND_SCAMP7_DT"" BIGINT, ""_A_SCAMP5_MLW_DT"" BIGINT, ""_A_SCAMP_MLW_DT"" BIGINT, ""_A_SCAMP_RULEPRIORITISED_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP3_DT"" BIGINT, ""_A_AMEND_INTERNET_PROFILE_DT"" BIGINT, ""_A_PL_LV_DT_2"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_OUT_DECLINE_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_DECLINE_INITIAL_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_RT_DECLINE_INITIAL_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_2"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_2"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_5"" BIGINT, ""_A_NB_BPAY_ACCT_DT_4"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_PAYID_TRANSFER_OUT"" BIGINT, ""_A_NPP_OUT_ALL_DT"" BIGINT, ""_A_INTERSTATE_IP_ACTIVITY"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_NB_GROUP_DT_3"" BIGINT, ""_A_CLIENT_POSTCODE_DT_5"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_CLIENT_CITY_DATE_3"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_OPEN_LISTED_LAST_CIF_DT_1"" BIGINT, ""_B_OPEN_LAST_PAYER_CIF_DT_9"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_CLIENT_POSTCODE_DT_1"" BIGINT, ""_B_CLIENT_POSTCODE_DT_2"" BIGINT, ""_B_BOND_CNT_DATE"" BIGINT, ""_B_BOND_SUM_DATE"" BIGINT, ""_B_RECIP_LINK_SUM_DATE"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_NC_EVENT_DT"" BIGINT, ""_L_SE_SCORE_DT_1"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_BOT_DT"" BIGINT, ""_N_CRYPTO_CON_DT_LST"" BIGINT, ""_N_5_RCNT_M100_DTS_3"" BIGINT, ""_N_FRD_DCLN_COMMS_DT"" BIGINT, ""_N_SCM_DCLN_COMMS_DT"" BIGINT, ""_N_NPP_NAMEMATCH_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_CRYPTO_HOLD_DT"" BIGINT, ""_N_2WP_MN_FRD_RESP_BL_END_DT"" BIGINT, ""_N_2WP_TRAN_DT_1"" BIGINT, ""_N_M100_P23_MLW_DT"" BIGINT, ""_N_1701_DT_3"" BIGINT, ""_N_CAPP_DEREG"" BIGINT, ""_N_S_1"" BIGINT, ""_N_A_3"" BIGINT, ""_N_G_C"" BIGINT, ""_N_CLCI_CNT_DATE_N"" BIGINT, ""_N_NB_DECLINE_STRATEGY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_SCAMP5_MLW_DT"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_NB_RECIPIENT_DT_3"" BIGINT, ""_N_CAPP_REG_DT_1"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CLIENT_LOGON_COMMBANKAPP"" BIGINT, ""_N_CLIENT_SESS_LOGON"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON"" BIGINT, ""_N_CLIENT_LOGON_CSR"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_PAYEE_DEL"" BIGINT, ""_N_CLIENT_QA_CHG"" BIGINT, ""_N_CLIENT_UNLOCK"" BIGINT, ""_X_CIF_SENDER_DT"" BIGINT, ""_X_NAME_MATCH_DT"" BIGINT, ""_X_AMT_JUMP_DT"" BIGINT, ""_X_D_1"" BIGINT, ""_X_D_2"" BIGINT, ""_X_D_4"" BIGINT, ""_X_NPP_OUT_CNT_DATE"" BIGINT, ""_X_NPP_OUT_ALL_FTP_DT"" BIGINT, ""_X_CIF_RECIPIENT_DT"" BIGINT, ""_X_CIF_RECIPIENT_NEW_DATE"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            A.DETECTION,
            A.CASE_DETECTION,
            B.TTS_TRAN_DATE_ALT,
            B.TGX_TRAN_AMT,
            TRY_CAST(SUBSTR(B.TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            A.CMX_TRAN_ID
, A.SSX_CUST_NUM
, A.CATEGORY
, A.LABEL
, A.DTL_EX_0_20S_001
, A.FRAUDTYPE
, A.RUA_20BYTE_STRING_001,
            B._A_24H_CDP_DC_RTL_CNT_PREV_MAX
, B._A_BTS_BNFT
, B._A_NPP_INB_PMT_VAL
, B._A_SUPER_AMNT
, B._A_PROF_RISK_IND
, B._A_CUST_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_2
, B._A_TELSTRA_ACTIVE_CALL
, B._A_TELSTRA_API_EVENT_ID
, B._A_TELSTRA_EXISTING_RELATION
, B._A_LATEST_NCRG_ISP
, B._A_GEO_LONG_2
, B._A_P_N_H
, B._A_FTP_SUM_1
, B._A_CRD_SCAM_SUPP_7D_SUM_1
, B._A_BTS_CUST_AGE
, B._A_P_L_1
, B._A_P_L_C
, B._A_CRD_NPP_PAYMENT_AMOUNT
, B._A_CURR_CAPP_DEVICE_NFTP_CNT
, B._A_2WAY_TYPE
, B._A_CUST_ACCT_BAL
, B._A_R
, B._A_U
, B._A_DOM_IP_SWITCH_CNT_2
, B._A_CAPP_CARD_LIMIT_CNT_1
, B._A_CAPP_DEREGISTARATION_CNT_3
, B._A_CAPP_LOGON_CNT_2
, B._A_CAPP_LOGON_CNT_3
, B._A_NB_LOGONS_CNT_3
, B._A_CUST_BROWSER_CNT_3
, B._A_CUST_BROWSER_VER
, B._A_CUST_OS_NAME
, B._A_CUST_OS_VER
, B._A_CURR_NB_BROWSER_CNT
, B._A_DEVICE_SIM_VENDOR_RATIO_EXC
, B._A_PL_LV_3
, B._A_CIF_ESTABLISH_CUST_PCODE
, B._A_LIST_RL1_SCAM_CUST_CIF
, B._A_PROF_CAPP_DEVICE_CNT_1
, B._A_MRISK_FOREIGN_IP_CNTRY_CODE
, B._A_ALL_BPAY_ACCT_2
, B._A_ALL_BPAY_ACCT_SUM_1
, B._A_ALL_BPAY_ACCT_SUM_3
, B._A_NPP_OUT_FTP_CNT_1
, B._A_CUST_NPP_OUT_SUM_AAA_2
, B._A_CUST_NPP_OUT_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_LONG
, B._A_CIF_ESTABLISH_CHANNEL
, B._A_ECV_DOCUMENT_IP
, B._A_BTS_BCH_SUM
, B._A_MONTHLY_TRANSFER_COUNT_1
, B._A_MONTHLY_TRANSFER_COUNT_2
, B._A_MONTHLY_TRANSFER_COUNT_3
, B._A_MONTHLY_TRANSFER_COUNT_4
, B._A_MONTHLY_TRANSFER_SUM_2
, B._A_MONTHLY_TRANSFER_SUM_4
, B._A_CLIENT_CITY_10
, B._A_CLIENT_CITY_6
, B._A_CLIENT_COUNTRY_1
, B._A_CLIENT_COUNTRY_8
, B._A_CLIENT_COUNTRY_CNT_3
, B._B_SAFE_RECIP_FRD_EXCLUDED_IND
, B._B_RECIP_PROFILE_GLOB_ERROR
, B._B_RECIP_SUM_TODAY
, B._B_CRYPTO_RISK
, B._B_OPEN_LAST_PAYER_CIF_10
, B._B_LIST_BL_SCAM_TP_ACCT
, B._B_LIST_RL1_TP_ACCT
, B._B_NPP_BLACKLIST_RECIP_FLAG
, B._B_NPP_BLACKLIST_SENDER_FLAG
, B._B_RECIP_SUM_AAA_1
, B._B_RECIP_SUM_AAA_2
, B._B_RECIP_SUM_AAA_LONG
, B._B_CLIENT_POSTCODE_1
, B._B_CLIENT_POSTCODE_2
, B._B_CLIENT_POSTCODE_3
, B._B_CLIENT_POSTCODE_CNT_1
, B._B_CLIENT_POSTCODE_CNT_2
, B._B_CLIENT_POSTCODE_SUM_1
, B._B_CLIENT_POSTCODE_SUM_2
, B._B_CLIENT_POSTCODE_SUM_3
, B._B_CLIENT_POSTCODE_SUM_5
, B._B_RECIP_SUM_1
, B._I_ALL_LOGONS_PERC_1
, B._I_CAPP_LOGONS_PERC_1
, B._L_PAYTO_MANDATE_ID
, B._L_PUSH_API_1
, B._L_PUSH_API_2
, B._L_PUSH_API_3
, B._L_PUSH_API_4
, B._L_BC_CONTEXT
, B._L_LGN_METHOD_ANOM
, B._L_MUID_AGE_PER_USER
, B._L_SDID_1
, B._L_NC_ACCT_NUM
, B._L_NC_RESPONSE_CODE
, B._L_NC_WINNING_ALG
, B._L_BRANCH_ID
, B._L_PMT_AMT
, B._L_PMT_DESCR
, B._L_PMT_VLOC_ANOM
, B._L_SE_SCORE
, B._L_SE_SCORE_1
, B._L_SE_SESS_CNT
, B._L_DATETIME_FP_2
, B._L_FINGERPRINT_1
, B._L_FINGERPRINT_2
, B._L_FINGERPRINT_3
, B._L_FINGERPRINT_4
, B._L_FINGERPRINT_5
, B._L_SCORE_1
, B._L_SCORE_2
, B._L_SCORE_3
, B._L_BC_SESS_CNT
, B._L_ACC_AMT_1D
, B._L_ACC_AMT_1H
, B._L_ADV_KEY_COMBO
, B._L_AND_ID_AGE
, B._L_BC_SCORE
, B._L_CLIPB_PASTE_CNT
, B._L_DEV_FAM
, B._L_DEV_FAM_AGE
, B._L_IS_RCNT_HRISK_SESS
, B._L_LANG_1
, B._L_LANG_2
, B._L_LANG_3
, B._L_MAX_30D_SCORE
, B._L_NEW_PAYEE_PER_USER
, B._L_NUM_SESS_2H
, B._L_NUM_SESS_4H
, B._L_POLICY_ID
, B._L_POLICY_NM
, B._L_PROXY_TYPE
, B._L_SCRN_H
, B._L_SESS_CNT_MOB_BROWSER
, B._L_SESS_CNT_WEB
, B._L_TAP_CNT
, B._L_TOUCH_CNT
, B._N_CRYPTO_CON_N_CNT
, B._N_CRYPTO_CON_N_SUM
, B._N_CRYPTO_POT_N_SUM
, B._N_CRYPTO_CON_IND
, B._N_CRYPTO_POT_IND
, B._N_FTP_CNT_1
, B._N_FTP_SUM_1
, B._N_NMCHK_CNT
, B._N_NMCHK_RECIP_CNT_1
, B._N_2WP_TRAN_ID_1
, B._N_CA_DEV_BL_FLAG_2
, B._N_CA_DEV_BL_FLAG_4
, B._N_COMPRESSED_ID_TRACKING_VARS
, B._N_CUST_TXN_COUNT
, B._N_OPEN_FTP_CNT_1
, B._N_NB_RECIPIENT_AMT_1
, B._N_NB_RECIPIENT_AMT_3
, B._N_D_D_3
, B._N_CUST_NB_DEVICE_CNT
, B._N_OPEN_FTP_SUM_1
, B._N_OPEN_FTP_SUM_2
, B._N_CAPP_LINKED_CNT_1
, B._N_CAPP_LINKED_CNT_2
, B._N_CAPP_CLCW_NF_SUM_1
, B._N_CAPP_LOGON_CNT_2
, B._N_ESTAB_SCHEDULE_2
, B._N_LOG_SCR_CONS_2
, B._N_LINKED_RECIP
, B._N_CLIENT_IDCHNG_NB
, B._N_CLIENT_NEW_PAYEE_1
, B._N_CLIENT_NEW_PAYEE_2
, B._N_CLIENT_NEW_PAYEE_3
, B._X_CRYPTO_TRACK_CON_IND
, B._X_CIF_SENDER_CNT
, B._X_NAME_MATCH_CNT
, B._X_NAME_MATCH_IND
, B._X_FTP_BC_RAT
, B._X_FTP_BC_SCORE
, B._X_LAST_N_TXN_COUNT
, B._X_F_1
, B._X_T_5
, B._X_CIF_RECIPIENT_CNT,
            B._A_24H_CDP_DC_RTL_DT
, B._A_SCAM_FLAG_INITIAL_DT
, B._A_TELSTRA_LONG_CALL
, B._A_CONFIRMED_FRAUD_DT
, B._A_CUST_ACTIONCODE_DT_1
, B._A_DTL_ACTIONCODE_DT_1
, B._A_DTL_ACTIONCODE_DT_2
, B._A_NPP_INBOUND_DATETIME
, B._A_M100_P99_IND_DT
, B._A_GEO_DT_2
, B._A_LO_DT
, B._A_CAPP_PASSWORD_CHANGE_DT
, B._A_CD_RTR_DT_1
, B._A_CD_RTR_DT_2
, B._A_IVR_LOGON_DT
, B._A_NPP_OUT_ALL_FTP_DT
, B._A_IS_IP_DT_1
, B._A_S_L_D
, B._A_CAPP_DEV_RETR_DT
, B._A_4_1
, B._A_5_2
, B._A_CSE_DLT_EML_DT
, B._A_SEC_INTER_SHOP_DT
, B._A_CLIENT_LOGON_CSR
, B._A_DTL_CAPP_NBANK_SSO_DT
, B._A_DTL_LIMT_LOAD_DT
, B._A_RULE_52079_FIRE_DT
, B._A_CLIENT_DETAILS_VIEW
, B._A_MANUAL_NB_LOCK_DT
, B._A_CUST_BROWSER_PREV_DT_2
, B._A_UA_DEVICE_DT_2
, B._A_REVERSE_IND_SCAMP7_DT
, B._A_SCAMP5_MLW_DT
, B._A_SCAMP_MLW_DT
, B._A_SCAMP_RULEPRIORITISED_DT
, B._A_REVERSE_IND_SCAMP3_DT
, B._A_AMEND_INTERNET_PROFILE_DT
, B._A_PL_LV_DT_2
, B._A_NPP_OUT_PAYID_DT
, B._A_NPP_OUT_DECLINE_COMMSEE_DT
, B._A_NPP_OUT_DECLINE_INITIAL_DT
, B._A_NPP_OUT_HOLD_COMMSEE_DT
, B._A_RT_DECLINE_INITIAL_DT
, B._A_PROF_CAPP_DEVICE_DT_2
, B._A_CAPP_REGO_DT
, B._A_ALL_BPAY_ACCT_DT_2
, B._A_ALL_BPAY_ACCT_DT_5
, B._A_NB_BPAY_ACCT_DT_4
, B._A_NB_BPAY_ACCT_FTP_DT_1
, B._A_NPP_PAYID_TRANSFER_OUT
, B._A_NPP_OUT_ALL_DT
, B._A_INTERSTATE_IP_ACTIVITY
, B._A_NB_GROUP_DT_2
, B._A_NB_GROUP_DT_3
, B._A_CLIENT_POSTCODE_DT_5
, B._A_LAST_NB_LOGIN_DT
, B._A_CLIENT_CITY_DATE_3
, B._A_CLIENT_COUNTRY_DATE_1
, B._B_OPEN_LISTED_LAST_CIF_DT_1
, B._B_OPEN_LAST_PAYER_CIF_DT_9
, B._B_NPP_WHITELIST_SENDER_DT
, B._B_ANY_CUST_FTP_DT
, B._B_CLIENT_POSTCODE_DT_1
, B._B_CLIENT_POSTCODE_DT_2
, B._B_BOND_CNT_DATE
, B._B_BOND_SUM_DATE
, B._B_RECIP_LINK_SUM_DATE
, B._L_PUSH_API_DT_1
, B._L_NC_EVENT_DT
, B._L_SE_SCORE_DT_1
, B._L_M_F_2
, B._L_M_F_C
, B._L_IS_BOT_DT
, B._N_CRYPTO_CON_DT_LST
, B._N_5_RCNT_M100_DTS_3
, B._N_FRD_DCLN_COMMS_DT
, B._N_SCM_DCLN_COMMS_DT
, B._N_NPP_NAMEMATCH_DT
, B._N_2WP_SNT_TRAN_HOLD_END_DT
, B._N_CRYPTO_HOLD_DT
, B._N_2WP_MN_FRD_RESP_BL_END_DT
, B._N_2WP_TRAN_DT_1
, B._N_M100_P23_MLW_DT
, B._N_1701_DT_3
, B._N_CAPP_DEREG
, B._N_S_1
, B._N_A_3
, B._N_G_C
, B._N_CLCI_CNT_DATE_N
, B._N_NB_DECLINE_STRATEGY_FIRE
, B._N_CUST_BROWSER_FIRST_DT_2
, B._N_SCAMP5_MLW_DT
, B._N_MALWARE_DT
, B._N_NB_RECIPIENT_DT_3
, B._N_CAPP_REG_DT_1
, B._N_CAPP_REG_DT_2
, B._N_CLIENT_LOGON_COMMBANKAPP
, B._N_CLIENT_SESS_LOGON
, B._N_CLIENT_IDTO_PW
, B._N_CLIENT_LOGON
, B._N_CLIENT_LOGON_CSR
, B._N_CLIENT_LOGON_FINEST
, B._N_CLIENT_PAYEE_DEL
, B._N_CLIENT_QA_CHG
, B._N_CLIENT_UNLOCK
, B._X_CIF_SENDER_DT
, B._X_NAME_MATCH_DT
, B._X_AMT_JUMP_DT
, B._X_D_1
, B._X_D_2
, B._X_D_4
, B._X_NPP_OUT_CNT_DATE
, B._X_NPP_OUT_ALL_FTP_DT
, B._X_CIF_RECIPIENT_DT
, B._X_CIF_RECIPIENT_NEW_DATE
        FROM
            LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_TEMP_DIGI_SCAM_D001_V3 AS A
            INNER JOIN (
               SELECT
                   TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
                   TTS_TRAN_DATE_ALT, 
                   TTS_TRAN_TIME_ALT,
                   TRY_CAST(TGX_TRAN_AMT AS DECIMAL(14,2)) AS TGX_TRAN_AMT,
                   	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_24H_CDP_DC_RTL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_24H_CDP_DC_RTL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_24H_CDP_DC_RTL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAM_FLAG_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAM_FLAG_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAM_FLAG_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00'))
            END as _A_TELSTRA_LONG_CALL
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CONFIRMED_FRAUD_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_M100_P99_IND_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_M100_P99_IND_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_M100_P99_IND_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_GEO_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_PASSWORD_CHANGE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_ALL_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IS_IP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IS_IP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_S_L_D, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_S_L_D, 38, 2), '1960-01-01 00:00:00'))
            END as _A_S_L_D
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_4_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_DLT_EML_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_DLT_EML_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CSE_DLT_EML_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SEC_INTER_SHOP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_LIMT_LOAD_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_LIMT_LOAD_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_LIMT_LOAD_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RULE_52079_FIRE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RULE_52079_FIRE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RULE_52079_FIRE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP7_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP7_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP7_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP5_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP_RULEPRIORITISED_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP3_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AMEND_INTERNET_PROFILE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AMEND_INTERNET_PROFILE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_AMEND_INTERNET_PROFILE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PL_LV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PL_LV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PL_LV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_DECLINE_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_DECLINE_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RT_DECLINE_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_PAYID_TRANSFER_OUT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_INTERSTATE_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_INTERSTATE_IP_ACTIVITY, 38, 2), '1960-01-01 00:00:00'))
            END as _A_INTERSTATE_IP_ACTIVITY
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_LAST_NB_LOGIN_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LISTED_LAST_CIF_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LISTED_LAST_CIF_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _B_OPEN_LISTED_LAST_CIF_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_9, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_OPEN_LAST_PAYER_CIF_DT_9, 38, 2), '1960-01-01 00:00:00'))
            END as _B_OPEN_LAST_PAYER_CIF_DT_9
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_CLIENT_POSTCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_CLIENT_POSTCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _B_CLIENT_POSTCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_CLIENT_POSTCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _B_CLIENT_POSTCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_RECIP_LINK_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_NC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_NC_EVENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_NC_EVENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SE_SCORE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SE_SCORE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_SE_SCORE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_BOT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_BOT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_BOT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CRYPTO_CON_DT_LST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_5_RCNT_M100_DTS_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_FRD_DCLN_COMMS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCM_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCM_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_SCM_DCLN_COMMS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NPP_NAMEMATCH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NPP_NAMEMATCH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NPP_NAMEMATCH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_HOLD_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_HOLD_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CRYPTO_HOLD_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_MN_FRD_RESP_BL_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_TRAN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_M100_P23_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1701_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1701_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_DEREG, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_DEREG, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_DEREG
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_A_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_G_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLCI_CNT_DATE_N, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLCI_CNT_DATE_N, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLCI_CNT_DATE_N
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_DECLINE_STRATEGY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_DECLINE_STRATEGY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_DECLINE_STRATEGY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_SCAMP5_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_RECIPIENT_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_COMMBANKAPP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_COMMBANKAPP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_COMMBANKAPP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_SESS_LOGON, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_SESS_LOGON, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_SESS_LOGON
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PAYEE_DEL, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PAYEE_DEL, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PAYEE_DEL
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_QA_CHG
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_UNLOCK
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_CIF_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_CIF_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _X_CIF_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NAME_MATCH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NAME_MATCH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _X_NAME_MATCH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_AMT_JUMP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_AMT_JUMP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _X_AMT_JUMP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_1, 38, 2), '1960-01-01 00:00:00'))
            END as _X_D_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_2, 38, 2), '1960-01-01 00:00:00'))
            END as _X_D_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_D_4, 38, 2), '1960-01-01 00:00:00'))
            END as _X_D_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _X_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _X_NPP_OUT_ALL_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_CIF_RECIPIENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_CIF_RECIPIENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _X_CIF_RECIPIENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _X_CIF_RECIPIENT_NEW_DATE
        
                   ,             try_to_number(_a_24h_cdp_dc_rtl_cnt_prev_max, 38, 2) as _a_24h_cdp_dc_rtl_cnt_prev_max
            ,_A_BTS_BNFT
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,try_to_number(_a_super_amnt, 38, 2) as _a_super_amnt
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_long_2, 38, 2) as _a_geo_long_2
            ,_A_P_N_H
            ,try_to_number(_a_ftp_sum_1, 38, 2) as _a_ftp_sum_1
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_dom_ip_switch_cnt_2, 38, 2) as _a_dom_ip_switch_cnt_2
            ,try_to_number(_a_capp_card_limit_cnt_1, 38, 2) as _a_capp_card_limit_cnt_1
            ,try_to_number(_a_capp_deregistaration_cnt_3, 38, 2) as _a_capp_deregistaration_cnt_3
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,try_to_number(_a_cust_browser_cnt_3, 38, 2) as _a_cust_browser_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,try_to_number(_a_device_sim_vendor_ratio_exc, 38, 2) as _a_device_sim_vendor_ratio_exc
            ,try_to_number(_a_pl_lv_3, 38, 2) as _a_pl_lv_3
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_all_bpay_acct_sum_3, 38, 2) as _a_all_bpay_acct_sum_3
            ,try_to_number(_a_npp_out_ftp_cnt_1, 38, 2) as _a_npp_out_ftp_cnt_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_1, 38, 2) as _a_monthly_transfer_count_1
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_2, 38, 2) as _a_monthly_transfer_sum_2
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_b_safe_recip_frd_excluded_ind, 38, 2) as _b_safe_recip_frd_excluded_ind
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_list_bl_scam_tp_acct, 38, 2) as _b_list_bl_scam_tp_acct
            ,try_to_number(_b_list_rl1_tp_acct, 38, 2) as _b_list_rl1_tp_acct
            ,try_to_number(_b_npp_blacklist_recip_flag, 38, 2) as _b_npp_blacklist_recip_flag
            ,try_to_number(_b_npp_blacklist_sender_flag, 38, 2) as _b_npp_blacklist_sender_flag
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_all_logons_perc_1, 38, 2) as _i_all_logons_perc_1
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_lgn_method_anom, 38, 2) as _l_lgn_method_anom
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,_L_SDID_1
            ,_L_NC_ACCT_NUM
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,_L_BRANCH_ID
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_pmt_vloc_anom, 38, 2) as _l_pmt_vloc_anom
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_score_1, 38, 2) as _l_se_score_1
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_datetime_fp_2, 38, 2) as _l_datetime_fp_2
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_adv_key_combo, 38, 2) as _l_adv_key_combo
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_bc_score, 38, 2) as _l_bc_score
            ,try_to_number(_l_clipb_paste_cnt, 38, 2) as _l_clipb_paste_cnt
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_is_rcnt_hrisk_sess, 38, 2) as _l_is_rcnt_hrisk_sess
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_new_payee_per_user, 38, 2) as _l_new_payee_per_user
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,try_to_number(_l_policy_id, 38, 2) as _l_policy_id
            ,_L_POLICY_NM
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_n_crypto_con_n_cnt, 38, 2) as _n_crypto_con_n_cnt
            ,try_to_number(_n_crypto_con_n_sum, 38, 2) as _n_crypto_con_n_sum
            ,try_to_number(_n_crypto_pot_n_sum, 38, 2) as _n_crypto_pot_n_sum
            ,try_to_number(_n_crypto_con_ind, 38, 2) as _n_crypto_con_ind
            ,try_to_number(_n_crypto_pot_ind, 38, 2) as _n_crypto_pot_ind
            ,try_to_number(_n_ftp_cnt_1, 38, 2) as _n_ftp_cnt_1
            ,try_to_number(_n_ftp_sum_1, 38, 2) as _n_ftp_sum_1
            ,try_to_number(_n_nmchk_cnt, 38, 2) as _n_nmchk_cnt
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_id_1, 38, 2) as _n_2wp_tran_id_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,try_to_number(_n_ca_dev_bl_flag_4, 38, 2) as _n_ca_dev_bl_flag_4
            ,try_to_number(_n_compressed_id_tracking_vars, 38, 2) as _n_compressed_id_tracking_vars
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_open_ftp_cnt_1, 38, 2) as _n_open_ftp_cnt_1
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,_N_D_D_3
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_open_ftp_sum_1, 38, 2) as _n_open_ftp_sum_1
            ,try_to_number(_n_open_ftp_sum_2, 38, 2) as _n_open_ftp_sum_2
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,try_to_number(_n_capp_clcw_nf_sum_1, 38, 2) as _n_capp_clcw_nf_sum_1
            ,try_to_number(_n_capp_logon_cnt_2, 38, 2) as _n_capp_logon_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_crypto_track_con_ind, 38, 2) as _x_crypto_track_con_ind
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_name_match_ind, 38, 2) as _x_name_match_ind
            ,try_to_number(_x_ftp_bc_rat, 38, 2) as _x_ftp_bc_rat
            ,try_to_number(_x_ftp_bc_score, 38, 2) as _x_ftp_bc_score
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_f_1, 38, 2) as _x_f_1
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_cif_recipient_cnt, 38, 2) as _x_cif_recipient_cnt
                FROM
                   LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
                WHERE
                    TTS_TRAN_DATE_ALT BETWEEN 20241207 AND 20250714
            ) AS B
        ON
            A.CMX_TRAN_ID = B.CMX_TRAN_ID
            AND A.TTS_TRAN_DATE_ALT = B.TTS_TRAN_DATE_ALT
    )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1391440,1391.440000,23.190667,0.386511,2X-LARGE,32,12.368352
01bdc9a6-3204-a617-0000-c71d2453aea2,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DIGI_RAS_D001_V2(""DETECTION"" STRING(16777216), ""CASE_DETECTION"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TGX_TRAN_AMT"" NUMBER(14, 2), ""HOUR"" BIGINT, ""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""CATEGORY"" STRING(134217728), ""LABEL"" BIGINT, ""DTL_EX_0_20S_001"" STRING(16777216), ""FRAUDTYPE"" STRING(16777216), ""RUA_20BYTE_STRING_001"" STRING(16777216), ""_A_BTS_BIO_SE"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_NPP_INBOUND_SUM_AMT"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_DISTANCE"" NUMBER(38, 2), ""_A_GEO_LONG_1"" NUMBER(38, 2), ""_A_GEO_LONG_2"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_MULTI_CNT"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_CUST_AVG_ACCT_BAL"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_T"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_CAPP_DEREGISTARATION_CNT_3"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_2"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_DEVICE_SIM_VENDOR_RATIO_EXC"" NUMBER(38, 2), ""_A_DEVICE_SIMILAR_VENDOR_RATIO"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_CC_CASH_ADVANCE_AMT"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_ALL_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NPP_FTP_SUM"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_4"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_7"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_SHORT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_CLIENT_POSTCODE_FTP_SUM_3"" NUMBER(38, 2), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_CITY_CNT_1"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_7"" NUMBER(38, 2), ""_B_SAFE_RECIP_FRD_EXCLUDED_IND"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_BVT_NUMERIC_1"" NUMBER(38, 2), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_3"" NUMBER(38, 2), ""_I_ALL_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_NETBANK_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_L_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_SHORT"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_SDID_CNT_1"" NUMBER(38, 2), ""_L_SDID_CNT_3"" NUMBER(38, 2), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BRANCH_ID"" STRING(16777216), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_DATETIME_FP_2"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_SCORE_5"" NUMBER(38, 2), ""_L_M_L_4"" NUMBER(38, 2), ""_L_M_L_C"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_ACC_AMT_7D"" NUMBER(38, 2), ""_L_ADV_KEY_COMBO"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_JS"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_FT_RAT_APP_INST"" NUMBER(38, 2), ""_L_HI_DEAD_TIME"" NUMBER(38, 2), ""_L_IS_ACTIVE_CALL"" NUMBER(38, 2), ""_L_IS_LONG_SESS"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_LGN_IMPORT_ANOMALY"" NUMBER(38, 2), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_MINS_LST_LGN_CAPPED"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_SDK"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_N_CRYPTO_CON_N_CNT"" NUMBER(38, 2), ""_N_CRYPTO_POT_N_SUM"" NUMBER(38, 2), ""_N_MPS_MNDT_CNT_24H_1"" NUMBER(38, 2), ""_N_MOB_OTH_TRAN_SUM_1"" NUMBER(38, 2), ""_N_CA_DEVICE_PROFILE_1"" NUMBER(38, 2), ""_N_CA_LGN_CNT_24H_1"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_ID_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_NB_SUM_TPT_4"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_T_2"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_3"" NUMBER(38, 2), ""_A_BTS_MAX_SE_DT"" BIGINT, ""_A_NM_DECLINE_FLAG_DT"" BIGINT, ""_A_TELSTRA_LONG_CALL"" BIGINT, ""_A_CONFIRMED_FRAUD_DT"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_DTL_ACTIONCODE_DT_2"" BIGINT, ""_A_CRD_ACTIONCODE_DT_1"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_GEO_DT_2"" BIGINT, ""_A_DEVICEANOM_MLW_DT"" BIGINT, ""_A_CAPP_PASSWORD_CHANGE_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_2"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_SCH_DT"" BIGINT, ""_A_NPP_OUT_ALL_FTP_DT"" BIGINT, ""_A_BTS_TRF_CNT_DT"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_4_1"" BIGINT, ""_A_5_2"" BIGINT, ""_A_MTH_BTS_WDL_CNT_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP10_DT"" BIGINT, ""_A_CSE_ADD_AUTH_DT"" BIGINT, ""_A_SEC_INTER_SHOP_DT"" BIGINT, ""_A_CLIENT_LOGON_CSR"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_UA_DEVICE_DT_2"" BIGINT, ""_A_SCAMP3_MLW_DT"" BIGINT, ""_A_SCAMP7_MLW_DT"" BIGINT, ""_A_SCAMP_RULEPRIORITISED_DT"" BIGINT, ""_A_CURR_NB_BROWSER_PREV_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP3_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP4_DT"" BIGINT, ""_A_NB_BPAY_LIMIT_INCREASE_DT"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_INB_ALL_DT"" BIGINT, ""_A_NPP_OUT_DECLINE_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_INITIAL_DT"" BIGINT, ""_A_RT_DECLINE_INITIAL_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_2"" BIGINT, ""_A_RETRIEVE_STMT_DETAILS_DT"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_2"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_5"" BIGINT, ""_A_NB_BPAY_ACCT_DT_4"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_PAYID_TRANSFER_OUT"" BIGINT, ""_A_NPP_INB_OFI_PAYID_DT"" BIGINT, ""_A_NPP_OUT_CBA_PAYID_DT"" BIGINT, ""_A_CIF_ESTABLISH_DT"" BIGINT, ""_A_ECV_DOCUMENT_DT"" BIGINT, ""_A_CLIENT_PW_FORGOT"" BIGINT, ""_A_BTS_WDL_CNT_DT"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_NB_GROUP_DT_3"" BIGINT, ""_A_CLIENT_POSTCODE_DT_5"" BIGINT, ""_A_ACCT_AGG_DT"" BIGINT, ""_A_CLIENT_CITY_DATE_10"" BIGINT, ""_A_CLIENT_CITY_DATE_3"" BIGINT, ""_A_CLIENT_CITY_DATE_5"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_NPP_WHITELIST_PAYID_DT"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_NPP_OUT_CNT_DATE"" BIGINT, ""_B_BOND_CNT_DATE"" BIGINT, ""_B_BOND_SUM_DATE"" BIGINT, ""_B_HRISK_BILL_PROF_CNT_DT"" BIGINT, ""_B_RECIP_LINK_SUM_DATE"" BIGINT, ""_I_ALL_LOGONS_FDT"" BIGINT, ""_L_LST_BC_SNOOP_LOGON_DT"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_PUSH_API_DT_2"" BIGINT, ""_L_FIRST_RAT_DT"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_RAT_DT"" BIGINT, ""_N_CRYPTO_CON_DT_LST"" BIGINT, ""_N_TELSTRA_NCRG_DT"" BIGINT, ""_N_FRD_DCLN_COMMS_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_2WP_MN_FRD_RESP_BL_END_DT"" BIGINT, ""_N_2WP_TRAN_DT_1"" BIGINT, ""_N_MRISK_ISP_NCRG_DT"" BIGINT, ""_N_M100_P23_MLW_DT"" BIGINT, ""_N_D_P_C"" BIGINT, ""_N_S_1"" BIGINT, ""_N_S_3"" BIGINT, ""_N_1601_DT"" BIGINT, ""_N_A_3"" BIGINT, ""_N_G_C"" BIGINT, ""_N_NB_MEDIUM_PRIORITY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_CUST_NB_PREV_DT"" BIGINT, ""_N_UA_DEVICE_FIRST_DT_2"" BIGINT, ""_N_SCAMP3_MLW_DT"" BIGINT, ""_N_ALL_LOGON_DT"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_NB_RECIPIENT_DT_3"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON_CSR"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_LOGON_TOKEN"" BIGINT, ""_N_CLIENT_PASSWORD_TEMP"" BIGINT, ""_N_CLIENT_PW_FORGOT"" BIGINT, ""_N_CLIENT_QA_CHG"" BIGINT, ""_N_CLIENT_UNLOCK"" BIGINT, ""_X_NPP_OUT_CNT_DATE"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            A.DETECTION,
            A.CASE_DETECTION,
            B.TTS_TRAN_DATE_ALT,
            B.TGX_TRAN_AMT,
            TRY_CAST(SUBSTR(B.TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            A.CMX_TRAN_ID
, A.SSX_CUST_NUM
, A.CATEGORY
, A.LABEL
, A.DTL_EX_0_20S_001
, A.FRAUDTYPE
, A.RUA_20BYTE_STRING_001,
            B._A_BTS_BIO_SE
, B._A_BTS_BNFT
, B._A_NPP_INB_PMT_VAL
, B._A_PROF_RISK_IND
, B._A_CUST_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_2
, B._A_NPP_INBOUND_SUM_AMT
, B._A_TELSTRA_ACTIVE_CALL
, B._A_TELSTRA_API_EVENT_ID
, B._A_TELSTRA_EXISTING_RELATION
, B._A_LATEST_NCRG_ISP
, B._A_GEO_DISTANCE
, B._A_GEO_LONG_1
, B._A_GEO_LONG_2
, B._A_P_N_H
, B._A_MULTI_CNT
, B._A_CRD_SCAM_SUPP_7D_SUM_1
, B._A_BTS_CUST_AGE
, B._A_P_L_1
, B._A_P_L_C
, B._A_CRD_NPP_PAYMENT_AMOUNT
, B._A_CURR_CAPP_DEVICE_NFTP_CNT
, B._A_2WAY_TYPE
, B._A_CUST_ACCT_BAL
, B._A_CUST_AVG_ACCT_BAL
, B._A_R
, B._A_T
, B._A_U
, B._A_CAPP_DEREGISTARATION_CNT_3
, B._A_CAPP_LOGON_CNT_2
, B._A_CAPP_LOGON_CNT_3
, B._A_NB_LOGONS_CNT_2
, B._A_NB_LOGONS_CNT_3
, B._A_CUST_BROWSER_CNT_3
, B._A_CUST_BROWSER_VER
, B._A_CUST_OS_NAME
, B._A_CUST_OS_VER
, B._A_CURR_NB_BROWSER_CNT
, B._A_DEVICE_SIM_VENDOR_RATIO_EXC
, B._A_DEVICE_SIMILAR_VENDOR_RATIO
, B._A_CIF_ESTABLISH_CUST_PCODE
, B._A_LIST_RL1_SCAM_CUST_CIF
, B._A_PREV_CAPP_DEVICE_CNT
, B._A_PROF_CAPP_DEVICE_CNT_1
, B._A_CC_CASH_ADVANCE_AMT
, B._A_MRISK_FOREIGN_IP_CNTRY_CODE
, B._A_ALL_BPAY_ACCT_2
, B._A_ALL_BPAY_ACCT_SUM_1
, B._A_ALL_BPAY_ACCT_SUM_3
, B._A_NB_BPAY_ACCT_SUM_1
, B._A_NB_BPAY_ACCT_SUM_3
, B._A_NPP_FTP_SUM
, B._A_CUST_NPP_OUT_SUM_AAA_1
, B._A_CUST_NPP_OUT_SUM_AAA_2
, B._A_CUST_NPP_OUT_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_4
, B._A_CUST_SUM_AAA_7
, B._A_CUST_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_SHORT
, B._A_CIF_ESTABLISH_CHANNEL
, B._A_ECV_DOCUMENT_IP
, B._A_CLIENT_POSTCODE_FTP_SUM_3
, B._A_BTS_BCH_SUM
, B._A_MONTHLY_TRANSFER_COUNT_2
, B._A_MONTHLY_TRANSFER_COUNT_3
, B._A_MONTHLY_TRANSFER_COUNT_4
, B._A_MONTHLY_TRANSFER_SUM_4
, B._A_CLIENT_CITY_10
, B._A_CLIENT_CITY_6
, B._A_CLIENT_CITY_CNT_1
, B._A_CLIENT_COUNTRY_1
, B._A_CLIENT_COUNTRY_8
, B._A_CLIENT_COUNTRY_CNT_3
, B._A_CLIENT_COUNTRY_CNT_7
, B._B_SAFE_RECIP_FRD_EXCLUDED_IND
, B._B_RECIP_PROFILE_GLOB_ERROR
, B._B_BVT_NUMERIC_1
, B._B_RECIP_SUM_TODAY
, B._B_CRYPTO_RISK
, B._B_OPEN_LAST_PAYER_CIF_10
, B._B_RECIP_SUM_AAA_1
, B._B_RECIP_SUM_AAA_2
, B._B_RECIP_SUM_AAA_LONG
, B._B_CLIENT_POSTCODE_1
, B._B_CLIENT_POSTCODE_2
, B._B_CLIENT_POSTCODE_3
, B._B_CLIENT_POSTCODE_CNT_1
, B._B_CLIENT_POSTCODE_CNT_2
, B._B_CLIENT_POSTCODE_SUM_1
, B._B_CLIENT_POSTCODE_SUM_2
, B._B_CLIENT_POSTCODE_SUM_3
, B._B_CLIENT_POSTCODE_SUM_5
, B._B_RECIP_SUM_1
, B._I_CUST_TRAN_SUM_3
, B._I_ALL_LOGONS_CNT_1
, B._I_ALL_LOGONS_PERC_1
, B._I_ALL_LOGONS_PERC_3M
, B._I_CAPP_LOGONS_CNT_1
, B._I_CAPP_LOGONS_CNT_3M
, B._I_CAPP_LOGONS_PERC_1
, B._I_NETBANK_LOGONS_CNT_1
, B._I_CUST_NET_L_CNT_1
, B._I_CUST_NET_CNT_1
, B._I_CUST_NET_CNT_SHORT
, B._L_PAYTO_MANDATE_ID
, B._L_PUSH_API_1
, B._L_PUSH_API_2
, B._L_PUSH_API_3
, B._L_PUSH_API_4
, B._L_BC_CONTEXT
, B._L_MUID_AGE_PER_USER
, B._L_SDID_1
, B._L_SDID_CNT_1
, B._L_SDID_CNT_3
, B._L_NC_ACCT_NUM
, B._L_NC_RESPONSE_CODE
, B._L_NC_WINNING_ALG
, B._L_BRANCH_ID
, B._L_PMT_AMT
, B._L_PMT_DESCR
, B._L_SE_SCORE
, B._L_SE_SESS_CNT
, B._L_DATETIME_FP_2
, B._L_FINGERPRINT_1
, B._L_FINGERPRINT_2
, B._L_FINGERPRINT_3
, B._L_FINGERPRINT_4
, B._L_FINGERPRINT_5
, B._L_SCORE_1
, B._L_SCORE_2
, B._L_SCORE_3
, B._L_SCORE_5
, B._L_M_L_4
, B._L_M_L_C
, B._L_BC_SESS_CNT
, B._L_ACC_AMT_1D
, B._L_ACC_AMT_1H
, B._L_ACC_AMT_7D
, B._L_ADV_KEY_COMBO
, B._L_AND_ID_AGE
, B._L_DAYS_LST_DEV_JS
, B._L_DEV_FAM
, B._L_DEV_FAM_AGE
, B._L_FT_RAT_APP_INST
, B._L_HI_DEAD_TIME
, B._L_IS_ACTIVE_CALL
, B._L_IS_LONG_SESS
, B._L_LANG_1
, B._L_LANG_2
, B._L_LANG_3
, B._L_LGN_IMPORT_ANOMALY
, B._L_MAX_30D_SCORE
, B._L_MINS_LST_LGN_CAPPED
, B._L_NUM_SESS_2H
, B._L_NUM_SESS_4H
, B._L_POLICY_NM
, B._L_PROXY_TYPE
, B._L_SCRN_H
, B._L_SESS_CNT_MOB_BROWSER
, B._L_SESS_CNT_MOB_SDK
, B._L_SESS_CNT_WEB
, B._L_TAP_CNT
, B._L_TOUCH_CNT
, B._N_CRYPTO_CON_N_CNT
, B._N_CRYPTO_POT_N_SUM
, B._N_MPS_MNDT_CNT_24H_1
, B._N_MOB_OTH_TRAN_SUM_1
, B._N_CA_DEVICE_PROFILE_1
, B._N_CA_LGN_CNT_24H_1
, B._N_NMCHK_RECIP_CNT_1
, B._N_2WP_TRAN_ID_1
, B._N_CA_DEV_BL_FLAG_2
, B._N_CUST_TXN_COUNT
, B._N_NB_RECIPIENT_AMT_1
, B._N_NB_RECIPIENT_AMT_3
, B._N_NB_SUM_TPT_4
, B._N_D_D_3
, B._N_CUST_NB_DEVICE_CNT
, B._N_CAPP_LINKED_CNT_1
, B._N_CAPP_LINKED_CNT_2
, B._N_CAPP_LOGON_CNT_2
, B._N_ESTAB_SCHEDULE_2
, B._N_LOG_SCR_CONS_2
, B._N_LINKED_RECIP
, B._N_CLIENT_IDCHNG_NB
, B._N_CLIENT_NEW_PAYEE_1
, B._N_CLIENT_NEW_PAYEE_2
, B._N_CLIENT_NEW_PAYEE_3
, B._X_CIF_SENDER_CNT
, B._X_NAME_MATCH_CNT
, B._X_LAST_N_TXN_COUNT
, B._X_T_2
, B._X_T_5
, B._X_NPP_OUT_SUM_3,
            B._A_BTS_MAX_SE_DT
, B._A_NM_DECLINE_FLAG_DT
, B._A_TELSTRA_LONG_CALL
, B._A_CONFIRMED_FRAUD_DT
, B._A_DTL_ACTIONCODE_DT_1
, B._A_DTL_ACTIONCODE_DT_2
, B._A_CRD_ACTIONCODE_DT_1
, B._A_NPP_INBOUND_DATETIME
, B._A_GEO_DT_2
, B._A_DEVICEANOM_MLW_DT
, B._A_CAPP_PASSWORD_CHANGE_DT
, B._A_CD_RTR_DT_1
, B._A_CD_RTR_DT_2
, B._A_IVR_LOGON_DT
, B._A_SCH_DT
, B._A_NPP_OUT_ALL_FTP_DT
, B._A_BTS_TRF_CNT_DT
, B._A_CAPP_DEV_RETR_DT
, B._A_4_1
, B._A_5_2
, B._A_MTH_BTS_WDL_CNT_DT
, B._A_REVERSE_IND_SCAMP10_DT
, B._A_CSE_ADD_AUTH_DT
, B._A_SEC_INTER_SHOP_DT
, B._A_CLIENT_LOGON_CSR
, B._A_DTL_CAPP_NBANK_SSO_DT
, B._A_CLIENT_DETAILS_VIEW
, B._A_MANUAL_NB_LOCK_DT
, B._A_CUST_BROWSER_PREV_DT_2
, B._A_UA_DEVICE_DT_2
, B._A_SCAMP3_MLW_DT
, B._A_SCAMP7_MLW_DT
, B._A_SCAMP_RULEPRIORITISED_DT
, B._A_CURR_NB_BROWSER_PREV_DT
, B._A_REVERSE_IND_SCAMP3_DT
, B._A_REVERSE_IND_SCAMP4_DT
, B._A_NB_BPAY_LIMIT_INCREASE_DT
, B._A_NPP_OUT_PAYID_DT
, B._A_NPP_INB_ALL_DT
, B._A_NPP_OUT_DECLINE_COMMSEE_DT
, B._A_NPP_OUT_HOLD_COMMSEE_DT
, B._A_NPP_OUT_HOLD_INITIAL_DT
, B._A_RT_DECLINE_INITIAL_DT
, B._A_PROF_CAPP_DEVICE_DT_2
, B._A_RETRIEVE_STMT_DETAILS_DT
, B._A_CAPP_REGO_DT
, B._A_ALL_BPAY_ACCT_DT_2
, B._A_ALL_BPAY_ACCT_DT_5
, B._A_NB_BPAY_ACCT_DT_4
, B._A_NB_BPAY_ACCT_FTP_DT_1
, B._A_NPP_PAYID_TRANSFER_OUT
, B._A_NPP_INB_OFI_PAYID_DT
, B._A_NPP_OUT_CBA_PAYID_DT
, B._A_CIF_ESTABLISH_DT
, B._A_ECV_DOCUMENT_DT
, B._A_CLIENT_PW_FORGOT
, B._A_BTS_WDL_CNT_DT
, B._A_NB_GROUP_DT_2
, B._A_NB_GROUP_DT_3
, B._A_CLIENT_POSTCODE_DT_5
, B._A_ACCT_AGG_DT
, B._A_CLIENT_CITY_DATE_10
, B._A_CLIENT_CITY_DATE_3
, B._A_CLIENT_CITY_DATE_5
, B._A_CLIENT_COUNTRY_DATE_1
, B._B_NPP_WHITELIST_PAYID_DT
, B._B_NPP_WHITELIST_SENDER_DT
, B._B_ANY_CUST_FTP_DT
, B._B_NPP_OUT_CNT_DATE
, B._B_BOND_CNT_DATE
, B._B_BOND_SUM_DATE
, B._B_HRISK_BILL_PROF_CNT_DT
, B._B_RECIP_LINK_SUM_DATE
, B._I_ALL_LOGONS_FDT
, B._L_LST_BC_SNOOP_LOGON_DT
, B._L_PUSH_API_DT_1
, B._L_PUSH_API_DT_2
, B._L_FIRST_RAT_DT
, B._L_M_F_2
, B._L_M_F_C
, B._L_IS_RAT_DT
, B._N_CRYPTO_CON_DT_LST
, B._N_TELSTRA_NCRG_DT
, B._N_FRD_DCLN_COMMS_DT
, B._N_2WP_SNT_TRAN_HOLD_END_DT
, B._N_2WP_MN_FRD_RESP_BL_END_DT
, B._N_2WP_TRAN_DT_1
, B._N_MRISK_ISP_NCRG_DT
, B._N_M100_P23_MLW_DT
, B._N_D_P_C
, B._N_S_1
, B._N_S_3
, B._N_1601_DT
, B._N_A_3
, B._N_G_C
, B._N_NB_MEDIUM_PRIORITY_FIRE
, B._N_CUST_BROWSER_FIRST_DT_2
, B._N_CUST_NB_PREV_DT
, B._N_UA_DEVICE_FIRST_DT_2
, B._N_SCAMP3_MLW_DT
, B._N_ALL_LOGON_DT
, B._N_MALWARE_DT
, B._N_NB_RECIPIENT_DT_3
, B._N_CAPP_REG_DT_2
, B._N_CLIENT_IDTO_PW
, B._N_CLIENT_LOGON_CSR
, B._N_CLIENT_LOGON_FINEST
, B._N_CLIENT_LOGON_TOKEN
, B._N_CLIENT_PASSWORD_TEMP
, B._N_CLIENT_PW_FORGOT
, B._N_CLIENT_QA_CHG
, B._N_CLIENT_UNLOCK
, B._X_NPP_OUT_CNT_DATE
        FROM
            LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_TEMP_DIGI_RAS_D001_V2 AS A
            INNER JOIN (
               SELECT
                   TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
                   TTS_TRAN_DATE_ALT, 
                   TTS_TRAN_TIME_ALT,
                   TRY_CAST(TGX_TRAN_AMT AS DECIMAL(14,2)) AS TGX_TRAN_AMT,
                   	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_MAX_SE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NM_DECLINE_FLAG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00'))
            END as _A_TELSTRA_LONG_CALL
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CONFIRMED_FRAUD_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_GEO_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DEVICEANOM_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_PASSWORD_CHANGE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_ALL_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_TRF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_4_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MTH_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP10_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CSE_ADD_AUTH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SEC_INTER_SHOP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP7_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP_RULEPRIORITISED_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CURR_NB_BROWSER_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP3_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP4_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_LIMIT_INCREASE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_DECLINE_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RT_DECLINE_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RETRIEVE_STMT_DETAILS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_PAYID_TRANSFER_OUT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_OFI_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_CBA_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CIF_ESTABLISH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ECV_DOCUMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ACCT_AGG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_10
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_HRISK_BILL_PROF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_RECIP_LINK_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00'))
            END as _I_ALL_LOGONS_FDT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_LST_BC_SNOOP_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_FIRST_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CRYPTO_CON_DT_LST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_TELSTRA_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_FRD_DCLN_COMMS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_MN_FRD_RESP_BL_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_TRAN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MRISK_ISP_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_M100_P23_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_D_P_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1601_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_A_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_G_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_MEDIUM_PRIORITY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_UA_DEVICE_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_ALL_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_RECIPIENT_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_TOKEN
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PASSWORD_TEMP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_QA_CHG
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_UNLOCK
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _X_NPP_OUT_CNT_DATE
        
                   ,             try_to_number(_a_bts_bio_se, 38, 2) as _a_bts_bio_se
            ,_A_BTS_BNFT
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,try_to_number(_a_npp_inbound_sum_amt, 38, 2) as _a_npp_inbound_sum_amt
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_distance, 38, 2) as _a_geo_distance
            ,try_to_number(_a_geo_long_1, 38, 2) as _a_geo_long_1
            ,try_to_number(_a_geo_long_2, 38, 2) as _a_geo_long_2
            ,_A_P_N_H
            ,try_to_number(_a_multi_cnt, 38, 2) as _a_multi_cnt
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_cust_avg_acct_bal, 38, 2) as _a_cust_avg_acct_bal
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_t, 38, 2) as _a_t
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_capp_deregistaration_cnt_3, 38, 2) as _a_capp_deregistaration_cnt_3
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_nb_logons_cnt_2, 38, 2) as _a_nb_logons_cnt_2
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,try_to_number(_a_cust_browser_cnt_3, 38, 2) as _a_cust_browser_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,try_to_number(_a_device_sim_vendor_ratio_exc, 38, 2) as _a_device_sim_vendor_ratio_exc
            ,try_to_number(_a_device_similar_vendor_ratio, 38, 2) as _a_device_similar_vendor_ratio
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,try_to_number(_a_prev_capp_device_cnt, 38, 2) as _a_prev_capp_device_cnt
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,try_to_number(_a_cc_cash_advance_amt, 38, 2) as _a_cc_cash_advance_amt
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_all_bpay_acct_sum_3, 38, 2) as _a_all_bpay_acct_sum_3
            ,try_to_number(_a_nb_bpay_acct_sum_1, 38, 2) as _a_nb_bpay_acct_sum_1
            ,try_to_number(_a_nb_bpay_acct_sum_3, 38, 2) as _a_nb_bpay_acct_sum_3
            ,try_to_number(_a_npp_ftp_sum, 38, 2) as _a_npp_ftp_sum
            ,try_to_number(_a_cust_npp_out_sum_aaa_1, 38, 2) as _a_cust_npp_out_sum_aaa_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_4, 38, 2) as _a_cust_sum_aaa_4
            ,try_to_number(_a_cust_sum_aaa_7, 38, 2) as _a_cust_sum_aaa_7
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_short, 38, 2) as _a_cust_sum_aaa_short
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_client_postcode_ftp_sum_3, 38, 2) as _a_client_postcode_ftp_sum_3
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,try_to_number(_a_client_city_cnt_1, 38, 2) as _a_client_city_cnt_1
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_a_client_country_cnt_7, 38, 2) as _a_client_country_cnt_7
            ,try_to_number(_b_safe_recip_frd_excluded_ind, 38, 2) as _b_safe_recip_frd_excluded_ind
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_bvt_numeric_1, 38, 2) as _b_bvt_numeric_1
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_cust_tran_sum_3, 38, 2) as _i_cust_tran_sum_3
            ,try_to_number(_i_all_logons_cnt_1, 38, 2) as _i_all_logons_cnt_1
            ,try_to_number(_i_all_logons_perc_1, 38, 2) as _i_all_logons_perc_1
            ,try_to_number(_i_all_logons_perc_3m, 38, 2) as _i_all_logons_perc_3m
            ,try_to_number(_i_capp_logons_cnt_1, 38, 2) as _i_capp_logons_cnt_1
            ,try_to_number(_i_capp_logons_cnt_3m, 38, 2) as _i_capp_logons_cnt_3m
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,try_to_number(_i_netbank_logons_cnt_1, 38, 2) as _i_netbank_logons_cnt_1
            ,try_to_number(_i_cust_net_l_cnt_1, 38, 2) as _i_cust_net_l_cnt_1
            ,try_to_number(_i_cust_net_cnt_1, 38, 2) as _i_cust_net_cnt_1
            ,try_to_number(_i_cust_net_cnt_short, 38, 2) as _i_cust_net_cnt_short
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,_L_SDID_1
            ,try_to_number(_l_sdid_cnt_1, 38, 2) as _l_sdid_cnt_1
            ,try_to_number(_l_sdid_cnt_3, 38, 2) as _l_sdid_cnt_3
            ,_L_NC_ACCT_NUM
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,_L_BRANCH_ID
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_datetime_fp_2, 38, 2) as _l_datetime_fp_2
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_score_5, 38, 2) as _l_score_5
            ,try_to_number(_l_m_l_4, 38, 2) as _l_m_l_4
            ,try_to_number(_l_m_l_c, 38, 2) as _l_m_l_c
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_acc_amt_7d, 38, 2) as _l_acc_amt_7d
            ,try_to_number(_l_adv_key_combo, 38, 2) as _l_adv_key_combo
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_days_lst_dev_js, 38, 2) as _l_days_lst_dev_js
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_ft_rat_app_inst, 38, 2) as _l_ft_rat_app_inst
            ,try_to_number(_l_hi_dead_time, 38, 2) as _l_hi_dead_time
            ,try_to_number(_l_is_active_call, 38, 2) as _l_is_active_call
            ,try_to_number(_l_is_long_sess, 38, 2) as _l_is_long_sess
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_lgn_import_anomaly, 38, 2) as _l_lgn_import_anomaly
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_mins_lst_lgn_capped, 38, 2) as _l_mins_lst_lgn_capped
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,_L_POLICY_NM
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_mob_sdk, 38, 2) as _l_sess_cnt_mob_sdk
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_n_crypto_con_n_cnt, 38, 2) as _n_crypto_con_n_cnt
            ,try_to_number(_n_crypto_pot_n_sum, 38, 2) as _n_crypto_pot_n_sum
            ,try_to_number(_n_mps_mndt_cnt_24h_1, 38, 2) as _n_mps_mndt_cnt_24h_1
            ,try_to_number(_n_mob_oth_tran_sum_1, 38, 2) as _n_mob_oth_tran_sum_1
            ,try_to_number(_n_ca_device_profile_1, 38, 2) as _n_ca_device_profile_1
            ,try_to_number(_n_ca_lgn_cnt_24h_1, 38, 2) as _n_ca_lgn_cnt_24h_1
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_id_1, 38, 2) as _n_2wp_tran_id_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,try_to_number(_n_nb_sum_tpt_4, 38, 2) as _n_nb_sum_tpt_4
            ,_N_D_D_3
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,try_to_number(_n_capp_logon_cnt_2, 38, 2) as _n_capp_logon_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_t_2, 38, 2) as _x_t_2
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_npp_out_sum_3, 38, 2) as _x_npp_out_sum_3
                FROM
                   LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
                WHERE
                    TTS_TRAN_DATE_ALT BETWEEN 20241113 AND 20250620
            ) AS B
        ON
            A.CMX_TRAN_ID = B.CMX_TRAN_ID
            AND A.TTS_TRAN_DATE_ALT = B.TTS_TRAN_DATE_ALT
    )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1391137,1391.137000,23.185617,0.386427,2X-LARGE,32,12.365664
01bef764-3204-c939-0000-c71d2d52feda,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PKE2E_ENGINEER_TEST_1_20250910_222800(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1386278,1386.278000,23.104633,0.385077,2X-LARGE,32,12.322464
01bdca7b-3204-a617-0000-c71d245bd3ee,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DIGI_RAS_D001_V4(""DETECTION"" STRING(16777216), ""CASE_DETECTION"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TGX_TRAN_AMT"" NUMBER(14, 2), ""HOUR"" BIGINT, ""CMX_TRAN_ID"" STRING(134217728), ""SSX_CUST_NUM"" STRING(16777216), ""CATEGORY"" STRING(134217728), ""LABEL"" BIGINT, ""DTL_EX_0_20S_001"" STRING(16777216), ""FRAUDTYPE"" STRING(16777216), ""RUA_20BYTE_STRING_001"" STRING(16777216), ""_A_BTS_BIO_SE"" NUMBER(38, 2), ""_A_BTS_BNFT"" STRING(16777216), ""_A_NPP_INB_PMT_VAL"" NUMBER(38, 2), ""_A_PROF_RISK_IND"" STRING(16777216), ""_A_CUST_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_1"" NUMBER(38, 2), ""_A_DTL_ACTIONCODE_2"" NUMBER(38, 2), ""_A_NPP_INBOUND_SUM_AMT"" NUMBER(38, 2), ""_A_TELSTRA_ACTIVE_CALL"" STRING(16777216), ""_A_TELSTRA_API_EVENT_ID"" STRING(16777216), ""_A_TELSTRA_EXISTING_RELATION"" NUMBER(38, 2), ""_A_LATEST_NCRG_ISP"" STRING(16777216), ""_A_GEO_DISTANCE"" NUMBER(38, 2), ""_A_GEO_LONG_1"" NUMBER(38, 2), ""_A_GEO_LONG_2"" NUMBER(38, 2), ""_A_P_N_H"" STRING(16777216), ""_A_MULTI_CNT"" NUMBER(38, 2), ""_A_CRD_SCAM_SUPP_7D_SUM_1"" NUMBER(38, 2), ""_A_BTS_CUST_AGE"" NUMBER(38, 2), ""_A_P_L_1"" NUMBER(38, 2), ""_A_P_L_C"" NUMBER(38, 2), ""_A_CRD_NPP_PAYMENT_AMOUNT"" NUMBER(38, 2), ""_A_CURR_CAPP_DEVICE_NFTP_CNT"" NUMBER(38, 2), ""_A_2WAY_TYPE"" STRING(16777216), ""_A_CUST_ACCT_BAL"" NUMBER(38, 2), ""_A_CUST_AVG_ACCT_BAL"" NUMBER(38, 2), ""_A_R"" NUMBER(38, 2), ""_A_T"" NUMBER(38, 2), ""_A_U"" NUMBER(38, 2), ""_A_CAPP_DEREGISTARATION_CNT_3"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_A_CAPP_LOGON_CNT_3"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_2"" NUMBER(38, 2), ""_A_NB_LOGONS_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_CNT_3"" NUMBER(38, 2), ""_A_CUST_BROWSER_VER"" STRING(16777216), ""_A_CUST_OS_NAME"" STRING(16777216), ""_A_CUST_OS_VER"" STRING(16777216), ""_A_CURR_NB_BROWSER_CNT"" NUMBER(38, 2), ""_A_DEVICE_SIM_VENDOR_RATIO_EXC"" NUMBER(38, 2), ""_A_DEVICE_SIMILAR_VENDOR_RATIO"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CUST_PCODE"" STRING(16777216), ""_A_LIST_RL1_SCAM_CUST_CIF"" NUMBER(38, 2), ""_A_PREV_CAPP_DEVICE_CNT"" NUMBER(38, 2), ""_A_PROF_CAPP_DEVICE_CNT_1"" NUMBER(38, 2), ""_A_CC_CASH_ADVANCE_AMT"" NUMBER(38, 2), ""_A_MRISK_FOREIGN_IP_CNTRY_CODE"" STRING(16777216), ""_A_ALL_BPAY_ACCT_2"" STRING(16777216), ""_A_ALL_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_ALL_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_1"" NUMBER(38, 2), ""_A_NB_BPAY_ACCT_SUM_3"" NUMBER(38, 2), ""_A_NPP_FTP_SUM"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_1"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_2"" NUMBER(38, 2), ""_A_CUST_NPP_OUT_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_4"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_7"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_LONG"" NUMBER(38, 2), ""_A_CUST_SUM_AAA_SHORT"" NUMBER(38, 2), ""_A_CIF_ESTABLISH_CHANNEL"" STRING(16777216), ""_A_ECV_DOCUMENT_IP"" STRING(16777216), ""_A_CLIENT_POSTCODE_FTP_SUM_3"" NUMBER(38, 2), ""_A_BTS_BCH_SUM"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_2"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_3"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_COUNT_4"" NUMBER(38, 2), ""_A_MONTHLY_TRANSFER_SUM_4"" NUMBER(38, 2), ""_A_CLIENT_CITY_10"" STRING(16777216), ""_A_CLIENT_CITY_6"" STRING(16777216), ""_A_CLIENT_CITY_CNT_1"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_1"" STRING(16777216), ""_A_CLIENT_COUNTRY_8"" STRING(16777216), ""_A_CLIENT_COUNTRY_CNT_3"" NUMBER(38, 2), ""_A_CLIENT_COUNTRY_CNT_7"" NUMBER(38, 2), ""_B_SAFE_RECIP_FRD_EXCLUDED_IND"" NUMBER(38, 2), ""_B_RECIP_PROFILE_GLOB_ERROR"" STRING(16777216), ""_B_BVT_NUMERIC_1"" NUMBER(38, 2), ""_B_RECIP_SUM_TODAY"" NUMBER(38, 2), ""_B_CRYPTO_RISK"" STRING(16777216), ""_B_OPEN_LAST_PAYER_CIF_10"" STRING(16777216), ""_B_RECIP_SUM_AAA_1"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_2"" NUMBER(38, 2), ""_B_RECIP_SUM_AAA_LONG"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_1"" STRING(16777216), ""_B_CLIENT_POSTCODE_2"" STRING(16777216), ""_B_CLIENT_POSTCODE_3"" STRING(16777216), ""_B_CLIENT_POSTCODE_CNT_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_CNT_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_1"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_2"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_3"" NUMBER(38, 2), ""_B_CLIENT_POSTCODE_SUM_5"" NUMBER(38, 2), ""_B_RECIP_SUM_1"" NUMBER(38, 2), ""_I_CUST_TRAN_SUM_3"" NUMBER(38, 2), ""_I_ALL_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_ALL_LOGONS_PERC_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CAPP_LOGONS_CNT_3M"" NUMBER(38, 2), ""_I_CAPP_LOGONS_PERC_1"" NUMBER(38, 2), ""_I_NETBANK_LOGONS_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_L_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_1"" NUMBER(38, 2), ""_I_CUST_NET_CNT_SHORT"" NUMBER(38, 2), ""_L_PAYTO_MANDATE_ID"" STRING(16777216), ""_L_PUSH_API_1"" STRING(16777216), ""_L_PUSH_API_2"" STRING(16777216), ""_L_PUSH_API_3"" STRING(16777216), ""_L_PUSH_API_4"" STRING(16777216), ""_L_BC_CONTEXT"" STRING(16777216), ""_L_MUID_AGE_PER_USER"" NUMBER(38, 2), ""_L_SDID_1"" STRING(16777216), ""_L_SDID_CNT_1"" NUMBER(38, 2), ""_L_SDID_CNT_3"" NUMBER(38, 2), ""_L_NC_ACCT_NUM"" STRING(16777216), ""_L_NC_RESPONSE_CODE"" STRING(16777216), ""_L_NC_WINNING_ALG"" STRING(16777216), ""_L_BRANCH_ID"" STRING(16777216), ""_L_PMT_AMT"" NUMBER(38, 2), ""_L_PMT_DESCR"" STRING(16777216), ""_L_SE_SCORE"" NUMBER(38, 2), ""_L_SE_SESS_CNT"" NUMBER(38, 2), ""_L_DATETIME_FP_2"" NUMBER(38, 2), ""_L_FINGERPRINT_1"" STRING(16777216), ""_L_FINGERPRINT_2"" STRING(16777216), ""_L_FINGERPRINT_3"" STRING(16777216), ""_L_FINGERPRINT_4"" STRING(16777216), ""_L_FINGERPRINT_5"" STRING(16777216), ""_L_SCORE_1"" NUMBER(38, 2), ""_L_SCORE_2"" NUMBER(38, 2), ""_L_SCORE_3"" NUMBER(38, 2), ""_L_SCORE_5"" NUMBER(38, 2), ""_L_M_L_4"" NUMBER(38, 2), ""_L_M_L_C"" NUMBER(38, 2), ""_L_BC_SESS_CNT"" NUMBER(38, 2), ""_L_ACC_AMT_1D"" NUMBER(38, 2), ""_L_ACC_AMT_1H"" NUMBER(38, 2), ""_L_ACC_AMT_7D"" NUMBER(38, 2), ""_L_ADV_KEY_COMBO"" NUMBER(38, 2), ""_L_AND_ID_AGE"" NUMBER(38, 2), ""_L_DAYS_LST_DEV_JS"" NUMBER(38, 2), ""_L_DEV_FAM"" STRING(16777216), ""_L_DEV_FAM_AGE"" NUMBER(38, 2), ""_L_FT_RAT_APP_INST"" NUMBER(38, 2), ""_L_HI_DEAD_TIME"" NUMBER(38, 2), ""_L_IS_ACTIVE_CALL"" NUMBER(38, 2), ""_L_IS_LONG_SESS"" NUMBER(38, 2), ""_L_LANG_1"" STRING(16777216), ""_L_LANG_2"" STRING(16777216), ""_L_LANG_3"" STRING(16777216), ""_L_LGN_IMPORT_ANOMALY"" NUMBER(38, 2), ""_L_MAX_30D_SCORE"" NUMBER(38, 2), ""_L_MINS_LST_LGN_CAPPED"" NUMBER(38, 2), ""_L_NUM_SESS_2H"" NUMBER(38, 2), ""_L_NUM_SESS_4H"" NUMBER(38, 2), ""_L_POLICY_NM"" STRING(16777216), ""_L_PROXY_TYPE"" STRING(16777216), ""_L_SCRN_H"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_BROWSER"" NUMBER(38, 2), ""_L_SESS_CNT_MOB_SDK"" NUMBER(38, 2), ""_L_SESS_CNT_WEB"" NUMBER(38, 2), ""_L_TAP_CNT"" NUMBER(38, 2), ""_L_TOUCH_CNT"" NUMBER(38, 2), ""_N_CRYPTO_CON_N_CNT"" NUMBER(38, 2), ""_N_CRYPTO_POT_N_SUM"" NUMBER(38, 2), ""_N_MPS_MNDT_CNT_24H_1"" NUMBER(38, 2), ""_N_MOB_OTH_TRAN_SUM_1"" NUMBER(38, 2), ""_N_CA_DEVICE_PROFILE_1"" NUMBER(38, 2), ""_N_CA_LGN_CNT_24H_1"" NUMBER(38, 2), ""_N_NMCHK_RECIP_CNT_1"" STRING(16777216), ""_N_2WP_TRAN_ID_1"" NUMBER(38, 2), ""_N_CA_DEV_BL_FLAG_2"" NUMBER(38, 2), ""_N_CUST_TXN_COUNT"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_1"" NUMBER(38, 2), ""_N_NB_RECIPIENT_AMT_3"" NUMBER(38, 2), ""_N_NB_SUM_TPT_4"" NUMBER(38, 2), ""_N_D_D_3"" STRING(16777216), ""_N_CUST_NB_DEVICE_CNT"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_1"" NUMBER(38, 2), ""_N_CAPP_LINKED_CNT_2"" NUMBER(38, 2), ""_N_CAPP_LOGON_CNT_2"" NUMBER(38, 2), ""_N_ESTAB_SCHEDULE_2"" STRING(16777216), ""_N_LOG_SCR_CONS_2"" NUMBER(38, 2), ""_N_LINKED_RECIP"" STRING(16777216), ""_N_CLIENT_IDCHNG_NB"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_1"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_2"" STRING(16777216), ""_N_CLIENT_NEW_PAYEE_3"" STRING(16777216), ""_X_CIF_SENDER_CNT"" NUMBER(38, 2), ""_X_NAME_MATCH_CNT"" NUMBER(38, 2), ""_X_LAST_N_TXN_COUNT"" NUMBER(38, 2), ""_X_T_2"" NUMBER(38, 2), ""_X_T_5"" NUMBER(38, 2), ""_X_NPP_OUT_SUM_3"" NUMBER(38, 2), ""_A_BTS_MAX_SE_DT"" BIGINT, ""_A_NM_DECLINE_FLAG_DT"" BIGINT, ""_A_TELSTRA_LONG_CALL"" BIGINT, ""_A_CONFIRMED_FRAUD_DT"" BIGINT, ""_A_DTL_ACTIONCODE_DT_1"" BIGINT, ""_A_DTL_ACTIONCODE_DT_2"" BIGINT, ""_A_CRD_ACTIONCODE_DT_1"" BIGINT, ""_A_NPP_INBOUND_DATETIME"" BIGINT, ""_A_GEO_DT_2"" BIGINT, ""_A_DEVICEANOM_MLW_DT"" BIGINT, ""_A_CAPP_PASSWORD_CHANGE_DT"" BIGINT, ""_A_CD_RTR_DT_1"" BIGINT, ""_A_CD_RTR_DT_2"" BIGINT, ""_A_IVR_LOGON_DT"" BIGINT, ""_A_SCH_DT"" BIGINT, ""_A_NPP_OUT_ALL_FTP_DT"" BIGINT, ""_A_BTS_TRF_CNT_DT"" BIGINT, ""_A_CAPP_DEV_RETR_DT"" BIGINT, ""_A_4_1"" BIGINT, ""_A_5_2"" BIGINT, ""_A_MTH_BTS_WDL_CNT_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP10_DT"" BIGINT, ""_A_CSE_ADD_AUTH_DT"" BIGINT, ""_A_SEC_INTER_SHOP_DT"" BIGINT, ""_A_CLIENT_LOGON_CSR"" BIGINT, ""_A_DTL_CAPP_NBANK_SSO_DT"" BIGINT, ""_A_CLIENT_DETAILS_VIEW"" BIGINT, ""_A_MANUAL_NB_LOCK_DT"" BIGINT, ""_A_CUST_BROWSER_PREV_DT_2"" BIGINT, ""_A_UA_DEVICE_DT_2"" BIGINT, ""_A_SCAMP3_MLW_DT"" BIGINT, ""_A_SCAMP7_MLW_DT"" BIGINT, ""_A_SCAMP_RULEPRIORITISED_DT"" BIGINT, ""_A_CURR_NB_BROWSER_PREV_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP3_DT"" BIGINT, ""_A_REVERSE_IND_SCAMP4_DT"" BIGINT, ""_A_NB_BPAY_LIMIT_INCREASE_DT"" BIGINT, ""_A_NPP_OUT_PAYID_DT"" BIGINT, ""_A_NPP_INB_ALL_DT"" BIGINT, ""_A_NPP_OUT_DECLINE_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_COMMSEE_DT"" BIGINT, ""_A_NPP_OUT_HOLD_INITIAL_DT"" BIGINT, ""_A_RT_DECLINE_INITIAL_DT"" BIGINT, ""_A_PROF_CAPP_DEVICE_DT_2"" BIGINT, ""_A_RETRIEVE_STMT_DETAILS_DT"" BIGINT, ""_A_CAPP_REGO_DT"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_2"" BIGINT, ""_A_ALL_BPAY_ACCT_DT_5"" BIGINT, ""_A_NB_BPAY_ACCT_DT_4"" BIGINT, ""_A_NB_BPAY_ACCT_FTP_DT_1"" BIGINT, ""_A_NPP_PAYID_TRANSFER_OUT"" BIGINT, ""_A_NPP_INB_OFI_PAYID_DT"" BIGINT, ""_A_NPP_OUT_CBA_PAYID_DT"" BIGINT, ""_A_CIF_ESTABLISH_DT"" BIGINT, ""_A_ECV_DOCUMENT_DT"" BIGINT, ""_A_CLIENT_PW_FORGOT"" BIGINT, ""_A_BTS_WDL_CNT_DT"" BIGINT, ""_A_NB_GROUP_DT_2"" BIGINT, ""_A_NB_GROUP_DT_3"" BIGINT, ""_A_CLIENT_POSTCODE_DT_5"" BIGINT, ""_A_ACCT_AGG_DT"" BIGINT, ""_A_CLIENT_CITY_DATE_10"" BIGINT, ""_A_CLIENT_CITY_DATE_3"" BIGINT, ""_A_CLIENT_CITY_DATE_5"" BIGINT, ""_A_CLIENT_COUNTRY_DATE_1"" BIGINT, ""_B_NPP_WHITELIST_PAYID_DT"" BIGINT, ""_B_NPP_WHITELIST_SENDER_DT"" BIGINT, ""_B_ANY_CUST_FTP_DT"" BIGINT, ""_B_NPP_OUT_CNT_DATE"" BIGINT, ""_B_BOND_CNT_DATE"" BIGINT, ""_B_BOND_SUM_DATE"" BIGINT, ""_B_HRISK_BILL_PROF_CNT_DT"" BIGINT, ""_B_RECIP_LINK_SUM_DATE"" BIGINT, ""_I_ALL_LOGONS_FDT"" BIGINT, ""_L_LST_BC_SNOOP_LOGON_DT"" BIGINT, ""_L_PUSH_API_DT_1"" BIGINT, ""_L_PUSH_API_DT_2"" BIGINT, ""_L_FIRST_RAT_DT"" BIGINT, ""_L_M_F_2"" BIGINT, ""_L_M_F_C"" BIGINT, ""_L_IS_RAT_DT"" BIGINT, ""_N_CRYPTO_CON_DT_LST"" BIGINT, ""_N_TELSTRA_NCRG_DT"" BIGINT, ""_N_FRD_DCLN_COMMS_DT"" BIGINT, ""_N_2WP_SNT_TRAN_HOLD_END_DT"" BIGINT, ""_N_2WP_MN_FRD_RESP_BL_END_DT"" BIGINT, ""_N_2WP_TRAN_DT_1"" BIGINT, ""_N_MRISK_ISP_NCRG_DT"" BIGINT, ""_N_M100_P23_MLW_DT"" BIGINT, ""_N_D_P_C"" BIGINT, ""_N_S_1"" BIGINT, ""_N_S_3"" BIGINT, ""_N_1601_DT"" BIGINT, ""_N_A_3"" BIGINT, ""_N_G_C"" BIGINT, ""_N_NB_MEDIUM_PRIORITY_FIRE"" BIGINT, ""_N_CUST_BROWSER_FIRST_DT_2"" BIGINT, ""_N_CUST_NB_PREV_DT"" BIGINT, ""_N_UA_DEVICE_FIRST_DT_2"" BIGINT, ""_N_SCAMP3_MLW_DT"" BIGINT, ""_N_ALL_LOGON_DT"" BIGINT, ""_N_MALWARE_DT"" BIGINT, ""_N_NB_RECIPIENT_DT_3"" BIGINT, ""_N_CAPP_REG_DT_2"" BIGINT, ""_N_CLIENT_IDTO_PW"" BIGINT, ""_N_CLIENT_LOGON_CSR"" BIGINT, ""_N_CLIENT_LOGON_FINEST"" BIGINT, ""_N_CLIENT_LOGON_TOKEN"" BIGINT, ""_N_CLIENT_PASSWORD_TEMP"" BIGINT, ""_N_CLIENT_PW_FORGOT"" BIGINT, ""_N_CLIENT_QA_CHG"" BIGINT, ""_N_CLIENT_UNLOCK"" BIGINT, ""_X_NPP_OUT_CNT_DATE"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            A.DETECTION,
            A.CASE_DETECTION,
            B.TTS_TRAN_DATE_ALT,
            B.TGX_TRAN_AMT,
            TRY_CAST(SUBSTR(B.TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            A.CMX_TRAN_ID
, A.SSX_CUST_NUM
, A.CATEGORY
, A.LABEL
, A.DTL_EX_0_20S_001
, A.FRAUDTYPE
, A.RUA_20BYTE_STRING_001,
            B._A_BTS_BIO_SE
, B._A_BTS_BNFT
, B._A_NPP_INB_PMT_VAL
, B._A_PROF_RISK_IND
, B._A_CUST_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_1
, B._A_DTL_ACTIONCODE_2
, B._A_NPP_INBOUND_SUM_AMT
, B._A_TELSTRA_ACTIVE_CALL
, B._A_TELSTRA_API_EVENT_ID
, B._A_TELSTRA_EXISTING_RELATION
, B._A_LATEST_NCRG_ISP
, B._A_GEO_DISTANCE
, B._A_GEO_LONG_1
, B._A_GEO_LONG_2
, B._A_P_N_H
, B._A_MULTI_CNT
, B._A_CRD_SCAM_SUPP_7D_SUM_1
, B._A_BTS_CUST_AGE
, B._A_P_L_1
, B._A_P_L_C
, B._A_CRD_NPP_PAYMENT_AMOUNT
, B._A_CURR_CAPP_DEVICE_NFTP_CNT
, B._A_2WAY_TYPE
, B._A_CUST_ACCT_BAL
, B._A_CUST_AVG_ACCT_BAL
, B._A_R
, B._A_T
, B._A_U
, B._A_CAPP_DEREGISTARATION_CNT_3
, B._A_CAPP_LOGON_CNT_2
, B._A_CAPP_LOGON_CNT_3
, B._A_NB_LOGONS_CNT_2
, B._A_NB_LOGONS_CNT_3
, B._A_CUST_BROWSER_CNT_3
, B._A_CUST_BROWSER_VER
, B._A_CUST_OS_NAME
, B._A_CUST_OS_VER
, B._A_CURR_NB_BROWSER_CNT
, B._A_DEVICE_SIM_VENDOR_RATIO_EXC
, B._A_DEVICE_SIMILAR_VENDOR_RATIO
, B._A_CIF_ESTABLISH_CUST_PCODE
, B._A_LIST_RL1_SCAM_CUST_CIF
, B._A_PREV_CAPP_DEVICE_CNT
, B._A_PROF_CAPP_DEVICE_CNT_1
, B._A_CC_CASH_ADVANCE_AMT
, B._A_MRISK_FOREIGN_IP_CNTRY_CODE
, B._A_ALL_BPAY_ACCT_2
, B._A_ALL_BPAY_ACCT_SUM_1
, B._A_ALL_BPAY_ACCT_SUM_3
, B._A_NB_BPAY_ACCT_SUM_1
, B._A_NB_BPAY_ACCT_SUM_3
, B._A_NPP_FTP_SUM
, B._A_CUST_NPP_OUT_SUM_AAA_1
, B._A_CUST_NPP_OUT_SUM_AAA_2
, B._A_CUST_NPP_OUT_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_4
, B._A_CUST_SUM_AAA_7
, B._A_CUST_SUM_AAA_LONG
, B._A_CUST_SUM_AAA_SHORT
, B._A_CIF_ESTABLISH_CHANNEL
, B._A_ECV_DOCUMENT_IP
, B._A_CLIENT_POSTCODE_FTP_SUM_3
, B._A_BTS_BCH_SUM
, B._A_MONTHLY_TRANSFER_COUNT_2
, B._A_MONTHLY_TRANSFER_COUNT_3
, B._A_MONTHLY_TRANSFER_COUNT_4
, B._A_MONTHLY_TRANSFER_SUM_4
, B._A_CLIENT_CITY_10
, B._A_CLIENT_CITY_6
, B._A_CLIENT_CITY_CNT_1
, B._A_CLIENT_COUNTRY_1
, B._A_CLIENT_COUNTRY_8
, B._A_CLIENT_COUNTRY_CNT_3
, B._A_CLIENT_COUNTRY_CNT_7
, B._B_SAFE_RECIP_FRD_EXCLUDED_IND
, B._B_RECIP_PROFILE_GLOB_ERROR
, B._B_BVT_NUMERIC_1
, B._B_RECIP_SUM_TODAY
, B._B_CRYPTO_RISK
, B._B_OPEN_LAST_PAYER_CIF_10
, B._B_RECIP_SUM_AAA_1
, B._B_RECIP_SUM_AAA_2
, B._B_RECIP_SUM_AAA_LONG
, B._B_CLIENT_POSTCODE_1
, B._B_CLIENT_POSTCODE_2
, B._B_CLIENT_POSTCODE_3
, B._B_CLIENT_POSTCODE_CNT_1
, B._B_CLIENT_POSTCODE_CNT_2
, B._B_CLIENT_POSTCODE_SUM_1
, B._B_CLIENT_POSTCODE_SUM_2
, B._B_CLIENT_POSTCODE_SUM_3
, B._B_CLIENT_POSTCODE_SUM_5
, B._B_RECIP_SUM_1
, B._I_CUST_TRAN_SUM_3
, B._I_ALL_LOGONS_CNT_1
, B._I_ALL_LOGONS_PERC_1
, B._I_ALL_LOGONS_PERC_3M
, B._I_CAPP_LOGONS_CNT_1
, B._I_CAPP_LOGONS_CNT_3M
, B._I_CAPP_LOGONS_PERC_1
, B._I_NETBANK_LOGONS_CNT_1
, B._I_CUST_NET_L_CNT_1
, B._I_CUST_NET_CNT_1
, B._I_CUST_NET_CNT_SHORT
, B._L_PAYTO_MANDATE_ID
, B._L_PUSH_API_1
, B._L_PUSH_API_2
, B._L_PUSH_API_3
, B._L_PUSH_API_4
, B._L_BC_CONTEXT
, B._L_MUID_AGE_PER_USER
, B._L_SDID_1
, B._L_SDID_CNT_1
, B._L_SDID_CNT_3
, B._L_NC_ACCT_NUM
, B._L_NC_RESPONSE_CODE
, B._L_NC_WINNING_ALG
, B._L_BRANCH_ID
, B._L_PMT_AMT
, B._L_PMT_DESCR
, B._L_SE_SCORE
, B._L_SE_SESS_CNT
, B._L_DATETIME_FP_2
, B._L_FINGERPRINT_1
, B._L_FINGERPRINT_2
, B._L_FINGERPRINT_3
, B._L_FINGERPRINT_4
, B._L_FINGERPRINT_5
, B._L_SCORE_1
, B._L_SCORE_2
, B._L_SCORE_3
, B._L_SCORE_5
, B._L_M_L_4
, B._L_M_L_C
, B._L_BC_SESS_CNT
, B._L_ACC_AMT_1D
, B._L_ACC_AMT_1H
, B._L_ACC_AMT_7D
, B._L_ADV_KEY_COMBO
, B._L_AND_ID_AGE
, B._L_DAYS_LST_DEV_JS
, B._L_DEV_FAM
, B._L_DEV_FAM_AGE
, B._L_FT_RAT_APP_INST
, B._L_HI_DEAD_TIME
, B._L_IS_ACTIVE_CALL
, B._L_IS_LONG_SESS
, B._L_LANG_1
, B._L_LANG_2
, B._L_LANG_3
, B._L_LGN_IMPORT_ANOMALY
, B._L_MAX_30D_SCORE
, B._L_MINS_LST_LGN_CAPPED
, B._L_NUM_SESS_2H
, B._L_NUM_SESS_4H
, B._L_POLICY_NM
, B._L_PROXY_TYPE
, B._L_SCRN_H
, B._L_SESS_CNT_MOB_BROWSER
, B._L_SESS_CNT_MOB_SDK
, B._L_SESS_CNT_WEB
, B._L_TAP_CNT
, B._L_TOUCH_CNT
, B._N_CRYPTO_CON_N_CNT
, B._N_CRYPTO_POT_N_SUM
, B._N_MPS_MNDT_CNT_24H_1
, B._N_MOB_OTH_TRAN_SUM_1
, B._N_CA_DEVICE_PROFILE_1
, B._N_CA_LGN_CNT_24H_1
, B._N_NMCHK_RECIP_CNT_1
, B._N_2WP_TRAN_ID_1
, B._N_CA_DEV_BL_FLAG_2
, B._N_CUST_TXN_COUNT
, B._N_NB_RECIPIENT_AMT_1
, B._N_NB_RECIPIENT_AMT_3
, B._N_NB_SUM_TPT_4
, B._N_D_D_3
, B._N_CUST_NB_DEVICE_CNT
, B._N_CAPP_LINKED_CNT_1
, B._N_CAPP_LINKED_CNT_2
, B._N_CAPP_LOGON_CNT_2
, B._N_ESTAB_SCHEDULE_2
, B._N_LOG_SCR_CONS_2
, B._N_LINKED_RECIP
, B._N_CLIENT_IDCHNG_NB
, B._N_CLIENT_NEW_PAYEE_1
, B._N_CLIENT_NEW_PAYEE_2
, B._N_CLIENT_NEW_PAYEE_3
, B._X_CIF_SENDER_CNT
, B._X_NAME_MATCH_CNT
, B._X_LAST_N_TXN_COUNT
, B._X_T_2
, B._X_T_5
, B._X_NPP_OUT_SUM_3,
            B._A_BTS_MAX_SE_DT
, B._A_NM_DECLINE_FLAG_DT
, B._A_TELSTRA_LONG_CALL
, B._A_CONFIRMED_FRAUD_DT
, B._A_DTL_ACTIONCODE_DT_1
, B._A_DTL_ACTIONCODE_DT_2
, B._A_CRD_ACTIONCODE_DT_1
, B._A_NPP_INBOUND_DATETIME
, B._A_GEO_DT_2
, B._A_DEVICEANOM_MLW_DT
, B._A_CAPP_PASSWORD_CHANGE_DT
, B._A_CD_RTR_DT_1
, B._A_CD_RTR_DT_2
, B._A_IVR_LOGON_DT
, B._A_SCH_DT
, B._A_NPP_OUT_ALL_FTP_DT
, B._A_BTS_TRF_CNT_DT
, B._A_CAPP_DEV_RETR_DT
, B._A_4_1
, B._A_5_2
, B._A_MTH_BTS_WDL_CNT_DT
, B._A_REVERSE_IND_SCAMP10_DT
, B._A_CSE_ADD_AUTH_DT
, B._A_SEC_INTER_SHOP_DT
, B._A_CLIENT_LOGON_CSR
, B._A_DTL_CAPP_NBANK_SSO_DT
, B._A_CLIENT_DETAILS_VIEW
, B._A_MANUAL_NB_LOCK_DT
, B._A_CUST_BROWSER_PREV_DT_2
, B._A_UA_DEVICE_DT_2
, B._A_SCAMP3_MLW_DT
, B._A_SCAMP7_MLW_DT
, B._A_SCAMP_RULEPRIORITISED_DT
, B._A_CURR_NB_BROWSER_PREV_DT
, B._A_REVERSE_IND_SCAMP3_DT
, B._A_REVERSE_IND_SCAMP4_DT
, B._A_NB_BPAY_LIMIT_INCREASE_DT
, B._A_NPP_OUT_PAYID_DT
, B._A_NPP_INB_ALL_DT
, B._A_NPP_OUT_DECLINE_COMMSEE_DT
, B._A_NPP_OUT_HOLD_COMMSEE_DT
, B._A_NPP_OUT_HOLD_INITIAL_DT
, B._A_RT_DECLINE_INITIAL_DT
, B._A_PROF_CAPP_DEVICE_DT_2
, B._A_RETRIEVE_STMT_DETAILS_DT
, B._A_CAPP_REGO_DT
, B._A_ALL_BPAY_ACCT_DT_2
, B._A_ALL_BPAY_ACCT_DT_5
, B._A_NB_BPAY_ACCT_DT_4
, B._A_NB_BPAY_ACCT_FTP_DT_1
, B._A_NPP_PAYID_TRANSFER_OUT
, B._A_NPP_INB_OFI_PAYID_DT
, B._A_NPP_OUT_CBA_PAYID_DT
, B._A_CIF_ESTABLISH_DT
, B._A_ECV_DOCUMENT_DT
, B._A_CLIENT_PW_FORGOT
, B._A_BTS_WDL_CNT_DT
, B._A_NB_GROUP_DT_2
, B._A_NB_GROUP_DT_3
, B._A_CLIENT_POSTCODE_DT_5
, B._A_ACCT_AGG_DT
, B._A_CLIENT_CITY_DATE_10
, B._A_CLIENT_CITY_DATE_3
, B._A_CLIENT_CITY_DATE_5
, B._A_CLIENT_COUNTRY_DATE_1
, B._B_NPP_WHITELIST_PAYID_DT
, B._B_NPP_WHITELIST_SENDER_DT
, B._B_ANY_CUST_FTP_DT
, B._B_NPP_OUT_CNT_DATE
, B._B_BOND_CNT_DATE
, B._B_BOND_SUM_DATE
, B._B_HRISK_BILL_PROF_CNT_DT
, B._B_RECIP_LINK_SUM_DATE
, B._I_ALL_LOGONS_FDT
, B._L_LST_BC_SNOOP_LOGON_DT
, B._L_PUSH_API_DT_1
, B._L_PUSH_API_DT_2
, B._L_FIRST_RAT_DT
, B._L_M_F_2
, B._L_M_F_C
, B._L_IS_RAT_DT
, B._N_CRYPTO_CON_DT_LST
, B._N_TELSTRA_NCRG_DT
, B._N_FRD_DCLN_COMMS_DT
, B._N_2WP_SNT_TRAN_HOLD_END_DT
, B._N_2WP_MN_FRD_RESP_BL_END_DT
, B._N_2WP_TRAN_DT_1
, B._N_MRISK_ISP_NCRG_DT
, B._N_M100_P23_MLW_DT
, B._N_D_P_C
, B._N_S_1
, B._N_S_3
, B._N_1601_DT
, B._N_A_3
, B._N_G_C
, B._N_NB_MEDIUM_PRIORITY_FIRE
, B._N_CUST_BROWSER_FIRST_DT_2
, B._N_CUST_NB_PREV_DT
, B._N_UA_DEVICE_FIRST_DT_2
, B._N_SCAMP3_MLW_DT
, B._N_ALL_LOGON_DT
, B._N_MALWARE_DT
, B._N_NB_RECIPIENT_DT_3
, B._N_CAPP_REG_DT_2
, B._N_CLIENT_IDTO_PW
, B._N_CLIENT_LOGON_CSR
, B._N_CLIENT_LOGON_FINEST
, B._N_CLIENT_LOGON_TOKEN
, B._N_CLIENT_PASSWORD_TEMP
, B._N_CLIENT_PW_FORGOT
, B._N_CLIENT_QA_CHG
, B._N_CLIENT_UNLOCK
, B._X_NPP_OUT_CNT_DATE
        FROM
            LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_TEMP_DIGI_RAS_D001_V4 AS A
            INNER JOIN (
               SELECT
                   TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
                   TTS_TRAN_DATE_ALT, 
                   TTS_TRAN_TIME_ALT,
                   TRY_CAST(TGX_TRAN_AMT AS DECIMAL(14,2)) AS TGX_TRAN_AMT,
                   	TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME, 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_MAX_SE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_MAX_SE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NM_DECLINE_FLAG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NM_DECLINE_FLAG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_LONG_CALL, 38, 2), '1960-01-01 00:00:00'))
            END as _A_TELSTRA_LONG_CALL
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CONFIRMED_FRAUD_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CONFIRMED_FRAUD_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_ACTIONCODE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_ACTIONCODE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CRD_ACTIONCODE_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CRD_ACTIONCODE_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INBOUND_DATETIME, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INBOUND_DATETIME
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_GEO_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_GEO_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DEVICEANOM_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DEVICEANOM_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_PASSWORD_CHANGE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_PASSWORD_CHANGE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CD_RTR_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CD_RTR_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_IVR_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_IVR_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_ALL_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_ALL_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_TRF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_TRF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_DEV_RETR_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_DEV_RETR_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_4_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_4_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_5_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_5_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MTH_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MTH_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP10_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP10_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_ADD_AUTH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CSE_ADD_AUTH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SEC_INTER_SHOP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SEC_INTER_SHOP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_DTL_CAPP_NBANK_SSO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_DTL_CAPP_NBANK_SSO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_DETAILS_VIEW, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_DETAILS_VIEW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_MANUAL_NB_LOCK_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_MANUAL_NB_LOCK_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CUST_BROWSER_PREV_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CUST_BROWSER_PREV_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_UA_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP7_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_RULEPRIORITISED_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_SCAMP_RULEPRIORITISED_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CURR_NB_BROWSER_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CURR_NB_BROWSER_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP3_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP3_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP4_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_REVERSE_IND_SCAMP4_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_LIMIT_INCREASE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_LIMIT_INCREASE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_ALL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_ALL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_DECLINE_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_DECLINE_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_COMMSEE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_COMMSEE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_HOLD_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_HOLD_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RT_DECLINE_INITIAL_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RT_DECLINE_INITIAL_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PROF_CAPP_DEVICE_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_PROF_CAPP_DEVICE_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_RETRIEVE_STMT_DETAILS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_RETRIEVE_STMT_DETAILS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_REGO_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CAPP_REGO_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ALL_BPAY_ACCT_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ALL_BPAY_ACCT_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_DT_4, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_DT_4
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_BPAY_ACCT_FTP_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_BPAY_ACCT_FTP_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_PAYID_TRANSFER_OUT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_PAYID_TRANSFER_OUT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_INB_OFI_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_INB_OFI_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NPP_OUT_CBA_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NPP_OUT_CBA_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CIF_ESTABLISH_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CIF_ESTABLISH_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ECV_DOCUMENT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ECV_DOCUMENT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_BTS_WDL_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_BTS_WDL_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_NB_GROUP_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_NB_GROUP_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_POSTCODE_DT_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_POSTCODE_DT_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_ACCT_AGG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _A_ACCT_AGG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_10, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_10
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_3, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_CITY_DATE_5, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_CITY_DATE_5
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CLIENT_COUNTRY_DATE_1, 38, 2), '1960-01-01 00:00:00'))
            END as _A_CLIENT_COUNTRY_DATE_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_PAYID_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_PAYID_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_WHITELIST_SENDER_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_WHITELIST_SENDER_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_ANY_CUST_FTP_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_NPP_OUT_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_CNT_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_BOND_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_BOND_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_HRISK_BILL_PROF_CNT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _B_HRISK_BILL_PROF_CNT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_LINK_SUM_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _B_RECIP_LINK_SUM_DATE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_I_ALL_LOGONS_FDT, 38, 2), '1960-01-01 00:00:00'))
            END as _I_ALL_LOGONS_FDT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_LST_BC_SNOOP_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_LST_BC_SNOOP_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_PUSH_API_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_FIRST_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_FIRST_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_2, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_M_F_C, 38, 2), '1960-01-01 00:00:00'))
            END as _L_M_F_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_IS_RAT_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _L_IS_RAT_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CRYPTO_CON_DT_LST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CRYPTO_CON_DT_LST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_TELSTRA_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_TELSTRA_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_FRD_DCLN_COMMS_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_FRD_DCLN_COMMS_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_SNT_TRAN_HOLD_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_SNT_TRAN_HOLD_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_MN_FRD_RESP_BL_END_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_MN_FRD_RESP_BL_END_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_2WP_TRAN_DT_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_2WP_TRAN_DT_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MRISK_ISP_NCRG_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MRISK_ISP_NCRG_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_M100_P23_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_D_P_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_D_P_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_1, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_1
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_S_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_S_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_1601_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_1601_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_A_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_A_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_G_C, 38, 2), '1960-01-01 00:00:00'))
            END as _N_G_C
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_MEDIUM_PRIORITY_FIRE, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_MEDIUM_PRIORITY_FIRE
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_BROWSER_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_BROWSER_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CUST_NB_PREV_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CUST_NB_PREV_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_UA_DEVICE_FIRST_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_UA_DEVICE_FIRST_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_SCAMP3_MLW_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_ALL_LOGON_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_ALL_LOGON_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MALWARE_DT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_MALWARE_DT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_NB_RECIPIENT_DT_3, 38, 2), '1960-01-01 00:00:00'))
            END as _N_NB_RECIPIENT_DT_3
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CAPP_REG_DT_2, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CAPP_REG_DT_2
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_IDTO_PW
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_CSR, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_CSR
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_FINEST, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_FINEST
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_LOGON_TOKEN, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_LOGON_TOKEN
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PASSWORD_TEMP, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PASSWORD_TEMP
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_PW_FORGOT, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_PW_FORGOT
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_QA_CHG, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_QA_CHG
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_UNLOCK, 38, 2), '1960-01-01 00:00:00'))
            END as _N_CLIENT_UNLOCK
        , 
            CASE 
                WHEN TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_X_NPP_OUT_CNT_DATE, 38, 2), '1960-01-01 00:00:00'))
            END as _X_NPP_OUT_CNT_DATE
        
                   ,             try_to_number(_a_bts_bio_se, 38, 2) as _a_bts_bio_se
            ,_A_BTS_BNFT
            ,try_to_number(_a_npp_inb_pmt_val, 38, 2) as _a_npp_inb_pmt_val
            ,_A_PROF_RISK_IND
            ,try_to_number(_a_cust_actioncode_1, 38, 2) as _a_cust_actioncode_1
            ,try_to_number(_a_dtl_actioncode_1, 38, 2) as _a_dtl_actioncode_1
            ,try_to_number(_a_dtl_actioncode_2, 38, 2) as _a_dtl_actioncode_2
            ,try_to_number(_a_npp_inbound_sum_amt, 38, 2) as _a_npp_inbound_sum_amt
            ,_A_TELSTRA_ACTIVE_CALL
            ,_A_TELSTRA_API_EVENT_ID
            ,try_to_number(_a_telstra_existing_relation, 38, 2) as _a_telstra_existing_relation
            ,_A_LATEST_NCRG_ISP
            ,try_to_number(_a_geo_distance, 38, 2) as _a_geo_distance
            ,try_to_number(_a_geo_long_1, 38, 2) as _a_geo_long_1
            ,try_to_number(_a_geo_long_2, 38, 2) as _a_geo_long_2
            ,_A_P_N_H
            ,try_to_number(_a_multi_cnt, 38, 2) as _a_multi_cnt
            ,try_to_number(_a_crd_scam_supp_7d_sum_1, 38, 2) as _a_crd_scam_supp_7d_sum_1
            ,try_to_number(_a_bts_cust_age, 38, 2) as _a_bts_cust_age
            ,try_to_number(_a_p_l_1, 38, 2) as _a_p_l_1
            ,try_to_number(_a_p_l_c, 38, 2) as _a_p_l_c
            ,try_to_number(_a_crd_npp_payment_amount, 38, 2) as _a_crd_npp_payment_amount
            ,try_to_number(_a_curr_capp_device_nftp_cnt, 38, 2) as _a_curr_capp_device_nftp_cnt
            ,_A_2WAY_TYPE
            ,try_to_number(_a_cust_acct_bal, 38, 2) as _a_cust_acct_bal
            ,try_to_number(_a_cust_avg_acct_bal, 38, 2) as _a_cust_avg_acct_bal
            ,try_to_number(_a_r, 38, 2) as _a_r
            ,try_to_number(_a_t, 38, 2) as _a_t
            ,try_to_number(_a_u, 38, 2) as _a_u
            ,try_to_number(_a_capp_deregistaration_cnt_3, 38, 2) as _a_capp_deregistaration_cnt_3
            ,try_to_number(_a_capp_logon_cnt_2, 38, 2) as _a_capp_logon_cnt_2
            ,try_to_number(_a_capp_logon_cnt_3, 38, 2) as _a_capp_logon_cnt_3
            ,try_to_number(_a_nb_logons_cnt_2, 38, 2) as _a_nb_logons_cnt_2
            ,try_to_number(_a_nb_logons_cnt_3, 38, 2) as _a_nb_logons_cnt_3
            ,try_to_number(_a_cust_browser_cnt_3, 38, 2) as _a_cust_browser_cnt_3
            ,_A_CUST_BROWSER_VER
            ,_A_CUST_OS_NAME
            ,_A_CUST_OS_VER
            ,try_to_number(_a_curr_nb_browser_cnt, 38, 2) as _a_curr_nb_browser_cnt
            ,try_to_number(_a_device_sim_vendor_ratio_exc, 38, 2) as _a_device_sim_vendor_ratio_exc
            ,try_to_number(_a_device_similar_vendor_ratio, 38, 2) as _a_device_similar_vendor_ratio
            ,_A_CIF_ESTABLISH_CUST_PCODE
            ,try_to_number(_a_list_rl1_scam_cust_cif, 38, 2) as _a_list_rl1_scam_cust_cif
            ,try_to_number(_a_prev_capp_device_cnt, 38, 2) as _a_prev_capp_device_cnt
            ,try_to_number(_a_prof_capp_device_cnt_1, 38, 2) as _a_prof_capp_device_cnt_1
            ,try_to_number(_a_cc_cash_advance_amt, 38, 2) as _a_cc_cash_advance_amt
            ,_A_MRISK_FOREIGN_IP_CNTRY_CODE
            ,_A_ALL_BPAY_ACCT_2
            ,try_to_number(_a_all_bpay_acct_sum_1, 38, 2) as _a_all_bpay_acct_sum_1
            ,try_to_number(_a_all_bpay_acct_sum_3, 38, 2) as _a_all_bpay_acct_sum_3
            ,try_to_number(_a_nb_bpay_acct_sum_1, 38, 2) as _a_nb_bpay_acct_sum_1
            ,try_to_number(_a_nb_bpay_acct_sum_3, 38, 2) as _a_nb_bpay_acct_sum_3
            ,try_to_number(_a_npp_ftp_sum, 38, 2) as _a_npp_ftp_sum
            ,try_to_number(_a_cust_npp_out_sum_aaa_1, 38, 2) as _a_cust_npp_out_sum_aaa_1
            ,try_to_number(_a_cust_npp_out_sum_aaa_2, 38, 2) as _a_cust_npp_out_sum_aaa_2
            ,try_to_number(_a_cust_npp_out_sum_aaa_long, 38, 2) as _a_cust_npp_out_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_4, 38, 2) as _a_cust_sum_aaa_4
            ,try_to_number(_a_cust_sum_aaa_7, 38, 2) as _a_cust_sum_aaa_7
            ,try_to_number(_a_cust_sum_aaa_long, 38, 2) as _a_cust_sum_aaa_long
            ,try_to_number(_a_cust_sum_aaa_short, 38, 2) as _a_cust_sum_aaa_short
            ,_A_CIF_ESTABLISH_CHANNEL
            ,_A_ECV_DOCUMENT_IP
            ,try_to_number(_a_client_postcode_ftp_sum_3, 38, 2) as _a_client_postcode_ftp_sum_3
            ,try_to_number(_a_bts_bch_sum, 38, 2) as _a_bts_bch_sum
            ,try_to_number(_a_monthly_transfer_count_2, 38, 2) as _a_monthly_transfer_count_2
            ,try_to_number(_a_monthly_transfer_count_3, 38, 2) as _a_monthly_transfer_count_3
            ,try_to_number(_a_monthly_transfer_count_4, 38, 2) as _a_monthly_transfer_count_4
            ,try_to_number(_a_monthly_transfer_sum_4, 38, 2) as _a_monthly_transfer_sum_4
            ,_A_CLIENT_CITY_10
            ,_A_CLIENT_CITY_6
            ,try_to_number(_a_client_city_cnt_1, 38, 2) as _a_client_city_cnt_1
            ,_A_CLIENT_COUNTRY_1
            ,_A_CLIENT_COUNTRY_8
            ,try_to_number(_a_client_country_cnt_3, 38, 2) as _a_client_country_cnt_3
            ,try_to_number(_a_client_country_cnt_7, 38, 2) as _a_client_country_cnt_7
            ,try_to_number(_b_safe_recip_frd_excluded_ind, 38, 2) as _b_safe_recip_frd_excluded_ind
            ,_B_RECIP_PROFILE_GLOB_ERROR
            ,try_to_number(_b_bvt_numeric_1, 38, 2) as _b_bvt_numeric_1
            ,try_to_number(_b_recip_sum_today, 38, 2) as _b_recip_sum_today
            ,_B_CRYPTO_RISK
            ,_B_OPEN_LAST_PAYER_CIF_10
            ,try_to_number(_b_recip_sum_aaa_1, 38, 2) as _b_recip_sum_aaa_1
            ,try_to_number(_b_recip_sum_aaa_2, 38, 2) as _b_recip_sum_aaa_2
            ,try_to_number(_b_recip_sum_aaa_long, 38, 2) as _b_recip_sum_aaa_long
            ,_B_CLIENT_POSTCODE_1
            ,_B_CLIENT_POSTCODE_2
            ,_B_CLIENT_POSTCODE_3
            ,try_to_number(_b_client_postcode_cnt_1, 38, 2) as _b_client_postcode_cnt_1
            ,try_to_number(_b_client_postcode_cnt_2, 38, 2) as _b_client_postcode_cnt_2
            ,try_to_number(_b_client_postcode_sum_1, 38, 2) as _b_client_postcode_sum_1
            ,try_to_number(_b_client_postcode_sum_2, 38, 2) as _b_client_postcode_sum_2
            ,try_to_number(_b_client_postcode_sum_3, 38, 2) as _b_client_postcode_sum_3
            ,try_to_number(_b_client_postcode_sum_5, 38, 2) as _b_client_postcode_sum_5
            ,try_to_number(_b_recip_sum_1, 38, 2) as _b_recip_sum_1
            ,try_to_number(_i_cust_tran_sum_3, 38, 2) as _i_cust_tran_sum_3
            ,try_to_number(_i_all_logons_cnt_1, 38, 2) as _i_all_logons_cnt_1
            ,try_to_number(_i_all_logons_perc_1, 38, 2) as _i_all_logons_perc_1
            ,try_to_number(_i_all_logons_perc_3m, 38, 2) as _i_all_logons_perc_3m
            ,try_to_number(_i_capp_logons_cnt_1, 38, 2) as _i_capp_logons_cnt_1
            ,try_to_number(_i_capp_logons_cnt_3m, 38, 2) as _i_capp_logons_cnt_3m
            ,try_to_number(_i_capp_logons_perc_1, 38, 2) as _i_capp_logons_perc_1
            ,try_to_number(_i_netbank_logons_cnt_1, 38, 2) as _i_netbank_logons_cnt_1
            ,try_to_number(_i_cust_net_l_cnt_1, 38, 2) as _i_cust_net_l_cnt_1
            ,try_to_number(_i_cust_net_cnt_1, 38, 2) as _i_cust_net_cnt_1
            ,try_to_number(_i_cust_net_cnt_short, 38, 2) as _i_cust_net_cnt_short
            ,_L_PAYTO_MANDATE_ID
            ,_L_PUSH_API_1
            ,_L_PUSH_API_2
            ,_L_PUSH_API_3
            ,_L_PUSH_API_4
            ,_L_BC_CONTEXT
            ,try_to_number(_l_muid_age_per_user, 38, 2) as _l_muid_age_per_user
            ,_L_SDID_1
            ,try_to_number(_l_sdid_cnt_1, 38, 2) as _l_sdid_cnt_1
            ,try_to_number(_l_sdid_cnt_3, 38, 2) as _l_sdid_cnt_3
            ,_L_NC_ACCT_NUM
            ,_L_NC_RESPONSE_CODE
            ,_L_NC_WINNING_ALG
            ,_L_BRANCH_ID
            ,try_to_number(_l_pmt_amt, 38, 2) as _l_pmt_amt
            ,_L_PMT_DESCR
            ,try_to_number(_l_se_score, 38, 2) as _l_se_score
            ,try_to_number(_l_se_sess_cnt, 38, 2) as _l_se_sess_cnt
            ,try_to_number(_l_datetime_fp_2, 38, 2) as _l_datetime_fp_2
            ,_L_FINGERPRINT_1
            ,_L_FINGERPRINT_2
            ,_L_FINGERPRINT_3
            ,_L_FINGERPRINT_4
            ,_L_FINGERPRINT_5
            ,try_to_number(_l_score_1, 38, 2) as _l_score_1
            ,try_to_number(_l_score_2, 38, 2) as _l_score_2
            ,try_to_number(_l_score_3, 38, 2) as _l_score_3
            ,try_to_number(_l_score_5, 38, 2) as _l_score_5
            ,try_to_number(_l_m_l_4, 38, 2) as _l_m_l_4
            ,try_to_number(_l_m_l_c, 38, 2) as _l_m_l_c
            ,try_to_number(_l_bc_sess_cnt, 38, 2) as _l_bc_sess_cnt
            ,try_to_number(_l_acc_amt_1d, 38, 2) as _l_acc_amt_1d
            ,try_to_number(_l_acc_amt_1h, 38, 2) as _l_acc_amt_1h
            ,try_to_number(_l_acc_amt_7d, 38, 2) as _l_acc_amt_7d
            ,try_to_number(_l_adv_key_combo, 38, 2) as _l_adv_key_combo
            ,try_to_number(_l_and_id_age, 38, 2) as _l_and_id_age
            ,try_to_number(_l_days_lst_dev_js, 38, 2) as _l_days_lst_dev_js
            ,_L_DEV_FAM
            ,try_to_number(_l_dev_fam_age, 38, 2) as _l_dev_fam_age
            ,try_to_number(_l_ft_rat_app_inst, 38, 2) as _l_ft_rat_app_inst
            ,try_to_number(_l_hi_dead_time, 38, 2) as _l_hi_dead_time
            ,try_to_number(_l_is_active_call, 38, 2) as _l_is_active_call
            ,try_to_number(_l_is_long_sess, 38, 2) as _l_is_long_sess
            ,_L_LANG_1
            ,_L_LANG_2
            ,_L_LANG_3
            ,try_to_number(_l_lgn_import_anomaly, 38, 2) as _l_lgn_import_anomaly
            ,try_to_number(_l_max_30d_score, 38, 2) as _l_max_30d_score
            ,try_to_number(_l_mins_lst_lgn_capped, 38, 2) as _l_mins_lst_lgn_capped
            ,try_to_number(_l_num_sess_2h, 38, 2) as _l_num_sess_2h
            ,try_to_number(_l_num_sess_4h, 38, 2) as _l_num_sess_4h
            ,_L_POLICY_NM
            ,_L_PROXY_TYPE
            ,try_to_number(_l_scrn_h, 38, 2) as _l_scrn_h
            ,try_to_number(_l_sess_cnt_mob_browser, 38, 2) as _l_sess_cnt_mob_browser
            ,try_to_number(_l_sess_cnt_mob_sdk, 38, 2) as _l_sess_cnt_mob_sdk
            ,try_to_number(_l_sess_cnt_web, 38, 2) as _l_sess_cnt_web
            ,try_to_number(_l_tap_cnt, 38, 2) as _l_tap_cnt
            ,try_to_number(_l_touch_cnt, 38, 2) as _l_touch_cnt
            ,try_to_number(_n_crypto_con_n_cnt, 38, 2) as _n_crypto_con_n_cnt
            ,try_to_number(_n_crypto_pot_n_sum, 38, 2) as _n_crypto_pot_n_sum
            ,try_to_number(_n_mps_mndt_cnt_24h_1, 38, 2) as _n_mps_mndt_cnt_24h_1
            ,try_to_number(_n_mob_oth_tran_sum_1, 38, 2) as _n_mob_oth_tran_sum_1
            ,try_to_number(_n_ca_device_profile_1, 38, 2) as _n_ca_device_profile_1
            ,try_to_number(_n_ca_lgn_cnt_24h_1, 38, 2) as _n_ca_lgn_cnt_24h_1
            ,_N_NMCHK_RECIP_CNT_1
            ,try_to_number(_n_2wp_tran_id_1, 38, 2) as _n_2wp_tran_id_1
            ,try_to_number(_n_ca_dev_bl_flag_2, 38, 2) as _n_ca_dev_bl_flag_2
            ,try_to_number(_n_cust_txn_count, 38, 2) as _n_cust_txn_count
            ,try_to_number(_n_nb_recipient_amt_1, 38, 2) as _n_nb_recipient_amt_1
            ,try_to_number(_n_nb_recipient_amt_3, 38, 2) as _n_nb_recipient_amt_3
            ,try_to_number(_n_nb_sum_tpt_4, 38, 2) as _n_nb_sum_tpt_4
            ,_N_D_D_3
            ,try_to_number(_n_cust_nb_device_cnt, 38, 2) as _n_cust_nb_device_cnt
            ,try_to_number(_n_capp_linked_cnt_1, 38, 2) as _n_capp_linked_cnt_1
            ,try_to_number(_n_capp_linked_cnt_2, 38, 2) as _n_capp_linked_cnt_2
            ,try_to_number(_n_capp_logon_cnt_2, 38, 2) as _n_capp_logon_cnt_2
            ,_N_ESTAB_SCHEDULE_2
            ,try_to_number(_n_log_scr_cons_2, 38, 2) as _n_log_scr_cons_2
            ,_N_LINKED_RECIP
            ,_N_CLIENT_IDCHNG_NB
            ,_N_CLIENT_NEW_PAYEE_1
            ,_N_CLIENT_NEW_PAYEE_2
            ,_N_CLIENT_NEW_PAYEE_3
            ,try_to_number(_x_cif_sender_cnt, 38, 2) as _x_cif_sender_cnt
            ,try_to_number(_x_name_match_cnt, 38, 2) as _x_name_match_cnt
            ,try_to_number(_x_last_n_txn_count, 38, 2) as _x_last_n_txn_count
            ,try_to_number(_x_t_2, 38, 2) as _x_t_2
            ,try_to_number(_x_t_5, 38, 2) as _x_t_5
            ,try_to_number(_x_npp_out_sum_3, 38, 2) as _x_npp_out_sum_3
                FROM
                   LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
                WHERE
                    TTS_TRAN_DATE_ALT BETWEEN 20241207 AND 20250714
            ) AS B
        ON
            A.CMX_TRAN_ID = B.CMX_TRAN_ID
            AND A.TTS_TRAN_DATE_ALT = B.TTS_TRAN_DATE_ALT
    )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1377686,1377.686000,22.961433,0.382691,2X-LARGE,32,12.246112
01bf13dc-3204-c93b-0000-c71d2e21eca2,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250915_235624(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250616
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1375347,1375.347000,22.922450,0.382041,2X-LARGE,32,12.225312
01bdea0e-3204-aa1f-0000-c71d2543959a,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""F2KSZQG4AD3S4ZO0""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,1374677,1374.677000,22.911283,0.381855,2X-LARGE,32,12.219360
01bdda02-3204-a615-0000-c71d24cb62f6,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""VVLVYQYQ846NIRCJ""()",VENKAY2,PUBLIC,1373226,1373.226000,22.887100,0.381452,2X-LARGE,32,12.206464
01beaeda-3204-c1f3-0000-c71d2b373d52,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_WIDE_TRANS_PK_RYAN_TEST_TE2_V1(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

    
            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250710 and 20250826
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,2742245,2742.245000,45.704083,0.761735,X-LARGE,16,12.187760
01beaf88-3204-c1f7-0000-c71d2b3dd186,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_dehurysk_digital_retro_scam_20250814202111_scor_itr3_wo_7d as -- test data result
(select
tran_id,
TGX_TRAN_AMT as TRAN_AMT,
ssx_snap_d,
ssx_cust_num,
dtl_ex_0_20s_001,
-- CERBERUS_SCORE,
-- DTL_EX_0_N_029,
fraudtype,
PRD_P01_DMN_FRAUMD.LABMLFRD.SCAM_RETRO_TEST_MOJO1('modelname=pipeline_Retro_scam_model_itr3_ac_f_20250828205631.mojo', -- model name
array_construct(
C_HOUR, C_DAY_OF_MONTH, C_MONTH_OF_YEAR, _A_SCAM_VICTIM_FLAG, _B_CRYPTO_RISK, _B_LIST_BL_SCAM_TP_ACCT, _B_LIST_RL1_SCAM_TP_CIF, _B_NB_HRISK_BILLER_CNT_1, _B_NPP_BLACKLIST_RECIP_FLAG, _B_NPP_OUT_CNT_2, _B_NPP_OUT_SUM_1, _B_NPP_OUT_FTP_SUM_1, _B_OPEN_LISTED_LAST_CIF_2, _B_RECIP_FTP_SUM_LONG, _B_RECIP_LINK_SUM_SHORT, _B_RECIP_SUM_TODAY, _B_RECIP_SUM_AAA_1, _B_RECIP_SUM_AAA_4, _B_RECIP_SUM_AAA_LONG, _B_RFM_WHITELIST_IND, _A_NPP_VELOCITY_1D_OUT, _L_RISKY_APPS, _L_ACCEL_EVENT_CNT, _L_RECIP_FTP, _A_CAPP_REGISTRATIONS_CNT_1, _A_CAPP_LOGON_CNT_1, RSP_ACTION_CODE, TGX_TRAN_AMT, TOTL_SEND_CAPP_REGR_Q, MIN_SEND_CAPP_LOGN_Q, MAX_SEND_CAPP_LOGN_Q, TOTL_SEND_CAPP_LOGN_Q, MAX_SEND_SCAM_VCTM_Q, MIN_FNCL_TRAN_A, MAX_FNCL_TRAN_A, TOTL_FNCL_TRAN_A, UNIQUE_SENDERS_DAILY, SENDER_DIVERSITY_RATIO_DAILY, DAILY_TRANSACTION_COUNT, IS_NEW_ACCOUNT_FLAG, AVG_TRANSACTIONS_CURRENT_PLUS_1D, AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D, TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D, AVG_TRANSACTION_SUM_CURRENT_PLUS_1D, _L_BC_SCORE, _L_MAX_30D_MULE_SCORE, _L_ADV_KEY_COMBO, _L_CLPBRD_EVNT, _L_EXPORT_DATA, _L_IMPORT_DATA, _L_IS_RCNT_HRISK_SESS, _L_PMT_VLOC_ANOM, _L_ACCUM_AMT_ANOM, _L_IS_LONG_SESS, _L_TRUST_900, _L_TRUST_NEW_PAYEE, _L_TRUST_RCNT_HI_ATO_AS_PAYER, _L_TRUST_RCNT_HI_SES_AS_PAYEE, _L_CUST_SCAMRISK_SCORE, _B_RECIP_SUM_SHORT, _B_RECIP_SUM_LONG, _A_CUSTOMER_AGE, _A_CUST_SUM_AAA_SHORT, _A_CUST_SUM_AAA_LONG, FTP_CNT_7DAYS, FTP_SUM_7DAYS, NB_LOGONS_CNT_3M, CAPP_LOGONS_CNT_3M, _X_CIF_RECIPIENT_NEW_SUM, _A_CUST_LINK_SUM_AAA_3, _B_CLIENT_POSTCODE_CNT_3, _L_PMT_AMT, _X_NPP_OUT_SUM_DATE, _L_ACC_AMT_1D, _L_SCORE_3, _B_RECIP_SUM_AAA_6, _A_CLIENT_CITY_7, _L_ACC_AMT_1H, _A_BTS_WDL_SUM_LONG, _L_SCORE_4, _L_NEW_PAYEE_PER_USER, _A_CLIENT_CITY_2, _B_CLIENT_POSTCODE_SUM_2, _L_BC_SESS_CNT, _A_CSE_CHG_DWL_NEW_AMT, _A_CLIENT_CITY_1, _B_CLIENT_POSTCODE_CNT_5, _L_MINS_LST_LGN_CAPPED, _B_RECIP_SUM_AAA_7, _B_CLIENT_POSTCODE_CNT_2, _A_CLIENT_CITY_10, _L_NUM_SESS_2H, _N_CUST_TXN_COUNT, _B_CLIENT_POSTCODE_SUM_3, _A_PROF_CAPP_DEVICE_NFTP_1, _A_NPP_FTP_SUM2, _A_CLIENT_CITY_6, _B_CLIENT_POSTCODE_CNT_1, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_NPP_OUT_SUM_1, _A_CLIENT_CITY_8, _N_CRYPTO_RECIPIENT_CNT, _N_H_2, _A_GEO_DISTANCE, _N_CAPP_LOGONS_CNT_1, _N_CAPP_LINKED_CNT_2, _B_CLIENT_POSTCODE_SUM_4, _X_CIF_REC_SUM, _L_M_L_C, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_3, _N_CUST_STATE_IP_ACTIVITY, _A_MRISK_FOREIGN_IP_ACTIVITY, _A_PROF_CAPP_DEVICE_LATT_3, _A_CUST_STATE_IP_ACTIVITY, _A_LOGON_NB_IP_CNTRY, _A_MRISK_FOREIGN_IP_TASK_ID, _A_DEVCIE_GEO_LAT_AVG_INCL, _N_INTERSTATE_IP_ACTIVITY, _N_FOREIGN_IP_ACTIVITY, _A_INTERSTATE_IP_STATE, _A_INTERSTATE_IP_ACTIVITY, _A_IS_IP_DT_2, _A_INTERSTATE_IP_TASK_ID, _A_IS_IP_DT_1, _A_SAFE_CUST_LATITUDE, _A_FOREIGN_IP_ACTIVITY, _N_HRISK_FOREIGN_IP_ACTIVITY, _A_IS_IP_DT_3, _A_CURR_CUST_LATITUDE, _N_CLOUD_SERV_LATEST_LOGON_DT, _A_PROF_CAPP_DEVICE_LATT_1, _A_PROF_CAPP_DEVICE_LATT_2, _A_FOREIGN_IP_TASK_ID, _A_PREV_CUST_LATITUDE, _X_CIF_RECIPIENT_NEW_CNT, _X_TELSTRA_LAST_CALL_DUR, _B_CLIENT_POSTCODE_3, _B_CLIENT_POSTCODE_2, _B_CLIENT_POSTCODE_4, _A_MRISK_FOREIGN_IP_CNTRY_CODE, _N_NEW_IP_LOGON_PCODE, _A_LOGON_198_IP_PC, _A_LOGON_NB_IP_PC, _X_LAST_N_TXN_COUNT, _B_OPEN_LAST_PAYER_CIF_DT_2, _B_OPEN_LAST_PAYER_CIF_DT_3, _B_OPEN_LAST_PAYER_CIF_DT_4, _B_OPEN_LAST_PAYER_CIF_DT_5, _A_NEW_CAPP_REGO_DT, _A_CSE_CHG_DWL_DT, _A_CIF_ESTABLISH_DT, _A_NB_LASTLOGON_DT_1, _A_CURR_CAPP_DEVICE_DT, _A_CRYPTO_LAST_PYMNT_DATE, _N_SCAMP3_MLW_DT, _N_SCAMP5_MLW_DT, _N_SCAMP7_MLW_DT, _N_SCAMP10_MLW_DT, _N_SCAMP20_MLW_DT, _N_SCAMP21_MLW_DT, _N_M100_P8_IND_DT, _A_M100_APP_P1_IND_DT, _N_M100_APP_P5_DT, _A_M100_APP_P8_IND_DT, _X_TELSTRA_MAX_CALL_DUR, _A_CRYPTO_MNTHLY_SUM, GENDER, BUSI_TRAN_COUNT, DEPOSIT_ACCT_COUNT, TRADE_ACCT_COUNT, NAME_ORIG_ASSOC, MAIN_FOREIGN_ASSOC, BAL_LAST_MON, BAL_TWO_MON_AGO, GAMBLING_SPEND_LAST_YEAR, GAMBLING_SPEND_THREE_MON, GAMBLING_SPEND_ONE_MON, DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, DPAT_TOTL_PRSL_TRAN_FOOT_A, DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, DPAT_TOTL_PRSL_TRAN_BALN_A, AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1, AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30, DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q, DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q, DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q)) as target_0,
1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_DEHURYSK_SCAM_RETRO_TESTSET_05082025 -- name of OOT data
where to_date(ssx_snap_d) >= '2025-06-14'
and to_date(ssx_snap_d) < '2025-07-01'-- filter on test data on dates
-- limit 10
);",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,2734355,2734.355000,45.572583,0.759543,X-LARGE,16,12.152688
01be8524-3204-bc97-0000-c71d29d8ad12,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_dehurysk_digital_retro_scam_20250814202111_scor_itr2 as -- test data result
(select
tran_id,
TRAN_AMT,
ssx_snap_d,
ssx_cust_num,
dtl_ex_0_20s_001,
-- CERBERUS_SCORE,
-- DTL_EX_0_N_029,
fraudtype,
PRD_P01_DMN_FRAUMD.LABMLFRD.SCAM_RETRO_TEST_MOJO1('modelname=pipeline_Retro_scam_model_ITR2_20250821165514.mojo', -- model name
array_construct(
C_HOUR, C_DAY_OF_WEEK, C_DAY_OF_MONTH, C_MONTH_OF_YEAR, CLEAN_TRANSACTION_AMOUNT, _A_SCAM_VICTIM_FLAG, _B_CRYPTO_RISK, _B_LIST_BL_SCAM_TP_ACCT, _B_LIST_RL1_SCAM_TP_CIF, _B_NB_HRISK_BILLER_CNT_1, _B_NB_HRISK_BILLER_SUM_1, _B_NPP_BLACKLIST_RECIP_FLAG, _B_NPP_OUT_CNT_1, _B_NPP_OUT_CNT_2, _B_NPP_OUT_SUM_1, _B_NPP_OUT_FTP_CNT_2, _B_NPP_OUT_FTP_SUM_1, _B_NPP_OUT_FTP_SUM_2, _B_OPEN_LISTED_LAST_CIF_2, _B_RECIP_FTP_SUM_1, _B_RECIP_FTP_SUM_LONG, _B_RECIP_LINK_SUM_AAA_LONG, _B_RECIP_LINK_SUM_LONG, _B_RECIP_LINK_SUM_SHORT, _B_RECIP_SUM_TODAY, _B_RECIP_SUM_AAA_1, _B_RECIP_SUM_AAA_4, _B_RECIP_SUM_AAA_LONG, _B_RFM_WHITELIST_IND, _A_NPP_VELOCITY_1D_OUT, TOTAL_SCAM_VICTIM_CONNECTIONS_HISTORICAL, AVG_TRANSACTIONS_PER_SENDER_D_HISTORICAL, MAX_DAILY_TRANSACTIONS_HISTORICAL, SENDER_DIVERSITY_FLAG, _L_MAX_30D_SCORE, _L_BC_SCORE, _L_MAX_30D_MULE_SCORE, _L_ADV_KEY_COMBO, _L_CLPBRD_EVNT, _L_CONCURRENT_SESS, _L_EXPORT_DATA, _L_IMPORT_DATA, _L_RAT_IN_SESS, _L_IS_RCNT_HRISK_SESS, _L_DELAY_TO_INPUT_PI, _L_ACTIVE_SPOOFING, _L_PMT_VLOC_ANOM, _L_ACCUM_AMT_ANOM, _L_IS_LONG_SESS, _L_TRUST_900, _L_TRUST_NEW_PAYEE, _L_TRUST_PAYEE_DORM_ACCT, _L_TRUST_RCNT_HI_ATO_AS_PAYER, _L_TRUST_RCNT_HI_SES_AS_PAYEE, _L_CUST_SCAMRISK_SCORE, _B_RECIP_SUM_SHORT, _B_RECIP_SUM_LONG, _A_CUSTOMER_AGE, _A_CUST_SUM_AAA_SHORT, _A_CUST_SUM_AAA_LONG, FTP_CNT_7DAYS, FTP_SUM_7DAYS, NB_LOGONS_CNT_3M, CAPP_LOGONS_CNT_3M, _X_CIF_RECIPIENT_NEW_SUM, _A_CUST_LINK_SUM_AAA_3, _B_CLIENT_POSTCODE_CNT_3, _L_PMT_AMT, _X_NPP_OUT_SUM_DATE, _L_ACC_AMT_1D, _L_SCORE_3, _B_RECIP_SUM_AAA_6, _A_CLIENT_CITY_7, _L_ACC_AMT_1H, _A_BTS_WDL_SUM_LONG, _L_SCORE_4, _L_NEW_PAYEE_PER_USER, _A_CLIENT_CITY_2, _B_CLIENT_POSTCODE_SUM_2, _L_BC_SESS_CNT, _A_CSE_CHG_DWL_NEW_AMT, _A_CLIENT_CITY_1, _B_CLIENT_POSTCODE_CNT_5, _L_MINS_LST_LGN_CAPPED, _B_RECIP_SUM_AAA_7, _B_CLIENT_POSTCODE_CNT_2, _A_CLIENT_CITY_10, _L_NUM_SESS_2H, _N_CUST_TXN_COUNT, _B_CLIENT_POSTCODE_SUM_3, _A_PROF_CAPP_DEVICE_NFTP_1, _A_NPP_FTP_SUM2, _A_CLIENT_CITY_6, _B_CLIENT_POSTCODE_CNT_1, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_NPP_OUT_SUM_1, _A_CLIENT_CITY_8, _N_CRYPTO_RECIPIENT_CNT, _N_H_2, _A_GEO_DISTANCE, _N_CAPP_LOGONS_CNT_1, _N_CAPP_LINKED_CNT_2, _B_CLIENT_POSTCODE_SUM_4, _X_CIF_REC_SUM, _L_M_L_C, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_3, _N_CUST_STATE_IP_ACTIVITY, _A_MRISK_FOREIGN_IP_ACTIVITY, _A_PROF_CAPP_DEVICE_LATT_3, _N_RP_SES_IP_1, _A_CAPP_REGO_IP_COUNTRY, _A_CUST_STATE_IP_ACTIVITY, _A_LOGON_NB_IP_CNTRY, _A_MRISK_FOREIGN_IP_TASK_ID, _A_DEVCIE_GEO_LAT_AVG_INCL, _N_INTERSTATE_IP_ACTIVITY, _N_INTERSTATE_IP_STATE, _N_FOREIGN_IP_ACTIVITY, _A_INTERSTATE_IP_STATE, _A_INTERSTATE_IP_ACTIVITY, _A_IS_IP_DT_2, _A_INTERSTATE_IP_TASK_ID, _A_IS_IP_DT_1, _A_SAFE_CUST_LATITUDE, _A_CURR_CAPP_DEVICE_LATT, _A_FOREIGN_IP_ACTIVITY, _N_HRISK_FOREIGN_IP_ACTIVITY, _A_IS_IP_DT_3, _A_CURR_CUST_LATITUDE, _N_CLOUD_SERV_LATEST_LOGON_DT, _A_PROF_CAPP_DEVICE_LATT_1, _A_PROF_CAPP_DEVICE_LATT_2, _A_FOREIGN_IP_TASK_ID, _A_PREV_CUST_LATITUDE, _X_CIF_RECIPIENT_NEW_CNT, _X_TELSTRA_LAST_CALL_DUR, _B_CLIENT_POSTCODE_3, _B_CLIENT_POSTCODE_2, _B_CLIENT_POSTCODE_4, _A_MRISK_FOREIGN_IP_CNTRY_CODE, _N_NEW_IP_LOGON_PCODE, _A_LOGON_198_IP_PC, _A_LOGON_NB_IP_PC, _X_LAST_N_TXN_COUNT, _A_TELSTRA_TP_OUTBND_COUNT, _B_OPEN_LAST_PAYER_CIF_DT_2, _B_OPEN_LAST_PAYER_CIF_DT_3, _B_OPEN_LAST_PAYER_CIF_DT_4, _B_OPEN_LAST_PAYER_CIF_DT_5, _A_NEW_CAPP_REGO_DT, _A_CSE_CHG_DWL_DT, _A_CIF_ESTABLISH_DT, _A_NB_LASTLOGON_DT_1, _A_CURR_CAPP_DEVICE_DT, _A_TELSTRA_LONG_CALL, _A_CRYPTO_LAST_PYMNT_DATE, _N_SCAMP3_MLW_DT, _N_SCAMP4_MLW_DT, _N_SCAMP5_MLW_DT, _N_SCAMP7_MLW_DT, _N_SCAMP10_MLW_DT, _N_SCAMP20_MLW_DT, _N_SCAMP21_MLW_DT, _N_M100_P8_IND_DT, _A_M100_APP_P1_IND_DT, _N_M100_APP_P5_DT, _A_M100_APP_P8_IND_DT, _N_M100_APP_P9_DT, _X_TELSTRA_MAX_CALL_DUR, _A_CRYPTO_MNTHLY_SUM, GENDER, TRAN_ACCT_COUNT, BUSI_TRAN_COUNT, DMC_COUNT, DEPOSIT_ACCT_COUNT, TRADE_ACCT_COUNT, NAME_ORIG_ASSOC, MAIN_FOREIGN_ASSOC, GOVT_BENEFITS, BAL_LAST_MON, BAL_TWO_MON_AGO, GAMBLING_SPEND_LAST_YEAR, GAMBLING_SPEND_THREE_MON, GAMBLING_SPEND_ONE_MON, DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, DPAT_TOTL_PRSL_TRAN_FOOT_A, DPAT_TOTL_BUSN_TRAN_FOOT_A, DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, DPAT_TOTL_PRSL_TRAN_BALN_A, DPAT_TOTL_BUSN_TRAN_BALN_A, AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1, AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30, DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q, DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q, DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q, DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q)) as target_0,
1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_DEHURYSK_SCAM_RETRO_TESTSET_13082025 -- name of OOT data
where to_date(ssx_snap_d) >= '2025-06-14'
and to_date(ssx_snap_d) < '2025-07-01'-- filter on test data on dates
-- limit 10
);",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1365609,1365.609000,22.760150,0.379336,2X-LARGE,32,12.138752
01bec060-3204-c1f5-0000-c71d2bb5e6e6,"create or replace temporary table NPP_TRAN as
select	distinct case   when b.fraudtype = 'CVL' then null
                else b.fraudtype
        end as FRAUDTYPE
		,b.detection
		,b.case_detection
        ,TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
		,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
		,a.tts_tran_date_alt
		,a.tts_tran_time_alt
		,a.dtl_ex_0_20s_001
		,a.dtl_ex_1_5s_01
		,a.ssx_cust_num
		,a.chl_id_ob_userid
		,a.tgx_bank_name
		,a.tgx_bank_num
		,a.tgx_branch_id
		,a.tgx_acct_num
		,a.tgx_name
		,a.tgx_description
		,TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as TRAN_AMT
		,a.dtl_ex_0_i_002 as FTP_IND
		
		-- BioCatch UVs
		,TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE
		,TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_SCORE
		,TRY_TO_NUMBER(a._l_adv_key_combo, 38, 2) as _L_ADV_KEY_COMBO
		,TRY_TO_NUMBER(a._l_clpbrd_evnt, 38, 2) as _L_CLPBRD_EVNT
		,TRY_TO_NUMBER(a._l_concurrent_sess, 38, 2) as _L_CONCURRENT_SESS
		,TRY_TO_NUMBER(a._l_export_data, 38, 2) as _L_EXPORT_DATA
		,TRY_TO_NUMBER(a._l_import_data, 38, 2) as _L_IMPORT_DATA
		,TRY_TO_NUMBER(a._l_is_rat, 38, 2) as _L_IS_RAT
		,TRY_TO_NUMBER(a._l_is_mob_rat, 38, 2) as _L_IS_MOB_RAT
		,TRY_TO_NUMBER(a._l_rat_in_sess, 38, 2) as _L_RAT_IN_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_hrisk_sess, 38, 2) as _L_IS_RCNT_HRISK_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_rat, 38, 2) as _L_IS_RCNT_RAT
		,TRY_TO_NUMBER(a._l_lrg_dist_known_loc, 38, 2) as _L_LRG_DIST_KNOWN_LOC
		,TRY_TO_NUMBER(a._l_rare_scrn_sz, 38, 2) as _L_RARE_SCRN_SZ
		,TRY_TO_NUMBER(a._l_risky_isp, 38, 2) as _L_RISKY_ISP
		,TRY_TO_NUMBER(a._l_risky_key_combo, 38, 2) as _L_RISKY_KEY_COMBO
		,TRY_TO_NUMBER(a._l_tzone_mismatch, 38, 2) as _L_TZONE_MISMATCH
		,TRY_TO_NUMBER(a._l_scm_rsk_hgh_scr, 38, 2) as _L_SCM_RSK_HGH_SCR
		,TRY_TO_NUMBER(a._l_keyb_nav_anom, 38, 2) as _L_KEYB_NAV_ANOM
		,TRY_TO_NUMBER(a._l_scrn_broadcast, 38, 2) as _L_SCRN_BROADCAST
		,TRY_TO_NUMBER(a._l_delay_to_input_pi, 38, 2) as _L_DELAY_TO_INPUT_PI
		,TRY_TO_NUMBER(a._l_input_otp_delay, 38, 2) as _L_INPUT_OTP_DELAY
		,TRY_TO_NUMBER(a._l_active_spoofing, 38, 2) as _L_ACTIVE_SPOOFING
		,TRY_TO_NUMBER(a._l_pmt_vloc_anom, 38, 2) as _L_PMT_VLOC_ANOM
		,TRY_TO_NUMBER(a._l_rcnt_hi_scr_on_dev, 38, 2) as _L_RCNT_HI_SCR_ON_DEV
		,TRY_TO_NUMBER(a._l_accum_amt_anom, 38, 2) as _L_ACCUM_AMT_ANOM
		,TRY_TO_NUMBER(a._l_app_togg, 38, 2) as _l_APP_TOGG
		,TRY_TO_NUMBER(a._l_is_active_call, 38, 2) as _L_IS_ACTIVE_CALL
		,TRY_TO_NUMBER(a._l_is_long_sess, 38, 2) as _L_IS_LONG_SESS
		,TRY_TO_NUMBER(a._l_type_patterns_anomaly, 38, 2) as _L_TYPE_PATTERNS_ANOMALY
		,TRY_TO_NUMBER(a._l_seg_typing_pi, 38, 2) as _L_SEG_TYPING_PI
		
		-- NameCheck UVs
		,a._l_nc_response_code
		,a._l_nc_match_name_conf
		
		-- H2O Score UVs
		,TRY_TO_NUMBER(a._l_cust_scamrisk_score, 38, 2) as _L_CUST_SCAMRISK_SCORE
		,a.dtl_ex_0_n_029
		,a.dtl_ex_0_n_034 as CERBERUS_SCORE
		
		-- Recipient Level UVs
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_short, 38, 2) as _B_RECIP_SUM_SHORT
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_long, 38, 2) as _B_RECIP_SUM_LONG
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_short, 38, 2) as _B_RECIP_FTP_CNT_SHORT
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_long, 38, 2) as _B_RECIP_FTP_CNT_LONG
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_any_cust_ftp_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_ANY_CUST_FTP_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_2
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_3
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_4
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_5
		
		-- Customer Level UVs
		,TRY_TO_NUMBER(a._a_customer_age, 38, 2) as _A_CUSTOMER_AGE
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_SHORT, 38, 2) as _A_CUST_SUM_AAA_SHORT
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_LONG, 38, 2) as _A_CUST_SUM_AAA_LONG
		,TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1
		,TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2
		,TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3
		,TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4
		,TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5
		,TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6
		,TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7
		,TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1
		,TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2
		,TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3
		,TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4
		,TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5
		,TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6
		,TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_NEW_CAPP_REGO_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CSE_CHG_DWL_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CIF_ESTABLISH_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00') as _A_NB_LASTLOGON_DT_1
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00') as _A_CURR_CAPP_DEVICE_DT
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_1, 38, 2) as _A_NB_LOGONS_CNT_1
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_2, 38, 2) as _A_NB_LOGONS_CNT_2
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_3, 38, 2) as _A_NB_LOGONS_CNT_3
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_1, 38, 2) as _A_CAPP_LOGON_CNT_1
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_2, 38, 2) as _A_CAPP_LOGON_CNT_2
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_3, 38, 2) as _A_CAPP_LOGON_CNT_3
		
		-- Customer-Recipient Relationship Level UVs
		,TRY_TO_NUMBER(a._x_cif_recipient_new_sum, 38, 2) + TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM
		,case   when a._x_cif_recipient_new_date = '0' then TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF')
                else TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00'::timestamp)
		end as _X_CIF_RECIPIENT_NEW_DATE
		,case   when a._x_cif_recipient_new_cnt = '0' then 1
                else TRY_TO_NUMBER(a._x_cif_recipient_new_cnt, 38, 2) + 1
		end as _X_CIF_RECIPIENT_NEW_CNT
		
		-- Telstra Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_TELSTRA_LONG_CALL
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_telstra_last_call_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _X_TELSTRA_LAST_CALL_DT
		,TRY_TO_NUMBER(a._x_telstra_last_call_dur, 38, 2) as _X_TELSTRA_LAST_CALL_DUR
		,TRY_TO_NUMBER(a._x_telstra_max_call_dur, 38, 2) as _X_TELSTRA_MAX_CALL_DUR
		,a._a_telstra_active_call
		
		-- Crypto UVs
		,TRY_TO_NUMBER(a._a_crypto_mnthly_sum, 38, 2) as _A_CRYPTO_MNTHLY_SUM
		,DATEADD(day, TRY_TO_NUMBER(a._a_crypto_last_pymnt_date, 38, 2), '1960-01-01') as _A_CRYPTO_LAST_PYMNT_DATE
		
		-- M100 Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP1_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP2_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP3_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP4_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP5_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP6_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP7_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP10_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp11_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP11_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp12_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP12_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp13_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP13_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP20_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP21_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_M100_P8_IND_DT
		
		-- M100 App Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P1_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P5_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P8_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P9_DT
 		
		-- CIF Profiling UVs
		,a._l_fingerprint_1
		,a._l_fingerprint_2
		,a._l_fingerprint_3
		,a._l_fingerprint_4

        -- Intelligent Friction UVs
                ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCTN_MSG_SNT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCTN_MSG_SNT
    
         ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCT_INTENT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCT_INTENT
        
from        lcl.fdp_customer_transactions_send_flat a
left join  prd_p01_dmn_fraumd.labmlfrd.dtl_fraudmaster b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where   a.mid_event_ts >= '20250701'
and     a.mid_event_ts >= '20250801'
and     a.dtl_ex_1_5s_01 in ('C205N'
							,'C207N'
							,'C242N'
							,'C244N'
							,'C246N'
							,'N205N'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'X232N'
							,'X243N'
							,'X246N')
and     a.hdr_source = 'NPP OUT'
and     tran_amt > 0
order by    chl_id_ob_userid
            ,transactiondatetime;",WANGC34,R_USR_FRAUMD_LABMLFRD_RW,1355715,1355.715000,22.595250,0.376588,2X-LARGE,32,12.050816
01be82bb-3204-bc99-0000-c71d29c514fa,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""RSP_ACTION_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_CUST_SPEND_SUM_AAA_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_CC_RECOV_TRANS_SUM_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_C_N3D_TST_CNT_1"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_AUTH_COUNT"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_Q_NON_AU_IND"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_C_CC_GBL_N3D_1D_CNT_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CC_SFW_GOOGLE_CNT_2"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""_Q_COF_DECL_CNT_DAY_1"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_L_MAX_30D_SCORE_H2O"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_L_ACC_AMT_7D"" DOUBLE, ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_C_CRD_DOM_CNP_HV_SUM_1"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""CHL_CT_TERM_OWNER_ID"" STRING(16777216), ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_A_Q"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_3"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""_A_GEO_LONG_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_2"" DOUBLE, ""_C_N3D_MERC_ID_1"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_2"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, DTL_EX_3_8S_009, _M_TOTAL_COUNT, DTL_CA_AUTH_SYS_INFO, _C_CC_GBL_N3D_SUM_1, _C_CC_GBL_N3D_CNT_1, _C_N3D_OVS_6H_SUM_1, DTL_CA_MERCH_CURR_CODE, _C_CRD_SAFE_MERCHANT, RSP_ACTION_CODE, _Q_MER_FRAUD_SCORE_CNT_6, DTL_EX_3_20S_004, _Q_KEYED_APVD_CNT_DAY_1, _A_CUST_SPEND_SUM_AAA_1, _C_N3D_MERC_ID_SUM_2, _C_CC_RECOV_TRANS_SUM_1, _A_D_D_1, ATH_PC_CUST_PRESENT, _Q_MER_FRAUD_SCORE_CNT_5, ATH_PC_ACS_REFER_CODE, _Q_MER_FRAUD_SCORE_SUM_6, _C_N3D_MERC_ID_SUM_1, _L_BC_SESS_ID, _C_N3D_TST_CNT_1, _M_FIRST_USE_DATE, _Q_AUTH_COUNT, _M_TOTAL_SUM, _C_2WAY_5X_CRD_CNT, _Q_MER_FRAUD_SCORE_CNT_3, CHL_CT_TERM_CNTRY_CODE, _A_BTS_CUST_AGE, _C_N3D_MERC_ID_SUM_3, _Q_NON_AU_IND, _A_CRD_NPP_PAYMENT_AMOUNT, _C_CC_GBL_N3D_1D_CNT_1, DTL_EX_3_80S_001, _C_CRD_VISA_MERC_SUM_1, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_2, _C_CC_SFW_GOOGLE_CNT_2, _A_D_D_3, _Q_COF_DECL_CNT_DAY_1, _A_AUS_IP_ACTIVITY, _A_BTS_CUST_DOB, _L_MAX_30D_SCORE_H2O, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _C_CC_2DAY_AMT_6, _A_D_D_2, _L_ACC_AMT_7D, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _A_PROF_CAPP_DEVICE_1, _C_CRD_DOM_CNP_HV_SUM_1, _L_BC_SCORE_H2O, _C_CC_CNP_VEL_6HR_COUNT_1, CHL_CT_TERM_OWNER_ID, _C_CC_OS_FB_CNT_3, _A_Q, _Q_MER_FRAUD_SCORE_SUM_1, _C_CRD_DOM_CNP_HV_CNT_1, _Q_MER_FRAUD_SCORE_SUM_3, _C_CRD_3D_TRN_SUM_1, _A_GEO_LONG_1, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_1, _C_CC_GBL_N3D_CNT_2, CHL_CT_MER_MCC
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250819 and 20250821
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1348267,1348.267000,22.471117,0.374519,2X-LARGE,32,11.984608
01beff32-3204-c93b-0000-c71d2d8e492a,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_SHROFFPR as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    OR c.BAD = 1 
    THEN 1
    ELSE 0
  END AS final_target,
  SSX_CUST_NUM,
  DTL_EX_0_20S_001,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 7, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 7, 1) || '_v' else 'unknown' end as COMMINCOME, -- commincome bank (0-7) -- new
case when substr(_L_FINGERPRINT_3, 8, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 8, 1) || '_v' else 'unknown' end as AVG_BIO, -- average biocatch score  -- new
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   
  -- coalesce(POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10))::number(9,0) as BAL_2M, -- balance two months ago -- new

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 COALESCE(TRY_CAST(TGX_TRAN_AMT AS FLOAT), -1) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250201 and 20250601
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",SHROFFPR,R_USR_FRAUMD_LABMLFRD_RW,1336930,1336.930000,22.282167,0.371369,2X-LARGE,32,11.883808
01be76b0-3204-bb40-0000-c71d29698b7e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""RSP_ACTION_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_CUST_SPEND_SUM_AAA_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_CC_RECOV_TRANS_SUM_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_C_N3D_TST_CNT_1"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_AUTH_COUNT"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_Q_NON_AU_IND"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_C_CC_GBL_N3D_1D_CNT_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CC_SFW_GOOGLE_CNT_2"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""_Q_COF_DECL_CNT_DAY_1"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_L_MAX_30D_SCORE_H2O"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_L_ACC_AMT_7D"" DOUBLE, ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_C_CRD_DOM_CNP_HV_SUM_1"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""CHL_CT_TERM_OWNER_ID"" STRING(16777216), ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_A_Q"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_3"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""_A_GEO_LONG_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_2"" DOUBLE, ""_C_N3D_MERC_ID_1"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_2"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, DTL_EX_3_8S_009, _M_TOTAL_COUNT, DTL_CA_AUTH_SYS_INFO, _C_CC_GBL_N3D_SUM_1, _C_CC_GBL_N3D_CNT_1, _C_N3D_OVS_6H_SUM_1, DTL_CA_MERCH_CURR_CODE, _C_CRD_SAFE_MERCHANT, RSP_ACTION_CODE, _Q_MER_FRAUD_SCORE_CNT_6, DTL_EX_3_20S_004, _Q_KEYED_APVD_CNT_DAY_1, _A_CUST_SPEND_SUM_AAA_1, _C_N3D_MERC_ID_SUM_2, _C_CC_RECOV_TRANS_SUM_1, _A_D_D_1, ATH_PC_CUST_PRESENT, _Q_MER_FRAUD_SCORE_CNT_5, ATH_PC_ACS_REFER_CODE, _Q_MER_FRAUD_SCORE_SUM_6, _C_N3D_MERC_ID_SUM_1, _L_BC_SESS_ID, _C_N3D_TST_CNT_1, _M_FIRST_USE_DATE, _Q_AUTH_COUNT, _M_TOTAL_SUM, _C_2WAY_5X_CRD_CNT, _Q_MER_FRAUD_SCORE_CNT_3, CHL_CT_TERM_CNTRY_CODE, _A_BTS_CUST_AGE, _C_N3D_MERC_ID_SUM_3, _Q_NON_AU_IND, _A_CRD_NPP_PAYMENT_AMOUNT, _C_CC_GBL_N3D_1D_CNT_1, DTL_EX_3_80S_001, _C_CRD_VISA_MERC_SUM_1, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_2, _C_CC_SFW_GOOGLE_CNT_2, _A_D_D_3, _Q_COF_DECL_CNT_DAY_1, _A_AUS_IP_ACTIVITY, _A_BTS_CUST_DOB, _L_MAX_30D_SCORE_H2O, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _C_CC_2DAY_AMT_6, _A_D_D_2, _L_ACC_AMT_7D, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _A_PROF_CAPP_DEVICE_1, _C_CRD_DOM_CNP_HV_SUM_1, _L_BC_SCORE_H2O, _C_CC_CNP_VEL_6HR_COUNT_1, CHL_CT_TERM_OWNER_ID, _C_CC_OS_FB_CNT_3, _A_Q, _Q_MER_FRAUD_SCORE_SUM_1, _C_CRD_DOM_CNP_HV_CNT_1, _Q_MER_FRAUD_SCORE_SUM_3, _C_CRD_3D_TRN_SUM_1, _A_GEO_LONG_1, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_1, _C_CC_GBL_N3D_CNT_2, CHL_CT_MER_MCC
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250817 and 20250819
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1326107,1326.107000,22.101783,0.368363,2X-LARGE,32,11.787616
01be8fc7-3204-bee3-0000-c71d2a320a22,"create or replace table LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE1 as (

WITH cleaned_recipient_data AS (
    -- Clean and prepare recipient transaction data for LAST 6 MONTHS
    SELECT
        TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
        TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
        (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
        CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
        dtl_ex_0_20s_001,
        SSX_CUST_NUM,
        TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS transaction_date,
        -- Extract hour from timestamp
        EXTRACT(HOUR FROM TRY_TO_TIMESTAMP(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF')) as C_hour,
        
        -- Day features from snap_d (DATE)
        DAYOFWEEK(TRANSACTIONDATETIME) as C_day_of_week,
        -- CASE WHEN DAYOFWEEK(SSX_SNAP_D) IN (0, 6) THEN 1 ELSE 0 END as C_is_weekend, -- Not in feature list
        DAY(SSX_SNAP_D) as C_day_of_month,
        MONTH(SSX_SNAP_D) as C_month_of_year,
        -- Clean transaction amount
        CASE
            WHEN TGX_TRAN_AMT IS NULL OR TGX_TRAN_AMT = '' OR TGX_TRAN_AMT = ' ' THEN NULL
            ELSE TRY_CAST(TGX_TRAN_AMT AS DECIMAL(18,2))
        END AS clean_transaction_amount,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_SCAM_VICTIM_FLAG, '[^0-9.-]', '')), -1) as _A_SCAM_VICTIM_FLAG,
        -- Primary risk indicator y
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,
        -- Blacklist and scam indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_acct,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_payid, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_payid, -- Not in feature list
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_tp_acct, -- Not in feature list
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_tp_payid, '[^0-9.-]', '')), -1) as _b_list_bl_tp_payid, -- Not in feature list
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl1_scam_tp_cif, '[^0-9.-]', '')), -1) as _b_list_rl1_scam_tp_cif,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl2_tp_acct, '[^0-9.-]', '')), -1) as _b_list_rl2_tp_acct, -- Not in feature list
        -- Whitelist indicators
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_wl_tp_payid, '[^0-9.-]', '')), -1) as _b_list_wl_tp_payid, -- Not in feature list
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_wl_de_check, '[^0-9.-]', '')), -1) as _b_nb_wl_de_check, -- Not in feature list
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_whitelist_payid_flag, '[^0-9.-]', '')), -1) as _b_npp_whitelist_payid_flag, -- Not in feature list
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_whitelist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_whitelist_recip_flag, -- Not in feature list
        -- High-risk biller metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_1,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_2, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_2, -- Not in feature list
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_1,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_2, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_2, -- Not in feature list
        -- NPP blacklist flags
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_payid_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_payid_flag, -- Not in feature list
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_recip_flag,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_sender_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_sender_flag, -- Not in feature list
        -- NPP outbound transaction metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_sum_1,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_sum_2, -- Not in feature list
        -- NPP first-time payer metrics
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_1, -- Not in feature list
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_2,
        -- NPP watchlist flags
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_watchlist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_watchlist_recip_flag, -- Not in feature list
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_watchlist_sender_flag, '[^0-9.-]', '')), -1) as _b_npp_watchlist_sender_flag, -- Not in feature list
        -- Other risk indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_open_listed_last_cif_2, '[^0-9.-]', '')), -1) as _b_open_listed_last_cif_2,
        -- Recipient first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_long, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_long,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_short, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_short, -- Not in feature list
        -- Recipient link sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_long,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_short, -- Not in feature list
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_short,
        -- Recipient transaction sums (various time periods)
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_2, '[^0-9.-]', '')), -1) as _b_recip_sum_2, -- Not in feature list
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_3, '[^0-9.-]', '')), -1) as _b_recip_sum_3, -- Not in feature list
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_4, '[^0-9.-]', '')), -1) as _b_recip_sum_4,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_5, '[^0-9.-]', '')), -1) as _b_recip_sum_5, -- Not in feature list
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_6, '[^0-9.-]', '')), -1) as _b_recip_sum_6, -- Not in feature list
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_7, '[^0-9.-]', '')), -1) as _b_recip_sum_7,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_today, '[^0-9.-]', '')), -1) as _b_recip_sum_today,
        -- Recipient AAA transaction sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_1, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_1,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_2, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_2, -- Not in feature list
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_3, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_3, -- Not in feature list
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_4, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_4,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_5, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_5, -- Not in feature list
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_short,
        -- Fixed: _b_rfm_whitelist_ind (was incorrectly aliased)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_rfm_whitelist_ind, '[^0-9.-]', '')), -1) as _b_rfm_whitelist_ind,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_1d_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_1d_out,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_same_recip_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_same_recip_out -- Not in feature list

        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(RSP_ACTION_CODE, '[^0-9.-]', '')), -1) as RSP_ACTION_CODE,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_apps, '[^0-9.-]', '')), -1) as _l_risky_apps,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_browser, '[^0-9.-]', '')), -1) as _l_risky_browser,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_accel_event_cnt, '[^0-9.-]', '')), -1) as _l_accel_event_cnt,
        COALESCE(CAST(_l_recip_ftp AS VARCHAR(50)), '-1') as _l_recip_ftp,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_amt, '[^0-9.-]', '')), -1) as _l_risky_amt,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_tzone_mismatch, '[^0-9.-]', '')), -1) as _l_tzone_mismatch


    FROM LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
    WHERE MID_EVENT_TS >= '20241001'
      AND MID_EVENT_TS < '20250716'
      -- AND DTL_EX_1_5S_01 IN ('C205N','C207N','C242N','C244N','C246N','N205N','N207N','N242N','N244N','N246N','X232N','X243N','X246N')
      AND HDR_SOURCE = 'NPP OUT'
      AND SSX_CUST_NUM <> ''
      AND SSX_CUST_NUM IS NOT NULL
      AND SSX_CUST_NUM <> 'Not Available'
      AND clean_transaction_amount > 0
),

recipient_aggregates AS (
    SELECT
        RCPI_ACCT_I,
        transaction_date,
        -- Historical scam connections
        COUNT(DISTINCT CASE WHEN _A_SCAM_VICTIM_FLAG = 1 THEN SSX_CUST_NUM END) as total_scam_victim_connections_historical,
        -- Average transactions per sender
        ROUND(COUNT(*) / NULLIF(COUNT(DISTINCT SSX_CUST_NUM), 0), 2) AS avg_transactions_per_sender_d_historical,
        -- Maximum daily transactions
        MAX(daily_count) as max_daily_transactions_historical,
        -- Sender diversity flag
        CASE
            WHEN COUNT(DISTINCT SSX_CUST_NUM) > COUNT(*) * 0.7 THEN 1  -- HIGH_DIVERSITY
            WHEN COUNT(DISTINCT SSX_CUST_NUM) < COUNT(*) * 0.2 THEN -1 -- LOW_DIVERSITY
            ELSE 0  -- NORMAL_DIVERSITY
        END as sender_diversity_flag,
        -- Activity span days
        COALESCE(DATEDIFF('day', MIN(transaction_date), MAX(transaction_date)), 0) AS activity_span_days
    FROM (
        SELECT 
            RCPI_ACCT_I,
            -- SSX_SNAP_D, -- Not in feature list
            SSX_CUST_NUM,
            transaction_date,
            _A_SCAM_VICTIM_FLAG,
            COUNT(*) OVER (PARTITION BY RCPI_ACCT_I, DATE(transaction_date)) as daily_count
        FROM cleaned_recipient_data
    ) r_with_daily
    GROUP BY RCPI_ACCT_I, transaction_date
)

-- Final result: Transaction-level data with recipient features
SELECT 
    r.*,  -- All transaction-level columns
    -- Recipient aggregated features
    COALESCE(ra.total_scam_victim_connections_historical, 0) as total_scam_victim_connections_historical,
    COALESCE(ra.avg_transactions_per_sender_d_historical, 0) as avg_transactions_per_sender_d_historical,
    COALESCE(ra.max_daily_transactions_historical, 0) as max_daily_transactions_historical,
    COALESCE(ra.sender_diversity_flag, 0) as sender_diversity_flag,
    COALESCE(ra.activity_span_days, 0) as activity_span_days
FROM cleaned_recipient_data r
LEFT JOIN recipient_aggregates ra ON r.RCPI_ACCT_I = ra.RCPI_ACCT_I
and r.transaction_date = ra.transaction_date
ORDER BY 
    total_scam_victim_connections_historical DESC,
    max_daily_transactions_historical DESC,
    avg_transactions_per_sender_d_historical DESC);",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1322683,1322.683000,22.044717,0.367412,2X-LARGE,32,11.757184
01be9e9d-3204-bee5-0000-c71d2a9a661a,"SELECT DISTINCT
TRANSACTIONDATETIME
,TRAN_ID
,SSX_SNAP_D
        ,RCPI_ACCT_I
        ,SSX_PATY_IDNN_BK
         ,tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,TRAN_AMT
_L_MAX_30D_SCORE, _L_BC_SCORE, _L_MAX_30D_MULE_SCORE, _L_ADV_KEY_COMBO, _L_CLPBRD_EVNT, _L_CONCURRENT_SESS, _L_EXPORT_DATA, _L_IMPORT_DATA, _L_RAT_IN_SESS, _L_IS_RCNT_HRISK_SESS, _L_DELAY_TO_INPUT_PI, _L_ACTIVE_SPOOFING, _L_PMT_VLOC_ANOM, _L_ACCUM_AMT_ANOM, _L_IS_LONG_SESS, _L_TRUST_900, _L_TRUST_NEW_PAYEE, _L_TRUST_PAYEE_DORM_ACCT, _L_TRUST_RCNT_HI_ATO_AS_PAYER, _L_TRUST_RCNT_HI_SES_AS_PAYEE, _L_CUST_SCAMRISK_SCORE, _B_RECIP_SUM_SHORT, _B_RECIP_SUM_LONG, _A_CUSTOMER_AGE, _A_CUST_SUM_AAA_SHORT, _A_CUST_SUM_AAA_LONG, FTP_CNT_7DAYS, FTP_SUM_7DAYS, NB_LOGONS_CNT_3M, CAPP_LOGONS_CNT_3M, _X_CIF_RECIPIENT_NEW_SUM, _A_CUST_LINK_SUM_AAA_3, _B_CLIENT_POSTCODE_CNT_3, _L_PMT_AMT, _X_NPP_OUT_SUM_DATE, _L_ACC_AMT_1D, _L_SCORE_3, _B_RECIP_SUM_AAA_6, _A_CLIENT_CITY_7, _L_ACC_AMT_1H, _A_BTS_WDL_SUM_LONG, _L_SCORE_4, _L_NEW_PAYEE_PER_USER, _A_CLIENT_CITY_2, _B_CLIENT_POSTCODE_SUM_2, _L_BC_SESS_CNT, _A_CSE_CHG_DWL_NEW_AMT, _A_CLIENT_CITY_1, _B_CLIENT_POSTCODE_CNT_5, _L_MINS_LST_LGN_CAPPED, _B_RECIP_SUM_AAA_7, _B_CLIENT_POSTCODE_CNT_2, _A_CLIENT_CITY_10, _L_NUM_SESS_2H, _N_CUST_TXN_COUNT, _B_CLIENT_POSTCODE_SUM_3, _A_PROF_CAPP_DEVICE_NFTP_1, _A_NPP_FTP_SUM2, _A_CLIENT_CITY_6, _B_CLIENT_POSTCODE_CNT_1, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_NPP_OUT_SUM_1, _A_CLIENT_CITY_8, _N_CRYPTO_RECIPIENT_CNT, _N_H_2, _A_GEO_DISTANCE, _N_CAPP_LOGONS_CNT_1, _N_CAPP_LINKED_CNT_2, _B_CLIENT_POSTCODE_SUM_4, _X_CIF_REC_SUM, _L_M_L_C, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_3, _N_CUST_STATE_IP_ACTIVITY, _A_MRISK_FOREIGN_IP_ACTIVITY, _A_PROF_CAPP_DEVICE_LATT_3, _N_RP_SES_IP_1, _A_CAPP_REGO_IP_COUNTRY, _A_CUST_STATE_IP_ACTIVITY, _A_LOGON_NB_IP_CNTRY, _A_MRISK_FOREIGN_IP_TASK_ID, _A_DEVCIE_GEO_LAT_AVG_INCL, _N_INTERSTATE_IP_ACTIVITY, _N_INTERSTATE_IP_STATE, _N_FOREIGN_IP_ACTIVITY, _A_INTERSTATE_IP_STATE, _A_INTERSTATE_IP_ACTIVITY, _A_IS_IP_DT_2, _A_INTERSTATE_IP_TASK_ID, _A_IS_IP_DT_1, _A_SAFE_CUST_LATITUDE, _A_CURR_CAPP_DEVICE_LATT, _A_FOREIGN_IP_ACTIVITY, _N_HRISK_FOREIGN_IP_ACTIVITY, _A_IS_IP_DT_3, _A_CURR_CUST_LATITUDE, _N_CLOUD_SERV_LATEST_LOGON_DT, _A_PROF_CAPP_DEVICE_LATT_1, _A_PROF_CAPP_DEVICE_LATT_2, _A_FOREIGN_IP_TASK_ID, _A_PREV_CUST_LATITUDE, _X_CIF_RECIPIENT_NEW_CNT, _X_TELSTRA_LAST_CALL_DUR, _B_CLIENT_POSTCODE_3, _B_CLIENT_POSTCODE_2, _B_CLIENT_POSTCODE_4, _A_MRISK_FOREIGN_IP_CNTRY_CODE, _N_NEW_IP_LOGON_PCODE, _A_LOGON_198_IP_PC, _A_LOGON_NB_IP_PC, _X_LAST_N_TXN_COUNT, _A_TELSTRA_TP_OUTBND_COUNT, _B_OPEN_LAST_PAYER_CIF_DT_2, _B_OPEN_LAST_PAYER_CIF_DT_3, _B_OPEN_LAST_PAYER_CIF_DT_4, _B_OPEN_LAST_PAYER_CIF_DT_5, _A_NEW_CAPP_REGO_DT, _A_CSE_CHG_DWL_DT, _A_CIF_ESTABLISH_DT, _A_NB_LASTLOGON_DT_1, _A_CURR_CAPP_DEVICE_DT, _A_TELSTRA_LONG_CALL, _A_CRYPTO_LAST_PYMNT_DATE, _N_SCAMP3_MLW_DT, _N_SCAMP4_MLW_DT, _N_SCAMP5_MLW_DT, _N_SCAMP7_MLW_DT, _N_SCAMP10_MLW_DT, _N_SCAMP20_MLW_DT, _N_SCAMP21_MLW_DT, _N_M100_P8_IND_DT, _A_M100_APP_P1_IND_DT, _N_M100_APP_P5_DT, _A_M100_APP_P8_IND_DT, _N_M100_APP_P9_DT, _X_TELSTRA_MAX_CALL_DUR, _A_CRYPTO_MNTHLY_SUM, GENDER, TRAN_ACCT_COUNT, BUSI_TRAN_COUNT, DMC_COUNT, DEPOSIT_ACCT_COUNT, TRADE_ACCT_COUNT, NAME_ORIG_ASSOC, MAIN_FOREIGN_ASSOC, GOVT_BENEFITS, BAL_LAST_MON, BAL_TWO_MON_AGO, GAMBLING_SPEND_LAST_YEAR, GAMBLING_SPEND_THREE_MON, GAMBLING_SPEND_ONE_MON, DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, DPAT_TOTL_PRSL_TRAN_FOOT_A, DPAT_TOTL_BUSN_TRAN_FOOT_A, DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, DPAT_TOTL_PRSL_TRAN_BALN_A, DPAT_TOTL_BUSN_TRAN_BALN_A, AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1, AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30, DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q, DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q, DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q, DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
from        LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_TRAINSET_13082025
-- where   ssx_snap_d < '2025-06-01' 
-- and  SSX_SNAP_D < '2025-07-16'
order by    transactiondatetime
  
-- 'CUS' or 'HIP'
-- alter table LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 SET TAG PRD_RBAC.TAGS.CLASSIFICATION_LAB = 'CUS';

-- select * from LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE1 limit 10
",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,1318264,1318.264000,21.971067,0.366184,2X-LARGE,32,11.717888
01bec08a-3204-c1f3-0000-c71d2bb6b8c2,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_TAPI_SHROFFPR as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    OR c.BAD = 1 THEN 1
    ELSE 0
  END AS final_target,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 -- TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250201 and 20250601
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",SHROFFPR,R_USR_FRAUMD_LABMLFRD_RW,1307709,1307.709000,21.795150,0.363253,2X-LARGE,32,11.624096
01be7745-3204-bba4-0000-c71d296e549a,"SELECT 
    t1.tts_tran_date_client,
    t1.tts_tran_time_client,
    REGEXP_REPLACE(LTRIM(t1._c_cmx_tran_id), '^[0-9]','') AS transactionnumber2,
    t1.ath_pc_pos,
    t1.rsp_action_code,
    t1.DTL_CA_auth_sys_dec,
    t1.DTL_CA_client_amt,
    t1.CHL_CT_term_owner_name,
    t1.dtl_ex_0_20s_004,
    t1.chl_id_card_num,
    t1.CHL_CT_mer_mcc,
    t1.dtl_ex_3_20s_001,
    t1.chl_ct_media,
    t1.dtl_ex_0_3s_002,
    t1.dtl_ca_reversal_ind,
    t1.dtl_ex_3_80s_003,
    t1._a_customer_age,
    REGEXP_REPLACE(LTRIM(t1.rsp_ex_2_30s_001), '^[0-9]','') AS transactionnumber,
    t1.ssx_cust_num
FROM
    PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT AS t1
WHERE 
    t1.ssx_cust_num in ('18881038')",SAKKAIB,R_USR_FRAUMD_LABMLFRD_RW,1299118,1299.118000,21.651967,0.360866,2X-LARGE,32,11.547712
01befeb7-3204-c93b-0000-c71d2d8b62f6,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_SHROFFPR as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    OR c.BAD = 1 
    THEN 1
    ELSE 0
  END AS final_target,
  SSX_CUST_NUM,
  DTL_EX_0_20S_001,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 7, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 7, 1) || '_v' else 'unknown' end as COMMINCOME, -- commincome bank (0-7) -- new
case when substr(_L_FINGERPRINT_3, 8, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 8, 1) || '_v' else 'unknown' end as AVG_BIO, -- average biocatch score  -- new
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   
  -- coalesce(POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10))::number(9,0) as BAL_2M, -- balance two months ago -- new

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250201 and 20250601
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",SHROFFPR,R_USR_FRAUMD_LABMLFRD_RW,1297954,1297.954000,21.632567,0.360543,2X-LARGE,32,11.537376
01bef211-3204-c93b-0000-c71d2d2dc156,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PKE2E_ENGINEER_TEST_1_20250909_234352(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1293448,1293.448000,21.557467,0.359291,2X-LARGE,32,11.497312
01bec58f-3204-c1f3-0000-c71d2bda4d02,"SELECT TOP 10000 -- Select highest 10,000 scores (assuming model runs once per day)
    'sf_nrt' as source_system,
    'CardsFraudRetro' as Job_Id,
    'CardsFraudRetro' as Job_Name,
    'CR' as Code,
    'RETRO_FRAU' as EventType,
    tran.TTS_TRAN_DATE_ALT||TO_CHAR(TO_TIME(tran.TTS_TRAN_TIME_ALT,'HH24:MI:SS.FF'),'HH24MISSFF2') AS FraudStartDate,
    tran.SSX_CUST_NUM AS CIF_ID, -- CIF
    tran.RSP_ACTION_CODE AS FingerPrint2, --  Tran response code
    TO_NUMERIC(TO_CHAR(retr.SNAP_D, 'YYYYMMDD')) as FingerPrint10, -- Model Snapshot date
    tran.CHL_ID_CARD_NUM AS FingerPrint61, --Card number
    tran.CHL_CT_TERM_CNTRY_CODE AS FingerPrint72, -- Merchant country
    tran.CHL_CT_MER_MCC AS FingerPrint74, -- Merchant MCC
    tran.CHL_CT_TERM_OWNER_NAME AS FingerPrint75, -- Merchant Name
    tran.CHL_CT_TERM_CITY AS FingerPrint83, -- Merchant City
    tran.DTL_CA_MERCH_CURR_CODE AS FingerPrint84, --Tran currency code merchant side
    retr.TRAN_IDNN_BK AS FingerPrint85, --Original Monetary Transaction ID
    tran.DTL_CA_CLIENT_CURR_CODE AS FingerPrint120, --Tran currency code customer side
    tran.DTL_CA_CLIENT_AMT AS FingerPrint191, --Tran amount customer side
    tran.DTL_CA_MERCH_AMT AS FingerPrint192, --Tran amount merchant side
    CAST(retr.MODL_SCOR_V AS FLOAT) AS FingerPrint200 --Model score
FROM
    PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_RETRO_SCORES retr
LEFT JOIN
    LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
ON
    retr.TRAN_IDNN_BK = TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066
ORDER BY 
    FingerPrint200 DESC;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,1289735,1289.735000,21.495583,0.358260,2X-LARGE,32,11.464320
01bed7ad-3204-c553-0000-c71d2c6c26ea,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_SHROFFPR as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    -- OR c.BAD = 1 
    THEN 1
    ELSE 0
  END AS final_target,
  SSX_CUST_NUM,
  DTL_EX_0_20S_001,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 -- TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
-- left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250201 and 20250601
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",SHROFFPR,R_USR_FRAUMD_LABMLFRD_RW,1288539,1288.539000,21.475650,0.357928,2X-LARGE,32,11.453696
01bec534-3204-c1f3-0000-c71d2bd863be,"SELECT
    'sf_nrt' as source_system,
    'CardsFraudRetro' as Job_Id,
    'CardsFraudRetro' as Job_Name,
    'CR' as Code,
    'RETRO_FRAU' as EventType,
    tran.TTS_TRAN_DATE_ALT||TO_CHAR(TO_TIME(tran.TTS_TRAN_TIME_ALT,'HH24:MI:SS.FF'),'HH24MISSFF2') AS FraudStartDate,
    tran.SSX_CUST_NUM AS CIF_ID, -- CIF
    tran.RSP_ACTION_CODE AS FingerPrint2, --  Tran response code
    TO_NUMERIC(TO_CHAR(retr.SNAP_D, 'YYYYMMDD')) as FingerPrint10, -- Snapshot date
    tran.CHL_ID_CARD_NUM AS FingerPrint61, --Card number
    tran.CHL_CT_TERM_CNTRY_CODE AS FingerPrint72, -- Merchant country
    tran.CHL_CT_MER_MCC AS FingerPrint74, -- Merchant MCC
    tran.CHL_CT_TERM_OWNER_NAME AS FingerPrint75, -- Merchant Name
    tran.CHL_CT_TERM_CITY AS FingerPrint83, -- Merchant City
    tran.DTL_CA_MERCH_CURR_CODE AS FingerPrint84, --Tran currency code merchant side
    retr.TRAN_IDNN_BK AS FingerPrint85, --Original Monetary Transaction ID
    tran.DTL_CA_CLIENT_CURR_CODE AS FingerPrint120, --Tran currency code customer side
    tran.DTL_CA_CLIENT_AMT AS FingerPrint191, --Tran amount customer side
    tran.DTL_CA_MERCH_AMT AS FingerPrint192, --Tran amount merchant side
    CAST(retr.MODL_SCOR_V AS FLOAT) AS FingerPrint200 --Model score

FROM
    PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_RETRO_SCORES retr
LEFT JOIN
    LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
ON
    retr.TRAN_IDNN_BK = TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,1282675,1282.675000,21.377917,0.356299,2X-LARGE,32,11.401568
01beeec4-3204-c93c-0000-c71d2d1379a2,"create or replace table FRD_ECV_NM_H20_2M as 
        
SELECT 
to_timestamp(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
SSX_CUST_NUM, 
SSX_CUST_NAME,
dtl_ex_1_5s_01, 
TGX_TRAN_AMT,
SUBSTR(dtl_ex_1_5s_01, 1, 1) as tran_made_on_cApp,
_l_acc_amt_1d,
_l_acc_amt_1h,
_l_acc_amt_2h,
_l_acc_amt_4h,
_l_acc_amt_7d,
_l_accel_event_cnt,
_l_alt_tab_cnt,
_l_and_id_age,
_l_anon_status,
_l_asn_age,
_l_bcksp_cnt,
_l_browser_age,
_l_city_age,
_l_clipb_copy_cnt,
_l_clipb_cut_cnt,
_l_clipb_event_cnt,
_l_clipb_paste_cnt,
_l_cntry_age,
_l_ctrl_tab_cnt,
_l_days_lst_dev_and,
_l_days_lst_dev_ios,
_l_days_lst_dev_js,
_l_days_lst_new_cookie,
_l_dbl_click_cnt,
_l_delete_cnt,
_l_dev_fam,
_l_dev_fam_age,
_l_dev_source,
_l_f_func_cnt,
_l_gyro_event_cnt,
_l_ip_age,
_l_ip_city,
_l_ip_cntry_code,
_l_ip_geo_ip,
_l_ip_geo_lat,
_l_ip_geo_long,
_l_ip_geo_state,
_l_is_f12,
_l_is_lh_int,
_l_is_on_call,
_l_is_priv_brows,
_l_is_rh_int,
_l_isp_age,
_l_lalt_cnt,
_l_lang_1,
_l_lang_2,
_l_lang_3,
_l_lcmd_cnt,
_l_lctrl_cnt,
_l_left_click_cnt,
_l_lshift_cnt,
_l_lst_proxy,
_l_mins_lst_lgn_capped,
_l_mouse_cnt,
_l_num_sess_2h,
_l_num_sess_4h,
_l_orient_event_cnt,
_l_overlap_sess_diff_dev,
_l_paste_in_login_cnt,
_l_priv_browsing_cnt,
_l_proxy_lvl,
_l_proxy_type,
_l_prt_scrn_cnt,
_l_ralt_cnt,
_l_rcmd_cnt,
_l_rctrl_cnt,
_l_right_click_cnt,
_l_rshift_cnt,
_l_scrn_h,
_l_scrn_w,
_l_sess_cnt_mob_browser,
_l_sess_cnt_mob_sdk,
_l_sess_cnt_web,
_l_shift_tab_cnt,
_l_swipe_cnt,
_l_tab_cnt,
_l_tap_cnt,
_l_time_zone,
_l_total_sess_cnt,
_l_touch_cnt,
_l_trvl_spd,
_l_uid_age,
_l_g_con_dev,
_l_g_con_ip,
_l_g_con_wifi,
_l_g_fluid_typing_pi,
_l_g_gen_payee,
_l_g_no_delay_to_input_pi,
_l_g_prev_used_pi,
_l_bc_event_dt,
_l_sess_id,
_l_policy_action,
_l_policy_nm,
_l_max_30d_score,
_l_bc_muid,
_l_policy_id,
_l_recip_ftp,
_l_adv_key_combo,
_l_app_togg,
_l_concurrent_sess,
_l_dev_tools,
_l_dev_change_anom,
_l_export_data,
_l_fast_traveler,
_l_frd_mac_adrs,
_l_hi_dead_time,
_l_import_export_pi,
_l_input_otp_delay,
_l_ip_mismatch_anomaly,
_l_is_active_call,
_l_is_soc_eng_rat,
_l_new_asn,
_l_new_browser,
_l_new_dev,
_l_new_dev_con_ip,
_l_new_ip,
_l_new_payee,
_l_new_user,
_l_nhuman_mouse_bhv,
_l_rare_browser,
_l_rare_cores,
_l_rare_cores_anomaly,
_l_rat_in_sess,
_l_rcnt_pmt_settings_ch,
_l_rcnt_prof_settings_ch,
_l_rcnt_req_loan,
_l_rcnt_risky_dev,
_l_risky_amt,
_l_risky_apps,
_l_risky_browser,
_l_risky_elements_int,
_l_risky_guid,
_l_risky_import_export,
_l_risky_ip,
_l_risky_isp,
_l_risky_key_combo,
_l_risky_payee,
_l_risky_wifi,
_l_tzone_mismatch,
_l_dom_hand_ch_anomaly,
_l_deleting_pi,
_l_ft_rat_app_inst,
_l_import_data,
_l_import_pi_data,
_l_is_long_sess,
_l_is_rcnt_hrisk_sess,
_l_key_mouse_anomaly,
_l_lgn_import_anomaly,
_l_delay_to_input_pi,
_l_low_fam_contact_det,
_l_mouse_doodl,
_l_new_browser_anomaly,
_l_new_desktop_user,
_l_new_mob_app_user,
_l_new_mob_browser_user,
_l_new_payee_per_user,
_l_os_ch_anomaly,
_l_priv_browsing_anomaly,
_l_type_patterns_anomaly,
_l_rcnt_linked_dev,
_l_rcnt_linked_ip,
_l_risky_import,
_l_seg_typing_pi,
_l_sim_ip_cntry_mismatch,
_l_is_bot,
_l_is_emu,
_l_is_mlw,
_l_is_mob_rat,
_l_is_rat,
_l_is_rcnt_rat,
_l_voice_scam,
_l_platform,
_l_bc_sess_cnt,
_l_bc_sess_id,
_l_m_m_1,
_l_m_m_2,
_l_m_m_3,
_l_m_m_4,
_l_m_m_5,
_l_first_rat_dt,
_l_prev_rat_dt,
_l_rat_cnt_1,
_l_rat_cnt_2,
_l_rat_cnt_3,
_l_rat_cnt_4,
_l_rat_check,
_l_score_1,
_l_score_2,
_l_score_3,
_l_score_4,
_l_score_5,
_l_score_dt_1,
_l_score_dt_2,
_l_score_dt_3,
_l_score_dt_4,
_l_score_dt_5,
_l_rare_scrn_sz,
_l_lrg_dist_known_loc,
_l_clpbrd_evnt,
_l_new_lang,
_l_scrn_res_anom,
_l_accum_amt_anom,
_l_frst_proxy,
_l_drag_n_drop,
_l_pmt_vloc_anom,
_l_flat_phone,
_l_rcnt_hi_scr_on_dev,
_l_g_con_geoloc,
_l_g_accum_amt,
_l_bank_num,
_l_acct_num,
_l_pmt_descr,
_l_pmt_amt,
_l_bpay_biller,
_l_bpay_crn,
_N_MII_ASSOC_NUM_CNT
        , _N_MII_AV_IN_CALL
        , _N_MII_AV_OUT_CALL
        , _N_MII_BRANCH_INT
        , _N_MII_CALLEE_CNT
        , _N_MII_CALLR_CNT
        , _N_MII_CALL_ACTIV
        , _N_MII_CALL_INACTIV
        , _N_MII_CUST_TENURE
        , _N_MII_DATA_ACTIV
        , _N_MII_DATA_INACTIV
        , _N_MII_DATA_USE_CH
        , _N_MII_DEV_BRAND
        , _N_MII_DEV_CNT
        , _N_MII_DEV_MNTHS
        , _N_MII_DWELL_MATCH
        , TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MII_EVENT_DT, 38, 2), '1960-01-01 00:00:00') AS _N_MII_EVENT_DT
        , _N_MII_HOME_PCODE
        , _N_MII_INB_SMS_CH
        , _N_MII_IN_CALL_CH
        , _N_MII_IN_CALL_CNT
        , _N_MII_IN_SMS_CNT
        , _N_MII_LOYALTY
        , _N_MII_MULT_PROD
        , _N_MII_NAME_MATCH
        , _N_MII_NEW_CALLEE_RATIO
        , _N_MII_NEW_CALLR_RATIO
        , _N_MII_NEW_RECIP_RATIO
        , _N_MII_NEW_SENDER_RATIO
        , _N_MII_OUT_CALL_CH
        , _N_MII_OUT_CALL_CNT
        , _N_MII_OUT_SMS_CH
        , _N_MII_OUT_SMS_CNT
        , _N_MII_PCODES_VISITED
        , _N_MII_PCODE_MATCH
        , _N_MII_SERV_CNT
        , _N_MII_SERV_TENURE
        , _N_MII_SERV_TYPE
        , _N_MII_SERV_USAGE
        , _N_MII_SIM_SWAP
        , _N_MII_SIM_SWAP_DT
        , _N_MII_SMS_ACTIV
        , _N_MII_SMS_INACTIV
        , _N_MII_SMS_RECIP_CNT
        , _N_MII_SMS_SENDER_CNT
FROM  LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT
WHERE SSX_CUST_NUM IS NOT NULL
AND mid_event_ts >= TO_CHAR(TIMESTAMPADD(month, -($trainingPeriod + 1), TO_DATE($testingStart, 'YYYY-MM-DD')), 'YYYYMMDDHH24MISSFF6') 
AND mid_event_ts < TO_CHAR(LAST_DAY(TO_DATE($testingStart, 'YYYY-MM-DD')), 'YYYYMMDDHH24MISSFF6')
AND dtl_ex_1_5s_01 in ('N508B', 'N509B', 'N510B', 'N511B','C517B', 'N522B','N524B','O001B')
;",PAULS13,R_USR_FRAUMD_LABMLFRD_RW,2556195,2556.195000,42.603250,0.710054,X-LARGE,16,11.360864
01bec4e3-3204-c1f7-0000-c71d2bd653b2,"SELECT
    'sf_nrt' as source_system,
    'CardsFraudRetro' as Job_Id,
    'CardsFraudRetro' as Job_Name,
    'CR' as Code,
    'RETRO_FRAU' as EventType,
    (tran.TTS_TRAN_DATE_ALT)||(tran.TTS_TRAN_TIME_ALT) AS FraudStartDate,
    tran.SSX_CUST_NUM AS CIF_ID, -- CIF
    tran.RSP_ACTION_CODE AS FingerPrint2, --  Tran response code
    TO_NUMERIC(TO_CHAR(retr.SNAP_D, 'YYYYMMDD')) as FingerPrint10, -- Snapshot date
    tran.CHL_ID_CARD_NUM AS FingerPrint61, --Card number
    tran.CHL_CT_TERM_CNTRY_CODE AS FingerPrint72, -- Merchant country
    tran.CHL_CT_MER_MCC AS FingerPrint74, -- Merchant MCC
    tran.CHL_CT_TERM_OWNER_NAME AS FingerPrint75, -- Merchant Name
    tran.CHL_CT_TERM_CITY AS FingerPrint83, -- Merchant City
    tran.DTL_CA_MERCH_CURR_CODE AS FingerPrint84, --Tran currency code merchant side
    retr.TRAN_IDNN_BK AS FingerPrint85, --Original Monetary Transaction ID
    tran.DTL_CA_CLIENT_CURR_CODE AS FingerPrint120, --Tran currency code customer side
    tran.DTL_CA_CLIENT_AMT AS FingerPrint191, --Tran amount customer side
    tran.DTL_CA_MERCH_AMT AS FingerPrint192, --Tran amount merchant side
    CAST(retr.MODL_SCOR_V AS FLOAT) AS FingerPrint200 --Model score

FROM
    PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_RETRO_SCORES retr
LEFT JOIN
    LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
ON
    retr.TRAN_IDNN_BK = TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,1275719,1275.719000,21.261983,0.354366,2X-LARGE,32,11.339712
01bec51a-3204-c1f7-0000-c71d2bd785b6,"SELECT
    'sf_nrt' as source_system,
    'CardsFraudRetro' as Job_Id,
    'CardsFraudRetro' as Job_Name,
    'CR' as Code,
    'RETRO_FRAU' as EventType,
    (tran.TTS_TRAN_DATE_ALT)||TO_CHAR(TO_TIME(tran.TTS_TRAN_TIME_ALT,'HH24:MI:SS.FF'),'HH24MISSFF') AS FraudStartDate,
    tran.SSX_CUST_NUM AS CIF_ID, -- CIF
    tran.RSP_ACTION_CODE AS FingerPrint2, --  Tran response code
    TO_NUMERIC(TO_CHAR(retr.SNAP_D, 'YYYYMMDD')) as FingerPrint10, -- Snapshot date
    tran.CHL_ID_CARD_NUM AS FingerPrint61, --Card number
    tran.CHL_CT_TERM_CNTRY_CODE AS FingerPrint72, -- Merchant country
    tran.CHL_CT_MER_MCC AS FingerPrint74, -- Merchant MCC
    tran.CHL_CT_TERM_OWNER_NAME AS FingerPrint75, -- Merchant Name
    tran.CHL_CT_TERM_CITY AS FingerPrint83, -- Merchant City
    tran.DTL_CA_MERCH_CURR_CODE AS FingerPrint84, --Tran currency code merchant side
    retr.TRAN_IDNN_BK AS FingerPrint85, --Original Monetary Transaction ID
    tran.DTL_CA_CLIENT_CURR_CODE AS FingerPrint120, --Tran currency code customer side
    tran.DTL_CA_CLIENT_AMT AS FingerPrint191, --Tran amount customer side
    tran.DTL_CA_MERCH_AMT AS FingerPrint192, --Tran amount merchant side
    CAST(retr.MODL_SCOR_V AS FLOAT) AS FingerPrint200 --Model score

FROM
    PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_RETRO_SCORES retr
LEFT JOIN
    LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
ON
    retr.TRAN_IDNN_BK = TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,1271054,1271.054000,21.184233,0.353071,2X-LARGE,32,11.298272
01becb09-3204-c556-0000-c71d2c0440da,"create or replace temporary table scam_tran_raw as
select	distinct case   when b.fraudtype = 'CVL' then null
                else b.fraudtype
        end as FRAUDTYPE
		,b.detection
		,b.case_detection
        ,TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
		,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
		,a.tts_tran_date_alt
		,a.tts_tran_time_alt
		,a.dtl_ex_0_20s_001
		,a.dtl_ex_1_5s_01
		,a.ssx_cust_num
		,a.chl_id_ob_userid
		,a.tgx_bank_name
		,a.tgx_bank_num
		,a.tgx_branch_id
		,a.tgx_acct_num
		,a.tgx_name
		,a.tgx_description
		,TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as TRAN_AMT
		,a.dtl_ex_0_i_002 as FTP_IND
		
		-- BioCatch UVs
		,TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE
		,TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_SCORE
        ,TRY_TO_NUMBER(a._l_max_30d_mule_score, 38, 2) as _L_MAX_30D_MULE_SCORE
		,TRY_TO_NUMBER(a._l_adv_key_combo, 38, 2) as _L_ADV_KEY_COMBO
		,TRY_TO_NUMBER(a._l_clpbrd_evnt, 38, 2) as _L_CLPBRD_EVNT
		,TRY_TO_NUMBER(a._l_concurrent_sess, 38, 2) as _L_CONCURRENT_SESS
		,TRY_TO_NUMBER(a._l_export_data, 38, 2) as _L_EXPORT_DATA
		,TRY_TO_NUMBER(a._l_import_data, 38, 2) as _L_IMPORT_DATA
		,TRY_TO_NUMBER(a._l_is_rat, 38, 2) as _L_IS_RAT
		,TRY_TO_NUMBER(a._l_is_mob_rat, 38, 2) as _L_IS_MOB_RAT
		,TRY_TO_NUMBER(a._l_rat_in_sess, 38, 2) as _L_RAT_IN_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_hrisk_sess, 38, 2) as _L_IS_RCNT_HRISK_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_rat, 38, 2) as _L_IS_RCNT_RAT
		,TRY_TO_NUMBER(a._l_lrg_dist_known_loc, 38, 2) as _L_LRG_DIST_KNOWN_LOC
		,TRY_TO_NUMBER(a._l_rare_scrn_sz, 38, 2) as _L_RARE_SCRN_SZ
		,TRY_TO_NUMBER(a._l_risky_isp, 38, 2) as _L_RISKY_ISP
		,TRY_TO_NUMBER(a._l_risky_key_combo, 38, 2) as _L_RISKY_KEY_COMBO
		,TRY_TO_NUMBER(a._l_tzone_mismatch, 38, 2) as _L_TZONE_MISMATCH
		,TRY_TO_NUMBER(a._l_scm_rsk_hgh_scr, 38, 2) as _L_SCM_RSK_HGH_SCR
		,TRY_TO_NUMBER(a._l_keyb_nav_anom, 38, 2) as _L_KEYB_NAV_ANOM
		,TRY_TO_NUMBER(a._l_scrn_broadcast, 38, 2) as _L_SCRN_BROADCAST
		,TRY_TO_NUMBER(a._l_delay_to_input_pi, 38, 2) as _L_DELAY_TO_INPUT_PI
		,TRY_TO_NUMBER(a._l_input_otp_delay, 38, 2) as _L_INPUT_OTP_DELAY
		,TRY_TO_NUMBER(a._l_active_spoofing, 38, 2) as _L_ACTIVE_SPOOFING
		,TRY_TO_NUMBER(a._l_pmt_vloc_anom, 38, 2) as _L_PMT_VLOC_ANOM
		,TRY_TO_NUMBER(a._l_rcnt_hi_scr_on_dev, 38, 2) as _L_RCNT_HI_SCR_ON_DEV
		,TRY_TO_NUMBER(a._l_accum_amt_anom, 38, 2) as _L_ACCUM_AMT_ANOM
		,TRY_TO_NUMBER(a._l_app_togg, 38, 2) as _l_APP_TOGG
		,TRY_TO_NUMBER(a._l_is_active_call, 38, 2) as _L_IS_ACTIVE_CALL
		,TRY_TO_NUMBER(a._l_is_long_sess, 38, 2) as _L_IS_LONG_SESS
		,TRY_TO_NUMBER(a._l_type_patterns_anomaly, 38, 2) as _L_TYPE_PATTERNS_ANOMALY
		,TRY_TO_NUMBER(a._l_seg_typing_pi, 38, 2) as _L_SEG_TYPING_PI

        --BC Trust
        ,TRY_TO_NUMBER(a._L_TRUST_900, 38, 2) as _L_TRUST_900
        ,TRY_TO_NUMBER(a._L_TRUST_1000, 38, 2) as _L_TRUST_1000
        ,TRY_TO_NUMBER(a._L_TRUST_NEW_PAYEE, 38, 2) as _L_TRUST_NEW_PAYEE
        ,TRY_TO_NUMBER(a._L_TRUST_UNUSED_PAYEE, 38, 2) as _L_TRUST_UNUSED_PAYEE
        ,TRY_TO_NUMBER(a._L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2) as _L_TRUST_PAYEE_HIGH_VLOC_IN 
        ,TRY_TO_NUMBER(a._L_TRUST_PAYEE_DORM_ACCT, 38, 2) as _L_TRUST_PAYEE_DORM_ACCT
        ,TRY_TO_NUMBER(a._L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE 
        ,TRY_TO_NUMBER(a._L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER 
        ,TRY_TO_NUMBER(a._L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE 
        ,TRY_TO_NUMBER(a._L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2) as _L_TRUST_RCNT_HI_SES_AS_PAYER 
        ,TRY_TO_NUMBER(a._L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE 
        ,TRY_TO_NUMBER(a._L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2) as _L_TRUST_RCNT_HI_MS_AS_PAYER       
        
		-- NameCheck UVs
		,a._l_nc_response_code
		,a._l_nc_match_name_conf
		
		-- H2O Score UVs
		,TRY_TO_NUMBER(a._l_cust_scamrisk_score, 38, 2) as _L_CUST_SCAMRISK_SCORE
		,a.dtl_ex_0_n_029
		,a.dtl_ex_0_n_034 as CERBERUS_SCORE
		
		-- Recipient Level UVs
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_short, 38, 2) as _B_RECIP_SUM_SHORT
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_long, 38, 2) as _B_RECIP_SUM_LONG
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_short, 38, 2) as _B_RECIP_FTP_CNT_SHORT
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_long, 38, 2) as _B_RECIP_FTP_CNT_LONG
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_any_cust_ftp_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_ANY_CUST_FTP_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_2
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_3
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_4
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_5
		
		-- Customer Level UVs
		,TRY_TO_NUMBER(a._a_customer_age, 38, 2) as _A_CUSTOMER_AGE
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_SHORT, 38, 2) as _A_CUST_SUM_AAA_SHORT
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_LONG, 38, 2) as _A_CUST_SUM_AAA_LONG
		,TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1
		,TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2
		,TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3
		,TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4
		,TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5
		,TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6
		,TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7
		,TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1
		,TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2
		,TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3
		,TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4
		,TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5
		,TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6
		,TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_NEW_CAPP_REGO_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CSE_CHG_DWL_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CIF_ESTABLISH_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00') as _A_NB_LASTLOGON_DT_1
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00') as _A_CURR_CAPP_DEVICE_DT
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_1, 38, 2) as _A_NB_LOGONS_CNT_1
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_2, 38, 2) as _A_NB_LOGONS_CNT_2
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_3, 38, 2) as _A_NB_LOGONS_CNT_3
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_1, 38, 2) as _A_CAPP_LOGON_CNT_1
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_2, 38, 2) as _A_CAPP_LOGON_CNT_2
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_3, 38, 2) as _A_CAPP_LOGON_CNT_3
		
		-- Customer-Recipient Relationship Level UVs
		,TRY_TO_NUMBER(a._x_cif_recipient_new_sum, 38, 2) + TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM
		,case   when a._x_cif_recipient_new_date = '0' then TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF')
                else TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00'::timestamp)
		end as _X_CIF_RECIPIENT_NEW_DATE
		,case   when a._x_cif_recipient_new_cnt = '0' then 1
                else TRY_TO_NUMBER(a._x_cif_recipient_new_cnt, 38, 2) + 1
		end as _X_CIF_RECIPIENT_NEW_CNT
		
		-- Telstra Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_TELSTRA_LONG_CALL
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_telstra_last_call_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _X_TELSTRA_LAST_CALL_DT
		,TRY_TO_NUMBER(a._x_telstra_last_call_dur, 38, 2) as _X_TELSTRA_LAST_CALL_DUR
		,TRY_TO_NUMBER(a._x_telstra_max_call_dur, 38, 2) as _X_TELSTRA_MAX_CALL_DUR
        ,a._a_telstra_active_call
        ,a._a_telstra_num_type    
        ,a._a_telstra_num_wl 
        ,a._a_telstra_tp_num_sp
        ,a._a_telstra_tp_num_prefix_type 
        ,a._a_telstra_tp_outbnd_count          
        ,a._a_telstra_tp_outbnd_avg_dur 
        ,a._a_telstra_multi_calls   
		
		-- Crypto UVs
		,TRY_TO_NUMBER(a._a_crypto_mnthly_sum, 38, 2) as _A_CRYPTO_MNTHLY_SUM
		,DATEADD(day, TRY_TO_NUMBER(a._a_crypto_last_pymnt_date, 38, 2), '1960-01-01') as _A_CRYPTO_LAST_PYMNT_DATE
		
		-- M100 Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP1_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP2_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP3_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP4_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP5_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP6_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP7_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP10_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp11_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP11_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp12_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP12_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp13_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP13_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP20_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP21_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_M100_P8_IND_DT
		
		-- M100 App Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P1_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P5_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P8_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P9_DT
 		
		-- CIF Profiling UVs
		,a._l_fingerprint_1
		,a._l_fingerprint_2
		,a._l_fingerprint_3
		,a._l_fingerprint_4
from        lcl.fdp_customer_transactions_send_flat a
left join  prd_p01_dmn_fraumd.labmlfrd.dtl_fraudmaster b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where   mid_event_ts >= '20250601'
AND     mid_event_ts <  '20250701'
and     a.dtl_ex_1_5s_01 in ('C205N'
							,'C207N'
							,'C242N'
							,'C244N'
							,'C246N'
							,'N205N'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'X232N'
							,'X243N'
							,'X246N')
and     a.hdr_source = 'NPP OUT'
and     tran_amt > 0
order by    transactiondatetime;",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,1268375,1268.375000,21.139583,0.352326,2X-LARGE,32,11.274432
01bf0e91-3204-c93b-0000-c71d2df9642e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250915_012134(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1263339,1263.339000,21.055650,0.350928,2X-LARGE,32,11.229696
01befd54-3204-c93a-0000-c71d2d80644e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250911_234833(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1261620,1261.620000,21.027000,0.350450,2X-LARGE,32,11.214400
01bf1564-3204-cccf-0000-c71d2e2efd12,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250916_062816(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250616
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1257615,1257.615000,20.960250,0.349338,2X-LARGE,32,11.178816
01bf0edc-3204-c93b-0000-c71d2dfbc06e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250915_023600(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250626
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,1255481,1255.481000,20.924683,0.348745,2X-LARGE,32,11.159840
01bf0f12-3204-c93b-0000-c71d2dfd61b2,"SELECT 
        ssx_cust_num                AS CIF
        ,chl_id_ob_userid           AS NB_ID
        ,dtl_ex_0_n_014             AS GEO_LOCATION_LATITUDE
        ,dtl_ex_0_n_013             AS GEO_LOCATION_LONGITUDE
        ,chl_ob_ip_latitude         AS IP_LOCATION_LATITUDE
        ,chl_ob_ip_longitude        AS IP_LOCATION_LONGITUDE
        ,SUBSTR(mid_event_ts,1,8) || ' - ' || SUBSTR(mid_event_ts,9,4)  AS SF_DATETIME
        ,dtl_ex_1_5s_01
FROM lcl.fdp_digital_nonmonetary_transactions_send_flat
WHERE dtl_ex_1_5s_01 in ('A0401', 'N0601')
  AND ssx_cust_num in ('549483244', '9598912') --CIF
--  AND chl_id_ob_userid in (' ') --NBID
    AND (mid_event_ts LIKE '2025%')
    --AND mid_event_ts >= TO_CHAR(TO_DATE('20250101', 'YYYYMMDD'), 'YYYYMMDDHH24MISSFF6')
    --AND mid_event_ts <= TO_CHAR(TO_DATE('20250318', 'YYYYMMDD'), 'YYYYMMDDHH24MISSFF6')
    --AND TRY_TO_NUMBER(dtl_ex_0_n_014) > 0
    
ORDER BY mid_event_ts
LIMIT 1000;",CROUCAKO,R_USR_FRAUMD_PRD_CUS,1251252,1251.252000,20.854200,0.347570,2X-LARGE,32,11.122240
01be396b-3204-b363-0000-c71d277d84be,"SELECT 
    t1.tts_tran_date_client,
    t1.tts_tran_time_client,
    REGEXP_REPLACE(LTRIM(t1._c_cmx_tran_id), '^[0-9]','') AS transactionnumber2,
    t1.ath_pc_pos,
    t1.rsp_action_code,
    t1.DTL_CA_auth_sys_dec,
    t1.DTL_CA_client_amt,
    t1.CHL_CT_term_owner_name,
    t1.dtl_ex_0_20s_004,
    t1.chl_id_card_num,
    t1.CHL_CT_mer_mcc,
    t1.dtl_ex_3_20s_001,
    t1.chl_ct_media,
    t1.dtl_ex_0_3s_002,
    t1.dtl_ca_reversal_ind,
    t1.dtl_ex_3_80s_003,
    t1._a_customer_age,
    REGEXP_REPLACE(LTRIM(t1.rsp_ex_2_30s_001), '^[0-9]','') AS transactionnumber,
    t1.ssx_cust_num
FROM
    PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT AS t1
WHERE 
    t1.ssx_cust_num in ('104456247')",SAKKAIB,R_USR_FRAUMD_LABMLFRD_RW,1250428,1250.428000,20.840467,0.347341,2X-LARGE,32,11.114912
01bf1518-3204-cccf-0000-c71d2e2c6d06,"CREATE OR REPLACE TABLE LABMLFRD.TOBY_DIGI2 AS (
WITH TOBY_EXTRACT AS (
        SELECT 
            LAST_VALUE(id_key2 IGNORE NULLS) OVER (partition by hqo_ob_userid order by tran_date, tran_time ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS ID_KEY
            ,CASENUMBER
            ,HQO_OB_USERID AS CUST_ID
            ,TO_TIMESTAMP(transactiondatetime, 'DDMONYYYY:HH24:MI:SS.FF') AS transactiondatetime
            ,TO_CHAR(TO_TIMESTAMP(transactiondatetime, 'DDMONYYYY:HH24:MI:SS.FF'), 'YYYY-MM-DD') AS DATE
            ,TO_CHAR(TO_TIMESTAMP(transactiondatetime, 'DDMONYYYY:HH24:MI:SS.FF'), 'HH24:MI:SS') AS TIME
            ,RULE_NAME
            ,RULE_DESC
            ,STRATEGY_NAME
            ,CQF_ENTITY_VALUE_O AS CARD_NUM
            ,FRAUDTYPE
            ,DESCRIPTION
            ,FRAUD_TAG
            ,COALESCE(CQF_RULE_O_ID,CQF_RULE_X_ID) AS RULE_FIRED
            ,COALESCE(CQF_RULE_VERSION_O_NBR,CQF_RULE_VERSION_X_NBR) AS RULE_VERSION
            ,RECIP_FIRST_DT
            ,CMX_TRAN_ID
            ,TPP_TRAN_AMT
            ,LOSS
            ,LHD AS DECISION
            ,CASE 
                WHEN ACTIONTAKEN = 1 THEN 'Skip'
                WHEN ACTIONTAKEN = 2 THEN 'Reschedule'
                WHEN ACTIONTAKEN = 3 THEN 'Save Pending'
                WHEN ACTIONTAKEN = 4 THEN 'Save Pending w/ Block'
                WHEN ACTIONTAKEN = 5 THEN 'Reroute'
                WHEN ACTIONTAKEN = 6 THEN 'Verified Activity'
                WHEN ACTIONTAKEN = 7 THEN 'Confirmed Fraud'
                WHEN ACTIONTAKEN = 50100 THEN 'Confirmed Fraud - Reroute'
                WHEN ACTIONTAKEN = 50110 THEN 'Suspect Scam'
                WHEN ACTIONTAKEN = 50109 THEN 'Reported Scam'
                ELSE ' '
            END AS ACTION_TAKEN
        FROM LABMLFRD.TOBY_DIGI_EXTRACT2
        )
        ,TOBY_SUMMARY AS (
            SELECT 
                CASENUMBER
                ,CUST_ID
                ,ACTION_TAKEN
                ,FRAUDTYPE
                ,COUNT(CMX_TRAN_ID) AS TOTAL_TRANS
                ,COUNT(CASE WHEN DESCRIPTION = 'NON_MON_TXN' THEN 1 END) AS TOTAL_NON_MON
                ,COUNT(DISTINCT CASE WHEN LOSS = 'Y' THEN CMX_TRAN_ID END) AS TOTAL_APPROVED_TRANS
                ,SUM(CASE WHEN LOSS = 'Y' THEN TPP_TRAN_AMT END) AS TOTAL_SUM_APPROVED 
                ,SUM(TPP_TRAN_AMT) AS TOTAL_SUM 
            FROM TOBY_EXTRACT
            WHERE ACTION_TAKEN IS NOT NULL
            AND FRAUDTYPE IS NOT NULL
            GROUP BY 1,2,3,4
        )
        ,SNOWFLAKE_DATA AS (
            SELECT DISTINCT 
                CONCAT(TO_DECIMAL(dtl_ex_0_n_064), dtl_ex_0_n_065, dtl_ex_0_n_066) as ID_KEY1
                ,TRY_TO_NUMERIC(chl_id_ob_userid) as CMX_ID
                ,TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') AS TRANSACTIONDATETIME_SF
                ,TO_CHAR(to_date(tts_tran_date_alt, 'YYYYMMDD'), 'YYYY-MM-DD') as DATE_DT
                ,TO_CHAR(TO_TIME(tts_tran_time_alt, 'HH24:MI:SS.FF'), 'HH24:MI:SS') AS TIME_DT
                ,dtl_ex_1_5s_01 as TASK_ID
                ,rsp_ex_2_30s_001 as DECISION_SF
                ,tgx_description as PAYMENT_DESC --Payment Description
                ,SSX_CUST_NUM as NB_ID -- NB ID
                ,ssx_cust_name as CUST_NAME
                ,tgx_name as RECIPIENT_NAME
                ,hdr_channel_type as CHANNEL_TYPE
                ,TRY_TO_DATE(dtl_ex_0_n_009, 'YYYYMMDD') AS CUST_DOB
                ,TRY_TO_DATE(dtl_ex_1_date_01, 'YYYYMMDD') AS CUST_EST_DATE
                ,tgx_acct_num as ACCT_NUM
                ,TRY_TO_NUMERIC(TGX_TRAN_AMT) as TRANSACTION_AMOUNT
                ,tgx_bank_name as BANK_NAME
                ,tgx_bank_num as BANK_NUM
                ,tgx_branch_id as BRANCH_ID
                ,dtl_bt_billing_ref_num as REFERENCE_NUM
                ,chl_ob_ip_cntry_code as IP_CNTRY_CODE
                ,chl_ob_ip_city as IP_CITY
                ,ssx_cust_city as CUST_CITY
                ,chl_ob_ip_address as IP_ADDRESS
                ,chl_ob_ip_address_v6 as IP_ADDRESS_V6
                ,chl_ob_ip_latitude as IP_LATITUDE
                ,chl_ob_ip_longitude as IP_LONGITUDE
                ,chl_ob_ip_isp as IP_ISP
                ,chl_ob_ip_post_code as IP_POSTODE
                ,chl_ob_device as DEVICE
                ,chl_id_device_id_type as DEVICE_TYPE
                ,dtl_ex_0_80s_001 as USER_AGENT
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_all_ftp_dt, 38, 2),'1960-01-01 00:00:00') as FTP_DATE 
                ,CASE
                    WHEN (rsp_ex_2_4s_009 in ('FTPH', 'FTPE', 'LVPE', 'EXQJ') or substr(rsp_ex_2_4s_009, 1, 1) = 'X') 
                    THEN 1 ELSE 0 END AS FTP_IND
                ,CASE
                    WHEN try_to_number(_a_telstra_existing_relation) = 0
                    AND try_to_number(_a_telstra_call_duration) >= 900
                    AND _a_telstra_active_call in ('O', 'I')
                    AND _a_telstra_num_type in ('H', 'M', 'W') THEN 1
                    ELSE 0 END AS TELSTRA_LONG_CALL
                ,REPLACE(SPLIT_PART (dtl_ex_3_40s_002,';', 1),' ', '') AS WISDOM_NUMBER
                ,SPLIT_PART (dtl_ex_3_40s_002,';', 2) AS WISDOM_ACC_NAME
                ,rsp_ex_2_4s_005 AS WISDOM_FLAG
                ,try_to_numeric(dtl_ex_0_n_023) AS WISDOM_NO_PAYMENTS
                ,try_to_date(dtl_ex_0_n_021, 'YYYYMMDD') AS WISDOM_PAYMENT_DT
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_M100_APP_P1_IND_DT, 38, 2), '1960-01-01 00:00:00') as M100_APP_P1_IND
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_M100_APP_P8_IND_DT, 38, 2), '1960-01-01 00:00:00') as M100_APP_P8_IND
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_M100_P99_IND_DT, 38, 2), '1960-01-01 00:00:00') as M100_P99_IND
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP1_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP2_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP3_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP4_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP5_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP6_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP7_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP10_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP10_MLW
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as SCAMP_MLW
                ,TRY_TO_NUMERIC(_L_BC_MULE_RISK_LVL) AS MULE_SCORE
                ,TRY_TO_NUMERIC(_L_SE_SCORE) as BC_SE_SCORE
                ,MIN(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_SE_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS min_bcse_score_30days
                ,MAX(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_SE_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS max_bcse_score_30days
                ,AVG(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_SE_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS avg_bcse_score_30days
                ,TRY_TO_NUMERIC(_L_BC_SCORE) as BC_ATO_SCORE
                ,MIN(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_ATO_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS min_bcato_score_30days
                ,MAX(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_ATO_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS max_bcato_score_30days
                ,AVG(CASE
                    WHEN TRANSACTIONDATETIME_SF >= DATEADD(DAY,-30, CURRENT_DATE) THEN BC_ATO_SCORE
                    ELSE NULL
                    END) OVER (PARTITION BY SSX_CUST_NUM ORDER BY TRANSACTIONDATETIME_SF) AS avg_bcato_score_30days
                ,TRY_TO_NUMERIC(_L_CUST_SCAMRISK_SCORE) as SUSC_SCORE
                ,TRY_TO_DECIMAL(DTL_EX_0_N_029, 38, 12) as JIS_SCORE
                ,TRY_TO_DECIMAL(dtl_ex_0_n_034, 38, 12) as CERBERUS_SCORE
                ,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_NC_EVENT_DT, 38, 2),'1960-01-01 00:00:00') as NC_EVENT_DT
                ,rsp_ex_2_4s_006 AS NC_RSP_ACTION_CODE              -- NAMECHECK RESPONSE CODE,
                ,dtl_ex_3_n_002 AS NC_CONFIDENCE                    -- NAMECHECK CONFIDENCE,
                ,CONCAT(dtl_ex_3_80s_002, dtl_ex_3_80s_003) AS NC_MATCHED_NAME -- NAMECHECK MATCHED NAME,
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2) as TRUST_RCNT_HI_ATO_AS_PAYEE -- BC TRUST UV's
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2) as TRUST_RCNT_HI_ATO_AS_PAYER
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2) as TRUST_RCNT_HI_SES_AS_PAYEE
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2) as TRUST_RCNT_HI_SES_AS_PAYER
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2) as TRUST_RCNT_HI_MS_AS_PAYEE
                ,TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2) as TRUST_RCNT_HI_MS_AS_PAYER
                FROM
                    LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
                WHERE
                hdr_source = 'NPP OUT'
                    AND (mid_event_ts >= TO_CHAR(DATE_TRUNC(MONTH,TIMESTAMPADD(MONTH, (-3), CURRENT_TIMESTAMP())),'YYYYMMDDHH24MISSFF6')
                    AND mid_event_ts < TO_CHAR(DATE_TRUNC(MONTH, CURRENT_TIMESTAMP()),'YYYYMMDDHH24MISSFF6'))
        )
        ,snowflake_nonmon AS (
        SELECT
            DISTINCT
                TRY_TO_NUMERIC(chl_id_ob_userid) AS CMX_ID_NM
                ,'NON MON TXN' AS TXN_TYPE
                ,SSX_CUST_NUM AS NB_ID_NM    -- NB ID
                ,TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') AS NM_TRANSACTIONDATETIME
                ,TO_CHAR(to_date(tts_tran_date_alt, 'YYYYMMDD'), 'YYYY-MM-DD') AS NON_MON_DATE
                ,TO_CHAR(TO_TIME(tts_tran_time_alt, 'HH24:MI:SS.FF'), 'HH24:MI:SS') AS NON_MON_TIME
                ,_N_CUST_DEVICE_KEY_1 AS CUST_DEVICE
                ,CASE 
                    WHEN dtl_ex_1_5s_01 = 'T0101' then 1 else 0 end as t0101_event -- T0101 (Telstra Scam Call Indicator)
                ,CASE
                    WHEN dtl_ex_1_5s_01 = 'A1901' then 1 else 0 end as a1901_event -- A1901 (LOAD CARD DETAILS)
                ,CASE
                    WHEN dtl_ex_1_5s_01 = 'C198' then 1 else 0 end as c198_event   -- C198(COMMSEC_LOGON)
        FROM LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT
            WHERE 
                mid_event_ts >= TO_CHAR(DATE_TRUNC(MONTH,TIMESTAMPADD(MONTH, (-3), CURRENT_TIMESTAMP())),'YYYYMMDDHH24MISSFF6')
                AND mid_event_ts < TO_CHAR(DATE_TRUNC(MONTH, CURRENT_TIMESTAMP()),'YYYYMMDDHH24MISSFF6')
            ORDER BY NM_TRANSACTIONDATETIME
            )
            ,combined_txns as (
            SELECT
                S.*
                ,SF.TASK_ID
                ,SF.PAYMENT_DESC 
                ,SF.NB_ID 
                ,SF.CUST_NAME
                ,SF.RECIPIENT_NAME
                ,SF.CHANNEL_TYPE
                ,SF.DECISION_SF
                ,SF.CUST_DOB
                ,SF.CUST_EST_DATE
                ,SF.ACCT_NUM
                ,SF.TRANSACTION_AMOUNT
                ,SF.BANK_NAME
                ,SF.BANK_NUM
                ,SF.BRANCH_ID
                ,SF.REFERENCE_NUM
                ,SF.IP_CNTRY_CODE
                ,SF.IP_CITY
                ,SF.CUST_CITY
                ,SF.IP_ADDRESS
                ,SF.IP_ADDRESS_V6
                ,SF.IP_LATITUDE
                ,SF.IP_LONGITUDE
                ,SF.IP_ISP
                ,SF.IP_POSTODE
                ,SF.DEVICE
                ,SF.DEVICE_TYPE
                ,SF.USER_AGENT
                ,SF.FTP_DATE
                ,SF.FTP_IND
                ,SF.TELSTRA_LONG_CALL
                ,SF.wisdom_number 
                ,SF.wisdom_acc_name 
                ,SF.wisdom_flag
                ,SF.wisdom_no_payments
                ,SF.WISDOM_PAYMENT_DT
                ,SF.M100_APP_P1_IND
                ,SF.M100_APP_P8_IND
                ,SF.M100_P99_IND
                ,SF.SCAMP1_MLW
                ,SF.SCAMP2_MLW
                ,SF.SCAMP3_MLW
                ,SF.SCAMP4_MLW
                ,SF.SCAMP5_MLW
                ,SF.SCAMP6_MLW
                ,SF.SCAMP7_MLW
                ,SF.SCAMP10_MLW
                ,SF.SCAMP_MLW
                ,SF.MULE_SCORE
                ,SF.BC_SE_SCORE
                ,SF.MIN_BCSE_SCORE_30DAYS
                ,SF.MAX_BCSE_SCORE_30DAYS
                ,SF.AVG_BCSE_SCORE_30DAYS
                ,SF.BC_ATO_SCORE
                ,SF.MIN_BCATO_SCORE_30DAYS
                ,SF.MAX_BCATO_SCORE_30DAYS
                ,SF.AVG_BCATO_SCORE_30DAYS
                ,SF.SUSC_SCORE
                ,SF.JIS_SCORE
                ,SF.CERBERUS_SCORE
                ,SF.NC_EVENT_DT
                ,SF.NC_RSP_ACTION_CODE
                ,SF.NC_CONFIDENCE
                ,SF.NC_MATCHED_NAME
                ,SF.TRUST_RCNT_HI_ATO_AS_PAYEE
                ,SF.TRUST_RCNT_HI_ATO_AS_PAYER
                ,SF.TRUST_RCNT_HI_SES_AS_PAYEE
                ,SF.TRUST_RCNT_HI_SES_AS_PAYER
                ,SF.TRUST_RCNT_HI_MS_AS_PAYEE
                ,SF.TRUST_RCNT_HI_MS_AS_PAYER

                ,NM.TXN_TYPE
                ,NM.NON_MON_DATE
                ,NM.NON_MON_TIME
                ,NM.CUST_DEVICE
                ,NM.t0101_event
                ,NM.a1901_event
                ,NM.c198_event

                ,TS.TOTAL_TRANS
                ,TS.TOTAL_APPROVED_TRANS
                ,TS.TOTAL_SUM_APPROVED
                ,TS.TOTAL_SUM

            FROM
                TOBY_EXTRACT S
               LEFT JOIN snowflake_data SF ON S.ID_KEY = SF.ID_KEY1
                AND S.CUST_ID = SF.CMX_ID
                AND S.DATE = SF.DATE_DT
                AND S.TIME = SF.TIME_DT

                LEFT JOIN snowflake_nonmon NM 
                ON NM.CMX_ID_NM = S.CUST_ID
                AND NM.NON_MON_DATE = S.DATE

                LEFT JOIN TOBY_SUMMARY TS
                ON S.CUST_ID = TS.CUST_ID
                AND S.CASENUMBER = TS.CASENUMBER

                ORDER BY S.CASENUMBER,S.CUST_ID, S.DATE, S.TIME
            )
            , nm_txn_count as (
            SELECT 
                cust_id, 
                date,
                sum(case when DESCRIPTION = 'NON_MON_TXN' then 1 else 0 end) AS NM_TXN_COUNT
            FROM combined_txns
            group by 1,2
         )
         select 
             a.*, 
             b.nm_txn_count
         from combined_txns a
             left join nm_txn_count b 
                 on a.cust_id = b.cust_id
                 and a.date = b.date
                 );",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,1248574,1248.574000,20.809567,0.346826,2X-LARGE,32,11.098432
01be38bf-3204-b360-0000-c71d2778c016,"SELECT 
    t1.tts_tran_date_client,
    t1.tts_tran_time_client,
    REGEXP_REPLACE(LTRIM(t1._c_cmx_tran_id), '^[0-9]','') AS transactionnumber2,
    t1.ath_pc_pos,
    t1.rsp_action_code,
    t1.DTL_CA_auth_sys_dec,
    t1.DTL_CA_client_amt,
    t1.CHL_CT_term_owner_name,
    t1.dtl_ex_0_20s_004,
    t1.chl_id_card_num,
    t1.CHL_CT_mer_mcc,
    t1.dtl_ex_3_20s_001,
    t1.chl_ct_media,
    t1.dtl_ex_0_3s_002,
    t1.dtl_ca_reversal_ind,
    t1.dtl_ex_3_80s_003,
    t1._a_customer_age,
    REGEXP_REPLACE(LTRIM(t1.rsp_ex_2_30s_001), '^[0-9]','') AS transactionnumber,
    t1.ssx_cust_num
FROM
    PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT AS t1
WHERE 
t1.ssx_cust_num in ('19780001', '581165728', '14860347')",SAKKAIB,R_USR_FRAUMD_LABMLFRD_RW,1247037,1247.037000,20.783950,0.346399,2X-LARGE,32,11.084768
01bdfa31-3204-aa1e-0000-c71d25b5f65e,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""RSP_ACTION_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_CUST_SPEND_SUM_AAA_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_CC_RECOV_TRANS_SUM_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_C_N3D_TST_CNT_1"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_AUTH_COUNT"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_Q_NON_AU_IND"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_C_CC_GBL_N3D_1D_CNT_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CC_SFW_GOOGLE_CNT_2"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""_Q_COF_DECL_CNT_DAY_1"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_L_MAX_30D_SCORE_H2O"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_L_ACC_AMT_7D"" DOUBLE, ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_C_CRD_DOM_CNP_HV_SUM_1"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""CHL_CT_TERM_OWNER_ID"" STRING(16777216), ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_A_Q"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_3"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""_A_GEO_LONG_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_2"" DOUBLE, ""_C_N3D_MERC_ID_1"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_2"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, DTL_EX_3_8S_009, _M_TOTAL_COUNT, DTL_CA_AUTH_SYS_INFO, _C_CC_GBL_N3D_SUM_1, _C_CC_GBL_N3D_CNT_1, _C_N3D_OVS_6H_SUM_1, DTL_CA_MERCH_CURR_CODE, _C_CRD_SAFE_MERCHANT, RSP_ACTION_CODE, _Q_MER_FRAUD_SCORE_CNT_6, DTL_EX_3_20S_004, _Q_KEYED_APVD_CNT_DAY_1, _A_CUST_SPEND_SUM_AAA_1, _C_N3D_MERC_ID_SUM_2, _C_CC_RECOV_TRANS_SUM_1, _A_D_D_1, ATH_PC_CUST_PRESENT, _Q_MER_FRAUD_SCORE_CNT_5, ATH_PC_ACS_REFER_CODE, _Q_MER_FRAUD_SCORE_SUM_6, _C_N3D_MERC_ID_SUM_1, _L_BC_SESS_ID, _C_N3D_TST_CNT_1, _M_FIRST_USE_DATE, _Q_AUTH_COUNT, _M_TOTAL_SUM, _C_2WAY_5X_CRD_CNT, _Q_MER_FRAUD_SCORE_CNT_3, CHL_CT_TERM_CNTRY_CODE, _A_BTS_CUST_AGE, _C_N3D_MERC_ID_SUM_3, _Q_NON_AU_IND, _A_CRD_NPP_PAYMENT_AMOUNT, _C_CC_GBL_N3D_1D_CNT_1, DTL_EX_3_80S_001, _C_CRD_VISA_MERC_SUM_1, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_2, _C_CC_SFW_GOOGLE_CNT_2, _A_D_D_3, _Q_COF_DECL_CNT_DAY_1, _A_AUS_IP_ACTIVITY, _A_BTS_CUST_DOB, _L_MAX_30D_SCORE_H2O, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _C_CC_2DAY_AMT_6, _A_D_D_2, _L_ACC_AMT_7D, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _A_PROF_CAPP_DEVICE_1, _C_CRD_DOM_CNP_HV_SUM_1, _L_BC_SCORE_H2O, _C_CC_CNP_VEL_6HR_COUNT_1, CHL_CT_TERM_OWNER_ID, _C_CC_OS_FB_CNT_3, _A_Q, _Q_MER_FRAUD_SCORE_SUM_1, _C_CRD_DOM_CNP_HV_CNT_1, _Q_MER_FRAUD_SCORE_SUM_3, _C_CRD_3D_TRN_SUM_1, _A_GEO_LONG_1, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_1, _C_CC_GBL_N3D_CNT_2, CHL_CT_MER_MCC
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250717 and 20250727
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1246626,1246.626000,20.777100,0.346285,2X-LARGE,32,11.081120
01be283f-3204-afed-0000-c71d27022a82,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""F2KSZQG4AD3S4ZO0""()",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,1245695,1245.695000,20.761583,0.346026,2X-LARGE,32,11.072832
01bdf9ff-3204-aa1e-0000-c71d25b40bc2,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""RSP_ACTION_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_CUST_SPEND_SUM_AAA_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_CC_RECOV_TRANS_SUM_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_C_N3D_TST_CNT_1"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_AUTH_COUNT"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_Q_NON_AU_IND"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_C_CC_GBL_N3D_1D_CNT_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CC_SFW_GOOGLE_CNT_2"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""_Q_COF_DECL_CNT_DAY_1"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_L_MAX_30D_SCORE_H2O"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_L_ACC_AMT_7D"" DOUBLE, ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_C_CRD_DOM_CNP_HV_SUM_1"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""CHL_CT_TERM_OWNER_ID"" STRING(16777216), ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_A_Q"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_3"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""_A_GEO_LONG_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_2"" DOUBLE, ""_C_N3D_MERC_ID_1"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_2"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, DTL_EX_3_8S_009, _M_TOTAL_COUNT, DTL_CA_AUTH_SYS_INFO, _C_CC_GBL_N3D_SUM_1, _C_CC_GBL_N3D_CNT_1, _C_N3D_OVS_6H_SUM_1, DTL_CA_MERCH_CURR_CODE, _C_CRD_SAFE_MERCHANT, RSP_ACTION_CODE, _Q_MER_FRAUD_SCORE_CNT_6, DTL_EX_3_20S_004, _Q_KEYED_APVD_CNT_DAY_1, _A_CUST_SPEND_SUM_AAA_1, _C_N3D_MERC_ID_SUM_2, _C_CC_RECOV_TRANS_SUM_1, _A_D_D_1, ATH_PC_CUST_PRESENT, _Q_MER_FRAUD_SCORE_CNT_5, ATH_PC_ACS_REFER_CODE, _Q_MER_FRAUD_SCORE_SUM_6, _C_N3D_MERC_ID_SUM_1, _L_BC_SESS_ID, _C_N3D_TST_CNT_1, _M_FIRST_USE_DATE, _Q_AUTH_COUNT, _M_TOTAL_SUM, _C_2WAY_5X_CRD_CNT, _Q_MER_FRAUD_SCORE_CNT_3, CHL_CT_TERM_CNTRY_CODE, _A_BTS_CUST_AGE, _C_N3D_MERC_ID_SUM_3, _Q_NON_AU_IND, _A_CRD_NPP_PAYMENT_AMOUNT, _C_CC_GBL_N3D_1D_CNT_1, DTL_EX_3_80S_001, _C_CRD_VISA_MERC_SUM_1, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_2, _C_CC_SFW_GOOGLE_CNT_2, _A_D_D_3, _Q_COF_DECL_CNT_DAY_1, _A_AUS_IP_ACTIVITY, _A_BTS_CUST_DOB, _L_MAX_30D_SCORE_H2O, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _C_CC_2DAY_AMT_6, _A_D_D_2, _L_ACC_AMT_7D, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _A_PROF_CAPP_DEVICE_1, _C_CRD_DOM_CNP_HV_SUM_1, _L_BC_SCORE_H2O, _C_CC_CNP_VEL_6HR_COUNT_1, CHL_CT_TERM_OWNER_ID, _C_CC_OS_FB_CNT_3, _A_Q, _Q_MER_FRAUD_SCORE_SUM_1, _C_CRD_DOM_CNP_HV_CNT_1, _Q_MER_FRAUD_SCORE_SUM_3, _C_CRD_3D_TRN_SUM_1, _A_GEO_LONG_1, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_1, _C_CC_GBL_N3D_CNT_2, CHL_CT_MER_MCC
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250725 and 20250727
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,1223407,1223.407000,20.390117,0.339835,2X-LARGE,32,10.874720
01bee78f-3204-c554-0000-c71d2cdb82a2,"SELECT DISTINCT
TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS TRAN_I
, CHL_ID_CARD_NUM AS card_num
, TO_DATE(TTS_TRAN_DATE_ALT, 'YYYYMMDD') AS tran_date1
, TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRANSACTIONDATETIME
, CHL_CT_MER_MCC AS mcc
, dtl_ca_client_amt AS amount
, chl_ct_term_owner_name AS merchant_name1
, chl_ct_acq_id as acquirer_id
, chl_ct_term_cntry_code As HCT_TERM_CNTRY_CODE
, case 
    when dtl_ca_auth_sys_dec = '1' and rsp_action_code = '1' then 'Approved'
    else 'Declined' 
    end as approve_decline_flag
, case 
    when chl_ct_term_cntry_code = '036' then 'Domestic' 
    else 'Cross Border' 
    end as xb_dom_flag
, case
    when dtl_ex_0_3s_002 in ('211' ,'212','242')
    then '3DS' 
    else 'Non-3DS' 
    end as three_d_flag
, dtl_ex_0_3s_002 as three_d_sli
, case
    when ath_pc_cust_present = '0' then 'CP'
    when ath_pc_cust_present = '1' then 'CNP, unspecified'
    when ath_pc_cust_present = '2' then 'CNP, Mail Order'
    when ath_pc_cust_present = '3' then 'CNP, Telephone Order'
    when ath_pc_cust_present = '4' then 'CNP, Recurring'
    when ath_pc_cust_present = '5' then 'CNP, Ecommerce'
    else 'Others' end as channel
, ath_pc_cust_present AS UCM_CUST_PRESENT
, ath_pc_pos AS UCM_POS
, SUBSTR(dtl_ex_3_20s_004,1,3) as wallet_id
, TRY_TO_NUMBER(dtl_ex_3_8s_004) as di_score
, dtl_ex_3_8s_007 as di_reason
, dtl_ex_0_80s_002 as auth_iq
, dtl_ex_0_i_018 as txn_status
, dtl_ex_0_n_009 as dob
, dtl_ex_0_20s_004
, dtl_ex_3_20s_001
, dtl_ex_3_20s_004
FROM 
FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
WHERE
MID_EVENT_TS >= TO_CHAR(TO_DATE($INPUT_S), 'YYYYMMDDHH24MISSFF6')
AND MID_EVENT_TS < TO_CHAR(TO_DATE($INPUT_E), 'YYYYMMDDHH24MISSFF6')
AND TO_TIMESTAMP(TTS_TRAN_DATE_ALT || TTS_TRAN_TIME_ALT, 'YYYYMMDDHH24:MI:SS.FF') >= TO_DATE($INPUT_S)
AND TO_TIMESTAMP(TTS_TRAN_DATE_ALT || TTS_TRAN_TIME_ALT, 'YYYYMMDDHH24:MI:SS.FF') < TO_DATE($INPUT_E)
AND HDR_ACTIVITY_TYPE = 'CA'
AND SSX_CUST_NUM != ''
AND CHL_ID_CARD_NUM != ''
AND SUBSTR(CHL_ID_CARD_NUM,1,1) in ('5')
AND dtl_ca_client_amt >= 0
AND SUBSTR(CHL_ID_CARD_NUM,1,16) in 
('5523504401288772',
'5523504401285372',
'5523504401302466',
'5353161407448234',
'5523504401313216',
'5523504401304090',
'5523504401312069',
'5523504401307234',
'5523504401305998',
'5353161407407008');",JAINR29,R_USR_FRAUMD_LABMLFRD_RW,2420719,2420.719000,40.345317,0.672422,X-LARGE,16,10.758752
