TOTAL_ELAPSED_TIME_MINS,GB_SCANNED,BYTES_SPILLED_TO_LOCAL_STORAGE,BYTES_SPILLED_TO_REMOTE_STORAGE,QUERY_TEXT,USER_NAME,ROLE_NAME,WAREHOUSE_NAME,WAREHOUSE_SIZE,EXECUTION_STATUS,START_TIME,END_TIME
139.035850,41.502846032381,11657791279104,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
    order by tran_d
),
hourly_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
),
all_dates AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT cust_i, merc_i, acqr_i FROM PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl where tran_d between '2025-03-01' and '2025-05-31') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.cust_i = hd.cust_i AND ad.merc_i = hd.merc_i AND ad.acqr_i = hd.acqr_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    cust_i, -- as ssx_cust_num,
    merc_i,
    acqr_i,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMA_SUM_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    CMA_SUM_TRAN_SUM_N,
    CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_SUM_N,
    CMA_SUM_FINL_APRD_TRAN_SUM_N,
    CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    CMA_SUM_DOMS_TRAN_CNT_Q,
    CMA_SUM_OSEA_TRAN_CNT_Q,
    CMA_SUM_DOMS_TRAN_SUM_N,
    CMA_SUM_OSEA_TRAN_SUM_N,
    CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMA_SUM_3DS_TRAN_CNT_Q,
    CMA_SUM_N3D_TRAN_CNT_Q,
    CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMA_SUM_3DS_TRAN_SUM_N,
    CMA_SUM_N3D_TRAN_SUM_N,
    CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    CMA_SUM_ATM_TRAN_CNT_Q,
    CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    CMA_SUM_CHIP_TRAN_CNT_Q,
    CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    CMA_SUM_CARD_PRES_TRAN_SUM_N,
    CMA_SUM_ATM_TRAN_SUM_N,
    CMA_SUM_FALL_BACK_TRAN_SUM_N,
    CMA_SUM_CHIP_TRAN_SUM_N,
    CMA_SUM_PAY_PASS_TRAN_SUM_N,
    CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    cust_i,
    merc_i,
    acqr_i,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-26 06:40:21.513 Z,2025-08-26 08:59:23.664 Z
44.985583,1796.402906805277,2946484486144,0,"CREATE OR REPLACE TABLE PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D AS
SELECT 
    a.*,
    b.CUS_SUM_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_CNT_Q,
    b.CUS_SUM_TRAN_SUM_N,
    b.CUS_SUM_UPST_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_RULE_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_FINL_APRD_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_SUM_N,
    b.CUS_SUM_FINL_APRD_TRAN_SUM_N,
    b.CUS_SUM_FDP_RULE_TRIG_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_CNT_Q,
    b.CUS_SUM_OSEA_TRAN_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_SUM_N,
    b.CUS_SUM_OSEA_TRAN_SUM_N,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    b.CUS_SUM_3DS_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    b.CUS_SUM_N3D_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    b.CUS_SUM_3DS_TRAN_SUM_N as CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    b.CUS_SUM_N3D_TRAN_SUM_N as CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    b.CUS_SUM_CARD_PRES_TRAN_CNT_Q,
    b.CUS_SUM_ATM_TRAN_CNT_Q,
    b.CUS_SUM_FALL_BACK_TRAN_CNT_Q,
    b.CUS_SUM_CHIP_TRAN_CNT_Q,
    b.CUS_SUM_PAY_PASS_TRAN_CNT_Q,
    b.CUS_SUM_CARD_PRES_TRAN_SUM_N,
    b.CUS_SUM_ATM_TRAN_SUM_N,
    b.CUS_SUM_FALL_BACK_TRAN_SUM_N,
    b.CUS_SUM_CHIP_TRAN_SUM_N,
    b.CUS_SUM_PAY_PASS_TRAN_SUM_N,
    b.CUS_SUM_CAPP_PSWD_CHNG_CNT_Q,
    b.CUS_SUM_CAPP_DVIC_REGR_CNT_Q,
    b.CUS_SUM_CAPP_LOGN_CNT_Q,
    b.CUS_SUM_NTB_LOGN_CNT_Q,
    b.CUS_SUM_VIEW_CARD_DETL_CNT_Q,
    b.CUS_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    b.CUS_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    b.CUS_MAX_CUV_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_RULE_FLAG,
    d.CRD_SUM_TRAN_CNT_Q,
    d.CRD_SUM_UPST_APRD_TRAN_CNT_Q,
    d.CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_FINL_APRD_TRAN_CNT_Q,
    d.CRD_SUM_INCO_EXPY_CNT_Q,
    d.CRD_SUM_INCO_CVVA_CNT_Q,
    d.CRD_SUM_INCO_PIN_CNT_Q,
    d.CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
    d.CRD_SUM_TRAN_SUM_N,
    d.CRD_SUM_UPST_APRD_TRAN_SUM_N,
    d.CRD_SUM_UPST_DCLN_TRAN_SUM_N,
    d.CRD_SUM_RULE_DCLN_TRAN_SUM_N,
    d.CRD_SUM_FINL_APRD_TRAN_SUM_N,
    d.CRD_SUM_INCO_EXPY_SUM_N,
    d.CRD_SUM_INCO_CVVA_SUM_N,
    d.CRD_SUM_INCO_PIN_SUM_N,
    d.CRD_SUM_OVER_LIMT_DCLN_SUM_N,
    d.CRD_SUM_FDP_RULE_TRIG_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_CNT_Q,
    d.CRD_SUM_OSEA_TRAN_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_SUM_N,
    d.CRD_SUM_OSEA_TRAN_SUM_N,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    d.CRD_SUM_3DS_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    d.CRD_SUM_N3D_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    d.CRD_SUM_3DS_TRAN_SUM_N as CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    d.CRD_SUM_N3D_TRAN_SUM_N as CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    d.CRD_SUM_CARD_PRES_TRAN_CNT_Q,
    d.CRD_SUM_ATM_TRAN_CNT_Q,
    d.CRD_SUM_FALL_BACK_TRAN_CNT_Q,
    d.CRD_SUM_CHIP_TRAN_CNT_Q,
    d.CRD_SUM_PAY_PASS_TRAN_CNT_Q,
    d.CRD_SUM_CARD_PRES_TRAN_SUM_N,
    d.CRD_SUM_ATM_TRAN_SUM_N,
    d.CRD_SUM_FALL_BACK_TRAN_SUM_N,
    d.CRD_SUM_CHIP_TRAN_SUM_N,
    d.CRD_SUM_PAY_PASS_TRAN_SUM_N,
    d.CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
    d.CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
    d.CRD_SUM_CAPP_LOGN_CNT_Q,
    d.CRD_SUM_NTB_LOGN_CNT_Q,
    d.CRD_SUM_VIEW_CARD_DETL_CNT_Q,
    d.CRD_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_HIGH_RISK_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_FRAU_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_WHLI_F as CRD_MAX_CARD_USER_VARY_WHLI_F,
    d.CRD_MAX_CUV_DO_NOT_CTCT_F as CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F,
    f.CMA_SUM_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    f.CMA_SUM_TRAN_SUM_N,
    f.CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_SUM_N,
    f.CMA_SUM_FINL_APRD_TRAN_SUM_N,
    f.CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_CNT_Q,
    f.CMA_SUM_OSEA_TRAN_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_SUM_N,
    f.CMA_SUM_OSEA_TRAN_SUM_N,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    f.CMA_SUM_3DS_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    f.CMA_SUM_N3D_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    f.CMA_SUM_3DS_TRAN_SUM_N as CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    f.CMA_SUM_N3D_TRAN_SUM_N as CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    f.CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    f.CMA_SUM_ATM_TRAN_CNT_Q,
    f.CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    f.CMA_SUM_CHIP_TRAN_CNT_Q,
    f.CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    f.CMA_SUM_CARD_PRES_TRAN_SUM_N,
    f.CMA_SUM_ATM_TRAN_SUM_N,
    f.CMA_SUM_FALL_BACK_TRAN_SUM_N,
    f.CMA_SUM_CHIP_TRAN_SUM_N,
    f.CMA_SUM_PAY_PASS_TRAN_SUM_N,
    f.CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    f.CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    f.CMA_MAX_CUV_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_RULE_FLAG,
    g.CMC_SUM_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    g.CMC_SUM_TRAN_SUM_N,
    g.CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_SUM_N,
    g.CMC_SUM_FINL_APRD_TRAN_SUM_N,
    g.CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_CNT_Q,
    g.CMC_SUM_OSEA_TRAN_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_SUM_N,
    g.CMC_SUM_OSEA_TRAN_SUM_N,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    g.CMC_SUM_3DS_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    g.CMC_SUM_N3D_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    g.CMC_SUM_3DS_TRAN_SUM_N as CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    g.CMC_SUM_N3D_TRAN_SUM_N as CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    g.CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    g.CMC_SUM_ATM_TRAN_CNT_Q,
    g.CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    g.CMC_SUM_CHIP_TRAN_CNT_Q,
    g.CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    g.CMC_SUM_CARD_PRES_TRAN_SUM_N,
    g.CMC_SUM_ATM_TRAN_SUM_N,
    g.CMC_SUM_FALL_BACK_TRAN_SUM_N,
    g.CMC_SUM_CHIP_TRAN_SUM_N,
    g.CMC_SUM_PAY_PASS_TRAN_SUM_N,
    g.CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    g.CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    g.CMC_MAX_CUV_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_RULE_FLAG,
    h.MAQ_SUM_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_TRAN_SUM_N,
    h.MAQ_SUM_UPST_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_RULE_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_FINL_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FINL_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FDP_RULE_TRIG_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_CNT_Q,
    h.MAQ_SUM_OSEA_TRAN_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_SUM_N,
    h.MAQ_SUM_OSEA_TRAN_SUM_N,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_3DS_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    h.MAQ_SUM_N3D_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    h.MAQ_SUM_3DS_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    h.MAQ_SUM_N3D_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    h.MAQ_SUM_CARD_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_ATM_TRAN_CNT_Q,
    h.MAQ_SUM_FALL_BACK_TRAN_CNT_Q,
    h.MAQ_SUM_CHIP_TRAN_CNT_Q,
    h.MAQ_SUM_PAY_PASS_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_PRES_TRAN_SUM_N,
    h.MAQ_SUM_ATM_TRAN_SUM_N,
    h.MAQ_SUM_FALL_BACK_TRAN_SUM_N,
    h.MAQ_SUM_CHIP_TRAN_SUM_N,
    h.MAQ_SUM_PAY_PASS_TRAN_SUM_N
FROM 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT a
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_tran_prfl_agg2d b
ON 
    a.ssx_cust_num = b.cust_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = b.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_card_tran_prfl_agg2d d
ON 
    a.CHL_ID_CARD_NUM = d.card_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = d.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg2d f
ON 
    a.ssx_cust_num = f.cust_i and a.chl_ct_term_owner_id = f.merc_i and a.chl_ct_acq_id = f.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = f.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg2d g
ON 
    a.CHL_ID_CARD_NUM = g.card_i and a.chl_ct_mer_mcc = g.merc_catg_c
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = g.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_merc_acqr_tran_prfl_agg2d h
ON 
    a.chl_ct_term_owner_id = h.merc_i and a.chl_ct_acq_id = h.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = h.WINDOW_START_DATE

;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-26 16:14:29.976 Z,2025-08-26 16:59:29.111 Z
120.225833,37.251006186008,940010229760,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_card_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        INCO_EXPY_CNT_Q,
        INCO_CVVA_CNT_Q,
        INCO_PIN_CNT_Q,
        OVER_LIMT_DCLN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        UPST_DCLN_TRAN_SUM_N,
        RULE_DCLN_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        INCO_EXPY_SUM_N,
        INCO_CVVA_SUM_N,
        INCO_PIN_SUM_N,
        OVER_LIMT_DCLN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CAPP_PSWD_CHNG_CNT_Q,
        CAPP_DVIC_REGR_CNT_Q,
        CAPP_LOGN_CNT_Q,
        NTB_LOGN_CNT_Q,
        VIEW_CARD_DETL_CNT_Q,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F,
        CUV_WHLI_F,
        CUV_DO_NOT_CTCT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.card_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
),
all_dates AS (
    SELECT
        card_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i FROM PRD_P01_DMN_FRAUMD.lcl.card_tran_prfl where tran_d between '2025-03-01' and '2025-05-31') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.INCO_EXPY_CNT_Q), 0) AS DAILY_INCO_EXPY_CNT_Q,
        COALESCE(SUM(hd.INCO_CVVA_CNT_Q), 0) AS DAILY_INCO_CVVA_CNT_Q,
        COALESCE(SUM(hd.INCO_PIN_CNT_Q), 0) AS DAILY_INCO_PIN_CNT_Q,
        COALESCE(SUM(hd.OVER_LIMT_DCLN_CNT_Q), 0) AS DAILY_OVER_LIMT_DCLN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_SUM_N), 0) AS DAILY_UPST_DCLN_TRAN_SUM_N,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_SUM_N), 0) AS DAILY_RULE_DCLN_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.INCO_EXPY_SUM_N), 0) AS DAILY_INCO_EXPY_SUM_N,
        COALESCE(SUM(hd.INCO_CVVA_SUM_N), 0) AS DAILY_INCO_CVVA_SUM_N,
        COALESCE(SUM(hd.INCO_PIN_SUM_N), 0) AS DAILY_INCO_PIN_SUM_N,
        COALESCE(SUM(hd.OVER_LIMT_DCLN_SUM_N), 0) AS DAILY_OVER_LIMT_DCLN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(SUM(hd.CAPP_PSWD_CHNG_CNT_Q), 0) AS DAILY_CAPP_PSWD_CHNG_CNT_Q,
        COALESCE(SUM(hd.CAPP_DVIC_REGR_CNT_Q), 0) AS DAILY_CAPP_DVIC_REGR_CNT_Q,
        COALESCE(SUM(hd.CAPP_LOGN_CNT_Q), 0) AS DAILY_CAPP_LOGN_CNT_Q,
        COALESCE(SUM(hd.NTB_LOGN_CNT_Q), 0) AS DAILY_NTB_LOGN_CNT_Q,
        COALESCE(SUM(hd.VIEW_CARD_DETL_CNT_Q), 0) AS DAILY_VIEW_CARD_DETL_CNT_Q,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_WHLI_F), 0) AS DAILY_CUV_WHLI_F,
        COALESCE(MAX(hd.CUV_DO_NOT_CTCT_F), 0) AS DAILY_CUV_DO_NOT_CTCT_F

    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_INCO_EXPY_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_EXPY_CNT_Q,
        SUM(DAILY_INCO_CVVA_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_CVVA_CNT_Q,
        SUM(DAILY_INCO_PIN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_PIN_CNT_Q,
        SUM(DAILY_OVER_LIMT_DCLN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_UPST_DCLN_TRAN_SUM_N,
        SUM(DAILY_RULE_DCLN_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_RULE_DCLN_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_INCO_EXPY_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_EXPY_SUM_N,
        SUM(DAILY_INCO_CVVA_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_CVVA_SUM_N,
        SUM(DAILY_INCO_PIN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_INCO_PIN_SUM_N,
        SUM(DAILY_OVER_LIMT_DCLN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_OVER_LIMT_DCLN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_PAY_PASS_TRAN_SUM_N,
        SUM(DAILY_CAPP_PSWD_CHNG_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
        SUM(DAILY_CAPP_DVIC_REGR_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
        SUM(DAILY_CAPP_LOGN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_CAPP_LOGN_CNT_Q,
        SUM(DAILY_NTB_LOGN_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_NTB_LOGN_CNT_Q,
        SUM(DAILY_VIEW_CARD_DETL_CNT_Q) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_SUM_VIEW_CARD_DETL_CNT_Q,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_MAX_CUV_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_WHLI_F) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_MAX_CUV_WHLI_F,
        MAX(DAILY_CUV_DO_NOT_CTCT_F) OVER (PARTITION BY card_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CRD_MAX_CUV_DO_NOT_CTCT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CRD_SUM_TRAN_CNT_Q,
    CRD_SUM_UPST_APRD_TRAN_CNT_Q,
    CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
    CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
    CRD_SUM_FINL_APRD_TRAN_CNT_Q,
    CRD_SUM_INCO_EXPY_CNT_Q,
    CRD_SUM_INCO_CVVA_CNT_Q,
    CRD_SUM_INCO_PIN_CNT_Q,
    CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
    CRD_SUM_TRAN_SUM_N,
    CRD_SUM_UPST_APRD_TRAN_SUM_N,
    CRD_SUM_UPST_DCLN_TRAN_SUM_N,
    CRD_SUM_RULE_DCLN_TRAN_SUM_N,
    CRD_SUM_FINL_APRD_TRAN_SUM_N,
    CRD_SUM_INCO_EXPY_SUM_N,
    CRD_SUM_INCO_CVVA_SUM_N,
    CRD_SUM_INCO_PIN_SUM_N,
    CRD_SUM_OVER_LIMT_DCLN_SUM_N,
    CRD_SUM_FDP_RULE_TRIG_CNT_Q,
    CRD_SUM_DOMS_TRAN_CNT_Q,
    CRD_SUM_OSEA_TRAN_CNT_Q,
    CRD_SUM_DOMS_TRAN_SUM_N,
    CRD_SUM_OSEA_TRAN_SUM_N,
    CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CRD_SUM_3DS_TRAN_CNT_Q,
    CRD_SUM_N3D_TRAN_CNT_Q,
    CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CRD_SUM_3DS_TRAN_SUM_N,
    CRD_SUM_N3D_TRAN_SUM_N,
    CRD_SUM_CARD_PRES_TRAN_CNT_Q,
    CRD_SUM_ATM_TRAN_CNT_Q,
    CRD_SUM_FALL_BACK_TRAN_CNT_Q,
    CRD_SUM_CHIP_TRAN_CNT_Q,
    CRD_SUM_PAY_PASS_TRAN_CNT_Q,
    CRD_SUM_CARD_PRES_TRAN_SUM_N,
    CRD_SUM_ATM_TRAN_SUM_N,
    CRD_SUM_FALL_BACK_TRAN_SUM_N,
    CRD_SUM_CHIP_TRAN_SUM_N,
    CRD_SUM_PAY_PASS_TRAN_SUM_N,
    CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
    CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
    CRD_SUM_CAPP_LOGN_CNT_Q,
    CRD_SUM_NTB_LOGN_CNT_Q,
    CRD_SUM_VIEW_CARD_DETL_CNT_Q,
    CRD_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CRD_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CRD_MAX_CUV_RULE_PUSH_SENT_F,
    CRD_MAX_CUV_WHLI_F,
    CRD_MAX_CUV_DO_NOT_CTCT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_001,X-Small,SUCCESS,2025-08-26 10:38:26.765 Z,2025-08-26 12:38:40.315 Z
81.991400,0.545743450522,0,0,"SELECT  *  FROM ( SELECT ""TRANSACTION_DATE_YMD"" FROM ( SELECT to_char(to_date(""TRANSACTIONDATETIME""), 'YYYY-MM-DD') AS ""TRANSACTION_DATE_YMD"" FROM LABMLFRD.TBL_DIM_MULTI_RULE_FIRE_VW3) GROUP BY ""TRANSACTION_DATE_YMD"") ORDER BY ""TRANSACTION_DATE_YMD"" DESC NULLS LAST LIMIT 10",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-28 21:20:24.268 Z,2025-08-28 22:42:23.752 Z
47.279883,10127.184993252158,0,0,"create or replace table FRD_ECV_NM_H20_2M as 
        
SELECT 
to_timestamp(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
SSX_CUST_NUM, 
SSX_CUST_NAME,
dtl_ex_1_5s_01, 
TGX_TRAN_AMT,
SUBSTR(dtl_ex_1_5s_01, 1, 1) as tran_made_on_cApp,
_l_acc_amt_1d,
_l_acc_amt_1h,
_l_acc_amt_2h,
_l_acc_amt_4h,
_l_acc_amt_7d,
_l_accel_event_cnt,
_l_alt_tab_cnt,
_l_and_id_age,
_l_anon_status,
_l_asn_age,
_l_bcksp_cnt,
_l_browser_age,
_l_city_age,
_l_clipb_copy_cnt,
_l_clipb_cut_cnt,
_l_clipb_event_cnt,
_l_clipb_paste_cnt,
_l_cntry_age,
_l_ctrl_tab_cnt,
_l_days_lst_dev_and,
_l_days_lst_dev_ios,
_l_days_lst_dev_js,
_l_days_lst_new_cookie,
_l_dbl_click_cnt,
_l_delete_cnt,
_l_dev_fam,
_l_dev_fam_age,
_l_dev_source,
_l_f_func_cnt,
_l_gyro_event_cnt,
_l_ip_age,
_l_ip_city,
_l_ip_cntry_code,
_l_ip_geo_ip,
_l_ip_geo_lat,
_l_ip_geo_long,
_l_ip_geo_state,
_l_is_f12,
_l_is_lh_int,
_l_is_on_call,
_l_is_priv_brows,
_l_is_rh_int,
_l_isp_age,
_l_lalt_cnt,
_l_lang_1,
_l_lang_2,
_l_lang_3,
_l_lcmd_cnt,
_l_lctrl_cnt,
_l_left_click_cnt,
_l_lshift_cnt,
_l_lst_proxy,
_l_mins_lst_lgn_capped,
_l_mouse_cnt,
_l_num_sess_2h,
_l_num_sess_4h,
_l_orient_event_cnt,
_l_overlap_sess_diff_dev,
_l_paste_in_login_cnt,
_l_priv_browsing_cnt,
_l_proxy_lvl,
_l_proxy_type,
_l_prt_scrn_cnt,
_l_ralt_cnt,
_l_rcmd_cnt,
_l_rctrl_cnt,
_l_right_click_cnt,
_l_rshift_cnt,
_l_scrn_h,
_l_scrn_w,
_l_sess_cnt_mob_browser,
_l_sess_cnt_mob_sdk,
_l_sess_cnt_web,
_l_shift_tab_cnt,
_l_swipe_cnt,
_l_tab_cnt,
_l_tap_cnt,
_l_time_zone,
_l_total_sess_cnt,
_l_touch_cnt,
_l_trvl_spd,
_l_uid_age,
_l_g_con_dev,
_l_g_con_ip,
_l_g_con_wifi,
_l_g_fluid_typing_pi,
_l_g_gen_payee,
_l_g_no_delay_to_input_pi,
_l_g_prev_used_pi,
_l_bc_event_dt,
_l_sess_id,
_l_policy_action,
_l_policy_nm,
_l_max_30d_score,
_l_bc_muid,
_l_policy_id,
_l_recip_ftp,
_l_adv_key_combo,
_l_app_togg,
_l_concurrent_sess,
_l_dev_tools,
_l_dev_change_anom,
_l_export_data,
_l_fast_traveler,
_l_frd_mac_adrs,
_l_hi_dead_time,
_l_import_export_pi,
_l_input_otp_delay,
_l_ip_mismatch_anomaly,
_l_is_active_call,
_l_is_soc_eng_rat,
_l_new_asn,
_l_new_browser,
_l_new_dev,
_l_new_dev_con_ip,
_l_new_ip,
_l_new_payee,
_l_new_user,
_l_nhuman_mouse_bhv,
_l_rare_browser,
_l_rare_cores,
_l_rare_cores_anomaly,
_l_rat_in_sess,
_l_rcnt_pmt_settings_ch,
_l_rcnt_prof_settings_ch,
_l_rcnt_req_loan,
_l_rcnt_risky_dev,
_l_risky_amt,
_l_risky_apps,
_l_risky_browser,
_l_risky_elements_int,
_l_risky_guid,
_l_risky_import_export,
_l_risky_ip,
_l_risky_isp,
_l_risky_key_combo,
_l_risky_payee,
_l_risky_wifi,
_l_tzone_mismatch,
_l_dom_hand_ch_anomaly,
_l_deleting_pi,
_l_ft_rat_app_inst,
_l_import_data,
_l_import_pi_data,
_l_is_long_sess,
_l_is_rcnt_hrisk_sess,
_l_key_mouse_anomaly,
_l_lgn_import_anomaly,
_l_delay_to_input_pi,
_l_low_fam_contact_det,
_l_mouse_doodl,
_l_new_browser_anomaly,
_l_new_desktop_user,
_l_new_mob_app_user,
_l_new_mob_browser_user,
_l_new_payee_per_user,
_l_os_ch_anomaly,
_l_priv_browsing_anomaly,
_l_type_patterns_anomaly,
_l_rcnt_linked_dev,
_l_rcnt_linked_ip,
_l_risky_import,
_l_seg_typing_pi,
_l_sim_ip_cntry_mismatch,
_l_is_bot,
_l_is_emu,
_l_is_mlw,
_l_is_mob_rat,
_l_is_rat,
_l_is_rcnt_rat,
_l_voice_scam,
_l_platform,
_l_bc_sess_cnt,
_l_bc_sess_id,
_l_m_m_1,
_l_m_m_2,
_l_m_m_3,
_l_m_m_4,
_l_m_m_5,
_l_first_rat_dt,
_l_prev_rat_dt,
_l_rat_cnt_1,
_l_rat_cnt_2,
_l_rat_cnt_3,
_l_rat_cnt_4,
_l_rat_check,
_l_score_1,
_l_score_2,
_l_score_3,
_l_score_4,
_l_score_5,
_l_score_dt_1,
_l_score_dt_2,
_l_score_dt_3,
_l_score_dt_4,
_l_score_dt_5,
_l_rare_scrn_sz,
_l_lrg_dist_known_loc,
_l_clpbrd_evnt,
_l_new_lang,
_l_scrn_res_anom,
_l_accum_amt_anom,
_l_frst_proxy,
_l_drag_n_drop,
_l_pmt_vloc_anom,
_l_flat_phone,
_l_rcnt_hi_scr_on_dev,
_l_g_con_geoloc,
_l_g_accum_amt,
_l_bank_num,
_l_acct_num,
_l_pmt_descr,
_l_pmt_amt,
_l_bpay_biller,
_l_bpay_crn,
_N_MII_ASSOC_NUM_CNT
        , _N_MII_AV_IN_CALL
        , _N_MII_AV_OUT_CALL
        , _N_MII_BRANCH_INT
        , _N_MII_CALLEE_CNT
        , _N_MII_CALLR_CNT
        , _N_MII_CALL_ACTIV
        , _N_MII_CALL_INACTIV
        , _N_MII_CUST_TENURE
        , _N_MII_DATA_ACTIV
        , _N_MII_DATA_INACTIV
        , _N_MII_DATA_USE_CH
        , _N_MII_DEV_BRAND
        , _N_MII_DEV_CNT
        , _N_MII_DEV_MNTHS
        , _N_MII_DWELL_MATCH
        , TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MII_EVENT_DT, 38, 2), '1960-01-01 00:00:00') AS _N_MII_EVENT_DT
        , _N_MII_HOME_PCODE
        , _N_MII_INB_SMS_CH
        , _N_MII_IN_CALL_CH
        , _N_MII_IN_CALL_CNT
        , _N_MII_IN_SMS_CNT
        , _N_MII_LOYALTY
        , _N_MII_MULT_PROD
        , _N_MII_NAME_MATCH
        , _N_MII_NEW_CALLEE_RATIO
        , _N_MII_NEW_CALLR_RATIO
        , _N_MII_NEW_RECIP_RATIO
        , _N_MII_NEW_SENDER_RATIO
        , _N_MII_OUT_CALL_CH
        , _N_MII_OUT_CALL_CNT
        , _N_MII_OUT_SMS_CH
        , _N_MII_OUT_SMS_CNT
        , _N_MII_PCODES_VISITED
        , _N_MII_PCODE_MATCH
        , _N_MII_SERV_CNT
        , _N_MII_SERV_TENURE
        , _N_MII_SERV_TYPE
        , _N_MII_SERV_USAGE
        , _N_MII_SIM_SWAP
        , _N_MII_SIM_SWAP_DT
        , _N_MII_SMS_ACTIV
        , _N_MII_SMS_INACTIV
        , _N_MII_SMS_RECIP_CNT
        , _N_MII_SMS_SENDER_CNT
FROM  LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT
WHERE SSX_CUST_NUM IS NOT NULL
AND mid_event_ts >= TO_CHAR(TIMESTAMPADD(month, -($trainingPeriod + 1), TO_DATE($testingStart, 'YYYY-MM-DD')), 'YYYYMMDDHH24MISSFF6') 
AND mid_event_ts < TO_CHAR(LAST_DAY(TO_DATE($testingStart, 'YYYY-MM-DD')), 'YYYYMMDDHH24MISSFF6')
AND dtl_ex_1_5s_01 in ('N508B', 'N509B', 'N510B', 'N511B','C517B', 'N522B','N524B','O001B')
;",PAULS13,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-09-09 09:40:42.361 Z,2025-09-09 10:27:59.154 Z
45.024717,850.922046929598,11677380608,0,"SELECT DISTINCT
        TRY_TO_NUMERIC(s.ssx_cust_num) AS cust_id,
        s.dtl_ex_0_20s_001,
        TO_DATE(SUBSTR(s.MID_EVENT_TS::STRING, 1, 8), 'YYYYMMDD') AS MIDEVENTDATE,
        ROUND(TRY_TO_NUMERIC(s._L_CUST_SCAMRISK_SCORE) / 1000, 3) AS SUSC_SCORE,
        CASE
            WHEN b.rua_20byte_string_001 IS NOT null THEN 1
            ELSE 0
            END AS fraud_match,
    FROM LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT s
        LEFT JOIN PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON s.dtl_ex_0_20s_001 = b.rua_20byte_string_001
    WHERE DATE_TRUNC('month', TO_DATE(SUBSTR(s.MID_EVENT_TS::STRING, 1, 8), 'YYYYMMDD')) >= dateadd(MONTH, -6, CURRENT_DATE)


",CHOUEICA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_001,X-Small,SUCCESS,2025-09-09 02:29:16.164 Z,2025-09-09 03:14:17.647 Z
140.056967,86.854320168495,129864,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250904140303_scored_1 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO2('modelname=pipeline_it1_F2_xval_zero_day_20250904140303.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CRD_APAY_CNT_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_2WAY_CRD_FRD_RULE_FLAG, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_G_CON_DEV, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_RISKY_KEY_COMBO, _A_C_G, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_CONCURRENT_SESS, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_NPP_OUT_SUM_AAA_2, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_NPP_IN_UNRELATED_SUM_24_1, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _A_CUST_NPP_IN_SUM_AAA_1, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _L_NUM_SESS_2H, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_DPI_CHANGE, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _L_CLIPB_EVENT_CNT, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _L_NC_RESPONSE_CODE, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, BUS_LN_CNT, OTH_CNT, REL_MNG, FA_1, FA_2, NO_1, NO_2, FP, GOVT_BENE, PRVT_CUST, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-09 08:23:56.151 Z,2025-09-09 10:43:59.569 Z
84.783133,66.938063733280,129864,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250904140303_scored_0 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it1_F2_xval_zero_day_20250904140303.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CRD_APAY_CNT_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_2WAY_CRD_FRD_RULE_FLAG, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_G_CON_DEV, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_RISKY_KEY_COMBO, _A_C_G, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_CONCURRENT_SESS, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_NPP_OUT_SUM_AAA_2, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_NPP_IN_UNRELATED_SUM_24_1, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _A_CUST_NPP_IN_SUM_AAA_1, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _L_NUM_SESS_2H, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_DPI_CHANGE, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _L_CLIPB_EVENT_CNT, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _L_NC_RESPONSE_CODE, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, BUS_LN_CNT, OTH_CNT, REL_MNG, FA_1, FA_2, NO_1, NO_2, FP, GOVT_BENE, PRVT_CUST, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) <= '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-09 10:48:44.705 Z,2025-09-09 12:13:31.693 Z
30.776267,9577.944887906313,0,0,"SELECT min(to_timestamp(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF')) as TRANSACTIONDATETIME FROM LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT
where dtl_ex_1_5s_01 in ('N508B', 'N509B', 'N510B', 'N511B','C517B', 'N522B','N524B','O001B');",GOENKAPR,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-09-09 15:39:30.313 Z,2025-09-09 16:10:16.889 Z
146.413883,15987.492304876447,0,0,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-09 01:00:42.669 Z,2025-09-09 03:27:07.502 Z
157.008633,17401.617912016809,0,0,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-09 04:15:08.153 Z,2025-09-09 06:52:08.671 Z
163.293217,17380.521234989166,0,0,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-08 22:14:41.051 Z,2025-09-09 00:57:58.644 Z
176.058583,113.707086659968,129864,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905163819_scored_1 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it3_F2_xval_2day_all_20250905163819.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_NC_MATCH_NAME_CONF, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, REL_MNG, FA_1, NO_1, FP, GOVT_BENE, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_CNT_Q, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_RULE_DCLN_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_SUM_N, CUS_SUM_FINL_APRD_TRAN_SUM_N, CUS_SUM_FDP_RULE_TRIG_CNT_Q, CUS_SUM_DOMS_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_CNT_Q, CUS_SUM_PAY_PASS_TRAN_CNT_Q, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_CHIP_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_NTB_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CUS_MAX_C_2WAY_CRD_RULE_FLAG, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_RULE_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_APRD_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_FINL_APRD_TRAN_SUM_N, CRD_SUM_INCO_CVVA_SUM_N, CRD_SUM_FDP_RULE_TRIG_CNT_Q, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_CHIP_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CRD_SUM_CAPP_LOGN_CNT_Q, CRD_SUM_VIEW_CARD_DETL_CNT_Q, CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F, CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_DOMS_TRAN_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_CNT_Q, CMC_SUM_OSEA_TRAN_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_CNT_Q, CMC_SUM_PAY_PASS_TRAN_CNT_Q, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-09 14:07:59.030 Z,2025-09-09 17:04:02.545 Z
172.204867,113.794222772121,129864,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905163819_scored_0 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it3_F2_xval_2day_all_20250905163819.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_NC_MATCH_NAME_CONF, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, REL_MNG, FA_1, NO_1, FP, GOVT_BENE, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_CNT_Q, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_RULE_DCLN_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_SUM_N, CUS_SUM_FINL_APRD_TRAN_SUM_N, CUS_SUM_FDP_RULE_TRIG_CNT_Q, CUS_SUM_DOMS_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_CNT_Q, CUS_SUM_PAY_PASS_TRAN_CNT_Q, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_CHIP_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_NTB_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CUS_MAX_C_2WAY_CRD_RULE_FLAG, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_RULE_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_APRD_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_FINL_APRD_TRAN_SUM_N, CRD_SUM_INCO_CVVA_SUM_N, CRD_SUM_FDP_RULE_TRIG_CNT_Q, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_CHIP_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CRD_SUM_CAPP_LOGN_CNT_Q, CRD_SUM_VIEW_CARD_DETL_CNT_Q, CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F, CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_DOMS_TRAN_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_CNT_Q, CMC_SUM_OSEA_TRAN_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_CNT_Q, CMC_SUM_PAY_PASS_TRAN_CNT_Q, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) <= '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-09 14:06:11.362 Z,2025-09-09 16:58:23.654 Z
44.008717,433.786899492145,0,0,"create or replace temporary table Digital_Transactions as
select    
    b.fraudtype,
    b.DETECTION,
    b.case_detection,
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') as _B_ANY_CUST_FTP_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00') as _x_cif_recipient_new_date,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_BC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _L_BC_EVENT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SCM_RSK_HGH_DT, 38, 2), '1960-01-01 00:00:00') as _L_SCM_RSK_HGH_DT,
    _L_NC_RESPONSE_CODE,
    dtl_ex_0_20s_001 AS RECEIPT_NUM,
    (a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID,
    cmx_tran_id,
    hdr_activity_type,
    ssx_cust_num,
    chl_id_ob_userid,
    chl_id_pb_userid,
    dtl_ex_1_5s_01 as dmx_5byte_string_01,
    _a_cse_chg_dwl_ind AS DWL_change,
    dtl_ex_0_n_006 as Task_ID,
    dtl_ex_0_i_002 AS FTP_Indicator_1,
    rsp_ex_2_i_006 AS FTP_Indicator_2,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_SUM, 38, 2) as _X_CIF_RECIPIENT_SUM,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_SUM, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM,
    TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2) as _x_cif_recipient_new_cnt,
    TRY_TO_NUMBER(TGX_TRAN_AMT) AS TGX_TRAN_AMT,
    TRY_TO_NUMBER(_A_BTS_CUST_AGE, 38, 2)as _A_BTS_CUST_AGE,
    tgx_bank_name,
    tgx_bank_num,
    tgx_branch_id,
    tgx_acct_num,
    tgx_name,
    _L_ACCT_NUM,
    _L_BANK_NUM,
    _l_branch_id, 
    DTL_EX_3_80S_003 AS pmt_description_1,
    tgx_description AS pmt_description_2,
    TRY_TO_NUMBER(_L_SCM_RSK_HGH_SCR, 38, 2) as _L_SCM_RSK_HGH_SCR,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 5) as CERBERUS_SCORE,
    TRY_TO_NUMBER(_L_CUST_SCAMRISK_SCORE, 38, 2) as _L_CUST_SCAMRISK_SCORE,
    TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE,
    TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_S,
    TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2) as _l_max_30d_mule_score,
    TRY_TO_NUMBER(_L_NUM_SESS_2H, 38, 2) as _L_NUM_SESS_2H,
    TRY_TO_NUMBER(_L_NUM_SESS_4H, 38, 2) as _L_NUM_SESS_4H,
    TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE,38,2) as _L_TRUST_NEW_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE,38,2) as _L_TRUST_UNUSED_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN,38,2) as _L_TRUST_PAYEE_HIGH_VLOC_IN,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT,38,2) as _L_TRUST_PAYEE_DORM_ACCT,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYER,
    TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev,38,2) as _l_rcnt_hi_scr_on_dev,
    TRY_TO_NUMBER(_B_RECIP_SUM_LONG, 38, 2) as _B_RECIP_SUM_LONG,
    TRY_TO_NUMBER(_B_RECIP_SUM_SHORT, 38, 2) as _B_RECIP_SUM_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_1, 38, 2) as _B_RECIP_FTP_CNT_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_2, 38, 2) as _B_RECIP_FTP_CNT_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_3, 38, 2) as _B_RECIP_FTP_CNT_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_4, 38, 2) as _B_RECIP_FTP_CNT_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_5, 38, 2) as _B_RECIP_FTP_CNT_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_6, 38, 2) as _B_RECIP_FTP_CNT_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_7, 38, 2) as _B_RECIP_FTP_CNT_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_CNT_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_CNT_DATE,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_LONG, 38, 2) as _B_RECIP_FTP_CNT_LONG,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_SHORT, 38, 2) as _B_RECIP_FTP_CNT_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_1, 38, 2) as _B_RECIP_FTP_SUM_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_2, 38, 2) as _B_RECIP_FTP_SUM_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_3, 38, 2) as _B_RECIP_FTP_SUM_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_4, 38, 2) as _B_RECIP_FTP_SUM_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_5, 38, 2) as _B_RECIP_FTP_SUM_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_6, 38, 2) as _B_RECIP_FTP_SUM_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_7, 38, 2) as _B_RECIP_FTP_SUM_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_SUM_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_SUM_DATE,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_1, 38, 2) as _a_npp_in_unrelated_sum_24_1,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_2, 38, 2) as _a_npp_in_unrelated_sum_24_2,
    TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1,
	TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2,
	TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3,
	TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4,
	TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5,
	TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6,
	TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7,
	TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1,
	TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2,
	TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3,
	TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4,
	TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5,
	TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6,
	TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_1, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_2, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_3, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_1, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_7, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_7,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_LONG, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_LONG,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_SHORT, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP5_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP5_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP6_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP6_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP7_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP7_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP1_MLW_IND, 38, 2) as _A_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP2_MLW_IND, 38, 2) as _A_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP3_MLW_IND, 38, 2) as _A_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP4_MLW_IND, 38, 2) as _A_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP5_MLW_IND, 38, 2) as _A_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP6_MLW_IND, 38, 2) as _A_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP7_MLW_IND, 38, 2) as _A_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP_MLW_IND, 38, 2) as _A_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MOUSE_MV_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_MOUSE_MV_MLW_DT,
    TRY_TO_NUMBER(_N_MOUSE_MV_MLW_IND, 38, 2) as _N_MOUSE_MV_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_1, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_2, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_3, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_4, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_5, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_5,
    _N_5_RCNT_M100S_1,
    _N_5_RCNT_M100S_2,
    _N_5_RCNT_M100S_3,
    _N_5_RCNT_M100S_4,
    _N_5_RCNT_M100S_5,
    TRY_TO_NUMBER(_N_M100_P8_IND, 38, 2) as _N_M100_P8_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P8_IND_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P8_IND_DT,
    TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND,
    TRY_TO_NUMBER(_N_P20_7D_CNT_1, 38, 2) as _N_P20_7D_CNT_1,
    TRY_TO_NUMBER(_N_P20_7D_CNT_2, 38, 2) as _N_P20_7D_CNT_2,
    TRY_TO_NUMBER(_N_P20_7D_CNT_3, 38, 2) as _N_P20_7D_CNT_3,
    TRY_TO_NUMBER(_N_P20_7D_CNT_4, 38, 2) as _N_P20_7D_CNT_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_P20_7D_CNT_DT, 38, 2), '1960-01-01 00:00:00') as _N_P20_7D_CNT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP21_MLW_IND, 38, 2) as _A_SCAMP21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP21_MLW_IND, 38, 2) as _N_SCAMP21_MLW_IND,
    _L_PUSH_API_1,
    _L_PUSH_API_2,
    _L_PUSH_API_3,
    _L_PUSH_API_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,3,1),1.) as HOME_LOAN_IND,
    TRY_TO_NUMBER(substr(_l_Fingerprint_1,11,1),1.) as MORTGAGE_ACC,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,7,1),1.) as INCOME_BANDS,
    TRY_TO_NUMBER(substr(dtl_ex_0_20s_004,14,1),1.) as HOME_OWNER_STATUS
from LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
    on a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where mid_event_ts >= '20250701'
and mid_event_ts <= '20250801';",ZAIDIS2,PUBLIC,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-26 02:01:59.534 Z,2025-08-26 02:46:00.057 Z
31.405800,613.213631525636,62195503104,0,"create or replace temporary table NPP_TRAN as
select	distinct case   when b.fraudtype = 'CVL' then null
                else b.fraudtype
        end as FRAUDTYPE
		,b.detection
		,b.case_detection
        ,TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
		,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
		,a.tts_tran_date_alt
		,a.tts_tran_time_alt
		,a.dtl_ex_0_20s_001
		,a.dtl_ex_1_5s_01
		,a.ssx_cust_num
		,a.chl_id_ob_userid
		,a.tgx_bank_name
		,a.tgx_bank_num
		,a.tgx_branch_id
		,a.tgx_acct_num
		,a.tgx_name
		,a.tgx_description
		,TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as TRAN_AMT
		,a.dtl_ex_0_i_002 as FTP_IND
		
		-- BioCatch UVs
		,TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE
		,TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_SCORE
		,TRY_TO_NUMBER(a._l_adv_key_combo, 38, 2) as _L_ADV_KEY_COMBO
		,TRY_TO_NUMBER(a._l_clpbrd_evnt, 38, 2) as _L_CLPBRD_EVNT
		,TRY_TO_NUMBER(a._l_concurrent_sess, 38, 2) as _L_CONCURRENT_SESS
		,TRY_TO_NUMBER(a._l_export_data, 38, 2) as _L_EXPORT_DATA
		,TRY_TO_NUMBER(a._l_import_data, 38, 2) as _L_IMPORT_DATA
		,TRY_TO_NUMBER(a._l_is_rat, 38, 2) as _L_IS_RAT
		,TRY_TO_NUMBER(a._l_is_mob_rat, 38, 2) as _L_IS_MOB_RAT
		,TRY_TO_NUMBER(a._l_rat_in_sess, 38, 2) as _L_RAT_IN_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_hrisk_sess, 38, 2) as _L_IS_RCNT_HRISK_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_rat, 38, 2) as _L_IS_RCNT_RAT
		,TRY_TO_NUMBER(a._l_lrg_dist_known_loc, 38, 2) as _L_LRG_DIST_KNOWN_LOC
		,TRY_TO_NUMBER(a._l_rare_scrn_sz, 38, 2) as _L_RARE_SCRN_SZ
		,TRY_TO_NUMBER(a._l_risky_isp, 38, 2) as _L_RISKY_ISP
		,TRY_TO_NUMBER(a._l_risky_key_combo, 38, 2) as _L_RISKY_KEY_COMBO
		,TRY_TO_NUMBER(a._l_tzone_mismatch, 38, 2) as _L_TZONE_MISMATCH
		,TRY_TO_NUMBER(a._l_scm_rsk_hgh_scr, 38, 2) as _L_SCM_RSK_HGH_SCR
		,TRY_TO_NUMBER(a._l_keyb_nav_anom, 38, 2) as _L_KEYB_NAV_ANOM
		,TRY_TO_NUMBER(a._l_scrn_broadcast, 38, 2) as _L_SCRN_BROADCAST
		,TRY_TO_NUMBER(a._l_delay_to_input_pi, 38, 2) as _L_DELAY_TO_INPUT_PI
		,TRY_TO_NUMBER(a._l_input_otp_delay, 38, 2) as _L_INPUT_OTP_DELAY
		,TRY_TO_NUMBER(a._l_active_spoofing, 38, 2) as _L_ACTIVE_SPOOFING
		,TRY_TO_NUMBER(a._l_pmt_vloc_anom, 38, 2) as _L_PMT_VLOC_ANOM
		,TRY_TO_NUMBER(a._l_rcnt_hi_scr_on_dev, 38, 2) as _L_RCNT_HI_SCR_ON_DEV
		,TRY_TO_NUMBER(a._l_accum_amt_anom, 38, 2) as _L_ACCUM_AMT_ANOM
		,TRY_TO_NUMBER(a._l_app_togg, 38, 2) as _l_APP_TOGG
		,TRY_TO_NUMBER(a._l_is_active_call, 38, 2) as _L_IS_ACTIVE_CALL
		,TRY_TO_NUMBER(a._l_is_long_sess, 38, 2) as _L_IS_LONG_SESS
		,TRY_TO_NUMBER(a._l_type_patterns_anomaly, 38, 2) as _L_TYPE_PATTERNS_ANOMALY
		,TRY_TO_NUMBER(a._l_seg_typing_pi, 38, 2) as _L_SEG_TYPING_PI
		
		-- NameCheck UVs
		,a._l_nc_response_code
		,a._l_nc_match_name_conf
		
		-- H2O Score UVs
		,TRY_TO_NUMBER(a._l_cust_scamrisk_score, 38, 2) as _L_CUST_SCAMRISK_SCORE
		,a.dtl_ex_0_n_029
		,a.dtl_ex_0_n_034 as CERBERUS_SCORE
		
		-- Recipient Level UVs
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_short, 38, 2) as _B_RECIP_SUM_SHORT
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_long, 38, 2) as _B_RECIP_SUM_LONG
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_short, 38, 2) as _B_RECIP_FTP_CNT_SHORT
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_long, 38, 2) as _B_RECIP_FTP_CNT_LONG
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_any_cust_ftp_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_ANY_CUST_FTP_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_2
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_3
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_4
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_5
		
		-- Customer Level UVs
		,TRY_TO_NUMBER(a._a_customer_age, 38, 2) as _A_CUSTOMER_AGE
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_SHORT, 38, 2) as _A_CUST_SUM_AAA_SHORT
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_LONG, 38, 2) as _A_CUST_SUM_AAA_LONG
		,TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1
		,TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2
		,TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3
		,TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4
		,TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5
		,TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6
		,TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7
		,TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1
		,TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2
		,TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3
		,TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4
		,TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5
		,TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6
		,TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_NEW_CAPP_REGO_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CSE_CHG_DWL_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CIF_ESTABLISH_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00') as _A_NB_LASTLOGON_DT_1
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00') as _A_CURR_CAPP_DEVICE_DT
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_1, 38, 2) as _A_NB_LOGONS_CNT_1
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_2, 38, 2) as _A_NB_LOGONS_CNT_2
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_3, 38, 2) as _A_NB_LOGONS_CNT_3
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_1, 38, 2) as _A_CAPP_LOGON_CNT_1
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_2, 38, 2) as _A_CAPP_LOGON_CNT_2
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_3, 38, 2) as _A_CAPP_LOGON_CNT_3
		
		-- Customer-Recipient Relationship Level UVs
		,TRY_TO_NUMBER(a._x_cif_recipient_new_sum, 38, 2) + TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM
		,case   when a._x_cif_recipient_new_date = '0' then TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF')
                else TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00'::timestamp)
		end as _X_CIF_RECIPIENT_NEW_DATE
		,case   when a._x_cif_recipient_new_cnt = '0' then 1
                else TRY_TO_NUMBER(a._x_cif_recipient_new_cnt, 38, 2) + 1
		end as _X_CIF_RECIPIENT_NEW_CNT
		
		-- Telstra Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_TELSTRA_LONG_CALL
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_telstra_last_call_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _X_TELSTRA_LAST_CALL_DT
		,TRY_TO_NUMBER(a._x_telstra_last_call_dur, 38, 2) as _X_TELSTRA_LAST_CALL_DUR
		,TRY_TO_NUMBER(a._x_telstra_max_call_dur, 38, 2) as _X_TELSTRA_MAX_CALL_DUR
		,a._a_telstra_active_call
		
		-- Crypto UVs
		,TRY_TO_NUMBER(a._a_crypto_mnthly_sum, 38, 2) as _A_CRYPTO_MNTHLY_SUM
		,DATEADD(day, TRY_TO_NUMBER(a._a_crypto_last_pymnt_date, 38, 2), '1960-01-01') as _A_CRYPTO_LAST_PYMNT_DATE
		
		-- M100 Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP1_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP2_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP3_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP4_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP5_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP6_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP7_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP10_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp11_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP11_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp12_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP12_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp13_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP13_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP20_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP21_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_M100_P8_IND_DT
		
		-- M100 App Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P1_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P5_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P8_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P9_DT
 		
		-- CIF Profiling UVs
		,a._l_fingerprint_1
		,a._l_fingerprint_2
		,a._l_fingerprint_3
		,a._l_fingerprint_4

        -- Intelligent Friction UVs
                ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCTN_MSG_SNT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCTN_MSG_SNT
    
         ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCT_INTENT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCT_INTENT
        
from        lcl.fdp_customer_transactions_send_flat a
left join  prd_p01_dmn_fraumd.labmlfrd.dtl_fraudmaster b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where   a.mid_event_ts >= '20250701'
and     a.mid_event_ts >= '20250801'
and     a.dtl_ex_1_5s_01 in ('C205N'
							,'C207N'
							,'C242N'
							,'C244N'
							,'C246N'
							,'N205N'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'X232N'
							,'X243N'
							,'X246N')
and     a.hdr_source = 'NPP OUT'
and     tran_amt > 0
order by    chl_id_ob_userid
            ,transactiondatetime;",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-10 22:32:48.353 Z,2025-09-10 23:04:12.701 Z
31.596517,97.903808504343,129864,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_sai_csr_it5_7day_20250911064113_scored as
(
select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_SCAMS_RETRO_TEST_SAI_MOJO('modelname=pipeline_it5_F2_xval_7day_all_redmojsiz_20250911064113.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CRD_SAFE_MERCHANT, _C_CC_CNP_VEL_6HR_COUNT_1, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_BC_SESS_CNT, _L_PMT_AMT, _L_MUID_AGE_PER_USER, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_MAX_30D_SCORE, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_SCM_RSK_SCR_2, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_NB_BROWSER_CNT, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_SESS_CNT_WEB, _L_IP_AGE, _A_CLC_FTP_AMT, _L_SESS_CNT_MOB_BROWSER, _A_CRD_CRYPTO_PROC_FLG, _A_P_L_3, _A_LIST_RL1_SCAM_CUST_CIF, _L_PUSH_API_1, _L_PUSH_API_2, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_3_80S_002, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, DTL_CA_MERCH_CURR_CODE, GENDER, CC_CNT, NO_1, GOVT_BENE, HL_ASOC, CORP_EMPL, MAR_STS_ORG_STR, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_DOMS_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_UPST_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_FALL_BACK_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_ATM_TRAN_SUM_N, MAQ_SUM_FALL_BACK_TRAN_SUM_N, MAQ_SUM_CHIP_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N
)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG7D_OOT
)
;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-11 07:04:48.896 Z,2025-09-11 07:36:24.687 Z
47.530667,1094.864249728621,46549319680,0,"CREATE OR REPLACE temporary TABLE transx AS 
select  
b.FRAUDTYPE
,b.DETECTION
,b.case_detection
,TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,ssx_cust_num AS XQO_CUST_NUM
,chl_id_ob_userid AS HQO_OB_USERID
,TRY_TO_NUMBER(tgx_tran_amt, 38, 2) as TRAN_AMT
,TRY_TO_NUMBER(_A_CUSTOMER_AGE, 38, 2) as _A_CUSTOMER_AGE
,TRY_TO_NUMBER(_L_SE_SCORE, 38, 2) as _L_SE_SCORE
,TRY_TO_NUMBER(_L_BC_SCORE, 38, 2) as _L_BC_SCORE
,TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 4) as CERBERUS_SCORE
,TGX_BANK_NAME
,TGX_BANK_NUM
,TGX_BRANCH_ID
,TGX_ACCT_NUM
,TGX_NAME
/* BC risk factors */
,_L_DPI_CHANGE 
,_L_NEW_DEV
,_L_RARE_SCRN_SZ
,_L_scrn_res_anom
,_l_lrg_dist_known_loc
,_L_NEW_BROWSER
,_L_NEW_DESKTOP_USER
,_L_IS_ACTIVE_CALL 
,_L_IS_LONG_SESS
,_L_NEW_MOB_BROWSER_USER
,_L_DEV_CHANGE_ANOM
,_L_TZONE_MISMATCH  
,dtl_ex_1_5s_01     /* task id */
,dtl_ex_0_i_002 as FTP_ind
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_n_client_details_view, 38, 2), '1960-01-01 00:00:00'::timestamp) as _n_client_details_view
,TRY_TO_NUMBER(_A_CAPP_LOGON_CNT_1, 38, 2) as _A_CAPP_LOGON_CNT_1 /* capp login counts within last 24 hours, 2 is between 24 and 48 hours etc */
,TRY_TO_NUMBER(_A_NB_LOGONS_CNT_1, 38, 2) as _A_NB_LOGONS_CNT_1
, _L_ADV_KEY_COMBO
,_A_TELSTRA_API_EVENT_ID /* this is task id e.g.C513B  */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_API_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _A_TELSTRA_API_EVENT_DT
,COALESCE(NULLIF(_A_TELSTRA_CALL_DURATION, ''), 0) / 60 as _A_TELSTRA_CALL_DURATION /* in minutes */
,_a_telstra_active_call 
,_l_trust_1000 
,_l_trust_900
,_L_PUSH_API_1
,_L_PUSH_API_2
,_L_PUSH_API_3
,_L_PUSH_API_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_RST_PSWD_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_RST_PSWD_DT /* reset password date */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') as _N_CLIENT_IDTO_PW
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_MOD_MOB_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_MOD_MOB_DT
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PHONE_CHG_ALL, 38, 2), '1960-01-01 00:00:00') as _A_PHONE_CHG_ALL /*mobile phone number change date*/
/* scam p indicators and dates */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT
,TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P21_MLW_DT
,TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT
,TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT
,TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND
/* CAPP rego */
,TRY_TO_NUMBER(_N_BC_NCRG_ATO_SCORE, 38, 2) as _N_BC_NCRG_ATO_SCORE
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_BC_NCRG_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _N_BC_NCRG_EVENT_DT
from        LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join   PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
    where   mid_event_ts >= '20250525'
    AND     mid_event_ts < '20250825'
order by    TRANSACTIONDATETIME;",WANGC34,R_USR_FRAUMD_ZRD_CUS,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-28 06:52:14.192 Z,2025-08-28 07:39:46.032 Z
31.043867,15476.731492787600,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""RSP_ACTION_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_CUST_SPEND_SUM_AAA_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_CC_RECOV_TRANS_SUM_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_C_N3D_TST_CNT_1"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_AUTH_COUNT"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_Q_NON_AU_IND"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_C_CC_GBL_N3D_1D_CNT_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CC_SFW_GOOGLE_CNT_2"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""_Q_COF_DECL_CNT_DAY_1"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_L_MAX_30D_SCORE_H2O"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_L_ACC_AMT_7D"" DOUBLE, ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_C_CRD_DOM_CNP_HV_SUM_1"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""CHL_CT_TERM_OWNER_ID"" STRING(16777216), ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_A_Q"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_3"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""_A_GEO_LONG_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_2"" DOUBLE, ""_C_N3D_MERC_ID_1"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_2"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, DTL_EX_3_8S_009, _M_TOTAL_COUNT, DTL_CA_AUTH_SYS_INFO, _C_CC_GBL_N3D_SUM_1, _C_CC_GBL_N3D_CNT_1, _C_N3D_OVS_6H_SUM_1, DTL_CA_MERCH_CURR_CODE, _C_CRD_SAFE_MERCHANT, RSP_ACTION_CODE, _Q_MER_FRAUD_SCORE_CNT_6, DTL_EX_3_20S_004, _Q_KEYED_APVD_CNT_DAY_1, _A_CUST_SPEND_SUM_AAA_1, _C_N3D_MERC_ID_SUM_2, _C_CC_RECOV_TRANS_SUM_1, _A_D_D_1, ATH_PC_CUST_PRESENT, _Q_MER_FRAUD_SCORE_CNT_5, ATH_PC_ACS_REFER_CODE, _Q_MER_FRAUD_SCORE_SUM_6, _C_N3D_MERC_ID_SUM_1, _L_BC_SESS_ID, _C_N3D_TST_CNT_1, _M_FIRST_USE_DATE, _Q_AUTH_COUNT, _M_TOTAL_SUM, _C_2WAY_5X_CRD_CNT, _Q_MER_FRAUD_SCORE_CNT_3, CHL_CT_TERM_CNTRY_CODE, _A_BTS_CUST_AGE, _C_N3D_MERC_ID_SUM_3, _Q_NON_AU_IND, _A_CRD_NPP_PAYMENT_AMOUNT, _C_CC_GBL_N3D_1D_CNT_1, DTL_EX_3_80S_001, _C_CRD_VISA_MERC_SUM_1, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_2, _C_CC_SFW_GOOGLE_CNT_2, _A_D_D_3, _Q_COF_DECL_CNT_DAY_1, _A_AUS_IP_ACTIVITY, _A_BTS_CUST_DOB, _L_MAX_30D_SCORE_H2O, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _C_CC_2DAY_AMT_6, _A_D_D_2, _L_ACC_AMT_7D, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _A_PROF_CAPP_DEVICE_1, _C_CRD_DOM_CNP_HV_SUM_1, _L_BC_SCORE_H2O, _C_CC_CNP_VEL_6HR_COUNT_1, CHL_CT_TERM_OWNER_ID, _C_CC_OS_FB_CNT_3, _A_Q, _Q_MER_FRAUD_SCORE_SUM_1, _C_CRD_DOM_CNP_HV_CNT_1, _Q_MER_FRAUD_SCORE_SUM_3, _C_CRD_3D_TRN_SUM_1, _A_GEO_LONG_1, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_1, _C_CC_GBL_N3D_CNT_2, CHL_CT_MER_MCC
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250826 and 20250828
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-28 03:36:39.015 Z,2025-08-28 04:07:41.647 Z
184.424517,3014.680114790797,0,0,select * from PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT where SSX_CUST_NUM = '20034469';,SHROFFPR,PUBLIC,WH_USR_PRD_P01_FRAUMD_LABMLFRD_001,X-Small,SUCCESS,2025-09-05 05:44:17.919 Z,2025-09-05 08:48:43.390 Z
30.932267,0.061182580889,0,0,<redacted cortex job>,ANANDKAN,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_001,X-Large,SUCCESS,2025-08-29 07:59:14.586 Z,2025-08-29 08:30:10.522 Z
180.667750,3683.684698015451,0,0,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_SHROFFPR_VAL as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    -- OR c.BAD = 1 
    THEN 1
    ELSE 0
  END AS final_target,
  SSX_CUST_NUM,
  DTL_EX_0_20S_001,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 -- TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
-- left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250602 and 20250715
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",SHROFFPR,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-07 17:25:07.199 Z,2025-09-07 20:25:47.264 Z
68.736900,12368.911934286356,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_WIDE_TRANS_PK_CNP_D013_V1(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

    
            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250710 and 20250826
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-08-28 22:41:58.953 Z,2025-08-28 23:50:43.167 Z
79.078133,15505.685497440398,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""RSP_ACTION_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_CUST_SPEND_SUM_AAA_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_CC_RECOV_TRANS_SUM_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_C_N3D_TST_CNT_1"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_AUTH_COUNT"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_Q_NON_AU_IND"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_C_CC_GBL_N3D_1D_CNT_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CC_SFW_GOOGLE_CNT_2"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""_Q_COF_DECL_CNT_DAY_1"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_L_MAX_30D_SCORE_H2O"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_L_ACC_AMT_7D"" DOUBLE, ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_C_CRD_DOM_CNP_HV_SUM_1"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""CHL_CT_TERM_OWNER_ID"" STRING(16777216), ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_A_Q"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_3"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""_A_GEO_LONG_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_2"" DOUBLE, ""_C_N3D_MERC_ID_1"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_2"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, DTL_EX_3_8S_009, _M_TOTAL_COUNT, DTL_CA_AUTH_SYS_INFO, _C_CC_GBL_N3D_SUM_1, _C_CC_GBL_N3D_CNT_1, _C_N3D_OVS_6H_SUM_1, DTL_CA_MERCH_CURR_CODE, _C_CRD_SAFE_MERCHANT, RSP_ACTION_CODE, _Q_MER_FRAUD_SCORE_CNT_6, DTL_EX_3_20S_004, _Q_KEYED_APVD_CNT_DAY_1, _A_CUST_SPEND_SUM_AAA_1, _C_N3D_MERC_ID_SUM_2, _C_CC_RECOV_TRANS_SUM_1, _A_D_D_1, ATH_PC_CUST_PRESENT, _Q_MER_FRAUD_SCORE_CNT_5, ATH_PC_ACS_REFER_CODE, _Q_MER_FRAUD_SCORE_SUM_6, _C_N3D_MERC_ID_SUM_1, _L_BC_SESS_ID, _C_N3D_TST_CNT_1, _M_FIRST_USE_DATE, _Q_AUTH_COUNT, _M_TOTAL_SUM, _C_2WAY_5X_CRD_CNT, _Q_MER_FRAUD_SCORE_CNT_3, CHL_CT_TERM_CNTRY_CODE, _A_BTS_CUST_AGE, _C_N3D_MERC_ID_SUM_3, _Q_NON_AU_IND, _A_CRD_NPP_PAYMENT_AMOUNT, _C_CC_GBL_N3D_1D_CNT_1, DTL_EX_3_80S_001, _C_CRD_VISA_MERC_SUM_1, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_2, _C_CC_SFW_GOOGLE_CNT_2, _A_D_D_3, _Q_COF_DECL_CNT_DAY_1, _A_AUS_IP_ACTIVITY, _A_BTS_CUST_DOB, _L_MAX_30D_SCORE_H2O, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _C_CC_2DAY_AMT_6, _A_D_D_2, _L_ACC_AMT_7D, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _A_PROF_CAPP_DEVICE_1, _C_CRD_DOM_CNP_HV_SUM_1, _L_BC_SCORE_H2O, _C_CC_CNP_VEL_6HR_COUNT_1, CHL_CT_TERM_OWNER_ID, _C_CC_OS_FB_CNT_3, _A_Q, _Q_MER_FRAUD_SCORE_SUM_1, _C_CRD_DOM_CNP_HV_CNT_1, _Q_MER_FRAUD_SCORE_SUM_3, _C_CRD_3D_TRN_SUM_1, _A_GEO_LONG_1, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_1, _C_CC_GBL_N3D_CNT_2, CHL_CT_MER_MCC
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250826 and 20250829
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-08-28 22:28:01.135 Z,2025-08-28 23:47:05.823 Z
128.496883,91.195915579796,129864,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905164042_scored as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it5_F2_xval_2day_all_redmojsiz_20250905164042.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _L_UID_AGE, _L_BC_SESS_CNT, _A_CC_CASH_ADVANCE_AMT, _L_PMT_AMT, _A_CAPP_HCE_CNT_1, _L_MUID_AGE_PER_USER, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_MAX_30D_SCORE, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _L_BC_SCORE, _L_DAYS_LST_DEV_IOS, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_NB_BROWSER_CNT, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_TIME_ZONE, _L_IP_AGE, _A_CLC_FTP_AMT, _A_CRYPTO_MNTHLY_SUM, _L_SESS_CNT_MOB_BROWSER, _A_P_L_3, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _L_NC_MATCH_NAME_CONF, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_NAME, _A_2WAY_TYPE, _L_PUSH_API_1, _A_CLIENT_CITY_6, _L_PROXY_TYPE, _L_LANG_1, _L_LANG_2, _L_NC_RESPONSE_CODE, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, OTH_CNT, NTBNK_FAC, REL_MNG, FA_1, NO_1, GOVT_BENE, PRVT_CUST, HL_ASOC, CORP_EMPL, TRUSTEE, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG, CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
-- where to_date(transactiondatetime) <= '2025-06-07'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-10 01:22:16.800 Z,2025-09-10 03:30:46.613 Z
120.953667,43.997915916145,12921263751168,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg7d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
    order by tran_d
),
hourly_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
),
all_dates AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT cust_i, merc_i, acqr_i FROM PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl where tran_d between '2025-03-01' and '2025-06-06') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.cust_i = hd.cust_i AND ad.merc_i = hd.merc_i AND ad.acqr_i = hd.acqr_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMA_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    cust_i, -- as ssx_cust_num,
    merc_i,
    acqr_i,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,

    COALESCE(CAST(CMA_SUM_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_UPST_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_UPST_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_RULE_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_FINL_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_UPST_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_FINL_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_FDP_RULE_TRIG_CNT_Q AS FLOAT), -1) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    COALESCE(CAST(CMA_SUM_DOMS_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_DOMS_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_OSEA_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_OSEA_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_DOMS_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_DOMS_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_OSEA_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_OSEA_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_3DS_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_3DS_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_N3D_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_N3D_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_3DS_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_3DS_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_N3D_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_N3D_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_CARD_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_ATM_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_ATM_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_FALL_BACK_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_CHIP_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_CHIP_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_PAY_PASS_TRAN_CNT_Q AS FLOAT), -1) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    COALESCE(CAST(CMA_SUM_CARD_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_ATM_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_ATM_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_FALL_BACK_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_CHIP_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_CHIP_TRAN_SUM_N,
    COALESCE(CAST(CMA_SUM_PAY_PASS_TRAN_SUM_N AS FLOAT), -1) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
    COALESCE(CAST(CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMA_MAX_CUV_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMA_MAX_CUV_RULE_PUSH_SENT_F,
    
    -- CMA_SUM_TRAN_CNT_Q,
    -- CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    -- CMA_SUM_TRAN_SUM_N,
    -- CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    -- CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    -- CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    -- CMA_SUM_UPST_APRD_TRAN_SUM_N,
    -- CMA_SUM_FINL_APRD_TRAN_SUM_N,
    -- CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    -- CMA_SUM_DOMS_TRAN_CNT_Q,
    -- CMA_SUM_OSEA_TRAN_CNT_Q,
    -- CMA_SUM_DOMS_TRAN_SUM_N,
    -- CMA_SUM_OSEA_TRAN_SUM_N,
    -- CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    -- CMA_SUM_3DS_TRAN_CNT_Q,
    -- CMA_SUM_N3D_TRAN_CNT_Q,
    -- CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    -- CMA_SUM_3DS_TRAN_SUM_N,
    -- CMA_SUM_N3D_TRAN_SUM_N,
    -- CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    -- CMA_SUM_ATM_TRAN_CNT_Q,
    -- CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    -- CMA_SUM_CHIP_TRAN_CNT_Q,
    -- CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    -- CMA_SUM_CARD_PRES_TRAN_SUM_N,
    -- CMA_SUM_ATM_TRAN_SUM_N,
    -- CMA_SUM_FALL_BACK_TRAN_SUM_N,
    -- CMA_SUM_CHIP_TRAN_SUM_N,
    -- CMA_SUM_PAY_PASS_TRAN_SUM_N,
    -- CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    -- CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    -- CMA_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    cust_i,
    merc_i,
    acqr_i,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-04 05:40:16.990 Z,2025-09-04 07:41:14.210 Z
88.807983,55.592186063528,129864,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_sai_cretro_scams_20250905163819_scored_01 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_SCAMS_RETRO_TEST_MOJO2_IT3('modelname=pipeline_it3_F2_xval_2day_all_20250905163819.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CC_HIGH_VEL_APPLE_SUM_1, _C_CC_GBL_N3D_1D_CNT_1, _C_CC_CNP_VEL_6HR_SUM_1, _C_CRD_APAY_SUM_1, _C_CRD_SAFE_MERCHANT, _C_CC_CNP_LTRANS_6HR_COUNT_1, _C_CC_CNP_VEL_6HR_COUNT_1, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _L_PASTE_IN_LOGIN_CNT, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _A_CLIENT_CITY_CNT_2, _L_UID_AGE, _L_SCRN_W, _L_ASN_AGE, _L_SCORE_2, _A_CUST_NPP_OUT_SUM_AAA_5, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_CC_CASH_ADVANCE_AMT, _A_CUST_SUM_AAA_SHORT, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _A_CAPP_HCE_CNT_1, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_M_L_1, _L_SCRN_H, _A_CUST_ACTION_IND, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_AND_ID_AGE, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _L_NC_ACCT_NUM_NAME_CONF, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _A_CUST_NPP_IN_SUM_AAA_2, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _L_ACC_AMT_1D, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _L_M_L_4, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_5, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_M_L_C, _L_TIME_ZONE, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_NB_LOGONS_CNT_2, _A_CLC_FTP_AMT, _L_TRVL_SPD, _A_CRYPTO_MNTHLY_SUM, _A_GL_TRF_ACC_BAL, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_CRD_CRYPTO_PROC_FLG, _A_NPP_OUT_CNT_2, _A_SCH_AMT, _A_P_L_3, _L_SDID_CNT_1, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _A_NB_LOGONS_CNT_3, _L_DAYS_LST_DEV_JS, _A_FTP_SUM_1, _L_NUM_SESS_4H, _L_NC_MATCH_NAME_CONF, _A_SCAM_RISKY_MCC_PRELEAD_AMT, _L_M_L_3, _A_CIF_ESTABLISH_CHANNEL, _A_CUST_OS_VER, _A_CUST_OS_NAME, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _L_PUSH_API_4, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_PROXY_TYPE, _L_LANG_3, _L_LANG_1, _L_LANG_2, _A_PROF_RISK_IND, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, DMC_CNT, YCS_CNT, TRAN_CNT, DPST_CNT, CC_CNT, TRD_CNT, PL_CNT, MORT_CNT, INSRNC_CNT, BTA_CNT, REL_MNG, FA_1, NO_1, FP, GOVT_BENE, HL_ASOC, CORP_EMPL, INTL_STU, MAR_STS_ORG_STR, EMPL_CLAS_LGL_STS, HOME_OWN, _X_NPP_OUT_SUM_DATE_DIFF, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP1_MLW_DT_DIFF, _A_SCAMP2_MLW_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _A_SCAMP7_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_CNT_Q, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_RULE_DCLN_TRAN_CNT_Q, CUS_SUM_UPST_APRD_TRAN_SUM_N, CUS_SUM_FINL_APRD_TRAN_SUM_N, CUS_SUM_FDP_RULE_TRIG_CNT_Q, CUS_SUM_DOMS_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_CNT_Q, CUS_SUM_PAY_PASS_TRAN_CNT_Q, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_CHIP_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_NTB_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CUS_MAX_C_2WAY_CRD_RULE_FLAG, CRD_SUM_TRAN_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_RULE_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_APRD_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_FINL_APRD_TRAN_SUM_N, CRD_SUM_INCO_CVVA_SUM_N, CRD_SUM_FDP_RULE_TRIG_CNT_Q, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_OSEA_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_CHIP_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CRD_SUM_CAPP_LOGN_CNT_Q, CRD_SUM_VIEW_CARD_DETL_CNT_Q, CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F, CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F, CMA_SUM_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_CNT_Q, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_DOMS_TRAN_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_CNT_Q, CMC_SUM_OSEA_TRAN_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_CNT_Q, CMC_SUM_PAY_PASS_TRAN_CNT_Q, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N
)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT_01
);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-09 12:23:38.770 Z,2025-09-09 13:52:27.249 Z
36.250383,0.063396483660,0,0,<redacted cortex job>,ANANDKAN,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_001,X-Large,SUCCESS,2025-09-17 06:33:53.838 Z,2025-09-17 07:10:08.861 Z
125.845067,0.000000000000,0,0,"SELECT  *  FROM ( SELECT ""HDR_ACTIVITY_TYPE"", count(1) AS ""COUNT"" FROM ( SELECT  *  FROM LABMLFRD.TECHDS_MARVIN_CCA_TRANSACTIONS_ENCODED_FRAUDENGINEERING_TESTING_CHK_JOIN_COND) GROUP BY ""HDR_ACTIVITY_TYPE"") LIMIT 100",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-20 23:23:57.113 Z,2025-08-21 01:29:47.817 Z
100.090667,39.287932209671,4571630579712,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg7d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-03-01' and '2025-06-06'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-03-01' and '2025-06-06') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,

    COALESCE(CAST(CMC_SUM_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_UPST_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_UPST_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_RULE_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_FINL_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_UPST_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FINL_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FDP_RULE_TRIG_CNT_Q AS FLOAT), -1) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    COALESCE(CAST(CMC_SUM_DOMS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_DOMS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_OSEA_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_OSEA_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_DOMS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_DOMS_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_OSEA_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_OSEA_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_3DS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_3DS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_N3D_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_N3D_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_3DS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_3DS_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_N3D_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_N3D_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CARD_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_ATM_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_ATM_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_FALL_BACK_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CHIP_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CHIP_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_PAY_PASS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CARD_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_ATM_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_ATM_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FALL_BACK_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CHIP_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CHIP_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_PAY_PASS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
    COALESCE(CAST(CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMC_MAX_CUV_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_RULE_PUSH_SENT_F,

    
    -- CMC_SUM_TRAN_CNT_Q,
    -- CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    -- CMC_SUM_TRAN_SUM_N,
    -- CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    -- CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    -- CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    -- CMC_SUM_UPST_APRD_TRAN_SUM_N,
    -- CMC_SUM_FINL_APRD_TRAN_SUM_N,
    -- CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    -- CMC_SUM_DOMS_TRAN_CNT_Q,
    -- CMC_SUM_OSEA_TRAN_CNT_Q,
    -- CMC_SUM_DOMS_TRAN_SUM_N,
    -- CMC_SUM_OSEA_TRAN_SUM_N,
    -- CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    -- CMC_SUM_3DS_TRAN_CNT_Q,
    -- CMC_SUM_N3D_TRAN_CNT_Q,
    -- CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    -- CMC_SUM_3DS_TRAN_SUM_N,
    -- CMC_SUM_N3D_TRAN_SUM_N,
    -- CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    -- CMC_SUM_ATM_TRAN_CNT_Q,
    -- CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    -- CMC_SUM_CHIP_TRAN_CNT_Q,
    -- CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    -- CMC_SUM_CARD_PRES_TRAN_SUM_N,
    -- CMC_SUM_ATM_TRAN_SUM_N,
    -- CMC_SUM_FALL_BACK_TRAN_SUM_N,
    -- CMC_SUM_CHIP_TRAN_SUM_N,
    -- CMC_SUM_PAY_PASS_TRAN_SUM_N,
    -- CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    -- CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    -- CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-09-04 05:58:11.654 Z,2025-09-04 07:38:17.094 Z
68.536300,38.886155534535,5368652640256,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg7d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-06-06'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-03-01' and '2025-06-06'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-03-01' and '2025-06-06') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMC_SUM_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    CMC_SUM_TRAN_SUM_N,
    CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_SUM_N,
    CMC_SUM_FINL_APRD_TRAN_SUM_N,
    CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    CMC_SUM_DOMS_TRAN_CNT_Q,
    CMC_SUM_OSEA_TRAN_CNT_Q,
    CMC_SUM_DOMS_TRAN_SUM_N,
    CMC_SUM_OSEA_TRAN_SUM_N,
    CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMC_SUM_3DS_TRAN_CNT_Q,
    CMC_SUM_N3D_TRAN_CNT_Q,
    CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMC_SUM_3DS_TRAN_SUM_N,
    CMC_SUM_N3D_TRAN_SUM_N,
    CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    CMC_SUM_ATM_TRAN_CNT_Q,
    CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    CMC_SUM_CHIP_TRAN_CNT_Q,
    CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    CMC_SUM_CARD_PRES_TRAN_SUM_N,
    CMC_SUM_ATM_TRAN_SUM_N,
    CMC_SUM_FALL_BACK_TRAN_SUM_N,
    CMC_SUM_CHIP_TRAN_SUM_N,
    CMC_SUM_PAY_PASS_TRAN_SUM_N,
    CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-04 03:54:33.160 Z,2025-09-04 05:03:05.338 Z
178.691300,3391.879705987871,0,0,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_TAPI_SHROFFPR_oot as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    OR c.BAD = 1 THEN 1
    ELSE 0
  END AS final_target,
  SSX_CUST_NUM,
  DTL_EX_0_20S_001,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 -- TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250716 and 20250801
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",SHROFFPR,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-04 20:29:23.697 Z,2025-09-04 23:28:05.175 Z
183.818400,3319.906050212682,0,0,"create table PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_TAPI_SHROFFPR_VAL as
select 
  CASE
    WHEN b.FRAUDTYPE = 'OFI'
    OR c.BAD = 1 THEN 1
    ELSE 0
  END AS final_target,
  SSX_CUST_NUM,
  DTL_EX_0_20S_001,
  TO_TIMESTAMP(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATENTIME,
EXTRACT(HOUR FROM TRANSACTIONDATENTIME) + EXTRACT(MINUTE FROM TRANSACTIONDATENTIME) / 60.0  as TRANSACTION_HOUR,
-- SPLIT as SPLI,
  COALESCE(TRY_CAST(_l_pmt_amt AS FLOAT), -1) AS _l_pmt_amt,
  COALESCE(TRY_CAST(_a_cust_avg_acct_bal AS FLOAT), -1) AS _a_cust_avg_acct_bal,
  COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_npp_out_sum_date, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) AS     _x_npp_out_sum_date_diff,
-- features extracted from fingerprints data
case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
-- substr(_L_FINGERPRINT_1, 18, 1) as STAFF_LVL, -- 1-7 indicates CBA staff and their level in the heirachy
case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association    
case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1    
case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2      
case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate    
-- substr(_L_FINGERPRINT_3, 5, 1) as MAX_TAX_REF, -- max payment from the ato to this customer    
case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
-- substr(_L_FINGERPRINT_3, 7, 1) as COMMINCOME, -- commincome bank (0-7)    
-- substr(_L_FINGERPRINT_3, 8, 1) as AVG_BIO, -- average biocatch score    
-- substr(_L_FINGERPRINT_3, 9, 1) as DAISY_CNT, -- count of DAISY disputes    
-- substr(_L_FINGERPRINT_3, 10, 2) as CMPLT_CNT, -- complaint count past 2 years     
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 12, 2)))/10,10) as BAL_1M,  -- balance one month ago
-- POWER((TRY_TO_NUMBER(substr(_l_Fingerprint_3, 14, 2)))/10,10) as BAL_2M, -- balance two months ago
case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
-- substr(_L_FINGERPRINT_4, 1, 3) as GAM_1Y, -- gambling spend past 1 year (log)    
-- substr(_L_FINGERPRINT_4, 4, 3) as GAM_3M, -- gambling spend past 3 months (log)    
-- substr(_L_FINGERPRINT_4, 7, 3) as GAM_1M, -- gambling spend past 1 month (log)    
case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status    
-- substr(_L_FINGERPRINT_3, 8, 1) as ICAL_STS, -- ICAL status   

  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,3,1), '[^0-9.-]', ''), '')),0)::number(9,0) as HOME_LOAN_COUNT,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,1,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_1_3,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,4,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_4_6,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,7,3), '[^0-9.-]', ''), '')),0)::number(9,0) as gamb_spend_7_9,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_4,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as mule_score,
  -- coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,16,1), '[^0-9.-]', ''), '')),0)::number(9,0) as int_student_flag,
  coalesce(try_to_number(nullif(regexp_replace(substr(a._L_FINGERPRINT_3,10,2), '[^0-9.-]', ''), '')),0)::number(9,0) as complaint_count,
  -- coalesce(try_to_number(nullif(regexp_replace(Substr(a._l_Fingerprint_1,9,1), '[^0-9.-]', ''), '')),0)::number(9,0) as personal_loan_count,
  a._a_cust_os_ver,
  a._a_cust_os_name,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_AUTO_DEC_CP_PP_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
COALESCE(TRY_CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(TRY_CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CAPP_NOTIFY_OPT_OUT_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
  a._A_CLIENT_CITY_10,
COALESCE(TRY_CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(TRY_CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(TRY_CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(TRY_CAST(_A_R AS FLOAT), -1) AS _A_R,

COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _A_SCAMP5_MLW_DT_DIFF,
  a._L_PUSH_API_1,
  a._L_PUSH_API_2,
  a._L_PUSH_API_3,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_1_DIFF,
COALESCE(datediff('hour', TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00'), TRANSACTIONDATENTIME), -1) as _L_PUSH_API_DT_2_DIFF,

COALESCE(TRY_CAST(_b_client_postcode_cnt_4 AS FLOAT), -1) AS _b_client_postcode_cnt_4,
COALESCE(TRY_CAST(_l_cntry_age AS FLOAT), -1) AS _l_cntry_age,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_1 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_1,
COALESCE(TRY_CAST(_x_ft_over5k_recip_cnt AS FLOAT), -1) AS _x_ft_over5k_recip_cnt,
COALESCE(TRY_CAST(_b_recip_sum_aaa_short AS FLOAT), -1) AS _b_recip_sum_aaa_short,
COALESCE(TRY_CAST(_l_clipb_event_cnt AS FLOAT), -1) AS _l_clipb_event_cnt,
COALESCE(TRY_CAST(_x_cif_recipient_new_cnt AS FLOAT), -1) AS _x_cif_recipient_new_cnt,
COALESCE(TRY_CAST(_a_npp_in_unrelated_sum_24_2 AS FLOAT), -1) AS _a_npp_in_unrelated_sum_24_2,
COALESCE(TRY_CAST(_b_npp_out_sum_1 AS FLOAT), -1) AS _b_npp_out_sum_1,
COALESCE(TRY_CAST(_l_acc_amt_1d AS FLOAT), -1) AS _l_acc_amt_1d,
COALESCE(TRY_CAST(_b_client_postcode_cnt_1 AS FLOAT), -1) AS _b_client_postcode_cnt_1,
COALESCE(TRY_CAST(_a_transport_reg_cnt_1 AS FLOAT), -1) AS _a_transport_reg_cnt_1,
COALESCE(TRY_CAST(_a_multi_cnt AS FLOAT), -1) AS _a_multi_cnt,
COALESCE(TRY_CAST(_l_m_l_4 AS FLOAT), -1) AS _l_m_l_4,
COALESCE(TRY_CAST(_a_prof_capp_device_nftp_1 AS FLOAT), -1) AS _a_prof_capp_device_nftp_1,
COALESCE(TRY_CAST(_n_ca_lgn_cnt_24h_1 AS FLOAT), -1) AS _n_ca_lgn_cnt_24h_1,
COALESCE(TRY_CAST(_x_name_match_cnt AS FLOAT), -1) AS _x_name_match_cnt,
COALESCE(TRY_CAST(_n_capp_linked_cnt_2 AS FLOAT), -1) AS _n_capp_linked_cnt_2,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_5 AS FLOAT), -1) AS _a_prof_capp_device_cnt_5,
COALESCE(TRY_CAST(_a_prof_capp_device_cnt_4 AS FLOAT), -1) AS _a_prof_capp_device_cnt_4,
COALESCE(TRY_CAST(_b_list_rl1_scam_tp_cif AS FLOAT), -1) AS _b_list_rl1_scam_tp_cif,
COALESCE(TRY_CAST(_b_npp_blacklist_recip_flag AS FLOAT), -1) AS _b_npp_blacklist_recip_flag,
COALESCE(TRY_CAST(_l_sess_cnt_web AS FLOAT), -1) AS _l_sess_cnt_web,
COALESCE(TRY_CAST(_n_100k_crypto_sum AS FLOAT), -1) AS _n_100k_crypto_sum,
COALESCE(TRY_CAST(_n_crypto_recipient_sum AS FLOAT), -1) AS _n_crypto_recipient_sum,
COALESCE(TRY_CAST(_b_recip_sum_aaa_2 AS FLOAT), -1) AS _b_recip_sum_aaa_2,
COALESCE(TRY_CAST(_l_m_l_c AS FLOAT), -1) AS _l_m_l_c,
COALESCE(TRY_CAST(_l_time_zone AS FLOAT), -1) AS _l_time_zone,
COALESCE(TRY_CAST(_b_client_postcode_sum_5 AS FLOAT), -1) AS _b_client_postcode_sum_5,
COALESCE(TRY_CAST(_a_cust_npp_in_sum_aaa_1 AS FLOAT), -1) AS _a_cust_npp_in_sum_aaa_1,
COALESCE(TRY_CAST(_l_ip_age AS FLOAT), -1) AS _l_ip_age,
COALESCE(TRY_CAST(_a_npp_inbound_sum_amt AS FLOAT), -1) AS _a_npp_inbound_sum_amt,
COALESCE(TRY_CAST(_x_ft_over5k_recip_sum AS FLOAT), -1) AS _x_ft_over5k_recip_sum,
COALESCE(TRY_CAST(_x_cif_sender_cnt AS FLOAT), -1) AS _x_cif_sender_cnt,

COALESCE(TRY_CAST(_a_nb_logons_cnt_2 AS FLOAT), -1) AS _a_nb_logons_cnt_2,
COALESCE(TRY_CAST(_a_clc_ftp_amt AS FLOAT), -1) AS _a_clc_ftp_amt,
COALESCE(TRY_CAST(_l_trvl_spd AS FLOAT), -1) AS _l_trvl_spd,
COALESCE(TRY_CAST(_n_2wp_tran_ind_1 AS FLOAT), -1) AS _n_2wp_tran_ind_1,
COALESCE(TRY_CAST(_b_recip_sum_long AS FLOAT), -1) AS _b_recip_sum_long,
COALESCE(TRY_CAST(_a_crypto_mnthly_sum AS FLOAT), -1) AS _a_crypto_mnthly_sum,
COALESCE(TRY_CAST(_x_t_2 AS FLOAT), -1) AS _x_t_2,
COALESCE(TRY_CAST(_a_gl_trf_acc_bal AS FLOAT), -1) AS _a_gl_trf_acc_bal,
COALESCE(TRY_CAST(_l_sess_cnt_mob_browser AS FLOAT), -1) AS _l_sess_cnt_mob_browser,
COALESCE(TRY_CAST(_b_client_postcode_sum_1 AS FLOAT), -1) AS _b_client_postcode_sum_1,
COALESCE(TRY_CAST(_l_score_3 AS FLOAT), -1) AS _l_score_3,
COALESCE(TRY_CAST(_n_noncrypto_sum AS FLOAT), -1) AS _n_noncrypto_sum,
COALESCE(TRY_CAST(_a_crd_crypto_proc_flg AS FLOAT), -1) AS _a_crd_crypto_proc_flg,
COALESCE(TRY_CAST(_b_npp_out_cnt_2 AS FLOAT), -1) AS _b_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_npp_out_cnt_2 AS FLOAT), -1) AS _a_npp_out_cnt_2,
COALESCE(TRY_CAST(_a_sch_amt AS FLOAT), -1) AS _a_sch_amt,
COALESCE(TRY_CAST(_a_p_l_3 AS FLOAT), -1) AS _a_p_l_3,
COALESCE(TRY_CAST(_n_100k_noncrypto_sum AS FLOAT), -1) AS _n_100k_noncrypto_sum,
COALESCE(TRY_CAST(_b_npp_out_ftp_sum_1 AS FLOAT), -1) AS _b_npp_out_ftp_sum_1,
COALESCE(TRY_CAST(_l_sdid_cnt_1 AS FLOAT), -1) AS _l_sdid_cnt_1,
COALESCE(TRY_CAST(_b_client_postcode_sum_4 AS FLOAT), -1) AS _b_client_postcode_sum_4,
COALESCE(TRY_CAST(_a_cust_npp_out_sum_aaa_long AS FLOAT), -1) AS _a_cust_npp_out_sum_aaa_long,
COALESCE(TRY_CAST(_i_cust_tran_sum_2 AS FLOAT), -1) AS _i_cust_tran_sum_2,
COALESCE(TRY_CAST(_b_client_postcode_cnt_5 AS FLOAT), -1) AS _b_client_postcode_cnt_5,
COALESCE(TRY_CAST(_a_list_rl1_scam_cust_cif AS FLOAT), -1) AS _a_list_rl1_scam_cust_cif,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_2 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_2,
COALESCE(TRY_CAST(_l_num_sess_2h AS FLOAT), -1) AS _l_num_sess_2h,
COALESCE(TRY_CAST(_a_vpn_vps_ip_logon_count AS FLOAT), -1) AS _a_vpn_vps_ip_logon_count,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_3 AS FLOAT), -1) AS _n_mob_oth_tran_sum_3,
COALESCE(TRY_CAST(_x_t_5 AS FLOAT), -1) AS _x_t_5,
COALESCE(TRY_CAST(_a_geo_distance AS FLOAT), -1) AS _a_geo_distance,
COALESCE(TRY_CAST(_x_name_match_ind AS FLOAT), -1) AS _x_name_match_ind,
COALESCE(TRY_CAST(_a_nb_logons_cnt_3 AS FLOAT), -1) AS _a_nb_logons_cnt_3,
COALESCE(TRY_CAST(_n_mob_oth_tran_sum_2 AS FLOAT), -1) AS _n_mob_oth_tran_sum_2,
COALESCE(TRY_CAST(_l_days_lst_dev_js AS FLOAT), -1) AS _l_days_lst_dev_js,
COALESCE(TRY_CAST(_n_mob_samsung_tran_sum_1 AS FLOAT), -1) AS _n_mob_samsung_tran_sum_1,
COALESCE(TRY_CAST(_a_ftp_sum_1 AS FLOAT), -1) AS _a_ftp_sum_1,
COALESCE(TRY_CAST(_l_num_sess_4h AS FLOAT), -1) AS _l_num_sess_4h,
COALESCE(TRY_CAST(_l_nc_match_name_conf AS FLOAT), -1) AS _l_nc_match_name_conf,
COALESCE(TRY_CAST(_b_recip_sum_aaa_5 AS FLOAT), -1) AS _b_recip_sum_aaa_5,
COALESCE(TRY_CAST(_l_dpi_change AS FLOAT), -1) AS _l_dpi_change,
COALESCE(TRY_CAST(_n_100k_crypto_cnt AS FLOAT), -1) AS _n_100k_crypto_cnt,
COALESCE(TRY_CAST(_b_recip_sum_1 AS FLOAT), -1) AS _b_recip_sum_1,
COALESCE(TRY_CAST(_n_capp_logons_cnt_3m AS FLOAT), -1) AS _n_capp_logons_cnt_3m,
COALESCE(TRY_CAST(_n_mob_apple_tran_sum_2 AS FLOAT), -1) AS _n_mob_apple_tran_sum_2,
COALESCE(TRY_CAST(_a_scam_risky_mcc_prelead_amt AS FLOAT), -1) AS _a_scam_risky_mcc_prelead_amt,
COALESCE(TRY_CAST(_l_m_l_3 AS FLOAT), -1) AS _l_m_l_3,
COALESCE(TRY_CAST(_x_cif_rec_cnt AS FLOAT), -1) AS _x_cif_rec_cnt,
COALESCE(TRY_CAST(_n_nmchk_cnt AS FLOAT), -1) AS _n_nmchk_cnt,
COALESCE(TRY_CAST(_b_crypto_risk AS FLOAT), -1) AS _b_crypto_risk, -- labelled as str but all num values?
  a._a_client_city_6,
  a._l_nc_winning_alg,
  a._l_lang_3,
 case when _a_mrisk_foreign_ip_cntry_code is NULL then 'unknown' else _a_mrisk_foreign_ip_cntry_code || '_v' end as _a_mrisk_foreign_ip_cntry_code,
 case when _a_cif_establish_cust_pcode in ('0', null) then 'unknown' else _a_cif_establish_cust_pcode || '_v' end as _a_cif_establish_cust_pcode,  a._l_lang_1,
  a._l_lang_2,
  a._l_nc_response_code,
  a._a_prof_risk_ind,
  a._a_latest_ncrg_isp,
  a.DTL_EX_0_N_064,
  a.DTL_EX_0_N_065,
  a.DTL_EX_0_N_066,
 -- TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
-- CASE WHEN final_target = 1 THEN 1 + LN(1 + TGX_TRAN_AMT) ELSE 1 END AS tran_weight,
  Case when a.TTS_TRAN_TIME_ALT between '00:00:00.00' and '05:59:59.99' then 'midnight'
      when a.TTS_TRAN_TIME_ALT between '06:00:00.00' and '11:59:59.99' then 'morning'
      when a.TTS_TRAN_TIME_ALT between '12:00:00.00' and '20:59:59.99' then 'evening'
      when a.TTS_TRAN_TIME_ALT between '21:00:00.00' and '23:59:59.99' then 'night'
      end as TTS_TRAN_TIME_ALT
   FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_20s_001 = b.RUA_20BYTE_STRING_001
left join PRD_P01_DMN_FRAUMD.LABMLFRD.TAPI_FRAUDRATES c on a.SSX_CUST_NUM = c.CUSTOMER_ID
WHERE
  a.TTS_TRAN_DATE_ALT between 20250602 and 20250715
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",SHROFFPR,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-04 20:25:53.445 Z,2025-09-04 23:29:42.549 Z
72.076933,524.064218372107,53331697664,0,"create or replace temporary table NPP_TRAN as
select	distinct case   when b.fraudtype = 'CVL' then null
                else b.fraudtype
        end as FRAUDTYPE
		,b.detection
		,b.case_detection
        ,TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
		,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
		,a.tts_tran_date_alt
		,a.tts_tran_time_alt
		,a.dtl_ex_0_20s_001
		,a.dtl_ex_1_5s_01
		,a.ssx_cust_num
		,a.chl_id_ob_userid
		,a.tgx_bank_name
		,a.tgx_bank_num
		,a.tgx_branch_id
		,a.tgx_acct_num
		,a.tgx_name
		,a.tgx_description
		,TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as TRAN_AMT
		,a.dtl_ex_0_i_002 as FTP_IND
		
		-- BioCatch UVs
		,TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE
		,TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_SCORE
		,TRY_TO_NUMBER(a._l_adv_key_combo, 38, 2) as _L_ADV_KEY_COMBO
		,TRY_TO_NUMBER(a._l_clpbrd_evnt, 38, 2) as _L_CLPBRD_EVNT
		,TRY_TO_NUMBER(a._l_concurrent_sess, 38, 2) as _L_CONCURRENT_SESS
		,TRY_TO_NUMBER(a._l_export_data, 38, 2) as _L_EXPORT_DATA
		,TRY_TO_NUMBER(a._l_import_data, 38, 2) as _L_IMPORT_DATA
		,TRY_TO_NUMBER(a._l_is_rat, 38, 2) as _L_IS_RAT
		,TRY_TO_NUMBER(a._l_is_mob_rat, 38, 2) as _L_IS_MOB_RAT
		,TRY_TO_NUMBER(a._l_rat_in_sess, 38, 2) as _L_RAT_IN_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_hrisk_sess, 38, 2) as _L_IS_RCNT_HRISK_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_rat, 38, 2) as _L_IS_RCNT_RAT
		,TRY_TO_NUMBER(a._l_lrg_dist_known_loc, 38, 2) as _L_LRG_DIST_KNOWN_LOC
		,TRY_TO_NUMBER(a._l_rare_scrn_sz, 38, 2) as _L_RARE_SCRN_SZ
		,TRY_TO_NUMBER(a._l_risky_isp, 38, 2) as _L_RISKY_ISP
		,TRY_TO_NUMBER(a._l_risky_key_combo, 38, 2) as _L_RISKY_KEY_COMBO
		,TRY_TO_NUMBER(a._l_tzone_mismatch, 38, 2) as _L_TZONE_MISMATCH
		,TRY_TO_NUMBER(a._l_scm_rsk_hgh_scr, 38, 2) as _L_SCM_RSK_HGH_SCR
		,TRY_TO_NUMBER(a._l_keyb_nav_anom, 38, 2) as _L_KEYB_NAV_ANOM
		,TRY_TO_NUMBER(a._l_scrn_broadcast, 38, 2) as _L_SCRN_BROADCAST
		,TRY_TO_NUMBER(a._l_delay_to_input_pi, 38, 2) as _L_DELAY_TO_INPUT_PI
		,TRY_TO_NUMBER(a._l_input_otp_delay, 38, 2) as _L_INPUT_OTP_DELAY
		,TRY_TO_NUMBER(a._l_active_spoofing, 38, 2) as _L_ACTIVE_SPOOFING
		,TRY_TO_NUMBER(a._l_pmt_vloc_anom, 38, 2) as _L_PMT_VLOC_ANOM
		,TRY_TO_NUMBER(a._l_rcnt_hi_scr_on_dev, 38, 2) as _L_RCNT_HI_SCR_ON_DEV
		,TRY_TO_NUMBER(a._l_accum_amt_anom, 38, 2) as _L_ACCUM_AMT_ANOM
		,TRY_TO_NUMBER(a._l_app_togg, 38, 2) as _l_APP_TOGG
		,TRY_TO_NUMBER(a._l_is_active_call, 38, 2) as _L_IS_ACTIVE_CALL
		,TRY_TO_NUMBER(a._l_is_long_sess, 38, 2) as _L_IS_LONG_SESS
		,TRY_TO_NUMBER(a._l_type_patterns_anomaly, 38, 2) as _L_TYPE_PATTERNS_ANOMALY
		,TRY_TO_NUMBER(a._l_seg_typing_pi, 38, 2) as _L_SEG_TYPING_PI
		
		-- NameCheck UVs
		,a._l_nc_response_code
		,a._l_nc_match_name_conf
		
		-- H2O Score UVs
		,TRY_TO_NUMBER(a._l_cust_scamrisk_score, 38, 2) as _L_CUST_SCAMRISK_SCORE
		,a.dtl_ex_0_n_029
		,a.dtl_ex_0_n_034 as CERBERUS_SCORE
		
		-- Recipient Level UVs
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_short, 38, 2) as _B_RECIP_SUM_SHORT
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_long, 38, 2) as _B_RECIP_SUM_LONG
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_short, 38, 2) as _B_RECIP_FTP_CNT_SHORT
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_long, 38, 2) as _B_RECIP_FTP_CNT_LONG
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_any_cust_ftp_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_ANY_CUST_FTP_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_2
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_3
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_4
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_5
		
		-- Customer Level UVs
		,TRY_TO_NUMBER(a._a_customer_age, 38, 2) as _A_CUSTOMER_AGE
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_SHORT, 38, 2) as _A_CUST_SUM_AAA_SHORT
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_LONG, 38, 2) as _A_CUST_SUM_AAA_LONG
		,TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1
		,TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2
		,TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3
		,TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4
		,TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5
		,TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6
		,TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7
		,TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1
		,TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2
		,TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3
		,TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4
		,TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5
		,TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6
		,TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_NEW_CAPP_REGO_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CSE_CHG_DWL_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CIF_ESTABLISH_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00') as _A_NB_LASTLOGON_DT_1
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00') as _A_CURR_CAPP_DEVICE_DT
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_1, 38, 2) as _A_NB_LOGONS_CNT_1
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_2, 38, 2) as _A_NB_LOGONS_CNT_2
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_3, 38, 2) as _A_NB_LOGONS_CNT_3
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_1, 38, 2) as _A_CAPP_LOGON_CNT_1
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_2, 38, 2) as _A_CAPP_LOGON_CNT_2
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_3, 38, 2) as _A_CAPP_LOGON_CNT_3
		
		-- Customer-Recipient Relationship Level UVs
		,TRY_TO_NUMBER(a._x_cif_recipient_new_sum, 38, 2) + TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM
		,case   when a._x_cif_recipient_new_date = '0' then TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF')
                else TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00'::timestamp)
		end as _X_CIF_RECIPIENT_NEW_DATE
		,case   when a._x_cif_recipient_new_cnt = '0' then 1
                else TRY_TO_NUMBER(a._x_cif_recipient_new_cnt, 38, 2) + 1
		end as _X_CIF_RECIPIENT_NEW_CNT
		
		-- Telstra Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_TELSTRA_LONG_CALL
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_telstra_last_call_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _X_TELSTRA_LAST_CALL_DT
		,TRY_TO_NUMBER(a._x_telstra_last_call_dur, 38, 2) as _X_TELSTRA_LAST_CALL_DUR
		,TRY_TO_NUMBER(a._x_telstra_max_call_dur, 38, 2) as _X_TELSTRA_MAX_CALL_DUR
		,a._a_telstra_active_call
		
		-- Crypto UVs
		,TRY_TO_NUMBER(a._a_crypto_mnthly_sum, 38, 2) as _A_CRYPTO_MNTHLY_SUM
		,DATEADD(day, TRY_TO_NUMBER(a._a_crypto_last_pymnt_date, 38, 2), '1960-01-01') as _A_CRYPTO_LAST_PYMNT_DATE
		
		-- M100 Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP1_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP2_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP3_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP4_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP5_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP6_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP7_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP10_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp11_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP11_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp12_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP12_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp13_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP13_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP20_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP21_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_M100_P8_IND_DT
		
		-- M100 App Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P1_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P5_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P8_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P9_DT
 		
		-- CIF Profiling UVs
		,a._l_fingerprint_1
		,a._l_fingerprint_2
		,a._l_fingerprint_3
		,a._l_fingerprint_4

        -- Intelligent Friction UVs
                ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCTN_MSG_SNT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCTN_MSG_SNT
    
         ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCT_INTENT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCT_INTENT
        
from        lcl.fdp_customer_transactions_send_flat a
left join  prd_p01_dmn_fraumd.labmlfrd.dtl_fraudmaster b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where   a.mid_event_ts >= '20250701'
and     a.mid_event_ts >= '20250801'
and     a.dtl_ex_1_5s_01 in ('C205N'
							,'C207N'
							,'C242N'
							,'C244N'
							,'C246N'
							,'N205N'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'X232N'
							,'X243N'
							,'X246N')
and     a.hdr_source = 'NPP OUT'
and     tran_amt > 0
order by    chl_id_ob_userid
            ,transactiondatetime;",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-04 22:37:24.270 Z,2025-09-04 23:49:28.886 Z
111.776367,4742.412510901690,5467088826368,0,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as 
(
WITH code1_data AS (
        SELECT DISTINCT

    -- Transaction datetime (parsed from alternate date/time fields)
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
    -- Transaction ID (concatenation of 3 fields)x
    ,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
    -- Snapshot date of transaction (parsed from MID_EVENT_TS)
    ,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
    -- Account identifier (bank, branch, account number)
    ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
    -- Party identifier (customer number padded)
    ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
    -- Transaction date (alternate format)
    ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d

    -- Feature from leaky.txt, no description
    ,dtl_ex_0_20s_001
    -- Feature from leaky.txt, no description
    -- ,dtl_ex_1_5s_01
    -- Customer number (must be present, dropped for modelling)
    ,SSX_CUST_NUM
    -- Transaction amount
    -- ,tgx_tran_amt
    -- -- Max 30-day risk score
    -- ,_l_max_30d_score
    -- -- BC risk score
    -- ,_l_bc_score
    -- -- Max 30-day mule risk score
    -- ,_l_max_30d_mule_score

    ,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

-- ,_l_adv_key_combo
-- ,_l_clpbrd_evnt
-- ,_l_concurrent_sess
-- ,_l_export_data
-- ,_l_import_data
-- ,_l_rat_in_sess
-- ,_l_is_rcnt_hrisk_sess
,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS

-- ,_l_scrn_broadcast
-- ,_l_delay_to_input_pi
-- ,_l_active_spoofing
-- ,_l_pmt_vloc_anom
-- ,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM

-- ,_l_accum_amt_anom
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM

-- ,_l_is_active_call
-- ,_l_is_long_sess
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,_L_TRUST_900
-- ,_L_TRUST_NEW_PAYEE
-- ,_L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE

-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYEE
-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYER
-- ,_L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,_l_cust_scamrisk_score
-- ,_b_recip_sum_short
-- ,_b_recip_sum_long
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG

-- ,_a_customer_age
-- ,_a_cust_sum_aaa_short
-- ,_a_cust_sum_aaa_long
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M

-- ,_x_cif_recipient_new_sum
------------------
-- Keep other columns as VARCHAR (mostly text)
,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,_x_cif_recipient_new_cnt
-- ,_x_telstra_last_call_dur
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_3
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_2
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_4
-- ,REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '') as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
-- REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '') as _N_NEW_IP_LOGON_PCODE,
-- REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '') as _A_LOGON_198_IP_PC,
-- REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '') as _A_LOGON_NB_IP_PC,
-- COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,


,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT

-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE


,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT


-- ,_x_telstra_max_call_dur
-- -- ,_a_telstra_active_call
-- ,_a_telstra_tp_outbnd_avg_dur
-- ,_a_telstra_multi_calls
-- ,_a_crypto_mnthly_sum
-- COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
-- COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
-- COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM

,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250717'
and     dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     TRAN_AMT > 0
order by    transactiondatetime
-- limit 10000
),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-17'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,

        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1

--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_001,X-Large,SUCCESS,2025-08-31 08:12:37.642 Z,2025-08-31 10:04:24.224 Z
43.572883,8.591356866062,329744490496,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg7d_OOT as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-06-01' and '2025-06-21'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-06-01' and '2025-06-21'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-06-01' and '2025-06-21') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 6 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,

    COALESCE(CAST(CMC_SUM_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_UPST_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_UPST_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_RULE_DCLN_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_FINL_APRD_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_UPST_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FINL_APRD_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FDP_RULE_TRIG_CNT_Q AS FLOAT), -1) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    COALESCE(CAST(CMC_SUM_DOMS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_DOMS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_OSEA_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_OSEA_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_DOMS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_DOMS_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_OSEA_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_OSEA_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_3DS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_3DS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_N3D_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_N3D_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_3DS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_3DS_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_N3D_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_N3D_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CARD_PRES_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_ATM_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_ATM_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_FALL_BACK_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CHIP_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_CHIP_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_PAY_PASS_TRAN_CNT_Q AS FLOAT), -1) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    COALESCE(CAST(CMC_SUM_CARD_PRES_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_ATM_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_ATM_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_FALL_BACK_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_CHIP_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_CHIP_TRAN_SUM_N,
    COALESCE(CAST(CMC_SUM_PAY_PASS_TRAN_SUM_N AS FLOAT), -1) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
    COALESCE(CAST(CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    COALESCE(CAST(CMC_MAX_CUV_RULE_PUSH_SENT_F AS FLOAT), -1) AS CMC_MAX_CUV_RULE_PUSH_SENT_F,

    
    -- CMC_SUM_TRAN_CNT_Q,
    -- CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    -- CMC_SUM_TRAN_SUM_N,
    -- CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    -- CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    -- CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    -- CMC_SUM_UPST_APRD_TRAN_SUM_N,
    -- CMC_SUM_FINL_APRD_TRAN_SUM_N,
    -- CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    -- CMC_SUM_DOMS_TRAN_CNT_Q,
    -- CMC_SUM_OSEA_TRAN_CNT_Q,
    -- CMC_SUM_DOMS_TRAN_SUM_N,
    -- CMC_SUM_OSEA_TRAN_SUM_N,
    -- CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    -- CMC_SUM_3DS_TRAN_CNT_Q,
    -- CMC_SUM_N3D_TRAN_CNT_Q,
    -- CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    -- CMC_SUM_3DS_TRAN_SUM_N,
    -- CMC_SUM_N3D_TRAN_SUM_N,
    -- CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    -- CMC_SUM_ATM_TRAN_CNT_Q,
    -- CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    -- CMC_SUM_CHIP_TRAN_CNT_Q,
    -- CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    -- CMC_SUM_CARD_PRES_TRAN_SUM_N,
    -- CMC_SUM_ATM_TRAN_SUM_N,
    -- CMC_SUM_FALL_BACK_TRAN_SUM_N,
    -- CMC_SUM_CHIP_TRAN_SUM_N,
    -- CMC_SUM_PAY_PASS_TRAN_SUM_N,
    -- CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    -- CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    -- CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-09-09 07:35:37.805 Z,2025-09-09 08:19:12.178 Z
149.902917,15534.197239652276,0,0,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        * EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-09 06:55:04.637 Z,2025-09-09 09:24:58.812 Z
72.654600,17532.500848919153,0,0,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        * EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-11 03:48:22.847 Z,2025-09-11 05:01:02.123 Z
30.749683,10347.181142166257,0,0,"SELECT 
    t1.tts_tran_date_client,
    t1.tts_tran_time_client,
    REGEXP_REPLACE(LTRIM(t1._c_cmx_tran_id), '^[0-9]','') AS transactionnumber2,
    t1.ath_pc_pos,
    t1.rsp_action_code,
    t1.DTL_CA_auth_sys_dec,
    t1.DTL_CA_client_amt,
    t1.CHL_CT_term_owner_name,
    t1.dtl_ex_0_20s_004,
    t1.chl_id_card_num,
    t1.CHL_CT_mer_mcc,
    t1.dtl_ex_3_20s_001,
    t1.chl_ct_media,
    t1.dtl_ex_0_3s_002,
    t1.dtl_ca_reversal_ind,
    t1.dtl_ex_3_80s_003,
    t1._a_customer_age,
    REGEXP_REPLACE(LTRIM(t1.rsp_ex_2_30s_001), '^[0-9]','') AS transactionnumber,
    t1.ssx_cust_num
FROM
    PRD_P01_DMN_FRAUMD.LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT AS t1
WHERE 
    t1.ssx_cust_num in ('18881038')",SAKKAIB,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-19 03:49:55.709 Z,2025-08-19 04:20:40.690 Z
66.156500,0.000000000000,0,0,"SELECT  *  FROM ( SELECT ""HDR_ACTIVITY_TYPE"", count(1) AS ""COUNT"" FROM ( SELECT  *  FROM LABMLFRD.TECHDS_MARVIN_CCA_TRANSACTIONS_ENCODED_FRAUDENGINEERING_TESTING_CHK_JOIN_COND) GROUP BY ""HDR_ACTIVITY_TYPE"") LIMIT 100",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-21 00:23:38.452 Z,2025-08-21 01:29:47.842 Z
65.678517,0.000000000000,0,0,"SELECT  *  FROM ( SELECT ""HDR_ACTIVITY_TYPE"", count(1) AS ""COUNT"" FROM ( SELECT  *  FROM LABMLFRD.TECHDS_MARVIN_CCA_TRANSACTIONS_ENCODED_FRAUDENGINEERING_TESTING_CHK_JOIN_COND) GROUP BY ""HDR_ACTIVITY_TYPE"") LIMIT 100",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-21 00:24:07.111 Z,2025-08-21 01:29:47.822 Z
77.691067,0.000000000000,0,0,"SELECT  *  FROM ( SELECT ""HDR_ACTIVITY_TYPE"", count(1) AS ""COUNT"" FROM ( SELECT  *  FROM LABMLFRD.TECHDS_MARVIN_CCA_TRANSACTIONS_ENCODED_FRAUDENGINEERING_TESTING_CHK_JOIN_COND) GROUP BY ""HDR_ACTIVITY_TYPE"") LIMIT 100",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-21 00:12:06.380 Z,2025-08-21 01:29:47.844 Z
93.296300,1259.793120712042,0,0,"create or replace temporary table Digital_Transactions as
select    
    b.fraudtype,
    b.DETECTION,
    b.case_detection,
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') as _B_ANY_CUST_FTP_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00') as _x_cif_recipient_new_date,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_BC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _L_BC_EVENT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SCM_RSK_HGH_DT, 38, 2), '1960-01-01 00:00:00') as _L_SCM_RSK_HGH_DT,
    _L_NC_RESPONSE_CODE,
    dtl_ex_0_20s_001 AS RECEIPT_NUM,
    (a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID,
    cmx_tran_id,
    hdr_activity_type,
    ssx_cust_num,
    chl_id_ob_userid,
    chl_id_pb_userid,
    dtl_ex_1_5s_01 as dmx_5byte_string_01,
    _a_cse_chg_dwl_ind AS DWL_change,
    dtl_ex_0_n_006 as Task_ID,
    dtl_ex_0_i_002 AS FTP_Indicator_1,
    rsp_ex_2_i_006 AS FTP_Indicator_2,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_SUM, 38, 2) as _X_CIF_RECIPIENT_SUM,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_SUM, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM,
    TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2) as _x_cif_recipient_new_cnt,
    TRY_TO_NUMBER(TGX_TRAN_AMT) AS TGX_TRAN_AMT,
    TRY_TO_NUMBER(_A_BTS_CUST_AGE, 38, 2)as _A_BTS_CUST_AGE,
    tgx_bank_name,
    tgx_bank_num,
    tgx_branch_id,
    tgx_acct_num,
    tgx_name,
    _L_ACCT_NUM,
    _L_BANK_NUM,
    _l_branch_id, 
    DTL_EX_3_80S_003 AS pmt_description_1,
    tgx_description AS pmt_description_2,
    TRY_TO_NUMBER(_L_SCM_RSK_HGH_SCR, 38, 2) as _L_SCM_RSK_HGH_SCR,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 5) as CERBERUS_SCORE,
    TRY_TO_NUMBER(_L_CUST_SCAMRISK_SCORE, 38, 2) as _L_CUST_SCAMRISK_SCORE,
    TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE,
    TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_S,
    TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2) as _l_max_30d_mule_score,
    TRY_TO_NUMBER(_L_NUM_SESS_2H, 38, 2) as _L_NUM_SESS_2H,
    TRY_TO_NUMBER(_L_NUM_SESS_4H, 38, 2) as _L_NUM_SESS_4H,
    TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE,38,2) as _L_TRUST_NEW_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE,38,2) as _L_TRUST_UNUSED_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN,38,2) as _L_TRUST_PAYEE_HIGH_VLOC_IN,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT,38,2) as _L_TRUST_PAYEE_DORM_ACCT,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYER,
    TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev,38,2) as _l_rcnt_hi_scr_on_dev,
    TRY_TO_NUMBER(_B_RECIP_SUM_LONG, 38, 2) as _B_RECIP_SUM_LONG,
    TRY_TO_NUMBER(_B_RECIP_SUM_SHORT, 38, 2) as _B_RECIP_SUM_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_1, 38, 2) as _B_RECIP_FTP_CNT_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_2, 38, 2) as _B_RECIP_FTP_CNT_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_3, 38, 2) as _B_RECIP_FTP_CNT_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_4, 38, 2) as _B_RECIP_FTP_CNT_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_5, 38, 2) as _B_RECIP_FTP_CNT_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_6, 38, 2) as _B_RECIP_FTP_CNT_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_7, 38, 2) as _B_RECIP_FTP_CNT_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_CNT_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_CNT_DATE,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_LONG, 38, 2) as _B_RECIP_FTP_CNT_LONG,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_SHORT, 38, 2) as _B_RECIP_FTP_CNT_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_1, 38, 2) as _B_RECIP_FTP_SUM_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_2, 38, 2) as _B_RECIP_FTP_SUM_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_3, 38, 2) as _B_RECIP_FTP_SUM_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_4, 38, 2) as _B_RECIP_FTP_SUM_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_5, 38, 2) as _B_RECIP_FTP_SUM_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_6, 38, 2) as _B_RECIP_FTP_SUM_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_7, 38, 2) as _B_RECIP_FTP_SUM_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_SUM_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_SUM_DATE,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_1, 38, 2) as _a_npp_in_unrelated_sum_24_1,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_2, 38, 2) as _a_npp_in_unrelated_sum_24_2,
    TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1,
	TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2,
	TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3,
	TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4,
	TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5,
	TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6,
	TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7,
	TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1,
	TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2,
	TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3,
	TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4,
	TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5,
	TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6,
	TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_1, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_2, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_3, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_1, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_7, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_7,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_LONG, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_LONG,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_SHORT, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP5_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP5_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP6_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP6_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP7_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP7_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP1_MLW_IND, 38, 2) as _A_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP2_MLW_IND, 38, 2) as _A_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP3_MLW_IND, 38, 2) as _A_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP4_MLW_IND, 38, 2) as _A_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP5_MLW_IND, 38, 2) as _A_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP6_MLW_IND, 38, 2) as _A_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP7_MLW_IND, 38, 2) as _A_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP_MLW_IND, 38, 2) as _A_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MOUSE_MV_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_MOUSE_MV_MLW_DT,
    TRY_TO_NUMBER(_N_MOUSE_MV_MLW_IND, 38, 2) as _N_MOUSE_MV_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_1, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_2, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_3, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_4, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_5, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_5,
    _N_5_RCNT_M100S_1,
    _N_5_RCNT_M100S_2,
    _N_5_RCNT_M100S_3,
    _N_5_RCNT_M100S_4,
    _N_5_RCNT_M100S_5,
    TRY_TO_NUMBER(_N_M100_P8_IND, 38, 2) as _N_M100_P8_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P8_IND_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P8_IND_DT,
    TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND,
    TRY_TO_NUMBER(_N_P20_7D_CNT_1, 38, 2) as _N_P20_7D_CNT_1,
    TRY_TO_NUMBER(_N_P20_7D_CNT_2, 38, 2) as _N_P20_7D_CNT_2,
    TRY_TO_NUMBER(_N_P20_7D_CNT_3, 38, 2) as _N_P20_7D_CNT_3,
    TRY_TO_NUMBER(_N_P20_7D_CNT_4, 38, 2) as _N_P20_7D_CNT_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_P20_7D_CNT_DT, 38, 2), '1960-01-01 00:00:00') as _N_P20_7D_CNT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP21_MLW_IND, 38, 2) as _A_SCAMP21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP21_MLW_IND, 38, 2) as _N_SCAMP21_MLW_IND,
    _L_PUSH_API_1,
    _L_PUSH_API_2,
    _L_PUSH_API_3,
    _L_PUSH_API_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,3,1),1.) as HOME_LOAN_IND,
    TRY_TO_NUMBER(substr(_l_Fingerprint_1,11,1),1.) as MORTGAGE_ACC,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,7,1),1.) as INCOME_BANDS,
    TRY_TO_NUMBER(substr(dtl_ex_0_20s_004,14,1),1.) as HOME_OWNER_STATUS,
    dtl_ex_0_30s_002,
    dtl_ex_0_80s_002,
    _L_POLICY_NM
from LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
    on a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where mid_event_ts >= '20250501'
and mid_event_ts <= '20250801';",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-21 22:38:00.482 Z,2025-08-22 00:11:18.260 Z
143.979533,1259.781277060509,0,0,"create or replace temporary table Digital_Transactions as
select    
    b.fraudtype,
    b.DETECTION,
    b.case_detection,
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') as _B_ANY_CUST_FTP_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00') as _x_cif_recipient_new_date,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_BC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _L_BC_EVENT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SCM_RSK_HGH_DT, 38, 2), '1960-01-01 00:00:00') as _L_SCM_RSK_HGH_DT,
    _L_NC_RESPONSE_CODE,
    dtl_ex_0_20s_001 AS RECEIPT_NUM,
    (a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID,
    cmx_tran_id,
    hdr_activity_type,
    ssx_cust_num,
    chl_id_ob_userid,
    chl_id_pb_userid,
    dtl_ex_1_5s_01 as dmx_5byte_string_01,
    _a_cse_chg_dwl_ind AS DWL_change,
    dtl_ex_0_n_006 as Task_ID,
    dtl_ex_0_i_002 AS FTP_Indicator_1,
    rsp_ex_2_i_006 AS FTP_Indicator_2,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_SUM, 38, 2) as _X_CIF_RECIPIENT_SUM,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_SUM, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM,
    TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2) as _x_cif_recipient_new_cnt,
    TRY_TO_NUMBER(TGX_TRAN_AMT) AS TGX_TRAN_AMT,
    TRY_TO_NUMBER(_A_BTS_CUST_AGE, 38, 2)as _A_BTS_CUST_AGE,
    tgx_bank_name,
    tgx_bank_num,
    tgx_branch_id,
    tgx_acct_num,
    tgx_name,
    _L_ACCT_NUM,
    _L_BANK_NUM,
    _l_branch_id, 
    DTL_EX_3_80S_003 AS pmt_description_1,
    tgx_description AS pmt_description_2,
    TRY_TO_NUMBER(_L_SCM_RSK_HGH_SCR, 38, 2) as _L_SCM_RSK_HGH_SCR,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 5) as CERBERUS_SCORE,
    TRY_TO_NUMBER(_L_CUST_SCAMRISK_SCORE, 38, 2) as _L_CUST_SCAMRISK_SCORE,
    TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE,
    TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_S,
    TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2) as _l_max_30d_mule_score,
    TRY_TO_NUMBER(_L_NUM_SESS_2H, 38, 2) as _L_NUM_SESS_2H,
    TRY_TO_NUMBER(_L_NUM_SESS_4H, 38, 2) as _L_NUM_SESS_4H,
    TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE,38,2) as _L_TRUST_NEW_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE,38,2) as _L_TRUST_UNUSED_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN,38,2) as _L_TRUST_PAYEE_HIGH_VLOC_IN,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT,38,2) as _L_TRUST_PAYEE_DORM_ACCT,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYER,
    TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev,38,2) as _l_rcnt_hi_scr_on_dev,
    TRY_TO_NUMBER(_B_RECIP_SUM_LONG, 38, 2) as _B_RECIP_SUM_LONG,
    TRY_TO_NUMBER(_B_RECIP_SUM_SHORT, 38, 2) as _B_RECIP_SUM_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_1, 38, 2) as _B_RECIP_FTP_CNT_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_2, 38, 2) as _B_RECIP_FTP_CNT_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_3, 38, 2) as _B_RECIP_FTP_CNT_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_4, 38, 2) as _B_RECIP_FTP_CNT_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_5, 38, 2) as _B_RECIP_FTP_CNT_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_6, 38, 2) as _B_RECIP_FTP_CNT_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_7, 38, 2) as _B_RECIP_FTP_CNT_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_CNT_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_CNT_DATE,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_LONG, 38, 2) as _B_RECIP_FTP_CNT_LONG,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_SHORT, 38, 2) as _B_RECIP_FTP_CNT_SHORT,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_1, 38, 2) as _B_RECIP_FTP_SUM_1,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_2, 38, 2) as _B_RECIP_FTP_SUM_2,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_3, 38, 2) as _B_RECIP_FTP_SUM_3,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_4, 38, 2) as _B_RECIP_FTP_SUM_4,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_5, 38, 2) as _B_RECIP_FTP_SUM_5,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_6, 38, 2) as _B_RECIP_FTP_SUM_6,
    TRY_TO_NUMBER(_B_RECIP_FTP_SUM_7, 38, 2) as _B_RECIP_FTP_SUM_7,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_SUM_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_SUM_DATE,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_1, 38, 2) as _a_npp_in_unrelated_sum_24_1,
    TRY_TO_NUMBER(_a_npp_in_unrelated_sum_24_2, 38, 2) as _a_npp_in_unrelated_sum_24_2,
    TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1,
	TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2,
	TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3,
	TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4,
	TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5,
	TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6,
	TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7,
	TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1,
	TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2,
	TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3,
	TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4,
	TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5,
	TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6,
	TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_1, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_2, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_IN_SUM_AAA_3, 38, 2) as _A_CUST_NPP_IN_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_1, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_1,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_7, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_7,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_LONG, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_LONG,
    TRY_TO_NUMBER(_A_CUST_NPP_OUT_SUM_AAA_SHORT, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP5_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP5_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP6_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP6_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_REVERSE_IND_SCAMP7_DT, 38, 2), '1960-01-01 00:00:00') as _A_REVERSE_IND_SCAMP7_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP1_MLW_IND, 38, 2) as _A_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP2_MLW_IND, 38, 2) as _A_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP3_MLW_IND, 38, 2) as _A_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP4_MLW_IND, 38, 2) as _A_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP5_MLW_IND, 38, 2) as _A_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP6_MLW_IND, 38, 2) as _A_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP7_MLW_IND, 38, 2) as _A_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP_MLW_IND, 38, 2) as _A_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MOUSE_MV_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_MOUSE_MV_MLW_DT,
    TRY_TO_NUMBER(_N_MOUSE_MV_MLW_IND, 38, 2) as _N_MOUSE_MV_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_1, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_2, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_3, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_4, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_5_RCNT_M100_DTS_5, 38, 2), '1960-01-01 00:00:00') as _N_5_RCNT_M100_DTS_5,
    _N_5_RCNT_M100S_1,
    _N_5_RCNT_M100S_2,
    _N_5_RCNT_M100S_3,
    _N_5_RCNT_M100S_4,
    _N_5_RCNT_M100S_5,
    TRY_TO_NUMBER(_N_M100_P8_IND, 38, 2) as _N_M100_P8_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P8_IND_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P8_IND_DT,
    TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT,
    TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND,
    TRY_TO_NUMBER(_N_P20_7D_CNT_1, 38, 2) as _N_P20_7D_CNT_1,
    TRY_TO_NUMBER(_N_P20_7D_CNT_2, 38, 2) as _N_P20_7D_CNT_2,
    TRY_TO_NUMBER(_N_P20_7D_CNT_3, 38, 2) as _N_P20_7D_CNT_3,
    TRY_TO_NUMBER(_N_P20_7D_CNT_4, 38, 2) as _N_P20_7D_CNT_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_P20_7D_CNT_DT, 38, 2), '1960-01-01 00:00:00') as _N_P20_7D_CNT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_A_SCAMP21_MLW_IND, 38, 2) as _A_SCAMP21_MLW_IND,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP21_MLW_DT,
    TRY_TO_NUMBER(_N_SCAMP21_MLW_IND, 38, 2) as _N_SCAMP21_MLW_IND,
    _L_PUSH_API_1,
    _L_PUSH_API_2,
    _L_PUSH_API_3,
    _L_PUSH_API_4,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,3,1),1.) as HOME_LOAN_IND,
    TRY_TO_NUMBER(substr(_l_Fingerprint_1,11,1),1.) as MORTGAGE_ACC,
    TRY_TO_NUMBER(substr(_l_Fingerprint_3,7,1),1.) as INCOME_BANDS,
    TRY_TO_NUMBER(substr(dtl_ex_0_20s_004,14,1),1.) as HOME_OWNER_STATUS,
    dtl_ex_0_30s_002,
    dtl_ex_0_80s_002,
    _L_POLICY_NM
from LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
    on a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where mid_event_ts >= '20250501'
and mid_event_ts <= '20250801';",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-25 23:24:22.250 Z,2025-08-26 01:48:21.022 Z
31.596117,766.846306274645,259026038784,0,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as (
WITH code1_data AS (
    SELECT DISTINCT

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250601'
and  mid_event_ts < '20250717'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2025-06-01'
    and SNAP_D < '2025-07-17'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-26 12:14:15.491 Z,2025-08-26 12:45:51.258 Z
48.452633,11430.103394225240,1039271575552,0,"CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_FPF AS (
-- INSERT INTO LABMLFRD.CARD_TRAN_PRFL (
    WITH TRAN AS (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS TRAN_I
            , TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S
            , TO_DATE(TTS_TRAN_DATE_ALT, 'YYYYMMDD') AS TRAN_D
            , UPPER(TO_CHAR(DATE_TRUNC('HOUR', TRAN_S), 'HH:DY')) AS TRAN_HOUR_DAY_X
            , TO_CHAR(SSX_CUST_NUM) AS CUST_I
        	, CHL_ID_CARD_NUM AS CARD_I
            , ATH_PC_CARD_EXP_DATE
        	, DTL_EX_0_20S_004 AS DPAN_I
        	, CASE WHEN CHL_CT_MEDIA = 'V' THEN 1 ELSE 0 END AS TOKN_F
            , CASE WHEN CHL_CT_WHICH_CARD IN (1,0) THEN 1 ELSE 0 END AS PRIM_CAHD_F
        	, DTL_CA_CLIENT_AMT AS TRAN_AMT_N
        	, ATH_PC_POS AS POS_ENTR_C
            , CASE WHEN DTL_CA_REVERSAL_IND = 'N' THEN 0 ELSE 1 END AS REVS_INDA_F
            , CASE WHEN ATH_PC_PIN_VRFY = 'V' THEN 0 ELSE 1 END AS PIN_VRFY_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'C' THEN 1 ELSE 0 END AS PAIN_CUST_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'M' THEN 1 ELSE 0 END AS PAIN_MERC_F
        	, CASE WHEN DTL_EX_0_I_022 = 'R' THEN 1 ELSE 0 END AS RCRR_F
        	, DTL_EX_0_3S_002 AS SECU_LEVL_INDA_C
            , SUBSTR(DTL_EX_3_80S_003,1,2) AS ACCT_AUTT_V
            , CASE WHEN ATH_PC_POS IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_NOT_PRES_INDA_F
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS ""3DS_INDA_F""
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 NOT IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS N3D_INDA_F
            , CASE WHEN ATH_PC_POS NOT IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_PRES_INDA_F
            , CASE WHEN CARD_PRES_INDA_F = '1' AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS ATM_TRAN_F
            , CASE WHEN POS_ENTR_C IN ('62','79','80') AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS FALL_BACK_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '05' THEN 1 ELSE 0 END AS CHIP_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '07' THEN 1 ELSE 0 END AS PAY_PASS_TRAN_INDA_F
        	, REPLACE(DTL_CA_AUTH_SYS_DEC,' ','') AS UPST_DCDE_C
        	, REPLACE(DTL_CA_AUTH_SYS_INFO,' ','') AS UPST_REAS_C
            , REPLACE(RSP_ACTION_CODE,' ','') AS FINL_DCDE_C
            , CASE WHEN UPST_DCDE_C = '1' AND FINL_DCDE_C != '1' THEN 1 ELSE 0 END AS RULE_DCLN_F
        	, CASE WHEN FINL_DCDE_C = '1' THEN 1 ELSE 0 END AS FINL_APRD_TRAN_CNT_F
        	, CASE WHEN UPST_REAS_C IN ('20','21','22','81','BE') THEN 1 ELSE 0 END  AS INCO_EXPY_F
        	, CASE WHEN UPST_REAS_C IN ('30','31','34','36','41','42','43','44','45','46','47') THEN 1 ELSE 0 END AS INCO_CVVA_F
        	, CASE WHEN UPST_REAS_C IN ('11','12','CP','MP','PE','PM') THEN 1 ELSE 0 END AS INCO_PIN_F
        	, CASE WHEN UPST_REAS_C IN ('T7','CL','87','88','89','90','98') THEN 1 ELSE 0 END AS OVER_LIMT_DCLN_F /* $ OVER LIMIT, DELINQUANT OR TRASACTION LIMIT */
            
            , CHL_CT_ACQ_ID AS ACQR_I
        	, CHL_CT_TERM_OWNER_ID AS MERC_I
        	, REPLACE(CHL_CT_TERM_OWNER_NAME,' ','') AS MERC_M
        	, CHL_CT_TERM_ID AS MERC_TRML_I
        	, CHL_CT_TERM_CNTRY_CODE AS CNTY_C
        	, CHL_CT_MER_MCC AS MERC_CATG_C
            , CASE WHEN CHL_CT_TERM_CNTRY_CODE = '036' THEN 1 ELSE 0 END AS DOMS_TRAN_INDA_F

        	, RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X
            , SUBSTR(RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X
            , SUBSTR(RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F
        	, SUBSTR(RSP_EX_2_8S_002,8,1) AS PUSH_EXIT_C
            , CASE WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='1' AND RSP_EX_2_I_009='2' THEN '1WP_REG'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='2' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='3' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='4' AND RSP_EX_2_I_009='2' THEN '1WP_DMGD_CARD'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='5' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='A' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='B' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='G' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='H' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='I' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_CIF'
            	ELSE 'NO_PUSH' END AS PUSH_TYPE_QLFY_X
            , CASE WHEN DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(DTL_EX_3_8S_004) END AS MCRD_SCOR_N,

            -- numerical UV columns, if missing then -1 as default
COALESCE(CAST(_C_CC_GBL_N3D_1D_SUM_1 AS FLOAT), -1) AS _C_CC_GBL_N3D_1D_SUM_1,
COALESCE(CAST(_C_CC_GBL_N3D_1D_CNT_1 AS FLOAT), -1) AS _C_CC_GBL_N3D_1D_CNT_1,
COALESCE(CAST(_C_CC_CNP_VEL_6HR_SUM_1 AS FLOAT), -1) AS _C_CC_CNP_VEL_6HR_SUM_1,
COALESCE(CAST(_C_CRD_APAY_SUM_1 AS FLOAT), -1) AS _C_CRD_APAY_SUM_1,
COALESCE(CAST(_C_CRD_SAFE_MERCHANT AS FLOAT), -1) AS _C_CRD_SAFE_MERCHANT,
COALESCE(CAST(_C_2WAY_CRD_FRD_RULE_FLAG AS FLOAT), -1) AS _C_2WAY_CRD_FRD_RULE_FLAG,
COALESCE(CAST(_C_CC_CNP_LTRANS_6HR_COUNT_1 AS FLOAT), -1) AS _C_CC_CNP_LTRANS_6HR_COUNT_1,
COALESCE(CAST(_C_CC_CNP_VEL_6HR_COUNT_1 AS FLOAT), -1) AS _C_CC_CNP_VEL_6HR_COUNT_1,
COALESCE(CAST(_L_CITY_AGE AS FLOAT), -1) AS _L_CITY_AGE,
COALESCE(CAST(_A_CRD_NPP_PAYMENT_AMOUNT AS FLOAT), -1) AS _A_CRD_NPP_PAYMENT_AMOUNT,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_3 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_3,
COALESCE(CAST(_A_CUSTOMER_AGE AS FLOAT), -1) AS _A_CUSTOMER_AGE,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_10 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_10,
COALESCE(CAST(_A_NPP_FTP_SUM AS FLOAT), -1) AS _A_NPP_FTP_SUM,
COALESCE(CAST(_L_PASTE_IN_LOGIN_CNT AS FLOAT), -1) AS _L_PASTE_IN_LOGIN_CNT,
COALESCE(CAST(_A_CUST_SUM_AAA_LONG AS FLOAT), -1) AS _A_CUST_SUM_AAA_LONG,
COALESCE(CAST(_L_G_CON_DEV AS FLOAT), -1) AS _L_G_CON_DEV,
COALESCE(CAST(_L_DEV_FAM_AGE AS FLOAT), -1) AS _L_DEV_FAM_AGE,
COALESCE(CAST(_L_TOUCH_CNT AS FLOAT), -1) AS _L_TOUCH_CNT,
COALESCE(CAST(_B_RECIP_SUM_AAA_LONG AS FLOAT), -1) AS _B_RECIP_SUM_AAA_LONG,
COALESCE(CAST(_L_RISKY_KEY_COMBO AS FLOAT), -1) AS _L_RISKY_KEY_COMBO,
COALESCE(CAST(_A_C_G AS FLOAT), -1) AS _A_C_G,
COALESCE(CAST(_L_SCORE_4 AS FLOAT), -1) AS _L_SCORE_4,
COALESCE(CAST(_A_E AS FLOAT), -1) AS _A_E,
COALESCE(CAST(_A_NPP_INB_PMT_VAL AS FLOAT), -1) AS _A_NPP_INB_PMT_VAL,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_2 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_2,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_CNT_1 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_CNT_1,
COALESCE(CAST(_A_CRD_SCAM_SUPP_7D_SUM_1 AS FLOAT), -1) AS _A_CRD_SCAM_SUPP_7D_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_CNT_2 AS FLOAT), -1) AS _A_CLIENT_CITY_CNT_2,
COALESCE(CAST(_L_UID_AGE AS FLOAT), -1) AS _L_UID_AGE,
COALESCE(CAST(_L_SCRN_W AS FLOAT), -1) AS _L_SCRN_W,
COALESCE(CAST(_L_ASN_AGE AS FLOAT), -1) AS _L_ASN_AGE,
COALESCE(CAST(_L_SCORE_2 AS FLOAT), -1) AS _L_SCORE_2,
COALESCE(CAST(_A_CUST_NPP_OUT_SUM_AAA_5 AS FLOAT), -1) AS _A_CUST_NPP_OUT_SUM_AAA_5,
COALESCE(CAST(_L_BC_SESS_CNT AS FLOAT), -1) AS _L_BC_SESS_CNT,
COALESCE(CAST(_L_ACC_AMT_1H AS FLOAT), -1) AS _L_ACC_AMT_1H,
COALESCE(CAST(_A_LIST_WL_SCAM_DRIVE_LICENSE AS FLOAT), -1) AS _A_LIST_WL_SCAM_DRIVE_LICENSE,
COALESCE(CAST(_A_CC_CASH_ADVANCE_AMT AS FLOAT), -1) AS _A_CC_CASH_ADVANCE_AMT,
COALESCE(CAST(_A_CUST_SUM_AAA_SHORT AS FLOAT), -1) AS _A_CUST_SUM_AAA_SHORT,
COALESCE(CAST(_A_P_L_1 AS FLOAT), -1) AS _A_P_L_1,
COALESCE(CAST(_L_PMT_AMT AS FLOAT), -1) AS _L_PMT_AMT,
COALESCE(CAST(_L_ISP_AGE AS FLOAT), -1) AS _L_ISP_AGE,
COALESCE(CAST(_L_ACC_AMT_7D AS FLOAT), -1) AS _L_ACC_AMT_7D,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_7 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_7,
COALESCE(CAST(_L_CONCURRENT_SESS AS FLOAT), -1) AS _L_CONCURRENT_SESS,
COALESCE(CAST(_A_CAPP_HCE_CNT_1 AS FLOAT), -1) AS _A_CAPP_HCE_CNT_1,
COALESCE(CAST(_L_SCORE_5 AS FLOAT), -1) AS _L_SCORE_5,
COALESCE(CAST(_L_MUID_AGE_PER_USER AS FLOAT), -1) AS _L_MUID_AGE_PER_USER,
COALESCE(CAST(_A_CUST_ACCT_BAL AS FLOAT), -1) AS _A_CUST_ACCT_BAL,
COALESCE(CAST(_L_CUST_SCAMRISK_SCORE AS FLOAT), -1) AS _L_CUST_SCAMRISK_SCORE,
COALESCE(CAST(_A_ATM_WITHDRAWAL_SUM_AMT AS FLOAT), -1) AS _A_ATM_WITHDRAWAL_SUM_AMT,
COALESCE(CAST(_L_TAP_CNT AS FLOAT), -1) AS _L_TAP_CNT,
COALESCE(CAST(_A_LIST_WL_SCAM_TP_IP AS FLOAT), -1) AS _A_LIST_WL_SCAM_TP_IP,
COALESCE(CAST(_L_MAX_30D_SCORE AS FLOAT), -1) AS _L_MAX_30D_SCORE,
COALESCE(CAST(_B_RECIP_SUM_AAA_1 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_1,
COALESCE(CAST(_X_CIF_SENDER_SUM AS FLOAT), -1) AS _X_CIF_SENDER_SUM,
COALESCE(CAST(_L_M_L_1 AS FLOAT), -1) AS _L_M_L_1,
COALESCE(CAST(_L_SCRN_H AS FLOAT), -1) AS _L_SCRN_H,
COALESCE(CAST(_A_CUST_NPP_OUT_SUM_AAA_2 AS FLOAT), -1) AS _A_CUST_NPP_OUT_SUM_AAA_2,
COALESCE(CAST(_A_CUST_ACTION_IND AS FLOAT), -1) AS _A_CUST_ACTION_IND,
COALESCE(CAST(_A_P_L_C AS FLOAT), -1) AS _A_P_L_C,
COALESCE(CAST(_A_CUST_AVG_ACCT_BAL AS FLOAT), -1) AS _A_CUST_AVG_ACCT_BAL,
COALESCE(CAST(_L_AND_ID_AGE AS FLOAT), -1) AS _l_and_id_age,
COALESCE(CAST(_X_CIF_REC_SUM AS FLOAT), -1) AS _X_CIF_REC_SUM,
COALESCE(CAST(_L_SESS_CNT_MOB_SDK AS FLOAT), -1) AS _L_SESS_CNT_MOB_SDK,
COALESCE(CAST(_L_TOTAL_SESS_CNT AS FLOAT), -1) AS _L_TOTAL_SESS_CNT,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_L_NC_ACCT_NUM_NAME_CONF AS FLOAT), -1) AS _L_NC_ACCT_NUM_NAME_CONF,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_5 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_5,
COALESCE(CAST(_A_U AS FLOAT), -1) AS _A_U,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_L_SCM_RSK_SCR_2 AS FLOAT), -1) AS _L_SCM_RSK_SCR_2,
COALESCE(CAST(_B_RECIP_SUM_AAA_4 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_4,
COALESCE(CAST(_L_BC_SCORE AS FLOAT), -1) AS _L_BC_SCORE,
COALESCE(CAST(_L_DAYS_LST_DEV_AND AS FLOAT), -1) AS _L_DAYS_LST_DEV_AND,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_CNT_3 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_CNT_3,
COALESCE(CAST(_L_DAYS_LST_DEV_IOS AS FLOAT), -1) AS _L_DAYS_LST_DEV_IOS,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS FLOAT), -1) AS _X_LAST_N_TXN_COUNT,
COALESCE(CAST(_A_T AS FLOAT), -1) AS _A_T,
COALESCE(CAST(_A_CUST_NPP_IN_SUM_AAA_2 AS FLOAT), -1) AS _A_CUST_NPP_IN_SUM_AAA_2,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS FLOAT), -1) AS _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_L_ACC_AMT_2H AS FLOAT), -1) AS _L_ACC_AMT_2H,
            
COALESCE(CAST(_L_ACC_AMT_4H AS FLOAT), -1) AS _L_ACC_AMT_4H,
COALESCE(CAST(_A_LIST_BL_PASSPORT AS FLOAT), -1) AS _A_LIST_BL_PASSPORT,
COALESCE(CAST(_A_LIST_WL_SCAM_PASSPORT AS FLOAT), -1) AS _A_LIST_WL_SCAM_PASSPORT,
COALESCE(CAST(_A_LIST_BL_SCAM_PASSPORT AS FLOAT), -1) AS _A_LIST_BL_SCAM_PASSPORT,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_CNT_2 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_CNT_2,
COALESCE(CAST(_A_CLIENT_COUNTRY_CNT_6 AS FLOAT), -1) AS _A_CLIENT_COUNTRY_CNT_6,
COALESCE(CAST(_A_BTS_BCH_SUM AS FLOAT), -1) AS _A_BTS_BCH_SUM,
COALESCE(CAST(_A_BTS_CUST_AGE AS FLOAT), -1) AS _A_BTS_CUST_AGE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_CURR_CAPP_DEVICE_CNT,
COALESCE(CAST(_A_CURR_NB_BROWSER_CNT AS FLOAT), -1) AS _A_CURR_NB_BROWSER_CNT,
COALESCE(CAST(_A_PREV_CAPP_DEVICE_CNT AS FLOAT), -1) AS _A_PREV_CAPP_DEVICE_CNT,
COALESCE(CAST(_A_Q AS FLOAT), -1) AS _A_Q,
COALESCE(CAST(_A_R AS FLOAT), -1) AS _A_R,
COALESCE(CAST(_L_CNTRY_AGE AS FLOAT), -1) AS _L_CNTRY_AGE,
COALESCE(CAST(_A_NPP_IN_UNRELATED_SUM_24_1 AS FLOAT), -1) AS _A_NPP_IN_UNRELATED_SUM_24_1,
COALESCE(CAST(_X_FT_OVER5K_RECIP_CNT AS FLOAT), -1) AS _X_FT_OVER5K_RECIP_CNT,
COALESCE(CAST(_X_CIF_RECIPIENT_NEW_CNT AS FLOAT), -1) AS _X_CIF_RECIPIENT_NEW_CNT,
COALESCE(CAST(_A_NPP_IN_UNRELATED_SUM_24_2 AS FLOAT), -1) AS _A_NPP_IN_UNRELATED_SUM_24_2,
COALESCE(CAST(_B_NPP_OUT_SUM_1 AS FLOAT), -1) AS _B_NPP_OUT_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS FLOAT), -1) AS _L_ACC_AMT_1D,
COALESCE(CAST(_A_TRANSPORT_REG_CNT_1 AS FLOAT), -1) AS _A_TRANSPORT_REG_CNT_1,
COALESCE(CAST(_A_MULTI_CNT AS FLOAT), -1) AS _A_MULTI_CNT,
COALESCE(CAST(_L_M_L_4 AS FLOAT), -1) AS _L_M_L_4,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_X_NAME_MATCH_CNT AS FLOAT), -1) AS _X_NAME_MATCH_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_CNT_5 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_CNT_5,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_CNT_4 AS FLOAT), -1) AS _A_PROF_CAPP_DEVICE_CNT_4,
COALESCE(CAST(_L_SESS_CNT_WEB AS FLOAT), -1) AS _L_SESS_CNT_WEB,
COALESCE(CAST(_B_RECIP_SUM_AAA_2 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_2,
COALESCE(CAST(_L_M_L_C AS FLOAT), -1) AS _L_M_L_C,
COALESCE(CAST(_L_TIME_ZONE AS FLOAT), -1) AS _L_TIME_ZONE,
COALESCE(CAST(_A_CUST_NPP_IN_SUM_AAA_1 AS FLOAT), -1) AS _A_CUST_NPP_IN_SUM_AAA_1,
COALESCE(CAST(_L_IP_AGE AS FLOAT), -1) AS _L_IP_AGE,
COALESCE(CAST(_A_NPP_INBOUND_SUM_AMT AS FLOAT), -1) AS _A_NPP_INBOUND_SUM_AMT,
COALESCE(CAST(_X_FT_OVER5K_RECIP_SUM AS FLOAT), -1) AS _X_FT_OVER5K_RECIP_SUM,
COALESCE(CAST(_X_CIF_SENDER_CNT AS FLOAT), -1) AS _X_CIF_SENDER_CNT,
COALESCE(CAST(_A_NB_LOGONS_CNT_2 AS FLOAT), -1) AS _A_NB_LOGONS_CNT_2,
COALESCE(CAST(_A_CLC_FTP_AMT AS FLOAT), -1) AS _A_CLC_FTP_AMT,
COALESCE(CAST(_L_TRVL_SPD AS FLOAT), -1) AS _L_TRVL_SPD,
COALESCE(CAST(_B_RECIP_SUM_LONG AS FLOAT), -1) AS _B_RECIP_SUM_LONG,
COALESCE(CAST(_A_CRYPTO_MNTHLY_SUM AS FLOAT), -1) AS _A_CRYPTO_MNTHLY_SUM,
COALESCE(CAST(_A_GL_TRF_ACC_BAL AS FLOAT), -1) AS _A_GL_TRF_ACC_BAL,
COALESCE(CAST(_L_SESS_CNT_MOB_BROWSER AS FLOAT), -1) AS _L_SESS_CNT_MOB_BROWSER,
COALESCE(CAST(_L_SCORE_3 AS FLOAT), -1) AS _L_SCORE_3,
COALESCE(CAST(_A_CRD_CRYPTO_PROC_FLG AS FLOAT), -1) AS _A_CRD_CRYPTO_PROC_FLG,
COALESCE(CAST(_B_NPP_OUT_CNT_2 AS FLOAT), -1) AS _B_NPP_OUT_CNT_2,
COALESCE(CAST(_A_NPP_OUT_CNT_2 AS FLOAT), -1) AS _A_NPP_OUT_CNT_2,
COALESCE(CAST(_A_SCH_AMT AS FLOAT), -1) AS _A_SCH_AMT,
COALESCE(CAST(_A_P_L_3 AS FLOAT), -1) AS _A_P_L_3,
COALESCE(CAST(_B_NPP_OUT_FTP_SUM_1 AS FLOAT), -1) AS _B_NPP_OUT_FTP_SUM_1,
COALESCE(CAST(_L_SDID_CNT_1 AS FLOAT), -1) AS _L_SDID_CNT_1,
COALESCE(CAST(_A_CUST_NPP_OUT_SUM_AAA_LONG AS FLOAT), -1) AS _A_CUST_NPP_OUT_SUM_AAA_LONG,
COALESCE(CAST(_A_LIST_RL1_SCAM_CUST_CIF AS FLOAT), -1) AS _A_LIST_RL1_SCAM_CUST_CIF,
COALESCE(CAST(_L_NUM_SESS_2H AS FLOAT), -1) AS _L_NUM_SESS_2H,
COALESCE(CAST(_A_VPN_VPS_IP_LOGON_COUNT AS FLOAT), -1) AS _A_VPN_VPS_IP_LOGON_COUNT,
COALESCE(CAST(_A_GEO_DISTANCE AS FLOAT), -1) AS _A_GEO_DISTANCE,
COALESCE(CAST(_X_NAME_MATCH_IND AS FLOAT), -1) AS _X_NAME_MATCH_IND,
COALESCE(CAST(_A_NB_LOGONS_CNT_3 AS FLOAT), -1) AS _A_NB_LOGONS_CNT_3,
COALESCE(CAST(_L_DAYS_LST_DEV_JS AS FLOAT), -1) AS _L_DAYS_LST_DEV_JS,
COALESCE(CAST(_A_FTP_SUM_1 AS FLOAT), -1) AS _A_FTP_SUM_1,
COALESCE(CAST(_L_NUM_SESS_4H AS FLOAT), -1) AS _L_NUM_SESS_4H,
COALESCE(CAST(_L_NC_MATCH_NAME_CONF AS FLOAT), -1) AS _L_NC_MATCH_NAME_CONF,
COALESCE(CAST(_B_RECIP_SUM_AAA_5 AS FLOAT), -1) AS _B_RECIP_SUM_AAA_5,
COALESCE(CAST(_L_DPI_CHANGE AS FLOAT), -1) AS _L_DPI_CHANGE,
COALESCE(CAST(_B_RECIP_SUM_1 AS FLOAT), -1) AS _B_RECIP_SUM_1,
COALESCE(CAST(_A_SCAM_RISKY_MCC_PRELEAD_AMT AS FLOAT), -1) AS _A_SCAM_RISKY_MCC_PRELEAD_AMT,
COALESCE(CAST(_L_M_L_3 AS FLOAT), -1) AS _L_M_L_3,
COALESCE(CAST(_X_CIF_REC_CNT AS FLOAT), -1) AS _X_CIF_REC_CNT,
COALESCE(CAST(_A_LIST_BL_SCAM_TP_IP AS FLOAT), -1) AS _A_LIST_BL_SCAM_TP_IP,
_B_CRYPTO_RISK,
COALESCE(CAST(_A_LIST_BL_SCAM_DRIVE_LICENSE AS FLOAT), -1) AS _A_LIST_BL_SCAM_DRIVE_LICENSE,
COALESCE(CAST(_B_RECIP_SUM_AAA_SHORT AS FLOAT), -1) AS _B_RECIP_SUM_AAA_SHORT,
COALESCE(CAST(_L_CLIPB_EVENT_CNT AS FLOAT), -1) AS _L_CLIPB_EVENT_CNT,
COALESCE(CAST(_B_LIST_RL1_SCAM_TP_CIF AS FLOAT), -1) AS _B_LIST_RL1_SCAM_TP_CIF,
COALESCE(CAST(_B_NPP_BLACKLIST_RECIP_FLAG AS FLOAT), -1) AS _B_NPP_BLACKLIST_RECIP_FLAG,
        
            -- categorical UV columns
_A_CIF_ESTABLISH_CHANNEL,-- customer established channel (if = 'O' then it's electronic)
_A_ECV_DOCUMENT_IP,
_A_CUST_OS_VER,
_A_CUST_OS_NAME,
_A_2WAY_TYPE,
_A_CLIENT_CITY_10,
_L_PUSH_API_1,
_L_PUSH_API_2,
_L_PUSH_API_3,
_L_PUSH_API_4,
_A_CLIENT_CITY_6,
_L_NC_WINNING_ALG,
_L_PROXY_TYPE,
_L_LANG_3,
_L_LANG_1,
_L_LANG_2,
_L_NC_RESPONSE_CODE,
_A_PROF_RISK_IND,
_A_LATEST_NCRG_ISP,
CHL_CT_TERM_OWNER_NAME,
_C_CNP_MER_NM_CURR,
DTL_EX_0_2S_002,
DTL_EX_3_80S_002,
CASE WHEN _A_MRISK_FOREIGN_IP_CNTRY_CODE IS NULL THEN 'UNKNOWN' ELSE _A_MRISK_FOREIGN_IP_CNTRY_CODE || '_V' END AS _A_MRISK_FOREIGN_IP_CNTRY_CODE,
CASE WHEN ATH_PC_CUST_PRESENT IS NULL THEN 'UNKNOWN' ELSE ATH_PC_CUST_PRESENT || '_V' END AS ATH_PC_CUST_PRESENT,
CASE WHEN _A_CIF_ESTABLISH_CUST_PCODE IN ('0', NULL) THEN 'UNKNOWN' ELSE _A_CIF_ESTABLISH_CUST_PCODE || '_V' END AS _A_CIF_ESTABLISH_CUST_PCODE,
CASE WHEN CHL_CT_TERM_CNTRY_CODE IN ('0', NULL) THEN 'UNKNOWN' ELSE CHL_CT_TERM_CNTRY_CODE || '_V' END AS CHL_CT_TERM_CNTRY_CODE,
CASE WHEN DTL_CA_MERCH_CURR_CODE IN ('0', NULL) THEN 'UNKNOWN' ELSE DTL_CA_MERCH_CURR_CODE || '_V' END AS DTL_CA_MERCH_CURR_CODE,
        
            -- features extracted from fingerprints data
            case when substr(_L_FINGERPRINT_1, 1, 1) in('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else 'unknown' end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
            case when substr(_L_FINGERPRINT_1, 2, 1) in('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else 'unknown' end as GENDER, -- M or F    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 3, 1) as FLOAT), -1) as DMC_CNT, -- count of scheme debit cards
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 4, 1) as FLOAT), -1) as YCS_CNT, -- count of travel money cards    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 5, 1) as FLOAT), -1) as TRAN_CNT, -- count of personal txn accts   
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 6, 1) as FLOAT), -1) as DPST_CNT, -- count of money management accounts    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 7, 1) as FLOAT), -1) as CC_CNT, -- count of credit cards    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 8, 1) as FLOAT), -1) as TRD_CNT, -- count of trading accounts    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 9, 1) as FLOAT), -1) as PL_CNT, -- count of personal loan accounts 
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 10, 1) as FLOAT), -1) as INVST_CNT, -- count of investment accounts 
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 11, 1) as FLOAT), -1) as MORT_CNT, -- count of mortgage accounts 
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 12, 1) as FLOAT), -1) as INSRNC_CNT, -- count of insurance accounts 
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 13, 1) as FLOAT), -1) as BTA_CNT, -- count of business txn accounts    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 14, 1) as FLOAT), -1) as BUS_LN_CNT, -- count of business loans    
            COALESCE(TRY_CAST(substr(_L_FINGERPRINT_1, 15, 1) as FLOAT), -1) as OTH_CNT, -- count of other accounts    
            case when substr(_L_FINGERPRINT_1, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 16, 1) || '_v' else 'unknown' end as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility    
            case when substr(_L_FINGERPRINT_1, 17, 1) in('0', '1') then substr(_L_FINGERPRINT_1, 17, 1) || '_v' else 'unknown' end as REL_MNG, -- indicates whether the customer is relationship managed    
            case when substr(_L_FINGERPRINT_2, 1, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 1, 2) || '_v' end as FA_1, -- 1st known foreign association   
            case when substr(_L_FINGERPRINT_2, 3, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 3, 2) || '_v' end as FA_2, -- 2nd known foreign association    
            case when substr(_L_FINGERPRINT_2, 5, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 5, 2) || '_v' end as NO_1, -- name association 1  
            case when substr(_L_FINGERPRINT_2, 7, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 7, 2) || '_v' end as NO_2, -- name association 2  
            case when substr(_L_FINGERPRINT_2, 11, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 11, 2) || '_v' end as FA, -- foreign address    
            case when substr(_L_FINGERPRINT_2, 13, 2) in ('', '##', null) then 'unknown' else substr(_L_FINGERPRINT_2, 13, 2) || '_v' end as FP, -- foreign phone number 
            case when substr(_L_FINGERPRINT_3, 1, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 1, 1) end as GOVT_BENE, -- government benefits code    
            case when substr(_L_FINGERPRINT_3, 2, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 2, 1) || '_v' end as PRVT_CUST, -- private customer flag    
            case when substr(_L_FINGERPRINT_3, 3, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 3, 1) || '_v' else 'unknown' end as HL_ASOC, -- any association with a home loan    
            case when substr(_L_FINGERPRINT_3, 4, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 4, 1) || '_v' else 'unknown' end as CORP_EMPL, -- employed by large corporate  
            case when substr(_L_FINGERPRINT_3, 6, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 6, 1) || '_v' else 'unknown' end as TRUSTEE, -- trustee flag/part of a trust fund    
            case when substr(_L_FINGERPRINT_3, 16, 1) in('0', '1') then substr(_L_FINGERPRINT_3, 16, 1) || '_v' else 'unknown' end as INTL_STU, -- international student flag    
            case when substr(_L_FINGERPRINT_3, 12, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 12, 1) || '_v' end as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)    
            case when substr(_L_FINGERPRINT_3, 13, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 13, 1) || '_v' end as EMPL_CLAS_LGL_STS, -- employment classification or org status    
            case when substr(_L_FINGERPRINT_3, 14, 1) in ('', '#', null) then 'unknown' else substr(_L_FINGERPRINT_3, 14, 1) || '_v' end as HOME_OWN, -- home ownership status     
        
            -- time differences
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_x_npp_out_sum_date AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) AS _x_npp_out_sum_date_diff,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CC_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CC_DT_DIFF, -- customer recent credit card application datetime
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_ONLINE_PL_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_ONLINE_PL_DT_DIFF, -- customer recent personal loan application datetime
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CIF_ESTABLISH_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CIF_ESTABLISH_DT_DIFF, -- when the customer is established
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_a_ecv_document_dt AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _a_ecv_document_dt_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_AUTO_DEC_CP_PP_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CAPP_NOTIFY_OPT_OUT_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP1_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP1_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP2_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP2_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP5_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP5_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP7_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP7_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_1 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_1_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_2 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_2_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_3 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_3_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_4 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_4_DIFF,


            /* H2O UVS */
            
            
            _c_cc_n3d_ovs_975_sum_1,
            dtl_ex_0_n_009,
            _c_crd_n3d_score_sum_1,
            _c_cc_ind_tran_3d,
            dtl_ex_3_8s_007,
            ssa_c_bal,
            _c_cc_n3d_dom_999_cnt_1,
            _c_crd_apay_cnt_1,
            _c_crd_cnp_trn_cnt_1,
            
            dtl_ca_auth_sys_info,
            
            _c_crd_cnp_trn_cnt_5,
            _c_cc_recov_trans_sum_1,
            
            _c_cc_high_vel_apple_sum_1,
            _c_crd_cnp_trn_sum_1,
            
            _c_crd_all_trn_cnt_2,
            _c_n3d_merc_id_sum_1,
            _c_cc_tran_account_bin,
            chl_ct_mer_mcc,
            _c_n3d_merc_id_sum_2,
            _c_os_retail_keyed_cnt_1,
            
            
            _c_n3d_merc_id_1,
            
            chl_ct_ch_post_code,
            
            ssa_c_cash_limit,
            dtl_ca_client_tran_type,
            _c_n3d_merc_id_2,
            
            _c_crd_cnp_trn_cnt_2,
            
            _c_cc_gbl_n3d_cnt_2,
            
            
            _c_crd_cnp_trn_sum_3,
            _c_crd_cnp_trn_sum_2,
            _c_cc_cnp_vel_6hr_count_2,
            _c_n3d_merc_id_sum_3,
            _c_crd_cnp_trn_sum_4,
            
            _c_cc_sfw_microsoft_cnt_1,
            _c_vul_velo_cnp_sum_1,
            _a_all_bpay_acct_sum_3,
            _a_capp_logon_cnt_3,
            _a_client_branch_1,
            
            
            _a_client_country_1,
            _a_client_country_cnt_1,
            
            _a_client_postcode_cnt_2,
            _a_curr_capp_device_os,
            _a_devcie_geo_long_avg_incl,
            _a_fire_ct,
            _a_joint_acct_num_1,
            _a_open_ml_suppress_prob_scr,
            _a_open_ml_suppress_raw_scr,
            _a_sso_capp_netbank_cnt,
            _c_apay_dpan_cnt_1,
            _c_cc_cnp_ltrans_6hr_count_4,
            _c_cc_gbl_n3d_cnt_1,
            _c_cc_gbl_n3d_sum_2,
            _c_cc_ind_card_credit,
            _c_cc_ind_mer_domestic,
            _c_cc_list_ind_p03,
            _c_cc_payment_amount,
            _c_cc_recov_trans_cnt_1,
            _c_crd_all_trn_sum_1,
            _c_crd_all_trn_sum_2,
            _c_crd_cnp_trn_cnt_4,
            _c_crd_dom_cnp_hv_sum_1,
            _c_crd_n3d_visa_score_sum_1,
            _c_crd_n3d_visa_score_sum_2,
            _c_crd_n3d_visa_score_sum_dt,
            _c_mdes_dpan_2,
            _c_n3d_merc_id_3,
            _c_n3d_merc_id_7,
            _c_n3d_merc_id_sum_4,
            _c_n3d_merc_id_sum_5,
            _c_n3d_merc_id_sum_6,
            _c_n3d_merc_id_sum_9,
            ssa_c_open_to_buy,
            ssa_acct_num,
            chl_ct_acq_cntry_code,
            rsp_score_3,
            dtl_ca_client_amt,
            dtl_ca_merch_amt
            
        FROM 
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
        WHERE
            TTS_TRAN_DATE >= TO_CHAR($END_D-90,'YYYYMMDD')
            AND TTS_TRAN_DATE <= TO_CHAR($END_D,'YYYYMMDD')
            
            AND HDR_ACTIVITY_TYPE = 'CA'
            AND SSX_CUST_NUM != ''
            AND CHL_ID_CARD_NUM != ''
    )
    -- , CUST_TRAN_PRFL AS (
    -- SELECT 
    --     CUST_I

    --     -- Digital events
    --     , CAPP_PSWD_CHNG_CNT_Q
    -- 	, CAPP_PSWD_CHNG_LAST_S
    -- 	, CAPP_DVIC_REGR_CNT_Q
    -- 	, CAPP_DVIC_REGR_LAST_S
    -- 	, CAPP_LOGN_CNT_Q
    -- 	, CAPP_LOGN_LAST_S
    -- 	, NTB_LOGN_CNT_Q
    -- 	, NTB_LOGN_LAST_S
    -- 	, VIEW_CARD_DETL_CNT_Q
    -- 	, VIEW_CARD_DETL_LAST_S
    -- FROM
    --     LCL.CUST_TRAN_PRFL
    -- WHERE
    --     CUST_I IN (SELECT CUST_I FROM TRAN)
    -- )
    --  -- Analyst declined disputed transactions
    -- , CONFIRMED_FPF AS (
    --     SELECT
    --         b.DSPT_CASE_I
    --         , b.DSPT_CASE_EVNT_I
    --         , b.DSPT_CASE_CRAT_S
    --         , b.DSPT_TRAN_I
    --         , a.TRAN_ID
    --         , 1 AS FPF_INDA_F
    --     FROM 
    --         LABMLFRD.CARD_TRAN_GROS_FRAU a
    --     LEFT JOIN
    --         LABMLFRD.CARD_TRAN_DAIS_DSPT b
    --     ON
    --         a.TRAN_ID=b.TRAN_I
    --     WHERE 
    --         a.OUTCOME IN ('Resolved-CLOSED: INVEST DECLINE')
    --         AND b.DSPT_TRAN_DCDE_X IN ('Fraud Referral','Customer Liable')
    -- )
    , LABELS AS (
        SELECT 
            CUST_I,
            TRAN_I,
            PEGA_CASENUMBER,
            DSPT_CASE_I,
            MIN(FPF_INDA_F) AS FPF_INDA_F
        FROM (
            -- STP
            SELECT DISTINCT
                CUST_I,
                TRAN_I, 
                '' AS PEGA_CASENUMBER,
                DSPT_CASE_I,
                '9' AS FPF_INDA_F
            FROM LABMLFRD.CARD_TRAN_DAIS_DSPT
            WHERE UPPER(DSPT_TRAN_DCDE_X) LIKE ANY ('%CHARGE%OFF%','%CHARGEBACK%','%WRITE%OFF%')
                AND DSPT_SRCE_SYST_M != 'GS'
                AND TRAN_I IS NOT NULL
                AND CUST_I IS NOT NULL
            UNION ALL
            -- Analyst declined
            SELECT DISTINCT
                COALESCE(TO_CHAR(a.SSX_CUST_NUM),b.CUST_I) AS CUST_I,
                a.TRAN_ID AS TRAN_I,
                PEGA_CASENUMBER,
                DSPT_CASE_I,
                '1' AS FPF_INDA_F
            FROM LABMLFRD.CARD_TRAN_GROS_FRAU a
            LEFT JOIN LABMLFRD.CARD_TRAN_DAIS_DSPT b ON a.TRAN_ID=b.TRAN_I
            WHERE CUST_I IS NOT NULL
                AND UPPER(A.OUTCOME) LIKE ('%CLOSED%INVEST%DECLINE%')
                AND UPPER(b.DSPT_TRAN_DCDE_X) LIKE ANY ('%FRAUD%REFERRAL%','%CUSTOMER%LIABLE%')
                AND b.TRAN_I IS NOT NULL
        )
        GROUP BY ALL 
    )
    , FRAUD_TRANS AS (
        SELECT
            *
        FROM (
            SELECT TRAN_ID AS TRAN_I
            FROM LABMLFRD.CARD_TRAN_GROS_FRAU
            WHERE TRAN_I IS NOT NULL
            UNION ALL
            SELECT TRAN_I
            FROM LABMLFRD.CARD_TRAN_DAIS_DSPT
            WHERE TRAN_I IS NOT NULL
        )
        WHERE 
            TRAN_I NOT IN (SELECT TRAN_I FROM LABELS)
    )   
    -- Daisy case information
    , DNA_CASE AS (
    SELECT 
        a.PATY_I
        
        , COUNT(DISTINCT a.DSPT_CASE_I) AS DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , SUM(a.DSPT_CASE_TRAN_Q) AS DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , SUM(a.TOTL_TRAN_AND_FEE_A) AS DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
    FROM 
        (SELECT DISTINCT
            PATY_I
            , DSPT_CASE_I
            , DSPT_CASE_EVNT_I
            , DSPT_CASE_CRAT_S
            , DSPT_CASE_TRAN_Q
            , TOTL_TRAN_AND_FEE_A
        FROM
            CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
        WHERE
            DSPT_TYPE_C = 'DT1'
        QUALIFY 
            ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) a
    LEFT JOIN
        (SELECT DISTINCT DSPT_CASE_I 
        FROM LABELS WHERE FPF_INDA_F='1') b
    ON 
        a.DSPT_CASE_I = b.DSPT_CASE_I
    LEFT JOIN 
        (SELECT DISTINCT DSPT_CASE_I 
        FROM LABELS WHERE FPF_INDA_F='9') c
    ON
        a.DSPT_CASE_I = c.DSPT_CASE_I
    GROUP BY
        a.PATY_I
    )
    -- Output
    SELECT DISTINCT
    	a.* -- Transaction info, including UVs (e.g. WPR rego date, etc)

        , dai.DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , dai.DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , dai.DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , dai.DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , dai.DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , dai.DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , dai.DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , dai.DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , dai.DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , dai.DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , dai.DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , dai.DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , dai.DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , dai.DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , dai.DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , dai.DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days

        , dai.DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , dai.DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , dai.DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , dai.DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , dai.DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , dai.DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , dai.DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , dai.DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , dai.DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
        , IFNULL(fpf.FPF_INDA_F,'0') AS FPF_INDA_F
        , CASE WHEN frd.TRAN_I IS NOT NULL THEN 1 ELSE 0 END AS FRAUDTAG
        
    FROM
    	TRAN a
    LEFT JOIN 
        DNA_CASE dai
    ON 
        a.CUST_I = dai.PATY_I
    LEFT JOIN
        LABELS fpf
    ON
        a.TRAN_I = fpf.TRAN_I
    LEFT JOIN
        FRAUD_TRANS frd
    ON
        a.TRAN_I = frd.TRAN_I
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-12 02:40:49.216 Z,2025-09-12 03:29:16.374 Z
47.067517,270.524722933769,144594550784,0,"CREATE OR REPLACE TABLE PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D AS
select distinct tran_id,
SSX_CUST_NUM,
CHL_ID_CARD_NUM,
CHL_CT_TERM_OWNER_ID,
CHL_CT_ACQ_ID,
TRANSACTIONDATETIME,
TRANSACTION_HOUR,
DTL_CA_CLIENT_AMT,
_C_CC_GBL_N3D_1D_SUM_1,
_C_CC_HIGH_VEL_APPLE_SUM_1,
_C_CRD_APAY_CNT_1,
_C_CC_GBL_N3D_1D_CNT_1,
_C_CC_CNP_VEL_6HR_SUM_1,
_C_CRD_APAY_SUM_1,
_C_CRD_SAFE_MERCHANT,
_C_2WAY_CRD_FRD_RULE_FLAG,
_C_CC_CNP_LTRANS_6HR_COUNT_1,
_C_CC_CNP_VEL_6HR_COUNT_1,
_L_CITY_AGE,
_A_CRD_NPP_PAYMENT_AMOUNT,
_A_CLIENT_COUNTRY_CNT_3,
_A_CUSTOMER_AGE,
_A_CLIENT_COUNTRY_CNT_10,
_A_NPP_FTP_SUM,
_L_PASTE_IN_LOGIN_CNT,
_A_CUST_SUM_AAA_LONG,
_L_G_CON_DEV,
_L_DEV_FAM_AGE,
_L_TOUCH_CNT,
_B_RECIP_SUM_AAA_LONG,
_L_RISKY_KEY_COMBO,
_A_C_G,
_L_SCORE_4,
_A_E,
_A_NPP_INB_PMT_VAL,
_A_CLIENT_COUNTRY_CNT_2,
_A_PROF_CAPP_DEVICE_CNT_1,
_A_CRD_SCAM_SUPP_7D_SUM_1,
_A_CLIENT_CITY_CNT_2,
_L_UID_AGE,
_L_SCRN_W,
_L_ASN_AGE,
_L_SCORE_2,
_A_CUST_NPP_OUT_SUM_AAA_5,
_L_BC_SESS_CNT,
_L_ACC_AMT_1H,
_A_LIST_WL_SCAM_DRIVE_LICENSE,
_A_CC_CASH_ADVANCE_AMT,
_A_CUST_SUM_AAA_SHORT,
_A_P_L_1,
_L_PMT_AMT,
_L_ISP_AGE,
_L_ACC_AMT_7D,
_A_CLIENT_COUNTRY_CNT_7,
_L_CONCURRENT_SESS,
_A_CAPP_HCE_CNT_1,
_L_SCORE_5,
_L_MUID_AGE_PER_USER,
_A_CUST_ACCT_BAL,
_L_CUST_SCAMRISK_SCORE,
_A_ATM_WITHDRAWAL_SUM_AMT,
_L_TAP_CNT,
_A_LIST_WL_SCAM_TP_IP,
_L_MAX_30D_SCORE,
_B_RECIP_SUM_AAA_1,
_X_CIF_SENDER_SUM,
_L_M_L_1,
_L_SCRN_H,
_A_CUST_NPP_OUT_SUM_AAA_2,
_A_CUST_ACTION_IND,
_A_P_L_C,
_A_CUST_AVG_ACCT_BAL,
_L_AND_ID_AGE,
_X_CIF_REC_SUM,
_L_SESS_CNT_MOB_SDK,
_L_TOTAL_SESS_CNT,
_A_CURR_CAPP_DEVICE_NFTP_CNT,
_L_NC_ACCT_NUM_NAME_CONF,
_A_CLIENT_COUNTRY_CNT_5,
_A_U,
_B_RECIP_SUM_AAA_7,
_L_SCM_RSK_SCR_2,
_B_RECIP_SUM_AAA_4,
_L_BC_SCORE,
_L_DAYS_LST_DEV_AND,
_A_PROF_CAPP_DEVICE_CNT_3,
_L_DAYS_LST_DEV_IOS,
_X_LAST_N_TXN_COUNT,
_A_T,
_A_CUST_NPP_IN_SUM_AAA_2,
_L_MINS_LST_LGN_CAPPED,
_L_ACC_AMT_2H,
_L_ACC_AMT_4H,
_A_LIST_BL_PASSPORT,
_A_LIST_WL_SCAM_PASSPORT,
_A_LIST_BL_SCAM_PASSPORT,
_B_RECIP_SUM_AAA_6,
_A_PROF_CAPP_DEVICE_CNT_2,
_A_CLIENT_COUNTRY_CNT_6,
_A_BTS_BCH_SUM,
_A_BTS_CUST_AGE,
_A_CURR_CAPP_DEVICE_CNT,
_A_CURR_NB_BROWSER_CNT,
_A_PREV_CAPP_DEVICE_CNT,
_A_Q,
_A_R,
_L_CNTRY_AGE,
_A_NPP_IN_UNRELATED_SUM_24_1,
_X_FT_OVER5K_RECIP_CNT,
_X_CIF_RECIPIENT_NEW_CNT,
_A_NPP_IN_UNRELATED_SUM_24_2,
_B_NPP_OUT_SUM_1,
_L_ACC_AMT_1D,
_A_TRANSPORT_REG_CNT_1,
_A_MULTI_CNT,
_L_M_L_4,
_A_PROF_CAPP_DEVICE_NFTP_1,
_X_NAME_MATCH_CNT,
_A_PROF_CAPP_DEVICE_CNT_5,
_A_PROF_CAPP_DEVICE_CNT_4,
_L_SESS_CNT_WEB,
_B_RECIP_SUM_AAA_2,
_L_M_L_C,
_L_TIME_ZONE,
_A_CUST_NPP_IN_SUM_AAA_1,
_L_IP_AGE,
_A_NPP_INBOUND_SUM_AMT,
_X_FT_OVER5K_RECIP_SUM,
_X_CIF_SENDER_CNT,
_A_NB_LOGONS_CNT_2,
_A_CLC_FTP_AMT,
_L_TRVL_SPD,
_B_RECIP_SUM_LONG,
_A_CRYPTO_MNTHLY_SUM,
_A_GL_TRF_ACC_BAL,
_L_SESS_CNT_MOB_BROWSER,
_L_SCORE_3,
_A_CRD_CRYPTO_PROC_FLG,
_B_NPP_OUT_CNT_2,
_A_NPP_OUT_CNT_2,
_A_SCH_AMT,
_A_P_L_3,
_B_NPP_OUT_FTP_SUM_1,
_L_SDID_CNT_1,
_A_CUST_NPP_OUT_SUM_AAA_LONG,
_A_LIST_RL1_SCAM_CUST_CIF,
_L_NUM_SESS_2H,
_A_VPN_VPS_IP_LOGON_COUNT,
_A_GEO_DISTANCE,
_X_NAME_MATCH_IND,
_A_NB_LOGONS_CNT_3,
_L_DAYS_LST_DEV_JS,
_A_FTP_SUM_1,
_L_NUM_SESS_4H,
_L_NC_MATCH_NAME_CONF,
_B_RECIP_SUM_AAA_5,
_L_DPI_CHANGE,
_B_RECIP_SUM_1,
_A_SCAM_RISKY_MCC_PRELEAD_AMT,
_L_M_L_3,
_X_CIF_REC_CNT,
_A_LIST_BL_SCAM_TP_IP,
_B_CRYPTO_RISK,
_A_LIST_BL_SCAM_DRIVE_LICENSE,
_B_RECIP_SUM_AAA_SHORT,
_L_CLIPB_EVENT_CNT,
_B_LIST_RL1_SCAM_TP_CIF,
_B_NPP_BLACKLIST_RECIP_FLAG,
_A_CIF_ESTABLISH_CHANNEL,
_A_ECV_DOCUMENT_IP,
_A_CUST_OS_VER,
_A_CUST_OS_NAME,
_A_2WAY_TYPE,
_A_CLIENT_CITY_10,
_L_PUSH_API_1,
_L_PUSH_API_2,
_L_PUSH_API_3,
_L_PUSH_API_4,
_A_CLIENT_CITY_6,
_L_NC_WINNING_ALG,
_L_PROXY_TYPE,
_L_LANG_3,
_L_LANG_1,
_L_LANG_2,
_L_NC_RESPONSE_CODE,
_A_PROF_RISK_IND,
_A_LATEST_NCRG_ISP,
CHL_CT_TERM_OWNER_NAME,
_C_CNP_MER_NM_CURR,
DTL_EX_0_2S_002,
DTL_EX_3_80S_002,
_A_MRISK_FOREIGN_IP_CNTRY_CODE,
DTL_CA_AUTH_SYS_DEC,
CHL_CT_MER_MCC,
ATH_PC_CUST_PRESENT,
_A_CIF_ESTABLISH_CUST_PCODE,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_MERCH_CURR_CODE,
PARTY_TYPE,
GENDER,
DMC_CNT,
YCS_CNT,
TRAN_CNT,
DPST_CNT,
CC_CNT,
TRD_CNT,
PL_CNT,
INVST_CNT,
MORT_CNT,
INSRNC_CNT,
BTA_CNT,
BUS_LN_CNT,
OTH_CNT,
NTBNK_FAC,
REL_MNG,
FA_1,
FA_2,
NO_1,
NO_2,
FA,
FP,
GOVT_BENE,
PRVT_CUST,
HL_ASOC,
CORP_EMPL,
TRUSTEE,
INTL_STU,
MAR_STS_ORG_STR,
EMPL_CLAS_LGL_STS,
HOME_OWN,
_X_NPP_OUT_SUM_DATE_DIFF,
_A_CC_DT_DIFF,
_A_ONLINE_PL_DT_DIFF,
_A_CIF_ESTABLISH_DT_DIFF,
_A_ECV_DOCUMENT_DT_DIFF,
_A_AUTO_DEC_CP_PP_DT_DIFF,
_A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
_A_SCAMP1_MLW_DT_DIFF,
_A_SCAMP2_MLW_DT_DIFF,
_A_SCAMP5_MLW_DT_DIFF,
_A_SCAMP7_MLW_DT_DIFF,
_L_PUSH_API_DT_1_DIFF,
_L_PUSH_API_DT_2_DIFF,
_L_PUSH_API_DT_3_DIFF,
_L_PUSH_API_DT_4_DIFF,
TARGET,
CUS_SUM_TRAN_CNT_Q,
CUS_SUM_UPST_APRD_TRAN_CNT_Q,
CUS_SUM_TRAN_SUM_N,
CUS_SUM_UPST_DCLN_TRAN_CNT_Q,
CUS_SUM_RULE_DCLN_TRAN_CNT_Q,
CUS_SUM_FINL_APRD_TRAN_CNT_Q,
CUS_SUM_UPST_APRD_TRAN_SUM_N,
CUS_SUM_FINL_APRD_TRAN_SUM_N,
CUS_SUM_FDP_RULE_TRIG_CNT_Q,
CUS_SUM_DOMS_TRAN_CNT_Q,
CUS_SUM_OSEA_TRAN_CNT_Q,
CUS_SUM_DOMS_TRAN_SUM_N,
CUS_SUM_OSEA_TRAN_SUM_N,
CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CUS_SUM_CARD_PRES_TRAN_CNT_Q,
CUS_SUM_ATM_TRAN_CNT_Q,
CUS_SUM_FALL_BACK_TRAN_CNT_Q,
CUS_SUM_CHIP_TRAN_CNT_Q,
CUS_SUM_PAY_PASS_TRAN_CNT_Q,
CUS_SUM_CARD_PRES_TRAN_SUM_N,
CUS_SUM_ATM_TRAN_SUM_N,
CUS_SUM_FALL_BACK_TRAN_SUM_N,
CUS_SUM_CHIP_TRAN_SUM_N,
CUS_SUM_PAY_PASS_TRAN_SUM_N,
CUS_SUM_CAPP_PSWD_CHNG_CNT_Q,
CUS_SUM_CAPP_DVIC_REGR_CNT_Q,
CUS_SUM_CAPP_LOGN_CNT_Q,
CUS_SUM_NTB_LOGN_CNT_Q,
CUS_SUM_VIEW_CARD_DETL_CNT_Q,
CUS_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CUS_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CUS_MAX_C_2WAY_CRD_RULE_FLAG,
CRD_SUM_TRAN_CNT_Q,
CRD_SUM_UPST_APRD_TRAN_CNT_Q,
CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
CRD_SUM_FINL_APRD_TRAN_CNT_Q,
CRD_SUM_INCO_EXPY_CNT_Q,
CRD_SUM_INCO_CVVA_CNT_Q,
CRD_SUM_INCO_PIN_CNT_Q,
CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
CRD_SUM_TRAN_SUM_N,
CRD_SUM_UPST_APRD_TRAN_SUM_N,
CRD_SUM_UPST_DCLN_TRAN_SUM_N,
CRD_SUM_RULE_DCLN_TRAN_SUM_N,
CRD_SUM_FINL_APRD_TRAN_SUM_N,
CRD_SUM_INCO_EXPY_SUM_N,
CRD_SUM_INCO_CVVA_SUM_N,
CRD_SUM_INCO_PIN_SUM_N,
CRD_SUM_OVER_LIMT_DCLN_SUM_N,
CRD_SUM_FDP_RULE_TRIG_CNT_Q,
CRD_SUM_DOMS_TRAN_CNT_Q,
CRD_SUM_OSEA_TRAN_CNT_Q,
CRD_SUM_DOMS_TRAN_SUM_N,
CRD_SUM_OSEA_TRAN_SUM_N,
CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CRD_SUM_CARD_PRES_TRAN_CNT_Q,
CRD_SUM_ATM_TRAN_CNT_Q,
CRD_SUM_FALL_BACK_TRAN_CNT_Q,
CRD_SUM_CHIP_TRAN_CNT_Q,
CRD_SUM_PAY_PASS_TRAN_CNT_Q,
CRD_SUM_CARD_PRES_TRAN_SUM_N,
CRD_SUM_ATM_TRAN_SUM_N,
CRD_SUM_FALL_BACK_TRAN_SUM_N,
CRD_SUM_CHIP_TRAN_SUM_N,
CRD_SUM_PAY_PASS_TRAN_SUM_N,
CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
CRD_SUM_CAPP_LOGN_CNT_Q,
CRD_SUM_NTB_LOGN_CNT_Q,
CRD_SUM_VIEW_CARD_DETL_CNT_Q,
CRD_MAX_CARD_USER_VARY_HIGH_RISK_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_FRAU_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_WHLI_F,
CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F,
CMA_SUM_TRAN_CNT_Q,
CMA_SUM_UPST_APRD_TRAN_CNT_Q,
CMA_SUM_TRAN_SUM_N,
CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
CMA_SUM_FINL_APRD_TRAN_CNT_Q,
CMA_SUM_UPST_APRD_TRAN_SUM_N,
CMA_SUM_FINL_APRD_TRAN_SUM_N,
CMA_SUM_FDP_RULE_TRIG_CNT_Q,
CMA_SUM_DOMS_TRAN_CNT_Q,
CMA_SUM_OSEA_TRAN_CNT_Q,
CMA_SUM_DOMS_TRAN_SUM_N,
CMA_SUM_OSEA_TRAN_SUM_N,
CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CMA_SUM_CARD_PRES_TRAN_CNT_Q,
CMA_SUM_ATM_TRAN_CNT_Q,
CMA_SUM_FALL_BACK_TRAN_CNT_Q,
CMA_SUM_CHIP_TRAN_CNT_Q,
CMA_SUM_PAY_PASS_TRAN_CNT_Q,
CMA_SUM_CARD_PRES_TRAN_SUM_N,
CMA_SUM_ATM_TRAN_SUM_N,
CMA_SUM_FALL_BACK_TRAN_SUM_N,
CMA_SUM_CHIP_TRAN_SUM_N,
CMA_SUM_PAY_PASS_TRAN_SUM_N,
CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CMA_MAX_C_2WAY_CRD_RULE_FLAG,
CMC_SUM_TRAN_CNT_Q,
CMC_SUM_UPST_APRD_TRAN_CNT_Q,
CMC_SUM_TRAN_SUM_N,
CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
CMC_SUM_FINL_APRD_TRAN_CNT_Q,
CMC_SUM_UPST_APRD_TRAN_SUM_N,
CMC_SUM_FINL_APRD_TRAN_SUM_N,
CMC_SUM_FDP_RULE_TRIG_CNT_Q,
CMC_SUM_DOMS_TRAN_CNT_Q,
CMC_SUM_OSEA_TRAN_CNT_Q,
CMC_SUM_DOMS_TRAN_SUM_N,
CMC_SUM_OSEA_TRAN_SUM_N,
CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CMC_SUM_CARD_PRES_TRAN_CNT_Q,
CMC_SUM_ATM_TRAN_CNT_Q,
CMC_SUM_FALL_BACK_TRAN_CNT_Q,
CMC_SUM_CHIP_TRAN_CNT_Q,
CMC_SUM_PAY_PASS_TRAN_CNT_Q,
CMC_SUM_CARD_PRES_TRAN_SUM_N,
CMC_SUM_ATM_TRAN_SUM_N,
CMC_SUM_FALL_BACK_TRAN_SUM_N,
CMC_SUM_CHIP_TRAN_SUM_N,
CMC_SUM_PAY_PASS_TRAN_SUM_N,
CMC_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CMC_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CMC_MAX_C_2WAY_CRD_RULE_FLAG,
MAQ_SUM_TRAN_CNT_Q,
MAQ_SUM_UPST_APRD_TRAN_CNT_Q,
MAQ_SUM_TRAN_SUM_N,
MAQ_SUM_UPST_DCLN_TRAN_CNT_Q,
MAQ_SUM_RULE_DCLN_TRAN_CNT_Q,
MAQ_SUM_FINL_APRD_TRAN_CNT_Q,
MAQ_SUM_UPST_APRD_TRAN_SUM_N,
MAQ_SUM_FINL_APRD_TRAN_SUM_N,
MAQ_SUM_FDP_RULE_TRIG_CNT_Q,
MAQ_SUM_DOMS_TRAN_CNT_Q,
MAQ_SUM_OSEA_TRAN_CNT_Q,
MAQ_SUM_DOMS_TRAN_SUM_N,
MAQ_SUM_OSEA_TRAN_SUM_N,
MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N,
MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
MAQ_SUM_CARD_PRES_TRAN_CNT_Q,
MAQ_SUM_ATM_TRAN_CNT_Q,
MAQ_SUM_FALL_BACK_TRAN_CNT_Q,
MAQ_SUM_CHIP_TRAN_CNT_Q,
MAQ_SUM_PAY_PASS_TRAN_CNT_Q,
MAQ_SUM_CARD_PRES_TRAN_SUM_N,
MAQ_SUM_ATM_TRAN_SUM_N,
MAQ_SUM_FALL_BACK_TRAN_SUM_N,
MAQ_SUM_CHIP_TRAN_SUM_N,
MAQ_SUM_PAY_PASS_TRAN_SUM_N,
from PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-25 12:30:26.580 Z,2025-08-25 13:17:30.631 Z
32.799650,4150.606787860394,84225998848,0,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE1 as (

WITH cleaned_recipient_data AS (
    -- Clean and prepare recipient transaction data for LAST 6 MONTHS
    SELECT
        TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
        TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
        (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
        CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
        dtl_ex_0_20s_001,
        SSX_CUST_NUM,
        TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS transaction_date,
        -- Extract hour from timestamp
        EXTRACT(HOUR FROM TRY_TO_TIMESTAMP(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF')) as C_hour,
        
        -- Day features from SSX_SNAP_D (DATE)
        DAYOFWEEK(TRANSACTIONDATETIME) as C_day_of_week,
        DAY(SSX_SNAP_D) as C_day_of_month,
        MONTH(SSX_SNAP_D) as C_month_of_year,
        -- Clean transaction amount
        -- CASE
        --     WHEN TGX_TRAN_AMT IS NULL OR TGX_TRAN_AMT = '' OR TGX_TRAN_AMT = ' ' THEN NULL
        --     ELSE TRY_CAST(TGX_TRAN_AMT AS DECIMAL(18,2))
        -- END AS clean_transaction_amount,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_SCAM_VICTIM_FLAG, '[^0-9.-]', '')), -1) as _A_SCAM_VICTIM_FLAG,
        -- Primary risk indicator y
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,
        -- Blacklist and scam indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_acct,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl1_scam_tp_cif, '[^0-9.-]', '')), -1) as _b_list_rl1_scam_tp_cif,
        -- High-risk biller metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_1,
        -- NPP blacklist flags
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_recip_flag,
        -- NPP outbound transaction metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_sum_1,
        -- NPP first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_2,
        -- NPP watchlist flags
        -- Other risk indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_open_listed_last_cif_2, '[^0-9.-]', '')), -1) as _b_open_listed_last_cif_2,
        -- Recipient first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_long, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_long,
        -- Recipient link sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_short,
        -- Recipient transaction sums (various time periods)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_4, '[^0-9.-]', '')), -1) as _b_recip_sum_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_7, '[^0-9.-]', '')), -1) as _b_recip_sum_7,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_today, '[^0-9.-]', '')), -1) as _b_recip_sum_today,
        -- Recipient AAA transaction sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_1, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_4, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_short,
        -- Fixed: _b_rfm_whitelist_ind (was incorrectly aliased)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_rfm_whitelist_ind, '[^0-9.-]', '')), -1) as _b_rfm_whitelist_ind,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_1d_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_1d_out,

        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(RSP_ACTION_CODE, '[^0-9.-]', '')), -1) as RSP_ACTION_CODE,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_apps, '[^0-9.-]', '')), -1) as _l_risky_apps,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_browser, '[^0-9.-]', '')), -1) as _l_risky_browser,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_accel_event_cnt, '[^0-9.-]', '')), -1) as _l_accel_event_cnt,
        COALESCE(CAST(_l_recip_ftp AS VARCHAR(50)), '-1') as _l_recip_ftp,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_amt, '[^0-9.-]', '')), -1) as _l_risky_amt,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_tzone_mismatch, '[^0-9.-]', '')), -1) as _l_tzone_mismatch,

        -- Original features
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_REGISTRATIONS_CNT_1, '[^0-9.-]', '')), -1) as _A_CAPP_REGISTRATIONS_CNT_1,   
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_LOGON_CNT_1, '[^0-9.-]', '')), -1) as _A_CAPP_LOGON_CNT_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_REGO_1D_IND, '[^0-9.-]', '')), -1) as _A_CAPP_REGO_1D_IND,
        
        -- Clean transaction amount
        -- CASE
        --     WHEN TGX_TRAN_AMT IS NULL OR TGX_TRAN_AMT = '' OR TGX_TRAN_AMT = ' ' THEN NULL
        --     ELSE TRY_CAST(TGX_TRAN_AMT AS DECIMAL(18,2))
        -- END AS clean_transaction_amount,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(RSP_ACTION_CODE, '[^0-9.-]', '')), -1) as RSP_ACTION_CODE,
        -- Original TGX_TRAN_AMT for backward compatibility
        COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TGX_TRAN_AMT,
        
        -- Primary risk indicators
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_SCAM_VICTIM_FLAG, '[^0-9.-]', '')), -1) as _A_SCAM_VICTIM_FLAG,
        -- COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,

        
    FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
    WHERE SSX_SNAP_D >= '2024-09-20'
        AND SSX_SNAP_D < '2025-07-17'
        AND HDR_SOURCE = 'NPP OUT'
        AND TGX_BANK_NUM <> ''
        AND TGX_BRANCH_ID <> ''
        AND TGX_ACCT_NUM <> ''
),

-- Calculate daily aggregates
daily_aggregates AS (
    SELECT
        NPP.RCPI_ACCT_I,
        NPP.SSX_SNAP_D,
        
        -- Original aggregates
        MAX(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS MAX_SEND_CAPP_REGR_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS TOTL_SEND_CAPP_REGR_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_CAPP_REGR_Q,
        
        MIN(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MIN_SEND_CAPP_LOGN_Q,
        MAX(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MAX_SEND_CAPP_LOGN_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS TOTL_SEND_CAPP_LOGN_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_CAPP_LOGN_Q,
        
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGO_1D_IND) = '' OR TRIM(NPP._A_CAPP_REGO_1D_IND) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGO_1D_IND) END) AS TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_CAPP_REGO_1D_IND) = '' OR TRIM(NPP._A_CAPP_REGO_1D_IND) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_NEW_CAPP_REGR_1D_INDA_Q,
        
        MAX(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS MAX_SEND_SCAM_VCTM_Q,
        SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS TOTL_SEND_SCAM_VCTM_Q,
        -- SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_SCAM_VCTM_FLAG_Q,
        
        MIN(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MIN_FNCL_TRAN_A,
        MAX(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN -9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MAX_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS TOTL_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE 1 END) AS CNT_FNCL_TRAN_AMT_Q,
        
        -- Unique sender count
        COUNT(DISTINCT NPP.SSX_CUST_NUM) AS UNIQUE_SENDERS_DAILY,
        
        -- Transaction count and sum for calculations
        COUNT(*) AS DAILY_TRANSACTION_COUNT,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS DAILY_TRANSACTION_SUM,
        
        -- NEW: Risk indicator aggregations
        MAX(NPP._b_crypto_risk) AS MAX_CRYPTO_RISK_DAILY,
        
        
    FROM cleaned_recipient_data NPP    
    GROUP BY NPP.RCPI_ACCT_I, NPP.SSX_SNAP_D
),

-- Calculate SEPARATE window patterns
pattern_features AS (
    SELECT *,
        -- Account history sufficiency check
        COUNT(*) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
        ) AS HISTORICAL_DAYS_AVAILABLE,
        
        -- New account flags
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) = 0 THEN 1 ELSE 0
        END AS IS_NEW_ACCOUNT_FLAG,
        
        DATEDIFF('day', 
            MIN(SSX_SNAP_D) OVER (PARTITION BY RCPI_ACCT_I),
            SSX_SNAP_D
        ) AS DAYS_SINCE_FIRST_TRANSACTION,
        
        -- PATTERN 1: 7-DAY HISTORICAL LOOKBACK (excluding current day)
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3  -- At least 3 days of history
            THEN AVG(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) 
            ELSE 0
        END AS AVG_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN SUM(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS ACTIVE_DAYS_7D_HISTORICAL,
        
        -- PATTERN 2: CURRENT DAY + 1 FOLLOWING DAY (2-day forward pattern)
        AVG(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
        
        AVG(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        SUM(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        AVG(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        MAX(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_TRANSACTIONS_CURRENT_PLUS_1D,
        
        MAX(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS ACTIVE_DAYS_CURRENT_PLUS_1D
        
    FROM daily_aggregates
),

-- Final output with BOTH pattern types
recipient_aggregates as (SELECT
    RCPI_ACCT_I,
    SSX_SNAP_D,
    MAX_SEND_CAPP_REGR_Q,
    TOTL_SEND_CAPP_REGR_Q,
    -- CNT_SEND_CAPP_REGR_Q,
    MIN_SEND_CAPP_LOGN_Q,
    MAX_SEND_CAPP_LOGN_Q,
    TOTL_SEND_CAPP_LOGN_Q,
    -- CNT_SEND_CAPP_LOGN_Q,
    TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
    -- CNT_SEND_NEW_CAPP_REGR_1D_INDA_Q,
    MAX_SEND_SCAM_VCTM_Q,
    TOTL_SEND_SCAM_VCTM_Q,
    -- CNT_SEND_SCAM_VCTM_FLAG_Q,
    MIN_FNCL_TRAN_A,
    MAX_FNCL_TRAN_A,
    TOTL_FNCL_TRAN_A,
    CNT_FNCL_TRAN_AMT_Q,
    
     -- Current day metrics
    UNIQUE_SENDERS_DAILY,
    ROUND(UNIQUE_SENDERS_DAILY::DECIMAL / NULLIF(DAILY_TRANSACTION_COUNT, 0), 3) AS SENDER_DIVERSITY_RATIO_DAILY,
    DAILY_TRANSACTION_COUNT,
    ROUND(DAILY_TRANSACTION_SUM, 2) AS DAILY_TRANSACTION_SUM,
    
    -- Account history indicators
    IS_NEW_ACCOUNT_FLAG,
    DAYS_SINCE_FIRST_TRANSACTION,
    HISTORICAL_DAYS_AVAILABLE,
    
    -- 7-day historical features (0 for accounts without history)
    ROUND(AVG_TRANSACTIONS_7D_HISTORICAL, 2) AS AVG_TRANSACTIONS_7D_HISTORICAL,
    ROUND(AVG_UNIQUE_SENDERS_7D_HISTORICAL, 2) AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
    ROUND(TOTAL_TRANSACTION_SUM_7D_HISTORICAL, 2) AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
    ROUND(AVG_TRANSACTION_SUM_7D_HISTORICAL, 2) AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
    
    -- Current + 1 day forward features
    ROUND(AVG_TRANSACTIONS_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
    ROUND(AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D, 2) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
    ROUND(TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
    ROUND(AVG_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D
FROM pattern_features
)

-- Final result: Transaction-level data with recipient features
SELECT 
    r.*,  -- All transaction-level columns
    -- Recipient aggregated features
    ra.* EXCLUDE(RCPI_ACCT_I, SSX_SNAP_D)
    
FROM cleaned_recipient_data r
LEFT JOIN recipient_aggregates ra ON r.RCPI_ACCT_I = ra.RCPI_ACCT_I
and r.SSX_SNAP_D = ra.SSX_SNAP_D);",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-25 11:11:22.051 Z,2025-08-25 11:44:10.030 Z
31.353933,11405.720965705812,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PKENGINEERING_TESTING_1(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-25 12:44:40.555 Z,2025-08-25 13:16:01.791 Z
181.930650,0.031350791454,0,0,"SELECT count(1) AS ""COUNT(LITERAL())"" FROM ( SELECT ""CMX_TRAN_ID"" FROM ( SELECT ""CMX_TRAN_ID"" FROM TECHDS_CCA_SCORED_TEST_VAL_CNP_D011_V1) GROUP BY ""CMX_TRAN_ID"") LIMIT 1",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-27 22:06:51.848 Z,2025-08-28 01:08:47.687 Z
114.916467,0.000449210405,0,0,"SELECT ""COMMENTS"" FROM LABMLFRD.CARD_TRAN_GROS_FRAU LIMIT 20",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-27 23:13:52.490 Z,2025-08-28 01:08:47.478 Z
48.914817,11402.059858143330,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PKENGINEERING_TESTING_1(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-25 09:43:56.384 Z,2025-08-25 10:32:51.273 Z
41.245200,423.841899231076,763787210752,0,"CREATE OR REPLACE TABLE PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D AS
SELECT 
    a.*,
    b.CUS_SUM_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_CNT_Q,
    b.CUS_SUM_TRAN_SUM_N,
    b.CUS_SUM_UPST_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_RULE_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_FINL_APRD_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_SUM_N,
    b.CUS_SUM_FINL_APRD_TRAN_SUM_N,
    b.CUS_SUM_FDP_RULE_TRIG_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_CNT_Q,
    b.CUS_SUM_OSEA_TRAN_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_SUM_N,
    b.CUS_SUM_OSEA_TRAN_SUM_N,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    b.CUS_SUM_3DS_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    b.CUS_SUM_N3D_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    b.CUS_SUM_3DS_TRAN_SUM_N as CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    b.CUS_SUM_N3D_TRAN_SUM_N as CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    b.CUS_SUM_CARD_PRES_TRAN_CNT_Q,
    b.CUS_SUM_ATM_TRAN_CNT_Q,
    b.CUS_SUM_FALL_BACK_TRAN_CNT_Q,
    b.CUS_SUM_CHIP_TRAN_CNT_Q,
    b.CUS_SUM_PAY_PASS_TRAN_CNT_Q,
    b.CUS_SUM_CARD_PRES_TRAN_SUM_N,
    b.CUS_SUM_ATM_TRAN_SUM_N,
    b.CUS_SUM_FALL_BACK_TRAN_SUM_N,
    b.CUS_SUM_CHIP_TRAN_SUM_N,
    b.CUS_SUM_PAY_PASS_TRAN_SUM_N,
    b.CUS_SUM_CAPP_PSWD_CHNG_CNT_Q,
    b.CUS_SUM_CAPP_DVIC_REGR_CNT_Q,
    b.CUS_SUM_CAPP_LOGN_CNT_Q,
    b.CUS_SUM_NTB_LOGN_CNT_Q,
    b.CUS_SUM_VIEW_CARD_DETL_CNT_Q,
    b.CUS_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    b.CUS_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    b.CUS_MAX_CUV_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_RULE_FLAG,
    d.CRD_SUM_TRAN_CNT_Q,
    d.CRD_SUM_UPST_APRD_TRAN_CNT_Q,
    d.CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_FINL_APRD_TRAN_CNT_Q,
    d.CRD_SUM_INCO_EXPY_CNT_Q,
    d.CRD_SUM_INCO_CVVA_CNT_Q,
    d.CRD_SUM_INCO_PIN_CNT_Q,
    d.CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
    d.CRD_SUM_TRAN_SUM_N,
    d.CRD_SUM_UPST_APRD_TRAN_SUM_N,
    d.CRD_SUM_UPST_DCLN_TRAN_SUM_N,
    d.CRD_SUM_RULE_DCLN_TRAN_SUM_N,
    d.CRD_SUM_FINL_APRD_TRAN_SUM_N,
    d.CRD_SUM_INCO_EXPY_SUM_N,
    d.CRD_SUM_INCO_CVVA_SUM_N,
    d.CRD_SUM_INCO_PIN_SUM_N,
    d.CRD_SUM_OVER_LIMT_DCLN_SUM_N,
    d.CRD_SUM_FDP_RULE_TRIG_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_CNT_Q,
    d.CRD_SUM_OSEA_TRAN_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_SUM_N,
    d.CRD_SUM_OSEA_TRAN_SUM_N,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    d.CRD_SUM_3DS_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    d.CRD_SUM_N3D_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    d.CRD_SUM_3DS_TRAN_SUM_N as CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    d.CRD_SUM_N3D_TRAN_SUM_N as CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    d.CRD_SUM_CARD_PRES_TRAN_CNT_Q,
    d.CRD_SUM_ATM_TRAN_CNT_Q,
    d.CRD_SUM_FALL_BACK_TRAN_CNT_Q,
    d.CRD_SUM_CHIP_TRAN_CNT_Q,
    d.CRD_SUM_PAY_PASS_TRAN_CNT_Q,
    d.CRD_SUM_CARD_PRES_TRAN_SUM_N,
    d.CRD_SUM_ATM_TRAN_SUM_N,
    d.CRD_SUM_FALL_BACK_TRAN_SUM_N,
    d.CRD_SUM_CHIP_TRAN_SUM_N,
    d.CRD_SUM_PAY_PASS_TRAN_SUM_N,
    d.CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
    d.CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
    d.CRD_SUM_CAPP_LOGN_CNT_Q,
    d.CRD_SUM_NTB_LOGN_CNT_Q,
    d.CRD_SUM_VIEW_CARD_DETL_CNT_Q,
    d.CRD_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_HIGH_RISK_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_FRAU_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_WHLI_F as CRD_MAX_CARD_USER_VARY_WHLI_F,
    d.CRD_MAX_CUV_DO_NOT_CTCT_F as CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F,
    f.CMA_SUM_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    f.CMA_SUM_TRAN_SUM_N,
    f.CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_SUM_N,
    f.CMA_SUM_FINL_APRD_TRAN_SUM_N,
    f.CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_CNT_Q,
    f.CMA_SUM_OSEA_TRAN_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_SUM_N,
    f.CMA_SUM_OSEA_TRAN_SUM_N,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    f.CMA_SUM_3DS_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    f.CMA_SUM_N3D_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    f.CMA_SUM_3DS_TRAN_SUM_N as CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    f.CMA_SUM_N3D_TRAN_SUM_N as CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    f.CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    f.CMA_SUM_ATM_TRAN_CNT_Q,
    f.CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    f.CMA_SUM_CHIP_TRAN_CNT_Q,
    f.CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    f.CMA_SUM_CARD_PRES_TRAN_SUM_N,
    f.CMA_SUM_ATM_TRAN_SUM_N,
    f.CMA_SUM_FALL_BACK_TRAN_SUM_N,
    f.CMA_SUM_CHIP_TRAN_SUM_N,
    f.CMA_SUM_PAY_PASS_TRAN_SUM_N,
    f.CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    f.CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    f.CMA_MAX_CUV_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_RULE_FLAG,
    g.CMC_SUM_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    g.CMC_SUM_TRAN_SUM_N,
    g.CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_SUM_N,
    g.CMC_SUM_FINL_APRD_TRAN_SUM_N,
    g.CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_CNT_Q,
    g.CMC_SUM_OSEA_TRAN_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_SUM_N,
    g.CMC_SUM_OSEA_TRAN_SUM_N,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    g.CMC_SUM_3DS_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    g.CMC_SUM_N3D_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    g.CMC_SUM_3DS_TRAN_SUM_N as CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    g.CMC_SUM_N3D_TRAN_SUM_N as CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    g.CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    g.CMC_SUM_ATM_TRAN_CNT_Q,
    g.CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    g.CMC_SUM_CHIP_TRAN_CNT_Q,
    g.CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    g.CMC_SUM_CARD_PRES_TRAN_SUM_N,
    g.CMC_SUM_ATM_TRAN_SUM_N,
    g.CMC_SUM_FALL_BACK_TRAN_SUM_N,
    g.CMC_SUM_CHIP_TRAN_SUM_N,
    g.CMC_SUM_PAY_PASS_TRAN_SUM_N,
    g.CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    g.CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    g.CMC_MAX_CUV_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_RULE_FLAG,
    h.MAQ_SUM_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_TRAN_SUM_N,
    h.MAQ_SUM_UPST_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_RULE_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_FINL_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FINL_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FDP_RULE_TRIG_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_CNT_Q,
    h.MAQ_SUM_OSEA_TRAN_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_SUM_N,
    h.MAQ_SUM_OSEA_TRAN_SUM_N,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_3DS_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    h.MAQ_SUM_N3D_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    h.MAQ_SUM_3DS_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    h.MAQ_SUM_N3D_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    h.MAQ_SUM_CARD_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_ATM_TRAN_CNT_Q,
    h.MAQ_SUM_FALL_BACK_TRAN_CNT_Q,
    h.MAQ_SUM_CHIP_TRAN_CNT_Q,
    h.MAQ_SUM_PAY_PASS_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_PRES_TRAN_SUM_N,
    h.MAQ_SUM_ATM_TRAN_SUM_N,
    h.MAQ_SUM_FALL_BACK_TRAN_SUM_N,
    h.MAQ_SUM_CHIP_TRAN_SUM_N,
    h.MAQ_SUM_PAY_PASS_TRAN_SUM_N
FROM 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT a
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_tran_prfl_agg2d b
ON 
    a.ssx_cust_num = b.cust_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = b.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_card_tran_prfl_agg2d d
ON 
    a.CHL_ID_CARD_NUM = d.card_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = d.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg2d f
ON 
    a.ssx_cust_num = f.cust_i and a.chl_ct_term_owner_id = f.merc_i and a.chl_ct_acq_id = f.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = f.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg2d g
ON 
    a.CHL_ID_CARD_NUM = g.card_i and a.chl_ct_mer_mcc = g.merc_catg_c
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = g.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_merc_acqr_tran_prfl_agg2d h
ON 
    a.chl_ct_term_owner_id = h.merc_i and a.chl_ct_acq_id = h.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = h.WINDOW_START_DATE

;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-25 10:19:54.029 Z,2025-08-25 11:01:08.741 Z
35.810217,479.137682288885,491849961472,0,"(WITH code1_data AS (
    SELECT DISTINCT
--         TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
-- (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
-- TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d,
-- TO_DATE(SUBSTR(mid_event_ts, 1, 8), 'YYYYMMDD') as evnt_d,
-- TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
-- CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
-- CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC
,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
--,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000   
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE

,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT


-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
--,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
--,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
--,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250601'
and  mid_event_ts < '20250701'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime



    -- FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT 
    -- where SSX_SNAP_D >= '2025-01-01'
),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2025-06-01'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-25 07:34:05.212 Z,2025-08-25 08:09:53.825 Z
41.707200,467.679510712624,29961408512,0,"SELECT DISTINCT
--         TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
-- (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
-- TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d,
-- TO_DATE(SUBSTR(mid_event_ts, 1, 8), 'YYYYMMDD') as evnt_d,
-- TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
-- CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
-- CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC
,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
--,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000   
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE

,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT


-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
--,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
--,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
--,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250601'
and  mid_event_ts < '20250701'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-24 16:44:14.114 Z,2025-08-24 17:25:56.546 Z
80.568650,97.591270849109,129864,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905164056_scored_2 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it6_F2_xval_2day_all_fdt_redmojsiz_20250905164056.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CRD_SAFE_MERCHANT, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_ASN_AGE, _L_SCORE_2, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_SCRN_H, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_CLC_FTP_AMT, _L_TRVL_SPD, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_SCH_AMT, _A_P_L_3, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _L_DAYS_LST_DEV_JS, _A_ECV_DOCUMENT_IP, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_LANG_1, _L_LANG_2, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, DPST_CNT, CC_CNT, FA_1, NO_1, GOVT_BENE, MAR_STS_ORG_STR, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CMA_SUM_TRAN_SUM_N, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-10'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-10 08:10:39.367 Z,2025-09-10 09:31:13.486 Z
210.589833,16678.838580437005,0,0,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        * EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-10 00:14:05.453 Z,2025-09-10 03:44:40.843 Z
46.614750,12685.890338882804,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_WIDE_TRANS_PK_RYAN_TEST_TE2_V1(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

    
            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250710 and 20250826
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-08-29 00:58:27.994 Z,2025-08-29 01:45:04.879 Z
31.028250,2886.618039041758,0,0,"WITH NPP_DATA AS (
    SELECT
        MID_EVENT_TS,
        TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SNAP_D,
        TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
        (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
        CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
        CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,
        SSX_CUST_NUM,
        TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS transaction_date,
        
        -- Original features
        _A_CAPP_REGISTRATIONS_CNT_1,     
        _A_CAPP_LOGON_CNT_1,
        _A_CAPP_REGO_1D_IND,
        
        -- Clean transaction amount
        CASE
            WHEN TGX_TRAN_AMT IS NULL OR TGX_TRAN_AMT = '' OR TGX_TRAN_AMT = ' ' THEN NULL
            ELSE TRY_CAST(TGX_TRAN_AMT AS DECIMAL(18,2))
        END AS clean_transaction_amount,
        
        -- Original TGX_TRAN_AMT for backward compatibility
        COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TGX_TRAN_AMT,
        
        -- Primary risk indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_SCAM_VICTIM_FLAG, '[^0-9.-]', '')), -1) as _A_SCAM_VICTIM_FLAG,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,

        
    FROM LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
    WHERE SNAP_D >= '2025-06-01'
        AND SNAP_D < '2025-07-03'
        AND HDR_SOURCE = 'NPP OUT'
        AND TGX_BANK_NUM <> ''
        AND TGX_BRANCH_ID <> ''
        AND TGX_ACCT_NUM <> ''
        -- AND dtl_ex_0_20s_001 in ('N270158191399','N270157171524','N270154255688',
        AND RCPI_ACCT_I IN ('01~4111~171689295',
'25~7055~328639311',
'923~100~317881058',
'923~100~317881058',
'01~3711~176747925',
'01~3711~176747925',
'923~100~317881058',
'923~100~317881058',
'67~0864~36676078',
'25~7064~525956053',
'01~3711~176723253',
'923~100~317881058',
'25~7127~517317329',
'633~123~220970586',
'923~100~317881058',
'923~100~317881058',
'923~100~317881058',
'633~000~231936345',
'923~100~317881058')
--       'N270153714984',
-- 'N270154264740',
-- 'N270154263297',
-- 'N270154242897',
-- 'N270154255688',
-- 'N270154251638',
-- 'N270154240513',
-- 'N270153704289',
-- 'N270154159400',
-- 'N270154666900',
-- 'N270155012297',
-- 'N270153771293',
-- 'N270153741815',
-- 'N270153732215',
-- 'N270153730486',
-- 'N270153726386',
-- 'N270154276735')
),

-- Calculate daily aggregates
daily_aggregates AS (
    SELECT
        NPP.RCPI_ACCT_I,
        NPP.SNAP_D,
        
        -- Original aggregates
        MAX(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS MAX_SEND_CAPP_REGR_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS TOTL_SEND_CAPP_REGR_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_CAPP_REGR_Q,
        MIN(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MIN_SEND_CAPP_LOGN_Q,
        MAX(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MAX_SEND_CAPP_LOGN_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS TOTL_SEND_CAPP_LOGN_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_CAPP_LOGN_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGO_1D_IND) = '' OR TRIM(NPP._A_CAPP_REGO_1D_IND) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGO_1D_IND) END) AS TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGO_1D_IND) = '' OR TRIM(NPP._A_CAPP_REGO_1D_IND) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_NEW_CAPP_REGR_1D_INDA_Q,
        MAX(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS MAX_SEND_SCAM_VCTM_Q,
        SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS TOTL_SEND_SCAM_VCTM_Q,
        SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS CNT_SEND_SCAM_VCTM_FLAG_Q,
        MIN(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MIN_FNCL_TRAN_A,
        MAX(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN -9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MAX_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS TOTL_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE 1 END) AS CNT_FNCL_TRAN_AMT_Q,
        
        -- Unique sender count
        COUNT(DISTINCT NPP.SSX_PATY_IDNN_BK) AS UNIQUE_SENDERS_DAILY,
        
        -- Transaction count and sum for calculations
        COUNT(*) AS DAILY_TRANSACTION_COUNT,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS DAILY_TRANSACTION_SUM,
        
        -- NEW: Risk indicator aggregations
        MAX(NPP._b_crypto_risk) AS MAX_CRYPTO_RISK_DAILY,
        
        
    FROM NPP_DATA NPP    
    GROUP BY NPP.RCPI_ACCT_I, NPP.SNAP_D
),

-- Calculate SEPARATE window patterns
pattern_features AS (
    SELECT *,
        -- Account history sufficiency check
        COUNT(*) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SNAP_D 
            ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
        ) AS HISTORICAL_DAYS_AVAILABLE,
        
        -- New account flags
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) = 0 THEN 1 ELSE 0
        END AS IS_NEW_ACCOUNT_FLAG,
        
        DATEDIFF('day', 
            MIN(SNAP_D) OVER (PARTITION BY RCPI_ACCT_I),
            SNAP_D
        ) AS DAYS_SINCE_FIRST_TRANSACTION,
        
        -- PATTERN 1: 7-DAY HISTORICAL LOOKBACK (excluding current day)
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3  -- At least 3 days of history
            THEN AVG(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) 
            ELSE 0
        END AS AVG_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN SUM(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS ACTIVE_DAYS_7D_HISTORICAL,
        
        -- PATTERN 2: CURRENT DAY + 1 FOLLOWING DAY (2-day forward pattern)
        AVG(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
        
        AVG(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        SUM(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        AVG(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        MAX(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_TRANSACTIONS_CURRENT_PLUS_1D,
        
        MAX(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS ACTIVE_DAYS_CURRENT_PLUS_1D
        
    FROM daily_aggregates
)

-- Final output with BOTH pattern types
SELECT
    RCPI_ACCT_I,
    SNAP_D,
    MAX_SEND_CAPP_REGR_Q,
    TOTL_SEND_CAPP_REGR_Q,
    CNT_SEND_CAPP_REGR_Q,
    MIN_SEND_CAPP_LOGN_Q,
    MAX_SEND_CAPP_LOGN_Q,
    TOTL_SEND_CAPP_LOGN_Q,
    CNT_SEND_CAPP_LOGN_Q,
    TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
    CNT_SEND_NEW_CAPP_REGR_1D_INDA_Q,
    MAX_SEND_SCAM_VCTM_Q,
    TOTL_SEND_SCAM_VCTM_Q,
    CNT_SEND_SCAM_VCTM_FLAG_Q,
    MIN_FNCL_TRAN_A,
    MAX_FNCL_TRAN_A,
    TOTL_FNCL_TRAN_A,
    CNT_FNCL_TRAN_AMT_Q,
    
     -- Current day metrics
    UNIQUE_SENDERS_DAILY,
    ROUND(UNIQUE_SENDERS_DAILY::DECIMAL / NULLIF(DAILY_TRANSACTION_COUNT, 0), 3) AS SENDER_DIVERSITY_RATIO_DAILY,
    DAILY_TRANSACTION_COUNT,
    ROUND(DAILY_TRANSACTION_SUM, 2) AS DAILY_TRANSACTION_SUM,
    
    -- Account history indicators
    IS_NEW_ACCOUNT_FLAG,
    DAYS_SINCE_FIRST_TRANSACTION,
    HISTORICAL_DAYS_AVAILABLE,
    
    -- 7-day historical features (0 for accounts without history)
    ROUND(AVG_TRANSACTIONS_7D_HISTORICAL, 2) AS AVG_TRANSACTIONS_7D_HISTORICAL,
    ROUND(AVG_UNIQUE_SENDERS_7D_HISTORICAL, 2) AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
    ROUND(TOTAL_TRANSACTION_SUM_7D_HISTORICAL, 2) AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
    ROUND(AVG_TRANSACTION_SUM_7D_HISTORICAL, 2) AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
    
    -- Current + 1 day forward features
    ROUND(AVG_TRANSACTIONS_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
    ROUND(AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D, 2) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
    ROUND(TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
    ROUND(AVG_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D
FROM pattern_features

",DEHURYSK,PUBLIC,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-23 03:48:47.347 Z,2025-08-23 04:19:49.042 Z
38.094333,0.000000000000,0,0,"WITH snowsight_transform_cte as (
    SELECT * FROM TABLE(RESULT_SCAN('01be8ab5-3204-bee2-0000-c71d2a06130a')) WHERE TO_VARCHAR($1) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($2) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($3) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($4) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($5) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($6) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($7) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($8) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($9) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($10) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($11) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($12) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($13) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($14) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($15) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($16) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($17) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($18) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($19) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($20) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($21) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($22) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($23) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($24) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($25) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($26) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($27) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($28) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($29) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($30) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($31) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($32) ILIKE :snowsight_transform_search_term ESCAPE '^' OR TO_VARCHAR($33) ILIKE :snowsight_transform_search_term ESCAPE '^'
) SELECT * FROM snowsight_transform_cte;",DEHURYSK,PUBLIC,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-23 03:35:44.865 Z,2025-08-23 04:13:50.525 Z
162.496950,38736.988765120506,0,0,"CREATE OR REPLACE TEMPORARY TABLE LABMLFRD.NT_RETRO_SAMPLE_TMP AS (
    SELECT TOP 1000

        tran.*
    
        -- -- Retro output
        -- retr.TRAN_IDNN_BK AS TRAN_I,
        -- CAST(retr.MODL_SCOR_V, FLOAT) AS MODL_SCOR_V,
        
    
        -- -- Cards transaction
        -- tran.SSX_CUST_NUM, -- CIF
        -- tran.CHL_ID_CARD_NUM, --Card number
        -- tran.CHL_CT_TERM_OWNER_ID, --merchant ID
        -- tran.CHL_CT_ACQ_ID -- acquirer ID
    FROM
        LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
    INNER JOIN
        PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_RETRO_SCORES retr
    ON 
        retr.TRAN_IDNN_BK = TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-09-01 06:14:20.319 Z,2025-09-01 08:56:50.136 Z
30.743967,7.105478271842,188006080512,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg2d_OOT as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-06-01' and '2025-06-15'
    order by tran_d
),
hourly_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl
    where    
        tran_d between '2025-06-01' and '2025-06-15'
),
all_dates AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        ds.tran_d
    FROM
        (SELECT DISTINCT cust_i, merc_i, acqr_i FROM PRD_P01_DMN_FRAUMD.lcl.cust_merc_acqr_tran_prfl where tran_d between '2025-06-01' and '2025-06-15') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.cust_i = hd.cust_i AND ad.merc_i = hd.merc_i AND ad.acqr_i = hd.acqr_i AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.cust_i,
        ad.merc_i,
        ad.acqr_i,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        cust_i,
        merc_i,
        acqr_i,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY cust_i, merc_i, acqr_i ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMA_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    cust_i, -- as ssx_cust_num,
    merc_i,
    acqr_i,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMA_SUM_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    CMA_SUM_TRAN_SUM_N,
    CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    CMA_SUM_UPST_APRD_TRAN_SUM_N,
    CMA_SUM_FINL_APRD_TRAN_SUM_N,
    CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    CMA_SUM_DOMS_TRAN_CNT_Q,
    CMA_SUM_OSEA_TRAN_CNT_Q,
    CMA_SUM_DOMS_TRAN_SUM_N,
    CMA_SUM_OSEA_TRAN_SUM_N,
    CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMA_SUM_3DS_TRAN_CNT_Q,
    CMA_SUM_N3D_TRAN_CNT_Q,
    CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMA_SUM_3DS_TRAN_SUM_N,
    CMA_SUM_N3D_TRAN_SUM_N,
    CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    CMA_SUM_ATM_TRAN_CNT_Q,
    CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    CMA_SUM_CHIP_TRAN_CNT_Q,
    CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    CMA_SUM_CARD_PRES_TRAN_SUM_N,
    CMA_SUM_ATM_TRAN_SUM_N,
    CMA_SUM_FALL_BACK_TRAN_SUM_N,
    CMA_SUM_CHIP_TRAN_SUM_N,
    CMA_SUM_PAY_PASS_TRAN_SUM_N,
    CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMA_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    cust_i,
    merc_i,
    acqr_i,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-09-01 07:26:28.245 Z,2025-09-01 07:57:12.883 Z
50.820483,3087.884066618979,8261632,0,"CREATE OR REPLACE temporary TABLE bvt AS 
  select  a.*
    , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
from        LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
-- 22 days
where   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') > TO_TIMESTAMP('20250905 23:00:00', 'YYYYMMDD HH24:MI:SS')
order by chl_id_ob_userid asc;",KINGR4,PUBLIC,WH_USR_PRD_P01_FRAUMD_001,X-Large,SUCCESS,2025-09-05 13:07:09.609 Z,2025-09-05 13:57:58.838 Z
94.166333,108.354654401541,129864,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905164056_scored_0 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it6_F2_xval_2day_all_fdt_redmojsiz_20250905164056.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CRD_SAFE_MERCHANT, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_ASN_AGE, _L_SCORE_2, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_SCRN_H, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_CLC_FTP_AMT, _L_TRVL_SPD, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_SCH_AMT, _A_P_L_3, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _L_DAYS_LST_DEV_JS, _A_ECV_DOCUMENT_IP, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_LANG_1, _L_LANG_2, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, DPST_CNT, CC_CNT, FA_1, NO_1, GOVT_BENE, MAR_STS_ORG_STR, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CMA_SUM_TRAN_SUM_N, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) <= '2025-06-05'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-10 05:44:22.617 Z,2025-09-10 07:18:32.597 Z
80.313467,5800.114977553487,132882243584,0,"CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_FPF AS (
-- INSERT INTO LABMLFRD.CARD_TRAN_PRFL (
    WITH TRAN AS (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS TRAN_I
            , TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S
            , TO_DATE(TTS_TRAN_DATE_ALT, 'YYYYMMDD') AS TRAN_D
            , UPPER(TO_CHAR(DATE_TRUNC('HOUR', TRAN_S), 'HH:DY')) AS TRAN_HOUR_DAY_X
            , SSX_CUST_NUM AS CUST_I
        	, CHL_ID_CARD_NUM AS CARD_I
            , ATH_PC_CARD_EXP_DATE
        	, DTL_EX_0_20S_004 AS DPAN_I
        	, CASE WHEN CHL_CT_MEDIA = 'V' THEN 1 ELSE 0 END AS TOKN_F
            , CASE WHEN CHL_CT_WHICH_CARD IN (1,0) THEN 1 ELSE 0 END AS PRIM_CAHD_F
        	, DTL_CA_CLIENT_AMT AS TRAN_AMT_N
        	, ATH_PC_POS AS POS_ENTR_C
            , CASE WHEN DTL_CA_REVERSAL_IND = 'N' THEN 0 ELSE 1 END AS REVS_INDA_F
            , CASE WHEN ATH_PC_PIN_VRFY = 'V' THEN 0 ELSE 1 END AS PIN_VRFY_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'C' THEN 1 ELSE 0 END AS PAIN_CUST_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'M' THEN 1 ELSE 0 END AS PAIN_MERC_F
        	, CASE WHEN DTL_EX_0_I_022 = 'R' THEN 1 ELSE 0 END AS RCRR_F
        	, DTL_EX_0_3S_002 AS SECU_LEVL_INDA_C
            , SUBSTR(DTL_EX_3_80S_003,1,2) AS ACCT_AUTT_V
            , CASE WHEN ATH_PC_POS IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_NOT_PRES_INDA_F
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS ""3DS_INDA_F""
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 NOT IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS N3D_INDA_F
            , CASE WHEN ATH_PC_POS NOT IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_PRES_INDA_F
            , CASE WHEN CARD_PRES_INDA_F = '1' AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS ATM_TRAN_F
            , CASE WHEN POS_ENTR_C IN ('62','79','80') AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS FALL_BACK_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '05' THEN 1 ELSE 0 END AS CHIP_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '07' THEN 1 ELSE 0 END AS PAY_PASS_TRAN_INDA_F
        	, REPLACE(DTL_CA_AUTH_SYS_DEC,' ','') AS UPST_DCDE_C
        	, REPLACE(DTL_CA_AUTH_SYS_INFO,' ','') AS UPST_REAS_C
            , REPLACE(RSP_ACTION_CODE,' ','') AS FINL_DCDE_C
            , CASE WHEN UPST_DCDE_C = '1' AND FINL_DCDE_C != '1' THEN 1 ELSE 0 END AS RULE_DCLN_F
        	, CASE WHEN FINL_DCDE_C = '1' THEN 1 ELSE 0 END AS FINL_APRD_TRAN_CNT_F
        	, CASE WHEN UPST_REAS_C IN ('20','21','22','81','BE') THEN 1 ELSE 0 END  AS INCO_EXPY_F
        	, CASE WHEN UPST_REAS_C IN ('30','31','34','36','41','42','43','44','45','46','47') THEN 1 ELSE 0 END AS INCO_CVVA_F
        	, CASE WHEN UPST_REAS_C IN ('11','12','CP','MP','PE','PM') THEN 1 ELSE 0 END AS INCO_PIN_F
        	, CASE WHEN UPST_REAS_C IN ('T7','CL','87','88','89','90','98') THEN 1 ELSE 0 END AS OVER_LIMT_DCLN_F /* $ OVER LIMIT, DELINQUANT OR TRASACTION LIMIT */
            
            , CHL_CT_ACQ_ID AS ACQR_I
        	, CHL_CT_TERM_OWNER_ID AS MERC_I
        	, REPLACE(CHL_CT_TERM_OWNER_NAME,' ','') AS MERC_M
        	, CHL_CT_TERM_ID AS MERC_TRML_I
        	, CHL_CT_TERM_CNTRY_CODE AS CNTY_C
        	, CHL_CT_MER_MCC AS MERC_CATG_C
            , CASE WHEN CHL_CT_TERM_CNTRY_CODE = '036' THEN 1 ELSE 0 END AS DOMS_TRAN_INDA_F

        	, RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X
            , SUBSTR(RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X
            , SUBSTR(RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F
        	, SUBSTR(RSP_EX_2_8S_002,8,1) AS PUSH_EXIT_C
            , CASE WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='1' AND RSP_EX_2_I_009='2' THEN '1WP_REG'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='2' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='3' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='4' AND RSP_EX_2_I_009='2' THEN '1WP_DMGD_CARD'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='5' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='A' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='B' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='G' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_CIF'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='H' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_DEV'
            	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='I' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_CIF'
            	ELSE 'NO_PUSH' END AS PUSH_TYPE_QLFY_X
            , CASE WHEN DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(DTL_EX_3_8S_004) END AS MCRD_SCOR_N
            
        FROM 
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
        WHERE
            TTS_TRAN_DATE >= TO_CHAR($END_D-90,'YYYYMMDD')
            AND TTS_TRAN_DATE <= TO_CHAR($END_D,'YYYYMMDD')
            
            AND HDR_ACTIVITY_TYPE = 'CA'
            AND SSX_CUST_NUM != ''
            AND CHL_ID_CARD_NUM != ''
    )
    , CUST_TRAN_PRFL AS (
    SELECT 
        CUST_I

        -- Digital events
        , CAPP_PSWD_CHNG_CNT_Q
    	, CAPP_PSWD_CHNG_LAST_S
    	, CAPP_DVIC_REGR_CNT_Q
    	, CAPP_DVIC_REGR_LAST_S
    	, CAPP_LOGN_CNT_Q
    	, CAPP_LOGN_LAST_S
    	, NTB_LOGN_CNT_Q
    	, NTB_LOGN_LAST_S
    	, VIEW_CARD_DETL_CNT_Q
    	, VIEW_CARD_DETL_LAST_S
    FROM
        LCL.CUST_TRAN_PRFL
    WHERE 
        CUST_I IN (SELECT CUST_I FROM TRAN)
    )
     -- Analyst declined disputed transactions
    , CONFIRMED_FPF AS (
        SELECT
            b.DSPT_CASE_I
            , b.DSPT_CASE_EVNT_I
            , b.DSPT_CASE_CRAT_S
            , b.DSPT_TRAN_I
            , a.TRAN_ID
            , 1 AS FPF_INDA_F
        FROM 
            LABMLFRD.CARD_TRAN_GROS_FRAU a
        LEFT JOIN
            LABMLFRD.CARD_TRAN_DAIS_DSPT b
        ON
            a.TRAN_ID=b.TRAN_I
        WHERE 
            a.OUTCOME IN ('Resolved-CLOSED: INVEST DECLINE')
            AND b.DSPT_TRAN_DCDE_X IN ('Fraud Referral','Customer Liable')
    )
    -- STP Daisy cases - potential FPF
    , POTENTIAL_FPF AS (
        SELECT DISTINCT
            a.DSPT_CASE_I
            , a.DSPT_CASE_EVNT_I
            , b.DSPT_CASE_CRAT_S
            , b.DSPT_CASE_TRAN_Q
            , b.TOTL_TRAN_AND_FEE_A
            , a.DSPT_TRAN_I
            , dai.TRAN_I
            , 9 AS FPF_INDA_F
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        INNER JOIN
            (SELECT * FROM CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL 
            WHERE DSPT_TYPE_C = 'DT1'
            QUALIFY ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
            ) b
        ON
            a.DSPT_CASE_I = b.DSPT_CASE_I
        LEFT JOIN
            LABMLFRD.CARD_TRAN_DAIS_DSPT dai
        ON 
            a.DSPT_CASE_I = dai.DSPT_CASE_I
            AND a.DSPT_TRAN_I = dai.TRAN_I
        WHERE
            UPPER(a.DSPT_TRAN_DCDE_X) LIKE ANY ('%CHARGE%OFF%','%CHARGEBACK%','%WRITE%OFF%')
            AND a.DSPT_SRCE_SYST_M != 'GS'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC) = 1
    )
    -- Daisy case information
    , DNA_CASE AS (
    SELECT 
        a.PATY_I
        
        , COUNT(DISTINCT a.DSPT_CASE_I) AS DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , SUM(a.DSPT_CASE_TRAN_Q) AS DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , SUM(a.TOTL_TRAN_AND_FEE_A) AS DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND c.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND c.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND c.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
    FROM 
        (SELECT DISTINCT
            PATY_I
            , DSPT_CASE_I
            , DSPT_CASE_EVNT_I
            , DSPT_CASE_CRAT_S
            , DSPT_CASE_TRAN_Q
            , TOTL_TRAN_AND_FEE_A
        FROM
            CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
        WHERE
            DSPT_TYPE_C = 'DT1'
        QUALIFY 
            ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) a
    LEFT JOIN
        (SELECT DISTINCT DSPT_CASE_I 
        FROM CONFIRMED_FPF) b
    ON 
        a.DSPT_CASE_I = b.DSPT_CASE_I
    LEFT JOIN 
        POTENTIAL_FPF c
    ON
        a.DSPT_CASE_I = c.DSPT_CASE_I
    GROUP BY
        a.PATY_I
    )
    -- Output
    SELECT DISTINCT
    	a.* -- Transaction info, including UVs (e.g. WPR rego date, etc)

        , dai.DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , dai.DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , dai.DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , dai.DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , dai.DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , dai.DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , dai.DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , dai.DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , dai.DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , dai.DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , dai.DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , dai.DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , dai.DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , dai.DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , dai.DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , dai.DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days

        , dai.DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , dai.DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , dai.DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , dai.DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , dai.DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , dai.DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , dai.DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , dai.DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , dai.DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days

        , IFNULL(COALESCE(fpf.FPF_INDA_F,pfpf.FPF_INDA_F),0) AS FPF_INDA_F
        
    FROM
    	TRAN a
    LEFT JOIN 
        DNA_CASE dai
    ON 
        a.CUST_I = dai.PATY_I
    LEFT JOIN 
        CUST_TRAN_PRFL b
    ON
        a.CUST_I = b.CUST_I
    LEFT JOIN
        CONFIRMED_FPF fpf
    ON
        a.TRAN_I = fpf.TRAN_ID
    LEFT JOIN
        POTENTIAL_FPF pfpf
    ON
        a.TRAN_I = pfpf.TRAN_I
    -- WHERE 
    --     fpf.FPF_INDA_F<>0
    -- ORDER BY 
    --     a.CUST_I
    -- 	, a.CARD_I
    -- 	, a.TRAN_S DESC
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-10 06:58:48.123 Z,2025-09-10 08:19:06.931 Z
30.384117,601.253367081285,61027180544,0,"create or replace temporary table NPP_TRAN as
select	distinct case   when b.fraudtype = 'CVL' then null
                else b.fraudtype
        end as FRAUDTYPE
		,b.detection
		,b.case_detection
        ,TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
		,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
		,a.tts_tran_date_alt
		,a.tts_tran_time_alt
		,a.dtl_ex_0_20s_001
		,a.dtl_ex_1_5s_01
		,a.ssx_cust_num
		,a.chl_id_ob_userid
		,a.tgx_bank_name
		,a.tgx_bank_num
		,a.tgx_branch_id
		,a.tgx_acct_num
		,a.tgx_name
		,a.tgx_description
		,TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as TRAN_AMT
		,a.dtl_ex_0_i_002 as FTP_IND
		
		-- BioCatch UVs
		,TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE
		,TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE
		,TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_SCORE
		,TRY_TO_NUMBER(a._l_adv_key_combo, 38, 2) as _L_ADV_KEY_COMBO
		,TRY_TO_NUMBER(a._l_clpbrd_evnt, 38, 2) as _L_CLPBRD_EVNT
		,TRY_TO_NUMBER(a._l_concurrent_sess, 38, 2) as _L_CONCURRENT_SESS
		,TRY_TO_NUMBER(a._l_export_data, 38, 2) as _L_EXPORT_DATA
		,TRY_TO_NUMBER(a._l_import_data, 38, 2) as _L_IMPORT_DATA
		,TRY_TO_NUMBER(a._l_is_rat, 38, 2) as _L_IS_RAT
		,TRY_TO_NUMBER(a._l_is_mob_rat, 38, 2) as _L_IS_MOB_RAT
		,TRY_TO_NUMBER(a._l_rat_in_sess, 38, 2) as _L_RAT_IN_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_hrisk_sess, 38, 2) as _L_IS_RCNT_HRISK_SESS
		,TRY_TO_NUMBER(a._l_is_rcnt_rat, 38, 2) as _L_IS_RCNT_RAT
		,TRY_TO_NUMBER(a._l_lrg_dist_known_loc, 38, 2) as _L_LRG_DIST_KNOWN_LOC
		,TRY_TO_NUMBER(a._l_rare_scrn_sz, 38, 2) as _L_RARE_SCRN_SZ
		,TRY_TO_NUMBER(a._l_risky_isp, 38, 2) as _L_RISKY_ISP
		,TRY_TO_NUMBER(a._l_risky_key_combo, 38, 2) as _L_RISKY_KEY_COMBO
		,TRY_TO_NUMBER(a._l_tzone_mismatch, 38, 2) as _L_TZONE_MISMATCH
		,TRY_TO_NUMBER(a._l_scm_rsk_hgh_scr, 38, 2) as _L_SCM_RSK_HGH_SCR
		,TRY_TO_NUMBER(a._l_keyb_nav_anom, 38, 2) as _L_KEYB_NAV_ANOM
		,TRY_TO_NUMBER(a._l_scrn_broadcast, 38, 2) as _L_SCRN_BROADCAST
		,TRY_TO_NUMBER(a._l_delay_to_input_pi, 38, 2) as _L_DELAY_TO_INPUT_PI
		,TRY_TO_NUMBER(a._l_input_otp_delay, 38, 2) as _L_INPUT_OTP_DELAY
		,TRY_TO_NUMBER(a._l_active_spoofing, 38, 2) as _L_ACTIVE_SPOOFING
		,TRY_TO_NUMBER(a._l_pmt_vloc_anom, 38, 2) as _L_PMT_VLOC_ANOM
		,TRY_TO_NUMBER(a._l_rcnt_hi_scr_on_dev, 38, 2) as _L_RCNT_HI_SCR_ON_DEV
		,TRY_TO_NUMBER(a._l_accum_amt_anom, 38, 2) as _L_ACCUM_AMT_ANOM
		,TRY_TO_NUMBER(a._l_app_togg, 38, 2) as _l_APP_TOGG
		,TRY_TO_NUMBER(a._l_is_active_call, 38, 2) as _L_IS_ACTIVE_CALL
		,TRY_TO_NUMBER(a._l_is_long_sess, 38, 2) as _L_IS_LONG_SESS
		,TRY_TO_NUMBER(a._l_type_patterns_anomaly, 38, 2) as _L_TYPE_PATTERNS_ANOMALY
		,TRY_TO_NUMBER(a._l_seg_typing_pi, 38, 2) as _L_SEG_TYPING_PI
		
		-- NameCheck UVs
		,a._l_nc_response_code
		,a._l_nc_match_name_conf
		
		-- H2O Score UVs
		,TRY_TO_NUMBER(a._l_cust_scamrisk_score, 38, 2) as _L_CUST_SCAMRISK_SCORE
		,a.dtl_ex_0_n_029
		,a.dtl_ex_0_n_034 as CERBERUS_SCORE
		
		-- Recipient Level UVs
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_short, 38, 2) as _B_RECIP_SUM_SHORT
		,TRY_TO_NUMBER(a._b_recip_sum_aaa_long, 38, 2) as _B_RECIP_SUM_LONG
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_short, 38, 2) as _B_RECIP_FTP_CNT_SHORT
		,TRY_TO_NUMBER(a._b_recip_ftp_cnt_long, 38, 2) as _B_RECIP_FTP_CNT_LONG
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_any_cust_ftp_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_ANY_CUST_FTP_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_2
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_3
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_4
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) as _B_OPEN_LAST_PAYER_CIF_DT_5
		
		-- Customer Level UVs
		,TRY_TO_NUMBER(a._a_customer_age, 38, 2) as _A_CUSTOMER_AGE
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_SHORT, 38, 2) as _A_CUST_SUM_AAA_SHORT
		,TRY_TO_NUMBER(a._a_cust_sum_aaa_LONG, 38, 2) as _A_CUST_SUM_AAA_LONG
		,TRY_TO_NUMBER(a._a_ftp_cnt_1, 38, 2) as _A_FTP_CNT_1
		,TRY_TO_NUMBER(a._a_ftp_cnt_2, 38, 2) as _A_FTP_CNT_2
		,TRY_TO_NUMBER(a._a_ftp_cnt_3, 38, 2) as _A_FTP_CNT_3
		,TRY_TO_NUMBER(a._a_ftp_cnt_4, 38, 2) as _A_FTP_CNT_4
		,TRY_TO_NUMBER(a._a_ftp_cnt_5, 38, 2) as _A_FTP_CNT_5
		,TRY_TO_NUMBER(a._a_ftp_cnt_6, 38, 2) as _A_FTP_CNT_6
		,TRY_TO_NUMBER(a._a_ftp_cnt_7, 38, 2) as _A_FTP_CNT_7
		,TRY_TO_NUMBER(a._a_ftp_sum_1, 38, 2) as _A_FTP_SUM_1
		,TRY_TO_NUMBER(a._a_ftp_sum_2, 38, 2) as _A_FTP_SUM_2
		,TRY_TO_NUMBER(a._a_ftp_sum_3, 38, 2) as _A_FTP_SUM_3
		,TRY_TO_NUMBER(a._a_ftp_sum_4, 38, 2) as _A_FTP_SUM_4
		,TRY_TO_NUMBER(a._a_ftp_sum_5, 38, 2) as _A_FTP_SUM_5
		,TRY_TO_NUMBER(a._a_ftp_sum_6, 38, 2) as _A_FTP_SUM_6
		,TRY_TO_NUMBER(a._a_ftp_sum_7, 38, 2) as _A_FTP_SUM_7
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_2, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_2
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_3, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_3
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_4, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_4
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_5, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_5
		,TRY_TO_NUMBER(a._a_cust_npp_out_sum_aaa_6, 38, 2) as _A_CUST_NPP_OUT_SUM_AAA_6
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_NEW_CAPP_REGO_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CSE_CHG_DWL_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_CIF_ESTABLISH_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00') as _A_NB_LASTLOGON_DT_1
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00') as _A_CURR_CAPP_DEVICE_DT
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_1, 38, 2) as _A_NB_LOGONS_CNT_1
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_2, 38, 2) as _A_NB_LOGONS_CNT_2
		,TRY_TO_NUMBER(a._a_nb_logons_cnt_3, 38, 2) as _A_NB_LOGONS_CNT_3
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_1, 38, 2) as _A_CAPP_LOGON_CNT_1
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_2, 38, 2) as _A_CAPP_LOGON_CNT_2
		,TRY_TO_NUMBER(a._a_capp_logon_cnt_3, 38, 2) as _A_CAPP_LOGON_CNT_3
		
		-- Customer-Recipient Relationship Level UVs
		,TRY_TO_NUMBER(a._x_cif_recipient_new_sum, 38, 2) + TRY_TO_NUMBER(a.tgx_tran_amt, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM
		,case   when a._x_cif_recipient_new_date = '0' then TO_TIMESTAMP(a.tts_tran_date_alt || ' ' || a.tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF')
                else TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00'::timestamp)
		end as _X_CIF_RECIPIENT_NEW_DATE
		,case   when a._x_cif_recipient_new_cnt = '0' then 1
                else TRY_TO_NUMBER(a._x_cif_recipient_new_cnt, 38, 2) + 1
		end as _X_CIF_RECIPIENT_NEW_CNT
		
		-- Telstra Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_TELSTRA_LONG_CALL
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._x_telstra_last_call_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _X_TELSTRA_LAST_CALL_DT
		,TRY_TO_NUMBER(a._x_telstra_last_call_dur, 38, 2) as _X_TELSTRA_LAST_CALL_DUR
		,TRY_TO_NUMBER(a._x_telstra_max_call_dur, 38, 2) as _X_TELSTRA_MAX_CALL_DUR
		,a._a_telstra_active_call
		
		-- Crypto UVs
		,TRY_TO_NUMBER(a._a_crypto_mnthly_sum, 38, 2) as _A_CRYPTO_MNTHLY_SUM
		,DATEADD(day, TRY_TO_NUMBER(a._a_crypto_last_pymnt_date, 38, 2), '1960-01-01') as _A_CRYPTO_LAST_PYMNT_DATE
		
		-- M100 Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP1_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP2_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP3_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP4_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP5_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP6_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP7_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP10_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp11_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP11_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp12_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP12_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp13_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP13_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP20_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_SCAMP21_MLW_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _N_M100_P8_IND_DT
		
		-- M100 App Indicators
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P1_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P5_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) as _A_M100_APP_P8_IND_DT
		,TIMESTAMPADD(second, TRY_TO_NUMBER(a._n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00') as _N_M100_APP_P9_DT
 		
		-- CIF Profiling UVs
		,a._l_fingerprint_1
		,a._l_fingerprint_2
		,a._l_fingerprint_3
		,a._l_fingerprint_4

        -- Intelligent Friction UVs
                ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCTN_MSG_SNT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCTN_MSG_SNT
    
         ,MAX(
        CASE 
            WHEN a._N_INTEL_FRCTN_MSG_SNT IN ('HRISK_MESSAGE','GENERAL_MESSAGE')
             AND a._N_INTEL_FRCT_INTENT IN ('FAMILY_FRIENDS','GOODS','BILLS_SERVICE','MYSELF','INVEST')
             AND a.tgx_bank_num = a._n_intel_frctn_bank
             AND a.tgx_branch_id = a._n_intel_frctn_brch
             AND a.tgx_acct_num = a._n_intel_frctn_acc
            THEN a._N_INTEL_FRCT_INTENT 
        END
    ) OVER (
        PARTITION BY a.chl_id_ob_userid, a.tgx_bank_num, a.tgx_branch_id, a.tgx_acct_num
    ) AS _N_INTEL_FRCT_INTENT
        
from        lcl.fdp_customer_transactions_send_flat a
left join  prd_p01_dmn_fraumd.labmlfrd.dtl_fraudmaster b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where   a.mid_event_ts >= '20250701'
and     a.mid_event_ts >= '20250801'
and     a.dtl_ex_1_5s_01 in ('C205N'
							,'C207N'
							,'C242N'
							,'C244N'
							,'C246N'
							,'N205N'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'X232N'
							,'X243N'
							,'X246N')
and     a.hdr_source = 'NPP OUT'
and     tran_amt > 0
order by    chl_id_ob_userid
            ,transactiondatetime;",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-10 04:17:53.263 Z,2025-09-10 04:48:16.310 Z
148.943817,98.030304044485,129864,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_vereniil_cretro_20250905164056_scored_1 as 
(select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
CARDS_RETRO_TEST_MOJO1('modelname=pipeline_it6_F2_xval_2day_all_fdt_redmojsiz_20250905164056.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_SUM_1, _C_CRD_SAFE_MERCHANT, _L_CITY_AGE, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_CLIENT_COUNTRY_CNT_10, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _L_TOUCH_CNT, _L_SCORE_4, _A_E, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_ASN_AGE, _L_SCORE_2, _L_BC_SESS_CNT, _L_ACC_AMT_1H, _A_P_L_1, _L_PMT_AMT, _L_ISP_AGE, _L_ACC_AMT_7D, _A_CLIENT_COUNTRY_CNT_7, _L_SCORE_5, _L_MUID_AGE_PER_USER, _A_CUST_ACCT_BAL, _L_CUST_SCAMRISK_SCORE, _A_ATM_WITHDRAWAL_SUM_AMT, _L_TAP_CNT, _L_MAX_30D_SCORE, _L_SCRN_H, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_CLIENT_COUNTRY_CNT_5, _A_U, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _L_DAYS_LST_DEV_IOS, _A_T, _L_MINS_LST_LGN_CAPPED, _A_PROF_CAPP_DEVICE_CNT_2, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_CAPP_DEVICE_CNT, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _A_R, _L_CNTRY_AGE, _A_TRANSPORT_REG_CNT_1, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _A_PROF_CAPP_DEVICE_CNT_4, _L_SESS_CNT_WEB, _L_IP_AGE, _A_NPP_INBOUND_SUM_AMT, _A_CLC_FTP_AMT, _L_TRVL_SPD, _L_SESS_CNT_MOB_BROWSER, _L_SCORE_3, _A_SCH_AMT, _A_P_L_3, _A_CUST_NPP_OUT_SUM_AAA_LONG, _A_VPN_VPS_IP_LOGON_COUNT, _A_GEO_DISTANCE, _L_DAYS_LST_DEV_JS, _A_ECV_DOCUMENT_IP, _A_CLIENT_CITY_10, _L_PUSH_API_1, _L_PUSH_API_2, _L_PUSH_API_3, _A_CLIENT_CITY_6, _L_NC_WINNING_ALG, _L_LANG_1, _L_LANG_2, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_0_2S_002, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, _A_CIF_ESTABLISH_CUST_PCODE, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, DPST_CNT, CC_CNT, FA_1, NO_1, GOVT_BENE, MAR_STS_ORG_STR, _A_CC_DT_DIFF, _A_ONLINE_PL_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _A_AUTO_DEC_CP_PP_DT_DIFF, _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF, _A_SCAMP5_MLW_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, _L_PUSH_API_DT_4_DIFF, CUS_SUM_TRAN_SUM_N, CUS_SUM_UPST_DCLN_TRAN_CNT_Q, CUS_SUM_OSEA_TRAN_CNT_Q, CUS_SUM_DOMS_TRAN_SUM_N, CUS_SUM_OSEA_TRAN_SUM_N, CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N, CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CUS_SUM_CARD_PRES_TRAN_SUM_N, CUS_SUM_PAY_PASS_TRAN_SUM_N, CUS_SUM_CAPP_LOGN_CNT_Q, CUS_SUM_VIEW_CARD_DETL_CNT_Q, CRD_SUM_UPST_APRD_TRAN_CNT_Q, CRD_SUM_UPST_DCLN_TRAN_CNT_Q, CRD_SUM_FINL_APRD_TRAN_CNT_Q, CRD_SUM_TRAN_SUM_N, CRD_SUM_UPST_DCLN_TRAN_SUM_N, CRD_SUM_RULE_DCLN_TRAN_SUM_N, CRD_SUM_DOMS_TRAN_CNT_Q, CRD_SUM_DOMS_TRAN_SUM_N, CRD_SUM_OSEA_TRAN_SUM_N, CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N, CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CRD_SUM_CARD_PRES_TRAN_CNT_Q, CRD_SUM_PAY_PASS_TRAN_CNT_Q, CRD_SUM_CARD_PRES_TRAN_SUM_N, CRD_SUM_PAY_PASS_TRAN_SUM_N, CMA_SUM_TRAN_SUM_N, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_UPST_APRD_TRAN_SUM_N, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_OSEA_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_PAY_PASS_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_OSEA_TRAN_CNT_Q, MAQ_SUM_DOMS_TRAN_SUM_N, MAQ_SUM_OSEA_TRAN_SUM_N, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D_OOT
where to_date(transactiondatetime) > '2025-06-05' and to_date(transactiondatetime) <= '2025-06-10'
-- limit 870
);",VERENIIL,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-10 06:24:18.906 Z,2025-09-10 08:53:15.535 Z
30.110217,4706.498965039849,123221487616,0,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE1 as (

WITH cleaned_recipient_data AS (
    -- Clean and prepare recipient transaction data for LAST 6 MONTHS
    SELECT
        -- Snapshot date of transaction (parsed from MID_EVENT_TS)
        TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
        -- Transaction datetime (parsed from alternate date/time fields)
        TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
        -- Transaction ID (concatenation of 3 fields)
        (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
        -- Account identifier (bank, branch, account number)
        CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
        -- Feature from leaky.txt, no description
        dtl_ex_0_20s_001,
        -- Customer number (must be present, dropped for modelling)
        SSX_CUST_NUM,
        -- Transaction date (alternate format)
        TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS transaction_date,
        -- Extract hour from timestamp
        EXTRACT(HOUR FROM TRY_TO_TIMESTAMP(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF')) as C_hour,
        

        -- Day of week of transaction
        DAYOFWEEK(TRANSACTIONDATETIME) as C_day_of_week,
        -- Day of month of transaction
        DAY(SSX_SNAP_D) as C_day_of_month,
        -- Month of year of transaction
        MONTH(SSX_SNAP_D) as C_month_of_year,

        -- Scam victim flag (primary risk indicator)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_SCAM_VICTIM_FLAG, '[^0-9.-]', '')), -1) as _A_SCAM_VICTIM_FLAG,
        -- Primary risk indicator y
        -- Crypto risk indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,
        -- Blacklist and scam indicators
        -- Blacklist scam account indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_acct,
        -- Related scam CIF indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl1_scam_tp_cif, '[^0-9.-]', '')), -1) as _b_list_rl1_scam_tp_cif,
        -- High-risk biller metrics
        -- High-risk biller count
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_1,
        -- High-risk biller sum
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_1,
        -- NPP blacklist flags
        -- NPP blacklist recipient flag
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_recip_flag,
        -- NPP outbound transaction metrics
        -- NPP outbound transaction count (1)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_1,
        -- NPP outbound transaction count (2)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_2,
        -- NPP outbound transaction sum (1)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_sum_1,
        -- NPP first-time payer metrics
        -- NPP outbound first-time payer count (2)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_2,
        -- NPP outbound first-time payer sum (1)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_1,
        -- NPP outbound first-time payer sum (2)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_2,
        -- NPP watchlist flags
        -- Other risk indicators
        -- Open listed last CIF (2)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_open_listed_last_cif_2, '[^0-9.-]', '')), -1) as _b_open_listed_last_cif_2,
        -- Recipient first-time payer metrics
        -- Recipient first-time payer sum (1)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_1,
        -- Recipient first-time payer sum (long)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_long, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_long,
        -- Recipient link sums
        -- Recipient AAA link sum (long)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_long,
        -- Recipient link sum (long)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_long,
        -- Recipient link sum (short)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_short,
        -- Recipient transaction sums (various time periods)
        -- Recipient transaction sum (4 days)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_4, '[^0-9.-]', '')), -1) as _b_recip_sum_4,
        -- Recipient transaction sum (7 days)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_7, '[^0-9.-]', '')), -1) as _b_recip_sum_7,
        -- Recipient transaction sum (today)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_today, '[^0-9.-]', '')), -1) as _b_recip_sum_today,
        -- Recipient AAA transaction sums
        -- Recipient AAA transaction sum (1 day)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_1, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_1,
        -- Recipient AAA transaction sum (4 days)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_4, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_4,
        -- Recipient AAA transaction sum (long)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_long,
        -- Recipient AAA transaction sum (short)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_short,
        -- Fixed: _b_rfm_whitelist_ind (was incorrectly aliased)
        -- RFM whitelist indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_rfm_whitelist_ind, '[^0-9.-]', '')), -1) as _b_rfm_whitelist_ind,
        -- NPP velocity (1 day outbound)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_1d_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_1d_out,

        -- Risky apps indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_apps, '[^0-9.-]', '')), -1) as _l_risky_apps,
        -- Risky browser indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_browser, '[^0-9.-]', '')), -1) as _l_risky_browser,
        -- Accelerated event count
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_accel_event_cnt, '[^0-9.-]', '')), -1) as _l_accel_event_cnt,
        -- Recipient FTP feature
        COALESCE(CAST(_l_recip_ftp AS VARCHAR(50)), '-1') as _l_recip_ftp,
        -- Risky amount indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_risky_amt, '[^0-9.-]', '')), -1) as _l_risky_amt,
        -- Time zone mismatch indicator
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_l_tzone_mismatch, '[^0-9.-]', '')), -1) as _l_tzone_mismatch,

        -- Original features
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_REGISTRATIONS_CNT_1, '[^0-9.-]', '')), -1) as _A_CAPP_REGISTRATIONS_CNT_1,   
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_LOGON_CNT_1, '[^0-9.-]', '')), -1) as _A_CAPP_LOGON_CNT_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_CAPP_REGO_1D_IND, '[^0-9.-]', '')), -1) as _A_CAPP_REGO_1D_IND,
    
        -- Original TGX_TRAN_AMT for backward compatibility
        COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TGX_TRAN_AMT,
        COUNT(*) OVER (PARTITION BY RCPI_ACCT_I, DATE(SSX_SNAP_D)) as daily_count
        

        
    FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
    WHERE SSX_SNAP_D >= '2024-09-23'
        AND SSX_SNAP_D < '2025-07-17'
        AND HDR_SOURCE = 'NPP OUT'
        AND TGX_BANK_NUM <> ''
        AND TGX_BRANCH_ID <> ''
        AND TGX_ACCT_NUM <> ''
        and  dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
),

-- Calculate daily aggregates
daily_aggregates AS (
    SELECT
        NPP.RCPI_ACCT_I,
        NPP.SSX_SNAP_D,
        
        -- Original aggregates
        MAX(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS MAX_SEND_CAPP_REGR_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) = '' OR TRIM(NPP._A_CAPP_REGISTRATIONS_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGISTRATIONS_CNT_1) END) AS TOTL_SEND_CAPP_REGR_Q,
        
        MIN(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MIN_SEND_CAPP_LOGN_Q,
        MAX(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS MAX_SEND_CAPP_LOGN_Q,
        SUM(CASE WHEN TRIM(NPP._A_CAPP_LOGON_CNT_1) = '' OR TRIM(NPP._A_CAPP_LOGON_CNT_1) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_LOGON_CNT_1) END) AS TOTL_SEND_CAPP_LOGN_Q,
        
        SUM(CASE WHEN TRIM(NPP._A_CAPP_REGO_1D_IND) = '' OR TRIM(NPP._A_CAPP_REGO_1D_IND) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_CAPP_REGO_1D_IND) END) AS TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
        
        MAX(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN -9999999999 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS MAX_SEND_SCAM_VCTM_Q,
        SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(NPP._A_SCAM_VICTIM_FLAG) END) AS TOTL_SEND_SCAM_VCTM_Q,
        SUM(CASE WHEN TRIM(NPP._A_SCAM_VICTIM_FLAG) = '' OR TRIM(NPP._A_SCAM_VICTIM_FLAG) IS NULL THEN 0 ELSE TO_DOUBLE(1) END) AS total_scam_victim_connections_historical,
        
        MIN(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MIN_FNCL_TRAN_A,
        MAX(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN -9999999999 ELSE NPP.TGX_TRAN_AMT END) AS MAX_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS TOTL_FNCL_TRAN_A,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE 1 END) AS CNT_FNCL_TRAN_AMT_Q,
        
        -- Unique sender count
        COUNT(DISTINCT NPP.SSX_CUST_NUM) AS UNIQUE_SENDERS_DAILY,
        
        -- Transaction count and sum for calculations
        COUNT(*) AS DAILY_TRANSACTION_COUNT,
        SUM(CASE WHEN NPP.TGX_TRAN_AMT = -1 THEN 0 ELSE NPP.TGX_TRAN_AMT END) AS DAILY_TRANSACTION_SUM,
        
        -- NEW: Risk indicator aggregations
        MAX(NPP._b_crypto_risk) AS MAX_CRYPTO_RISK_DAILY,
 
        -- Average transactions per sender
        ROUND(COUNT(*) / NULLIF(COUNT(DISTINCT SSX_CUST_NUM), 0), 2) AS avg_transactions_per_sender_d_historical,
        -- Maximum daily transactions
        MAX(daily_count) as max_daily_transactions_historical,
        -- Sender diversity flag
        CASE
            WHEN COUNT(DISTINCT SSX_CUST_NUM) > COUNT(*) * 0.7 THEN 1  -- HIGH_DIVERSITY
            WHEN COUNT(DISTINCT SSX_CUST_NUM) < COUNT(*) * 0.2 THEN -1 -- LOW_DIVERSITY
            ELSE 0  -- NORMAL_DIVERSITY
        END as sender_diversity_flag,
        
      
    FROM cleaned_recipient_data NPP    
    GROUP BY NPP.RCPI_ACCT_I, NPP.SSX_SNAP_D
),

-- Calculate SEPARATE window patterns
pattern_features AS (
    SELECT *,
        -- Account history sufficiency check
        COUNT(*) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
        ) AS HISTORICAL_DAYS_AVAILABLE,
        
        -- New account flags
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) = 0 THEN 1 ELSE 0
        END AS IS_NEW_ACCOUNT_FLAG,
        
        -- DATEDIFF('day', 
        --     MIN(SSX_SNAP_D) OVER (PARTITION BY RCPI_ACCT_I),
        --     SSX_SNAP_D
        -- ) AS DAYS_SINCE_FIRST_TRANSACTION,
        
        -- PATTERN 1: 7-DAY HISTORICAL LOOKBACK (excluding current day)
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3  -- At least 3 days of history
            THEN AVG(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) 
            ELSE 0
        END AS AVG_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN SUM(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN AVG(DAILY_TRANSACTION_SUM) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(DAILY_TRANSACTION_COUNT) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_TRANSACTIONS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN MAX(UNIQUE_SENDERS_DAILY) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS MAX_UNIQUE_SENDERS_7D_HISTORICAL,
        
        CASE 
            WHEN COUNT(*) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            ) >= 3
            THEN COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
                PARTITION BY RCPI_ACCT_I 
                ORDER BY SSX_SNAP_D 
                ROWS BETWEEN 7 PRECEDING AND 1 PRECEDING
            )
            ELSE 0
        END AS ACTIVE_DAYS_7D_HISTORICAL,
        
        -- PATTERN 2: CURRENT DAY + 1 FOLLOWING DAY (2-day forward pattern)
        AVG(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
        
        AVG(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        SUM(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        AVG(DAILY_TRANSACTION_SUM) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D,
        
        MAX(DAILY_TRANSACTION_COUNT) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_TRANSACTIONS_CURRENT_PLUS_1D,
        
        MAX(UNIQUE_SENDERS_DAILY) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS MAX_UNIQUE_SENDERS_CURRENT_PLUS_1D,
        
        COUNT(CASE WHEN DAILY_TRANSACTION_COUNT > 0 THEN 1 END) OVER (
            PARTITION BY RCPI_ACCT_I 
            ORDER BY SSX_SNAP_D 
            ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING
        ) AS ACTIVE_DAYS_CURRENT_PLUS_1D
        
    FROM daily_aggregates
),

-- Final output with BOTH pattern types
recipient_aggregates as (SELECT
    RCPI_ACCT_I,
    SSX_SNAP_D,
    MAX_SEND_CAPP_REGR_Q,
    TOTL_SEND_CAPP_REGR_Q,
    MIN_SEND_CAPP_LOGN_Q,
    MAX_SEND_CAPP_LOGN_Q,
    TOTL_SEND_CAPP_LOGN_Q,
    TOTL_SEND_NEW_CAPP_REGR_1D_INDA_Q,
    MAX_SEND_SCAM_VCTM_Q,
    TOTL_SEND_SCAM_VCTM_Q,
    MIN_FNCL_TRAN_A,
    MAX_FNCL_TRAN_A,
    TOTL_FNCL_TRAN_A,
    CNT_FNCL_TRAN_AMT_Q,
    MAX_CRYPTO_RISK_DAILY,
     -- Current day metrics
    UNIQUE_SENDERS_DAILY,
    ROUND(UNIQUE_SENDERS_DAILY::DECIMAL / NULLIF(DAILY_TRANSACTION_COUNT, 0), 3) AS SENDER_DIVERSITY_RATIO_DAILY,
    DAILY_TRANSACTION_COUNT,
    ROUND(DAILY_TRANSACTION_SUM, 2) AS DAILY_TRANSACTION_SUM,
    
    -- Account history indicators
    IS_NEW_ACCOUNT_FLAG,
    HISTORICAL_DAYS_AVAILABLE,
total_scam_victim_connections_historical,   avg_transactions_per_sender_d_historical, max_daily_transactions_historical,
MAX_TRANSACTIONS_7D_HISTORICAL, MAX_UNIQUE_SENDERS_7D_HISTORICAL, ACTIVE_DAYS_7D_HISTORICAL,
MAX_TRANSACTIONS_CURRENT_PLUS_1D, MAX_UNIQUE_SENDERS_CURRENT_PLUS_1D, ACTIVE_DAYS_CURRENT_PLUS_1D,

    -- 7-day historical features (0 for accounts without history)
    ROUND(AVG_TRANSACTIONS_7D_HISTORICAL, 2) AS AVG_TRANSACTIONS_7D_HISTORICAL,
    ROUND(AVG_UNIQUE_SENDERS_7D_HISTORICAL, 2) AS AVG_UNIQUE_SENDERS_7D_HISTORICAL,
    ROUND(TOTAL_TRANSACTION_SUM_7D_HISTORICAL, 2) AS TOTAL_TRANSACTION_SUM_7D_HISTORICAL,
    ROUND(AVG_TRANSACTION_SUM_7D_HISTORICAL, 2) AS AVG_TRANSACTION_SUM_7D_HISTORICAL,
    
    -- Current + 1 day forward features
    ROUND(AVG_TRANSACTIONS_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTIONS_CURRENT_PLUS_1D,
    ROUND(AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D, 2) AS AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D,
    ROUND(TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D,
    ROUND(AVG_TRANSACTION_SUM_CURRENT_PLUS_1D, 2) AS AVG_TRANSACTION_SUM_CURRENT_PLUS_1D
FROM pattern_features
)

-- Final result: Transaction-level data with recipient features
SELECT 
    r.*,  -- All transaction-level columns
    -- Recipient aggregated features
    ra.* EXCLUDE(RCPI_ACCT_I, SSX_SNAP_D)
    
FROM cleaned_recipient_data r
LEFT JOIN recipient_aggregates ra ON r.RCPI_ACCT_I = ra.RCPI_ACCT_I
and r.SSX_SNAP_D = ra.SSX_SNAP_D);",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-30 07:04:06.239 Z,2025-08-30 07:34:12.852 Z
144.748983,16321.062506422400,0,0,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,   
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-18
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-08 07:37:54.366 Z,2025-09-08 10:02:39.305 Z
170.008450,0.016646593809,0,0,select * from PRD_P01_DMN_FRAUMD.LABMLFRD.MULE_INB_OFI_SHROFFPR limit 1000;,SHROFFPR,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-07 17:23:52.464 Z,2025-09-07 20:13:52.971 Z
31.491967,0.061202049255,0,0,<redacted cortex job>,ANANDKAN,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_001,X-Large,SUCCESS,2025-09-08 01:16:48.549 Z,2025-09-08 01:48:18.067 Z
47.130000,13565.302612707019,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250916_234543(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250616
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-16 23:46:07.912 Z,2025-09-17 00:33:15.712 Z
77.121467,0.000724941492,0,0,"SELECT 
    ""PYSTATUSWORK"", 
    ""COUNT"", 
    concat( CAST (round((""PERCENT"" * 100), 2) AS STRING), '%') AS ""PERCENT""
 FROM (
 SELECT 
    ""PYSTATUSWORK"", 
    ""COUNT"", 
    (""COUNT"" / sum(""COUNT"") OVER (  ORDER BY 
    1 :: INT ASC NULLS FIRST  ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING )) AS ""PERCENT""
 FROM (
 SELECT 
    ""PYSTATUSWORK"", 
    count(1) AS ""COUNT""
 FROM (
 SELECT 
    ""TRAN_ID"", 
    ""PEGA_CASENUMBER"", 
    ""SYSTEMCASEID"", 
    ""DETECT_METHOD"", 
    ""FRAUDTYPE"", 
    ""FRAUDTYPENAME"", 
    ""SSX_CUST_NUM"", 
    ""CHL_ID_CARD_NUM"", 
    ""CARDISSUEDATE"", 
    ""DPAN"", 
    ""TRANSACTIONDATETIME"", 
    ""CMX_TRAN_ID"", 
    ""CMX_TRAN_ID_FMV"", 
    ""DTL_CA_CLIENT_AMT"", 
    ""DTL_CA_AUTH_SYS_DEC"", 
    ""DTL_CA_AUTH_SYS_INFO"", 
    ""RSP_ACTION_CODE"", 
    ""ATH_PC_POS"", 
    ""CHL_CT_MEDIA"", 
    ""ATH_PC_CVV2_PSNT"", 
    ""ATH_PC_CVV2_RESP"", 
    ""SLI"", 
    ""AAV"", 
    ""WALLET_ID"", 
    ""TOKEN_REQ_ID"", 
    ""RECURRING_IND"", 
    ""DTL_CA_REVERSAL_IND"", 
    ""DTL_CA_STAND_IN_IND"", 
    ""ATH_PC_PIN_VRFY"", 
    ""CHL_CT_MER_MCC"", 
    ""CHL_CT_TERM_OWNER_NAME"", 
    ""CHL_CT_TERM_OWNER_ID"", 
    ""CHL_CT_TERM_ID"", 
    ""CHL_CT_TERM_CITY"", 
    ""CHL_CT_TERM_CNTRY_CODE"", 
    ""ATH_PC_CAT"", 
    ""ATH_PC_TERM_PAN_ENTRY_CAP"", 
    ""RSP_EX_2_8S_004"", 
    ""CQF_RULE_C_ID"", 
    ""CQF_CREATE_ALERT_C_IND"", 
    ""FRAUDTAG"", 
    ""CROSSCHANNELIND"", 
    ""PYSTATUSWORK"", 
    ""PYSTATUSWORKTIMESTAMP"", 
    ""OUTCOME"", 
    ""COMMENTS"", 
    ""CASECREATEDATE"", 
    ""CASEACTIONDATETIME"", 
    ""FCPEXTRACTDATETIME"", 
    to_char(""TTS_TRAN_DATE_ALT"", 'YYYYMMDD') AS ""TTS_TRAN_DATE_ALT""
 FROM (
 SELECT 
    ""TRAN_ID"", 
    ""PEGA_CASENUMBER"", 
    ""SYSTEMCASEID"", 
    ""DETECT_METHOD"", 
    ""FRAUDTYPE"", 
    ""FRAUDTYPENAME"", 
    ""SSX_CUST_NUM"", 
    ""CHL_ID_CARD_NUM"", 
    ""CARDISSUEDATE"", 
    ""DPAN"", 
    ""TRANSACTIONDATETIME"", 
    ""CMX_TRAN_ID"", 
    ""CMX_TRAN_ID_FMV"", 
    ""DTL_CA_CLIENT_AMT"", 
    ""DTL_CA_AUTH_SYS_DEC"", 
    ""DTL_CA_AUTH_SYS_INFO"", 
    ""RSP_ACTION_CODE"", 
    ""ATH_PC_POS"", 
    ""CHL_CT_MEDIA"", 
    ""ATH_PC_CVV2_PSNT"", 
    ""ATH_PC_CVV2_RESP"", 
    ""SLI"", 
    ""AAV"", 
    ""WALLET_ID"", 
    ""TOKEN_REQ_ID"", 
    ""RECURRING_IND"", 
    ""DTL_CA_REVERSAL_IND"", 
    ""DTL_CA_STAND_IN_IND"", 
    ""ATH_PC_PIN_VRFY"", 
    ""CHL_CT_MER_MCC"", 
    ""CHL_CT_TERM_OWNER_NAME"", 
    ""CHL_CT_TERM_OWNER_ID"", 
    ""CHL_CT_TERM_ID"", 
    ""CHL_CT_TERM_CITY"", 
    ""CHL_CT_TERM_CNTRY_CODE"", 
    ""ATH_PC_CAT"", 
    ""ATH_PC_TERM_PAN_ENTRY_CAP"", 
    ""RSP_EX_2_8S_004"", 
    ""CQF_RULE_C_ID"", 
    ""CQF_CREATE_ALERT_C_IND"", 
    ""FRAUDTAG"", 
    ""CROSSCHANNELIND"", 
    ""PYSTATUSWORK"", 
    ""PYSTATUSWORKTIMESTAMP"", 
    ""OUTCOME"", 
    ""COMMENTS"", 
    ""CASECREATEDATE"", 
    ""CASEACTIONDATETIME"", 
    ""FCPEXTRACTDATETIME"", 
    to_timestamp(""TRANSACTIONDATETIME"", 'DDMONYYYY:HH24:MI:SS') AS ""TTS_TRAN_DATE_ALT""
 FROM LABMLFRD.CARD_TRAN_GROS_FRAU
)
 WHERE 
    ((NOT ""PYSTATUSWORK"" IN ('Resolved-CLOSED: INVEST DECLINE', 'Resolved-CLOSED: GENUINE') AND NOT startswith(""PEGA_CASENUMBER"", 'SCM')) AND (""FRAUDTYPENAME"" = 'Card Not Present'))
)
 GROUP BY 
    ""PYSTATUSWORK""
)
)
 ORDER BY 
    ""COUNT"" DESC NULLS LAST",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-29 08:38:29.598 Z,2025-08-29 09:55:36.886 Z
161.589417,0.003723219037,0,0,"select  TRY_CAST(TGX_TRAN_AMT AS FLOAT) AS TGX_TRAN_AMT,
 from PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT limit 500;",SHROFFPR,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-29 07:14:01.545 Z,2025-08-29 09:55:36.910 Z
32.333700,710.487257972360,0,0,"create or replace temporary table Digital_Transactions as
select    
    b.fraudtype,
    b.DETECTION,
    b.case_detection,
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') as _B_ANY_CUST_FTP_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00') as _x_cif_recipient_new_date,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_BC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _L_BC_EVENT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SCM_RSK_HGH_DT, 38, 2), '1960-01-01 00:00:00') as _L_SCM_RSK_HGH_DT,
    _L_NC_RESPONSE_CODE,
    dtl_ex_0_20s_001 AS RECEIPT_NUM,
    (a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID,
    cmx_tran_id,
    hdr_activity_type,
    ssx_cust_num,
    chl_id_ob_userid,
    chl_id_pb_userid,
    dtl_ex_1_5s_01 as dmx_5byte_string_01,
    _a_cse_chg_dwl_ind AS DWL_change,
    dtl_ex_0_n_006 as Task_ID,
    dtl_ex_0_i_002 AS FTP_Indicator_1,
    rsp_ex_2_i_006 AS FTP_Indicator_2,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_SUM, 38, 2) as _X_CIF_RECIPIENT_SUM,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_SUM, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM,
    TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2) as _x_cif_recipient_new_cnt,
    TRY_TO_NUMBER(TGX_TRAN_AMT) AS TGX_TRAN_AMT,
    TRY_TO_NUMBER(_A_BTS_CUST_AGE, 38, 2)as _A_BTS_CUST_AGE,
    tgx_bank_name,
    tgx_bank_num,
    tgx_branch_id,
    tgx_acct_num,
    tgx_name,
    _L_ACCT_NUM,
    _L_BANK_NUM,
    _l_branch_id, 
    DTL_EX_3_80S_003 AS pmt_description_1,
    tgx_description AS pmt_description_2,
    TRY_TO_NUMBER(_L_SCM_RSK_HGH_SCR, 38, 2) as _L_SCM_RSK_HGH_SCR,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 4) as CERBERUS_SCORE_1,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 5) as CERBERUS_SCORE_2,
    TRY_TO_NUMBER(_L_CUST_SCAMRISK_SCORE, 38, 2) as _L_CUST_SCAMRISK_SCORE,
    TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE,
    TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_S,
    TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2) as _l_max_30d_mule_score,
    TRY_TO_NUMBER(_L_NUM_SESS_2H, 38, 2) as _L_NUM_SESS_2H,
    TRY_TO_NUMBER(_L_NUM_SESS_4H, 38, 2) as _L_NUM_SESS_4H,
    TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE,38,2) as _L_TRUST_NEW_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE,38,2) as _L_TRUST_UNUSED_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN,38,2) as _L_TRUST_PAYEE_HIGH_VLOC_IN,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT,38,2) as _L_TRUST_PAYEE_DORM_ACCT,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYER,
    TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev,38,2) as _l_rcnt_hi_scr_on_dev,
    TRY_TO_NUMBER(_B_RECIP_SUM_LONG, 38, 2) as _B_RECIP_SUM_LONG,
    TRY_TO_NUMBER(_B_RECIP_SUM_SHORT, 38, 2) as _B_RECIP_SUM_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_CNT_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_CNT_DATE,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_LONG, 38, 2) as _B_RECIP_FTP_CNT_LONG,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_SHORT, 38, 2) as _B_RECIP_FTP_CNT_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_SUM_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_SUM_DATE,
from LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
    on a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where mid_event_ts >= '20241101'
and mid_event_ts <= '20250101';",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-08-29 06:15:01.930 Z,2025-08-29 06:47:21.952 Z
193.812133,166.128967210650,0,0,"create or replace temporary table Digital_Transactions as
select    
    b.fraudtype,
    b.DETECTION,
    b.case_detection,
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') as _B_ANY_CUST_FTP_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00') as _x_cif_recipient_new_date,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_BC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _L_BC_EVENT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SCM_RSK_HGH_DT, 38, 2), '1960-01-01 00:00:00') as _L_SCM_RSK_HGH_DT,
    _L_NC_RESPONSE_CODE,
    dtl_ex_0_20s_001 AS RECEIPT_NUM,
    (a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID,
    cmx_tran_id,
    hdr_activity_type,
    ssx_cust_num,
    chl_id_ob_userid,
    chl_id_pb_userid,
    dtl_ex_1_5s_01 as dmx_5byte_string_01,
    _a_cse_chg_dwl_ind AS DWL_change,
    dtl_ex_0_n_006 as Task_ID,
    dtl_ex_0_i_002 AS FTP_Indicator_1,
    rsp_ex_2_i_006 AS FTP_Indicator_2,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_SUM, 38, 2) as _X_CIF_RECIPIENT_SUM,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_SUM, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM,
    TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2) as _x_cif_recipient_new_cnt,
    TRY_TO_NUMBER(TGX_TRAN_AMT) AS TGX_TRAN_AMT,
    TRY_TO_NUMBER(_A_BTS_CUST_AGE, 38, 2)as _A_BTS_CUST_AGE,
    tgx_bank_name,
    tgx_bank_num,
    tgx_branch_id,
    tgx_acct_num,
    tgx_name,
    _L_ACCT_NUM,
    _L_BANK_NUM,
    _l_branch_id, 
    DTL_EX_3_80S_003 AS pmt_description_1,
    tgx_description AS pmt_description_2,
    TRY_TO_NUMBER(_L_SCM_RSK_HGH_SCR, 38, 2) as _L_SCM_RSK_HGH_SCR,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 4) as CERBERUS_SCORE_1,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 5) as CERBERUS_SCORE_2,
    TRY_TO_NUMBER(_L_CUST_SCAMRISK_SCORE, 38, 2) as _L_CUST_SCAMRISK_SCORE,
    TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE,
    TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_S,
    TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2) as _l_max_30d_mule_score,
    TRY_TO_NUMBER(_L_NUM_SESS_2H, 38, 2) as _L_NUM_SESS_2H,
    TRY_TO_NUMBER(_L_NUM_SESS_4H, 38, 2) as _L_NUM_SESS_4H,
    TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE,38,2) as _L_TRUST_NEW_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE,38,2) as _L_TRUST_UNUSED_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN,38,2) as _L_TRUST_PAYEE_HIGH_VLOC_IN,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT,38,2) as _L_TRUST_PAYEE_DORM_ACCT,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYER,
    TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev,38,2) as _l_rcnt_hi_scr_on_dev,
    TRY_TO_NUMBER(_B_RECIP_SUM_LONG, 38, 2) as _B_RECIP_SUM_LONG,
    TRY_TO_NUMBER(_B_RECIP_SUM_SHORT, 38, 2) as _B_RECIP_SUM_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_CNT_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_CNT_DATE,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_LONG, 38, 2) as _B_RECIP_FTP_CNT_LONG,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_SHORT, 38, 2) as _B_RECIP_FTP_CNT_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_SUM_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_SUM_DATE,
from LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
    on a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where mid_event_ts >= '20241201'
and mid_event_ts <= '20241215';",ZAIDIS2,PUBLIC,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-29 06:47:07.052 Z,2025-08-29 10:00:55.780 Z
41.277817,1458.613259896636,0,0,"SELECT 
mid_event_ts
        , ssx_cust_num AS SENDER_CIF
        -- ,chl_ob_ip_address AS IP_ADDRESS
        -- ,chl_ob_ip_isp AS IP_CITY
        , tgx_name AS RECPIENT_NAME
        , CONCAT(tgx_bank_num,tgx_branch_id) AS BSB
        , CONCAT(tgx_bank_num,tgx_branch_id,tgx_acct_num) AS RECIPIENT_ACCOUNT
        --,tgx_bank_name AS RECIPIENT_BANK
        , TRY_TO_NUMBER(tgx_tran_amt) AS TRAN_AMOUNT
        , tgx_description AS PAYMENT_DESC
        , rsp_action_code AS RESPONSE_CODE
        , _x_cif_recipient_new_cnt
        , hdr_source
        , rsp_ex_2_4s_009
        , rsp_ex_2_i_004
        , TRY_TO_NUMBER(substr(dtl_ex_0_n_026, 2, 5)) AS BSL_THRESHOLD
        , dtl_ex_0_n_026
        , dtl_ex_1_5s_01
        ,dtl_ex_0_20s_001
        ,dtl_ex_0_80s_001
FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
INNER JOIN PRD_P01_DMN_FRAUMD.labmlfrd.dtl_fraudmaster b
    ON a.dtl_ex_0_20s_001 = b.rua_20byte_string_001 --Payment Receipt
    AND B.fraudtype is not null 
   -- AND TIMESTAMPDIFF('HOUR', TRANSACTIONDATETIME, FRAUD_ACTION_DT) < 24
WHERE --mid_event_ts >= TO_CHAR(TO_DATE('20240101', 'YYYYMMDD'), 'YYYYMMDDHH24MISSFF6') 
mid_event_ts LIKE '2025%'
    --AND (rsp_ex_2_4s_009 LIKE 'X%'
    --    OR  rsp_ex_2_4s_009 IN ('FTPE','LVPE','EXQJ')
    --    )
    AND dtl_ex_0_80s_001 LIKE '%virginaustralia.com' ;",CROUCAKO,R_USR_FRAUMD_PRD_CUS,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-22 05:44:38.470 Z,2025-08-22 06:25:55.139 Z
170.545433,4277.054971098900,805147402240,0,"SELECT DISTINCT
TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
,dtl_ex_0_20s_001
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_crypto_risk, '[^0-9.-]', '')), -1) as _b_crypto_risk,
        -- Blacklist and scam indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_bl_scam_tp_acct, '[^0-9.-]', '')), -1) as _b_list_bl_scam_tp_acct,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_list_rl1_scam_tp_cif, '[^0-9.-]', '')), -1) as _b_list_rl1_scam_tp_cif,
        -- High-risk biller metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_cnt_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_nb_hrisk_biller_sum_1, '[^0-9.-]', '')), -1) as _b_nb_hrisk_biller_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_blacklist_recip_flag, '[^0-9.-]', '')), -1) as _b_npp_blacklist_recip_flag,
        -- NPP outbound transaction metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_1, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_sum_1,
        -- NPP first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_cnt_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_cnt_2,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_npp_out_ftp_sum_2, '[^0-9.-]', '')), -1) as _b_npp_out_ftp_sum_2,
        -- Other risk indicators
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_open_listed_last_cif_2, '[^0-9.-]', '')), -1) as _b_open_listed_last_cif_2,
        -- Recipient first-time payer metrics
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_1, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_ftp_sum_long, '[^0-9.-]', '')), -1) as _b_recip_ftp_sum_long,
        -- Recipient link sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_long, '[^0-9.-]', '')), -1) as _b_recip_link_sum_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_link_sum_short, '[^0-9.-]', '')), -1) as _b_recip_link_sum_short,
        -- Recipient transaction sums (various time periods)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_4, '[^0-9.-]', '')), -1) as _b_recip_sum_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_7, '[^0-9.-]', '')), -1) as _b_recip_sum_7,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_today, '[^0-9.-]', '')), -1) as _b_recip_sum_today,
        -- Recipient AAA transaction sums
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_1, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_1,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_4, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_4,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_long, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_long,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_recip_sum_aaa_short, '[^0-9.-]', '')), -1) as _b_recip_sum_aaa_short,
        -- Fixed: _b_rfm_whitelist_ind (was incorrectly aliased)
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_b_rfm_whitelist_ind, '[^0-9.-]', '')), -1) as _b_rfm_whitelist_ind,
        COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_a_npp_velocity_1d_out, '[^0-9.-]', '')), -1) as _a_npp_velocity_1d_out,
        
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added

,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250716'
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-22 12:34:08.005 Z,2025-08-22 15:24:40.731 Z
40.684750,12685.881633222103,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_WIDE_TRANS_PK_CNP_D013_V1(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

    
            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250710 and 20250826
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-08-29 00:15:48.144 Z,2025-08-29 00:56:29.229 Z
45.614050,28.675534009933,64472,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_dehurysk_digital_retro_scam_20250814202111_scor_itr3_wo_7d as -- test data result
(select
tran_id,
TGX_TRAN_AMT as TRAN_AMT,
ssx_snap_d,
ssx_cust_num,
dtl_ex_0_20s_001,
-- CERBERUS_SCORE,
-- DTL_EX_0_N_029,
fraudtype,
PRD_P01_DMN_FRAUMD.LABMLFRD.SCAM_RETRO_TEST_MOJO1('modelname=pipeline_Retro_scam_model_itr3_ac_f_20250828205631.mojo', -- model name
array_construct(
C_HOUR, C_DAY_OF_MONTH, C_MONTH_OF_YEAR, _A_SCAM_VICTIM_FLAG, _B_CRYPTO_RISK, _B_LIST_BL_SCAM_TP_ACCT, _B_LIST_RL1_SCAM_TP_CIF, _B_NB_HRISK_BILLER_CNT_1, _B_NPP_BLACKLIST_RECIP_FLAG, _B_NPP_OUT_CNT_2, _B_NPP_OUT_SUM_1, _B_NPP_OUT_FTP_SUM_1, _B_OPEN_LISTED_LAST_CIF_2, _B_RECIP_FTP_SUM_LONG, _B_RECIP_LINK_SUM_SHORT, _B_RECIP_SUM_TODAY, _B_RECIP_SUM_AAA_1, _B_RECIP_SUM_AAA_4, _B_RECIP_SUM_AAA_LONG, _B_RFM_WHITELIST_IND, _A_NPP_VELOCITY_1D_OUT, _L_RISKY_APPS, _L_ACCEL_EVENT_CNT, _L_RECIP_FTP, _A_CAPP_REGISTRATIONS_CNT_1, _A_CAPP_LOGON_CNT_1, RSP_ACTION_CODE, TGX_TRAN_AMT, TOTL_SEND_CAPP_REGR_Q, MIN_SEND_CAPP_LOGN_Q, MAX_SEND_CAPP_LOGN_Q, TOTL_SEND_CAPP_LOGN_Q, MAX_SEND_SCAM_VCTM_Q, MIN_FNCL_TRAN_A, MAX_FNCL_TRAN_A, TOTL_FNCL_TRAN_A, UNIQUE_SENDERS_DAILY, SENDER_DIVERSITY_RATIO_DAILY, DAILY_TRANSACTION_COUNT, IS_NEW_ACCOUNT_FLAG, AVG_TRANSACTIONS_CURRENT_PLUS_1D, AVG_UNIQUE_SENDERS_CURRENT_PLUS_1D, TOTAL_TRANSACTION_SUM_CURRENT_PLUS_1D, AVG_TRANSACTION_SUM_CURRENT_PLUS_1D, _L_BC_SCORE, _L_MAX_30D_MULE_SCORE, _L_ADV_KEY_COMBO, _L_CLPBRD_EVNT, _L_EXPORT_DATA, _L_IMPORT_DATA, _L_IS_RCNT_HRISK_SESS, _L_PMT_VLOC_ANOM, _L_ACCUM_AMT_ANOM, _L_IS_LONG_SESS, _L_TRUST_900, _L_TRUST_NEW_PAYEE, _L_TRUST_RCNT_HI_ATO_AS_PAYER, _L_TRUST_RCNT_HI_SES_AS_PAYEE, _L_CUST_SCAMRISK_SCORE, _B_RECIP_SUM_SHORT, _B_RECIP_SUM_LONG, _A_CUSTOMER_AGE, _A_CUST_SUM_AAA_SHORT, _A_CUST_SUM_AAA_LONG, FTP_CNT_7DAYS, FTP_SUM_7DAYS, NB_LOGONS_CNT_3M, CAPP_LOGONS_CNT_3M, _X_CIF_RECIPIENT_NEW_SUM, _A_CUST_LINK_SUM_AAA_3, _B_CLIENT_POSTCODE_CNT_3, _L_PMT_AMT, _X_NPP_OUT_SUM_DATE, _L_ACC_AMT_1D, _L_SCORE_3, _B_RECIP_SUM_AAA_6, _A_CLIENT_CITY_7, _L_ACC_AMT_1H, _A_BTS_WDL_SUM_LONG, _L_SCORE_4, _L_NEW_PAYEE_PER_USER, _A_CLIENT_CITY_2, _B_CLIENT_POSTCODE_SUM_2, _L_BC_SESS_CNT, _A_CSE_CHG_DWL_NEW_AMT, _A_CLIENT_CITY_1, _B_CLIENT_POSTCODE_CNT_5, _L_MINS_LST_LGN_CAPPED, _B_RECIP_SUM_AAA_7, _B_CLIENT_POSTCODE_CNT_2, _A_CLIENT_CITY_10, _L_NUM_SESS_2H, _N_CUST_TXN_COUNT, _B_CLIENT_POSTCODE_SUM_3, _A_PROF_CAPP_DEVICE_NFTP_1, _A_NPP_FTP_SUM2, _A_CLIENT_CITY_6, _B_CLIENT_POSTCODE_CNT_1, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_NPP_OUT_SUM_1, _A_CLIENT_CITY_8, _N_CRYPTO_RECIPIENT_CNT, _N_H_2, _A_GEO_DISTANCE, _N_CAPP_LOGONS_CNT_1, _N_CAPP_LINKED_CNT_2, _B_CLIENT_POSTCODE_SUM_4, _X_CIF_REC_SUM, _L_M_L_C, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_3, _N_CUST_STATE_IP_ACTIVITY, _A_MRISK_FOREIGN_IP_ACTIVITY, _A_PROF_CAPP_DEVICE_LATT_3, _A_CUST_STATE_IP_ACTIVITY, _A_LOGON_NB_IP_CNTRY, _A_MRISK_FOREIGN_IP_TASK_ID, _A_DEVCIE_GEO_LAT_AVG_INCL, _N_INTERSTATE_IP_ACTIVITY, _N_FOREIGN_IP_ACTIVITY, _A_INTERSTATE_IP_STATE, _A_INTERSTATE_IP_ACTIVITY, _A_IS_IP_DT_2, _A_INTERSTATE_IP_TASK_ID, _A_IS_IP_DT_1, _A_SAFE_CUST_LATITUDE, _A_FOREIGN_IP_ACTIVITY, _N_HRISK_FOREIGN_IP_ACTIVITY, _A_IS_IP_DT_3, _A_CURR_CUST_LATITUDE, _N_CLOUD_SERV_LATEST_LOGON_DT, _A_PROF_CAPP_DEVICE_LATT_1, _A_PROF_CAPP_DEVICE_LATT_2, _A_FOREIGN_IP_TASK_ID, _A_PREV_CUST_LATITUDE, _X_CIF_RECIPIENT_NEW_CNT, _X_TELSTRA_LAST_CALL_DUR, _B_CLIENT_POSTCODE_3, _B_CLIENT_POSTCODE_2, _B_CLIENT_POSTCODE_4, _A_MRISK_FOREIGN_IP_CNTRY_CODE, _N_NEW_IP_LOGON_PCODE, _A_LOGON_198_IP_PC, _A_LOGON_NB_IP_PC, _X_LAST_N_TXN_COUNT, _B_OPEN_LAST_PAYER_CIF_DT_2, _B_OPEN_LAST_PAYER_CIF_DT_3, _B_OPEN_LAST_PAYER_CIF_DT_4, _B_OPEN_LAST_PAYER_CIF_DT_5, _A_NEW_CAPP_REGO_DT, _A_CSE_CHG_DWL_DT, _A_CIF_ESTABLISH_DT, _A_NB_LASTLOGON_DT_1, _A_CURR_CAPP_DEVICE_DT, _A_CRYPTO_LAST_PYMNT_DATE, _N_SCAMP3_MLW_DT, _N_SCAMP5_MLW_DT, _N_SCAMP7_MLW_DT, _N_SCAMP10_MLW_DT, _N_SCAMP20_MLW_DT, _N_SCAMP21_MLW_DT, _N_M100_P8_IND_DT, _A_M100_APP_P1_IND_DT, _N_M100_APP_P5_DT, _A_M100_APP_P8_IND_DT, _X_TELSTRA_MAX_CALL_DUR, _A_CRYPTO_MNTHLY_SUM, GENDER, BUSI_TRAN_COUNT, DEPOSIT_ACCT_COUNT, TRADE_ACCT_COUNT, NAME_ORIG_ASSOC, MAIN_FOREIGN_ASSOC, BAL_LAST_MON, BAL_TWO_MON_AGO, GAMBLING_SPEND_LAST_YEAR, GAMBLING_SPEND_THREE_MON, GAMBLING_SPEND_ONE_MON, DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, DPAT_TOTL_PRSL_TRAN_FOOT_A, DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, DPAT_TOTL_PRSL_TRAN_BALN_A, AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1, AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30, DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q, DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q, DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q)) as target_0,
1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_DEHURYSK_SCAM_RETRO_TESTSET_05082025 -- name of OOT data
where to_date(ssx_snap_d) >= '2025-06-14'
and to_date(ssx_snap_d) < '2025-07-01'-- filter on test data on dates
-- limit 10
);",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-08-29 03:52:03.157 Z,2025-08-29 04:37:40.000 Z
58.022217,676.107127875090,31205965824,0,"CREATE OR REPLACE temporary TABLE transx AS 
select  
b.FRAUDTYPE
,b.DETECTION
,b.case_detection
,TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
,ssx_cust_num AS XQO_CUST_NUM
,chl_id_ob_userid AS HQO_OB_USERID
,TRY_TO_NUMBER(tgx_tran_amt, 38, 2) as TRAN_AMT
,TRY_TO_NUMBER(_A_CUSTOMER_AGE, 38, 2) as _A_CUSTOMER_AGE
,TRY_TO_NUMBER(_L_SE_SCORE, 38, 2) as _L_SE_SCORE
,TRY_TO_NUMBER(_L_BC_SCORE, 38, 2) as _L_BC_SCORE
,TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 4) as CERBERUS_SCORE
,TGX_BANK_NAME
,TGX_BANK_NUM
,TGX_BRANCH_ID
,TGX_ACCT_NUM
,TGX_NAME
,dtl_ex_1_5s_01     /* task id */
,dtl_ex_0_i_002 as FTP_ind
/* BC risk factors */
,_L_FLAT_PHONE
,_L_IS_RAT
,_L_IS_MOB_RAT
,_L_IS_RCNT_RAT
,_l_rat_in_sess
,_L_PREV_RAT_DT
,_L_FIRST_RAT_DT
,_L_IS_MOB_RAT_DT
,_L_SESS_CNT_MOB_SDK
,_L_DPI_CHANGE 
,_L_NEW_DEV
,_L_RARE_SCRN_SZ
,_L_scrn_res_anom
,_l_lrg_dist_known_loc
,_L_NEW_BROWSER
,_L_NEW_DESKTOP_USER
,_L_IS_ACTIVE_CALL 
,_L_IS_LONG_SESS
,_L_NEW_MOB_BROWSER_USER
,_L_DEV_CHANGE_ANOM
,_L_TZONE_MISMATCH  
,_L_ADV_KEY_COMBO
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_n_client_details_view, 38, 2), '1960-01-01 00:00:00'::timestamp) as _n_client_details_view
,TRY_TO_NUMBER(_A_CAPP_LOGON_CNT_1, 38, 2) as _A_CAPP_LOGON_CNT_1 /* capp login counts within last 24 hours, 2 is between 24 and 48 hours etc */
,TRY_TO_NUMBER(_A_NB_LOGONS_CNT_1, 38, 2) as _A_NB_LOGONS_CNT_1
,_A_TELSTRA_API_EVENT_ID /* this is task id e.g.C513B  */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_API_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _A_TELSTRA_API_EVENT_DT
,COALESCE(NULLIF(_A_TELSTRA_CALL_DURATION, ''), 0) / 60 as _A_TELSTRA_CALL_DURATION /* in minutes */
,_a_telstra_active_call 
,_l_trust_1000 
,_l_trust_900
,_L_PUSH_API_1
,_L_PUSH_API_2
,_L_PUSH_API_3
,_L_PUSH_API_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_RST_PSWD_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_RST_PSWD_DT /* reset password date */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') as _N_CLIENT_IDTO_PW
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_MOD_MOB_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_MOD_MOB_DT
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PHONE_CHG_ALL, 38, 2), '1960-01-01 00:00:00') as _A_PHONE_CHG_ALL /*mobile phone number change date*/
/* scam p indicators and dates */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT
,TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P21_MLW_DT
,TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT
,TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT
,TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND
/* CAPP rego */
,TRY_TO_NUMBER(_N_BC_NCRG_ATO_SCORE, 38, 2) as _N_BC_NCRG_ATO_SCORE
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_BC_NCRG_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _N_BC_NCRG_EVENT_DT
from        LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join   PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
    where   mid_event_ts >= '20250701'
    AND     mid_event_ts < '20250825'
order by    TRANSACTIONDATETIME;",WANGC34,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-08-29 04:21:51.790 Z,2025-08-29 05:19:53.123 Z
43.815150,12956.146995797753,0,0,"SELECT DISTINCT
TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS TRAN_I
, CHL_ID_CARD_NUM AS card_num
, TO_DATE(TTS_TRAN_DATE_ALT, 'YYYYMMDD') AS tran_date1
, TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRANSACTIONDATETIME
, CHL_CT_MER_MCC AS mcc
, dtl_ca_client_amt AS amount
, chl_ct_term_owner_name AS merchant_name1
, chl_ct_acq_id as acquirer_id
, chl_ct_term_cntry_code As HCT_TERM_CNTRY_CODE
, case 
    when dtl_ca_auth_sys_dec = '1' and rsp_action_code = '1' then 'Approved'
    else 'Declined' 
    end as approve_decline_flag
, case 
    when chl_ct_term_cntry_code = '036' then 'Domestic' 
    else 'Cross Border' 
    end as xb_dom_flag
, case
    when dtl_ex_0_3s_002 in ('211' ,'212','242')
    then '3DS' 
    else 'Non-3DS' 
    end as three_d_flag
, dtl_ex_0_3s_002 as three_d_sli
, case
    when ath_pc_cust_present = '0' then 'CP'
    when ath_pc_cust_present = '1' then 'CNP, unspecified'
    when ath_pc_cust_present = '2' then 'CNP, Mail Order'
    when ath_pc_cust_present = '3' then 'CNP, Telephone Order'
    when ath_pc_cust_present = '4' then 'CNP, Recurring'
    when ath_pc_cust_present = '5' then 'CNP, Ecommerce'
    else 'Others' end as channel
, ath_pc_cust_present AS UCM_CUST_PRESENT
, ath_pc_pos AS UCM_POS
, SUBSTR(dtl_ex_3_20s_004,1,3) as wallet_id
, TRY_TO_NUMBER(dtl_ex_3_8s_004) as di_score
, dtl_ex_3_8s_007 as di_reason
, dtl_ex_0_80s_002 as auth_iq
, dtl_ex_0_i_018 as txn_status
, dtl_ex_0_n_009 as dob
, dtl_ex_0_20s_004
, dtl_ex_3_20s_001
, dtl_ex_3_20s_004
FROM 
FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
WHERE
MID_EVENT_TS >= TO_CHAR(TO_DATE($INPUT_S), 'YYYYMMDDHH24MISSFF6')
AND MID_EVENT_TS < TO_CHAR(TO_DATE($INPUT_E), 'YYYYMMDDHH24MISSFF6')
AND TO_TIMESTAMP(TTS_TRAN_DATE_ALT || TTS_TRAN_TIME_ALT, 'YYYYMMDDHH24:MI:SS.FF') >= TO_DATE($INPUT_S)
AND TO_TIMESTAMP(TTS_TRAN_DATE_ALT || TTS_TRAN_TIME_ALT, 'YYYYMMDDHH24:MI:SS.FF') < TO_DATE($INPUT_E)
AND HDR_ACTIVITY_TYPE = 'CA'
AND SSX_CUST_NUM != ''
AND CHL_ID_CARD_NUM != ''
AND SUBSTR(CHL_ID_CARD_NUM,1,1) in ('5')
AND dtl_ca_client_amt >= 0
AND SUBSTR(CHL_ID_CARD_NUM,1,16) in 
('5523504401288772',
'5523504401285372',
'5523504401302466',
'5353161407448234',
'5523504401313216',
'5523504401304090',
'5523504401312069',
'5523504401307234',
'5523504401305998',
'5353161407407008');",JAINR29,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-09-08 02:55:46.242 Z,2025-09-08 03:39:35.151 Z
155.615583,2035.630253076553,2839269502976,0,"CREATE OR REPLACE TABLE PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG7D AS
SELECT 
    a.*,
    b.CUS_SUM_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_CNT_Q,
    b.CUS_SUM_TRAN_SUM_N,
    b.CUS_SUM_UPST_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_RULE_DCLN_TRAN_CNT_Q,
    b.CUS_SUM_FINL_APRD_TRAN_CNT_Q,
    b.CUS_SUM_UPST_APRD_TRAN_SUM_N,
    b.CUS_SUM_FINL_APRD_TRAN_SUM_N,
    b.CUS_SUM_FDP_RULE_TRIG_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_CNT_Q,
    b.CUS_SUM_OSEA_TRAN_CNT_Q,
    b.CUS_SUM_DOMS_TRAN_SUM_N,
    b.CUS_SUM_OSEA_TRAN_SUM_N,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    b.CUS_SUM_3DS_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    b.CUS_SUM_N3D_TRAN_CNT_Q as CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    b.CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    b.CUS_SUM_3DS_TRAN_SUM_N as CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    b.CUS_SUM_N3D_TRAN_SUM_N as CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    b.CUS_SUM_CARD_PRES_TRAN_CNT_Q,
    b.CUS_SUM_ATM_TRAN_CNT_Q,
    b.CUS_SUM_FALL_BACK_TRAN_CNT_Q,
    b.CUS_SUM_CHIP_TRAN_CNT_Q,
    b.CUS_SUM_PAY_PASS_TRAN_CNT_Q,
    b.CUS_SUM_CARD_PRES_TRAN_SUM_N,
    b.CUS_SUM_ATM_TRAN_SUM_N,
    b.CUS_SUM_FALL_BACK_TRAN_SUM_N,
    b.CUS_SUM_CHIP_TRAN_SUM_N,
    b.CUS_SUM_PAY_PASS_TRAN_SUM_N,
    b.CUS_SUM_CAPP_PSWD_CHNG_CNT_Q,
    b.CUS_SUM_CAPP_DVIC_REGR_CNT_Q,
    b.CUS_SUM_CAPP_LOGN_CNT_Q,
    b.CUS_SUM_NTB_LOGN_CNT_Q,
    b.CUS_SUM_VIEW_CARD_DETL_CNT_Q,
    b.CUS_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    b.CUS_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    b.CUS_MAX_CUV_RULE_PUSH_SENT_F as CUS_MAX_C_2WAY_CRD_RULE_FLAG,
    d.CRD_SUM_TRAN_CNT_Q,
    d.CRD_SUM_UPST_APRD_TRAN_CNT_Q,
    d.CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
    d.CRD_SUM_FINL_APRD_TRAN_CNT_Q,
    d.CRD_SUM_INCO_EXPY_CNT_Q,
    d.CRD_SUM_INCO_CVVA_CNT_Q,
    d.CRD_SUM_INCO_PIN_CNT_Q,
    d.CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
    d.CRD_SUM_TRAN_SUM_N,
    d.CRD_SUM_UPST_APRD_TRAN_SUM_N,
    d.CRD_SUM_UPST_DCLN_TRAN_SUM_N,
    d.CRD_SUM_RULE_DCLN_TRAN_SUM_N,
    d.CRD_SUM_FINL_APRD_TRAN_SUM_N,
    d.CRD_SUM_INCO_EXPY_SUM_N,
    d.CRD_SUM_INCO_CVVA_SUM_N,
    d.CRD_SUM_INCO_PIN_SUM_N,
    d.CRD_SUM_OVER_LIMT_DCLN_SUM_N,
    d.CRD_SUM_FDP_RULE_TRIG_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_CNT_Q,
    d.CRD_SUM_OSEA_TRAN_CNT_Q,
    d.CRD_SUM_DOMS_TRAN_SUM_N,
    d.CRD_SUM_OSEA_TRAN_SUM_N,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    d.CRD_SUM_3DS_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    d.CRD_SUM_N3D_TRAN_CNT_Q as CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    d.CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    d.CRD_SUM_3DS_TRAN_SUM_N as CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    d.CRD_SUM_N3D_TRAN_SUM_N as CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    d.CRD_SUM_CARD_PRES_TRAN_CNT_Q,
    d.CRD_SUM_ATM_TRAN_CNT_Q,
    d.CRD_SUM_FALL_BACK_TRAN_CNT_Q,
    d.CRD_SUM_CHIP_TRAN_CNT_Q,
    d.CRD_SUM_PAY_PASS_TRAN_CNT_Q,
    d.CRD_SUM_CARD_PRES_TRAN_SUM_N,
    d.CRD_SUM_ATM_TRAN_SUM_N,
    d.CRD_SUM_FALL_BACK_TRAN_SUM_N,
    d.CRD_SUM_CHIP_TRAN_SUM_N,
    d.CRD_SUM_PAY_PASS_TRAN_SUM_N,
    d.CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
    d.CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
    d.CRD_SUM_CAPP_LOGN_CNT_Q,
    d.CRD_SUM_NTB_LOGN_CNT_Q,
    d.CRD_SUM_VIEW_CARD_DETL_CNT_Q,
    d.CRD_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_HIGH_RISK_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_FRAU_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_RULE_PUSH_SENT_F as CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F,
    d.CRD_MAX_CUV_WHLI_F as CRD_MAX_CARD_USER_VARY_WHLI_F,
    d.CRD_MAX_CUV_DO_NOT_CTCT_F as CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F,
    f.CMA_SUM_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_CNT_Q,
    f.CMA_SUM_TRAN_SUM_N,
    f.CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
    f.CMA_SUM_FINL_APRD_TRAN_CNT_Q,
    f.CMA_SUM_UPST_APRD_TRAN_SUM_N,
    f.CMA_SUM_FINL_APRD_TRAN_SUM_N,
    f.CMA_SUM_FDP_RULE_TRIG_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_CNT_Q,
    f.CMA_SUM_OSEA_TRAN_CNT_Q,
    f.CMA_SUM_DOMS_TRAN_SUM_N,
    f.CMA_SUM_OSEA_TRAN_SUM_N,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    f.CMA_SUM_3DS_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    f.CMA_SUM_N3D_TRAN_CNT_Q as CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    f.CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    f.CMA_SUM_3DS_TRAN_SUM_N as CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    f.CMA_SUM_N3D_TRAN_SUM_N as CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    f.CMA_SUM_CARD_PRES_TRAN_CNT_Q,
    f.CMA_SUM_ATM_TRAN_CNT_Q,
    f.CMA_SUM_FALL_BACK_TRAN_CNT_Q,
    f.CMA_SUM_CHIP_TRAN_CNT_Q,
    f.CMA_SUM_PAY_PASS_TRAN_CNT_Q,
    f.CMA_SUM_CARD_PRES_TRAN_SUM_N,
    f.CMA_SUM_ATM_TRAN_SUM_N,
    f.CMA_SUM_FALL_BACK_TRAN_SUM_N,
    f.CMA_SUM_CHIP_TRAN_SUM_N,
    f.CMA_SUM_PAY_PASS_TRAN_SUM_N,
    f.CMA_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    f.CMA_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    f.CMA_MAX_CUV_RULE_PUSH_SENT_F as CMA_MAX_C_2WAY_CRD_RULE_FLAG,
    g.CMC_SUM_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    g.CMC_SUM_TRAN_SUM_N,
    g.CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    g.CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    g.CMC_SUM_UPST_APRD_TRAN_SUM_N,
    g.CMC_SUM_FINL_APRD_TRAN_SUM_N,
    g.CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_CNT_Q,
    g.CMC_SUM_OSEA_TRAN_CNT_Q,
    g.CMC_SUM_DOMS_TRAN_SUM_N,
    g.CMC_SUM_OSEA_TRAN_SUM_N,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    g.CMC_SUM_3DS_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    g.CMC_SUM_N3D_TRAN_CNT_Q as CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    g.CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    g.CMC_SUM_3DS_TRAN_SUM_N as CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    g.CMC_SUM_N3D_TRAN_SUM_N as CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    g.CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    g.CMC_SUM_ATM_TRAN_CNT_Q,
    g.CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    g.CMC_SUM_CHIP_TRAN_CNT_Q,
    g.CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    g.CMC_SUM_CARD_PRES_TRAN_SUM_N,
    g.CMC_SUM_ATM_TRAN_SUM_N,
    g.CMC_SUM_FALL_BACK_TRAN_SUM_N,
    g.CMC_SUM_CHIP_TRAN_SUM_N,
    g.CMC_SUM_PAY_PASS_TRAN_SUM_N,
    g.CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_HR_RULE_FLAG,
    g.CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
    g.CMC_MAX_CUV_RULE_PUSH_SENT_F as CMC_MAX_C_2WAY_CRD_RULE_FLAG,
    h.MAQ_SUM_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_TRAN_SUM_N,
    h.MAQ_SUM_UPST_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_RULE_DCLN_TRAN_CNT_Q,
    h.MAQ_SUM_FINL_APRD_TRAN_CNT_Q,
    h.MAQ_SUM_UPST_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FINL_APRD_TRAN_SUM_N,
    h.MAQ_SUM_FDP_RULE_TRIG_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_CNT_Q,
    h.MAQ_SUM_OSEA_TRAN_CNT_Q,
    h.MAQ_SUM_DOMS_TRAN_SUM_N,
    h.MAQ_SUM_OSEA_TRAN_SUM_N,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_3DS_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
    h.MAQ_SUM_N3D_TRAN_CNT_Q as MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    h.MAQ_SUM_3DS_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
    h.MAQ_SUM_N3D_TRAN_SUM_N as MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
    h.MAQ_SUM_CARD_PRES_TRAN_CNT_Q,
    h.MAQ_SUM_ATM_TRAN_CNT_Q,
    h.MAQ_SUM_FALL_BACK_TRAN_CNT_Q,
    h.MAQ_SUM_CHIP_TRAN_CNT_Q,
    h.MAQ_SUM_PAY_PASS_TRAN_CNT_Q,
    h.MAQ_SUM_CARD_PRES_TRAN_SUM_N,
    h.MAQ_SUM_ATM_TRAN_SUM_N,
    h.MAQ_SUM_FALL_BACK_TRAN_SUM_N,
    h.MAQ_SUM_CHIP_TRAN_SUM_N,
    h.MAQ_SUM_PAY_PASS_TRAN_SUM_N
FROM 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT a
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_tran_prfl_agg7d b
ON 
    a.ssx_cust_num = b.cust_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = b.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_card_tran_prfl_agg7d d
ON 
    a.CHL_ID_CARD_NUM = d.card_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = d.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_cust_merc_acqr_tran_prfl_agg7d f
ON 
    a.ssx_cust_num = f.cust_i and a.chl_ct_term_owner_id = f.merc_i and a.chl_ct_acq_id = f.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = f.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg7d g
ON 
    a.CHL_ID_CARD_NUM = g.card_i and a.chl_ct_mer_mcc = g.merc_catg_c
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = g.WINDOW_START_DATE
LEFT JOIN 
    PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_merc_acqr_tran_prfl_agg7d h
ON 
    a.chl_ct_term_owner_id = h.merc_i and a.chl_ct_acq_id = h.acqr_i
AND 
    DATE_TRUNC('day', a.TRANSACTIONDATETIME) = h.WINDOW_START_DATE

;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-04 07:53:08.142 Z,2025-09-04 10:28:45.077 Z
83.890300,17330.981314167380,0,0,"INSERT INTO LABMLFRD.CARD_TRAN_DAIS_DSPT (
-- CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_DAIS_DSPT AS (
    WITH DSPT_POST AS (
        SELECT
            a.DSPT_TRAN_CRAT_S,
            a.DSPT_TRAN_I,
            a.ACCT_N,
            CPNN_ACCT_N,
            TOKN_ACCT_N,
            TRAN_S,
            TRAN_REFN_I,
            TRAN_POST_S,
            LPAD(TRAN_MERC_CATG_C, 4, '0') AS TRAN_MERC_CATG_C,
            TRAN_AUTT_NUMB_X,
            TRAN_C,
            TRAN_ORIG_CNCY_C,
            ABS(ROUND(TRAN_ORIG_A, 2)) AS TRAN_ORIG_A,
            TRAN_DEST_CNCY_C,
            ABS(ROUND(TRAN_DEST_A, 2)) AS TRAN_DEST_A,
            REGEXP_REPLACE(UPPER(SUBSTR(TRAN_MERC_DETL_X, 1, 23)), '[^A-Z0-9]', '') AS TRAN_MERC_DETL_X,
            VISA_MAIL_TELE_ORDR_C,
            TRAN_CAHD_ACTV_TRML_C,
            MCRD_INPT_MODE_C,
            MCRD_AUTN_C,
            MCRD_SECU_LEVL_INDA_C,
            MCRD_UVRS_CAHD_AUTT_FIED_C,
            INITCAP(SPLIT_PART(DSPT_TRAN_DCDE_X, '-', 1)) AS DSPT_TRAN_DCDE_X,
            DDA_N,
            DSPT_TRAN_PROS_C,
            TRAN_TOKN_TYPE_X,
            TRAN_CAHD_ACPT_IDNN_I,
            TRAN_SYST_TRAC_AUDT_NUMB_I,
            TRAN_RTRV_RQST_NUMB_C,
            TRAN_POS_MODE_C,
            TRAN_FALL_BACK_C,
            MCRD_SECU_LEVL_INDA_X,
            TRAN_ACTL_A,
            TRAN_HOST_SWIT_S,
            b.DSPT_CASE_I,
            b.DSPT_CASE_EVNT_I,
            b.DSPT_CASE_CRAT_I,
            b.DSPT_CASE_CRAT_S,
            b.DSPT_CASE_CLSE_S,
            b.DSPT_CHNL_M,
            b.DSPT_TYPE_X,
            b.DSPT_CASE_USER_STUS_X,
            b.DSPT_CASE_STUS_X,
            b.DSPT_SRCE_SYST_M,
            a.LOAD_TS
        FROM
            CNS.OMN_BV_RBS_NON_FNCL_TRAN_DSPT_DETL a
        LEFT JOIN (
            SELECT DSPT_CASE_I,
                ACCT_N,
                DSPT_TYPE_X,
                DSPT_CHNL_M,
                DSPT_SRCE_SYST_M,
                DSPT_TYPE_C,
                DSPT_CASE_EVNT_I,
                DSPT_CASE_STUS_X,
                DSPT_CASE_USER_STUS_X,
                DSPT_CASE_CRAT_I,
                DSPT_CASE_CRAT_S,
                DSPT_CASE_CLSE_S
            FROM
                CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
            QUALIFY
                ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) b
        ON
            a.DSPT_CASE_EVNT_I = b.DSPT_CASE_EVNT_I
        WHERE
            TO_DATE(b.DSPT_CASE_CRAT_S) <= TO_DATE($INPUT_D)-1
            AND TO_DATE(b.DSPT_CASE_CRAT_S) > TO_DATE($INPUT_D)-32
            AND TO_DATE(TRAN_S) >= '2024-12-10' -- before SF auth history
            AND a.DSPT_TRAN_I NOT IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT WHERE TRAN_I IS NOT NULL) -- Already matched
            AND a.DSPT_CASE_I IS NOT NULL
            AND a.DSPT_TRAN_I IS NOT NULL
            AND b.DSPT_TYPE_C = 'DT1'
            AND b.DSPT_CASE_USER_STUS_X = 'Closed'
        QUALIFY
            ROW_NUMBER() OVER (PARTITION BY a.DSPT_CASE_I, a.DSPT_NON_FNCL_TRAN_IDNN_BK ORDER BY a.DSPT_CASE_EVNT_I DESC )=1
    )
    , POTENTIAL_MATCHES AS (
        SELECT
            -- Posted
            dai.DSPT_CASE_I,
            dai.DSPT_CASE_EVNT_I,
            dai.DSPT_CASE_CRAT_I,
            dai.DSPT_CASE_CRAT_S,
            dai.DSPT_CASE_CLSE_S,
            dai.DSPT_CHNL_M,
            dai.DSPT_TYPE_X,
            dai.DSPT_CASE_USER_STUS_X,
            dai.DSPT_CASE_STUS_X,
            dai.DSPT_SRCE_SYST_M,
            dai.DSPT_TRAN_I,
            dai.TRAN_REFN_I AS DSPT_TRAN_REFN_I,
            dai.TRAN_SYST_TRAC_AUDT_NUMB_I AS DSPT_TRAN_SYST_TRAC_AUDT_NUMB_I,
            dai.TRAN_RTRV_RQST_NUMB_C AS DSPT_TRAN_RTRV_RQST_NUMB_C,
            dai.ACCT_N AS DSPT_ACCT_N,
            dai.CPNN_ACCT_N AS DSPT_CPNN_ACCT_N,
            dai.TOKN_ACCT_N AS DSPT_DPAN_I,
            dai.DDA_N AS DSPT_DDA_N,
            dai.TRAN_TOKN_TYPE_X AS DSPT_TRAN_TOKN_TYPE_X,
            TO_DATE(dai.TRAN_S)+1 AS DSPT_TRAN_D,
            dai.TRAN_S AS DSPT_TRAN_S,
            dai.TRAN_POST_S AS DSPT_TRAN_POST_S,
            dai.TRAN_HOST_SWIT_S AS DSPT_TRAN_HOST_SWIT_S,
            dai.TRAN_ORIG_A AS DSPT_TRAN_ORIG_A,
            dai.TRAN_ORIG_CNCY_C AS DSPT_TRAN_ORIG_CNCY_C,
            dai.TRAN_DEST_A AS DSPT_TRAN_DEST_A,
            dai.TRAN_DEST_CNCY_C AS DSPT_TRAN_DEST_CNCY_C,
            dai.TRAN_ACTL_A AS DSPT_TRAN_ACTL_A,
            dai.TRAN_MERC_DETL_X AS DSPT_TRAN_MERC_DETL_X,
            dai.TRAN_MERC_CATG_C AS DSPT_TRAN_MERC_CATG_C,dai.TRAN_C AS DSPT_TRAN_C,
            dai.VISA_MAIL_TELE_ORDR_C AS DSPT_VISA_MAIL_TELE_ORDR_C,
            dai.MCRD_INPT_MODE_C AS DSPT_MCRD_INPT_MODE_C,
            dai.TRAN_POS_MODE_C AS DSPT_TRAN_POS_MODE_C,
            dai.TRAN_AUTT_NUMB_X AS DSPT_TRAN_AUTT_NUMB_X,
            dai.DSPT_TRAN_DCDE_X,
            dai.MCRD_AUTN_C AS DSPT_MCRD_AUTN_C,
            dai.MCRD_SECU_LEVL_INDA_C AS DSPT_MCRD_SECU_LEVL_INDA_C,
            dai.MCRD_SECU_LEVL_INDA_X AS DSPT_MCRD_SECU_LEVL_INDA_X,
            dai.MCRD_UVRS_CAHD_AUTT_FIED_C AS DSPT_MCRD_UVRS_CAHD_AUTT_FIED_C,
            dai.TRAN_CAHD_ACTV_TRML_C AS DSPT_TRAN_CAHD_ACTV_TRML_C,
            dai.TRAN_CAHD_ACPT_IDNN_I AS DSPT_TRAN_CAHD_ACPT_IDNN_I,
            dai.TRAN_FALL_BACK_C AS DSPT_TRAN_FALL_BACK_C,
            dai.DSPT_TRAN_PROS_C,
            dai.DSPT_TRAN_CRAT_S,
            dai.LOAD_TS AS DSPT_LOAD_TS,
            
            -- Authorisation
            TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
            tran.SSX_CUST_NUM AS CUST_I,
            tran.CHL_ID_CARD_NUM AS CARD_I,
            tran.DTL_EX_0_20S_004 AS DPAN_I,
            tran.CHL_CT_MEDIA AS TRAN_MDIA_C,
            TO_TIMESTAMP(CONCAT(tran.TTS_TRAN_DATE_ALT, tran.TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S,
            TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD') AS TRAN_D,
            tran.DTL_CA_CLIENT_AMT AS TRAN_A,
            REGEXP_REPLACE(UPPER(SUBSTR(CHL_CT_TERM_OWNER_NAME, 1, 23)), '[^A-Z0-9]', '') AS MERC_M,
            tran.CHL_CT_MER_MCC AS TRAN_MERC_CATG_C,
            tran.CHL_CT_TERM_OWNER_ID AS MERC_I,
            tran.CHL_CT_TERM_ID AS MERC_TRML_I,
            tran.CHL_CT_ACQ_ID AS TRAN_ACQR_I,
            tran.CHL_CT_TERM_CNTRY_CODE AS TRAN_CNTY_C,
            tran.ATH_PC_POS AS TRAN_POS_MODE_C,
            tran.CHL_CT_ASSO_DEC_CODE AS TRAN_AUTT_NUMB_X,
            REPLACE(tran.DTL_CA_AUTH_SYS_DEC,' ','') AS TRAN_UPST_DCDE_C,
            REPLACE(tran.DTL_CA_AUTH_SYS_INFO,' ','') AS TRAN_UPST_REAS_C,
            REPLACE(tran.RSP_ACTION_CODE,' ','') AS TRAN_FINL_DCDE_C,
            SUBSTR(tran.DTL_EX_3_80S_003,1,2) AS TRAN_ACCT_AUTT_V,
            tran.DTL_EX_0_3S_002 AS TRAN_SECU_LEVL_INDA_C,
            tran.ATH_PC_PIN_VRFY AS TRAN_PIN_VERF_F,
            tran.DTL_CA_REVERSAL_IND AS TRAN_REVS_F,
            SUBSTR(tran.DTL_EX_0_10S_002,1,1) AS TRAN_PAIN_CUST_MERC_F,
            tran.DTL_EX_0_I_022 AS TRAN_RCRR_F,
            CASE WHEN tran.DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(tran.DTL_EX_3_8S_004) END AS TRAN_MCRD_SCOR_N,
            tran.RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X,
            SUBSTR(tran.RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X,
            SUBSTR(tran.RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F,
            SUBSTR(tran.RSP_EX_2_8S_002,8,1) AS FDP_PUSH_EXIT_C,
            
            -- Post-to-auth match scoring
            (CASE WHEN DSPT_TRAN_MERC_DETL_X = MERC_M THEN 100
                WHEN (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1 OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1) THEN 80
                ELSE 0 END +
            CASE WHEN tran.CHL_CT_ASSO_DEC_CODE = dai.TRAN_AUTT_NUMB_X THEN 100 ELSE 0 END +
            CASE WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 0 THEN 100
                WHEN ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) = 1 THEN 50
                ELSE 0 END +
            CASE WHEN dai.TRAN_DEST_A = tran.DTL_CA_CLIENT_AMT THEN 100
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.025 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.975 THEN 50
                WHEN dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05 AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95 THEN 25
                ELSE 0 END +
            CASE WHEN dai.TRAN_MERC_CATG_C = tran.CHL_CT_MER_MCC THEN 100
                WHEN ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1 THEN 70
                ELSE 0 END +
            CASE 
                WHEN dai.MCRD_INPT_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = 'C') THEN 100
                        WHEN (tran.ATH_PC_POS = '81' AND dai.MCRD_INPT_MODE_C = 'M') THEN 100
                        WHEN (tran.ATH_PC_POS = '01' AND dai.MCRD_INPT_MODE_C = 'S') THEN 100
                        WHEN (tran.ATH_PC_POS = '07' AND dai.MCRD_INPT_MODE_C = '1') THEN 100
                        WHEN tran.ATH_PC_POS = dai.MCRD_INPT_MODE_C THEN 100
                        ELSE 0
                    END
                WHEN dai.TRAN_POS_MODE_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = 'S') THEN 80
                        WHEN (tran.ATH_PC_POS = '81' AND dai.TRAN_POS_MODE_C = 'M') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = 'C') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '1') THEN 80
                        WHEN (tran.ATH_PC_POS = '07' AND dai.TRAN_POS_MODE_C = '071') THEN 80
                        WHEN (tran.ATH_PC_POS = '01' AND dai.TRAN_POS_MODE_C = '0') THEN 80
                        WHEN tran.ATH_PC_POS = dai.TRAN_POS_MODE_C THEN 70
                        ELSE 0
                    END
                WHEN SUBSTR(tran.CHL_ID_CARD_NUM, 1, 1) = '4' AND dai.VISA_MAIL_TELE_ORDR_C IS NOT NULL THEN
                    CASE
                        WHEN (tran.ATH_PC_POS = '01' AND dai.VISA_MAIL_TELE_ORDR_C = '5') THEN 60
                        WHEN tran.ATH_PC_POS = dai.VISA_MAIL_TELE_ORDR_C THEN 40
                        ELSE 0
                    END
                ELSE 0 
            END) AS POST_AUTN_MTCH_SCOR
        FROM
            DSPT_POST dai
        LEFT JOIN 
            FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
            ON 
            -- General match criteria (refined with POST_AUTN_MTCH_SCOR)
            -- Card number
            (tran.CHL_ID_CARD_NUM = dai.ACCT_N 
                OR tran.CHL_ID_CARD_NUM = dai.CPNN_ACCT_N 
                OR tran.DTL_EX_0_20S_004 = dai.TOKN_ACCT_N)
            -- Merchant name equal to or contained in the other
            AND DSPT_TRAN_MERC_DETL_X = MERC_M
            AND (CONTAINS(DSPT_TRAN_MERC_DETL_X, MERC_M)=1
                OR CONTAINS(MERC_M, DSPT_TRAN_MERC_DETL_X)=1)
            -- Amount within 10%
            AND dai.TRAN_DEST_A <= tran.DTL_CA_CLIENT_AMT * 1.05
            AND dai.TRAN_DEST_A >= tran.DTL_CA_CLIENT_AMT * 0.95
            -- Within 3 days between auth and post
            AND ABS(DATEDIFF(DAY, TO_DATE(dai.TRAN_S)+1, TO_DATE(TTS_TRAN_DATE_ALT,'YYYYMMDD'))) <= 1
            -- Similar MCC
            AND ABS(EDITDISTANCE(dai.TRAN_MERC_CATG_C, tran.CHL_CT_MER_MCC)) <= 1
    )
    , RANKED_MATCHES AS (
        SELECT *,
            -- Get highest match score for each dispute tran id
            ROW_NUMBER() OVER (PARTITION BY DSPT_TRAN_I ORDER BY 
                    CASE WHEN TRAN_AUTT_NUMB_X = DSPT_TRAN_AUTT_NUMB_X THEN 1 ELSE 0 END DESC,
                    POST_AUTN_MTCH_SCOR DESC,
                    TRAN_I ASC
                ) AS POST_RANK
        FROM
            POTENTIAL_MATCHES
    )
    SELECT 
        *
    EXCLUDE POST_RANK,
        'DAISY' AS SRCE_SYST_C,
        CURRENT_TIMESTAMP() AS LOAD_TS,
        0 AS ROW_SECU_ACCS_C,
        CURRENT_TIMESTAMP() AS ETL_TS,
        'PRD-FRAUMD-PRD-CARD-TRAN-DAIS-DSPT' AS ETL_ID,
        TO_DATE($INPUT_D)-1 AS SNAP_D
    FROM
        RANKED_MATCHES
    WHERE
        POST_RANK=1
        -- Don't insert when non-match transaction already exists in table
        AND NOT (TRAN_I IS NULL AND DSPT_TRAN_I IN (SELECT DSPT_TRAN_I FROM labmlfrd.CARD_TRAN_DAIS_DSPT))
);",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-08 02:02:17.315 Z,2025-09-08 03:26:10.733 Z
80.779167,3304.727292999625,1220442439680,0,"SELECT DISTINCT

    -- Transaction datetime (parsed from alternate date/time fields)
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
    -- Transaction ID (concatenation of 3 fields)x
    ,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
    -- Snapshot date of transaction (parsed from MID_EVENT_TS)
    ,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
    -- Account identifier (bank, branch, account number)
    ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
    -- Party identifier (customer number padded)
    ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
    -- Transaction date (alternate format)
    ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d

    -- Feature from leaky.txt, no description
    ,dtl_ex_0_20s_001
    -- Feature from leaky.txt, no description
    -- ,dtl_ex_1_5s_01
    -- Customer number (must be present, dropped for modelling)
    ,SSX_CUST_NUM
    -- Transaction amount
    -- ,tgx_tran_amt
    -- -- Max 30-day risk score
    -- ,_l_max_30d_score
    -- -- BC risk score
    -- ,_l_bc_score
    -- -- Max 30-day mule risk score
    -- ,_l_max_30d_mule_score

    ,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

-- ,_l_adv_key_combo
-- ,_l_clpbrd_evnt
-- ,_l_concurrent_sess
-- ,_l_export_data
-- ,_l_import_data
-- ,_l_rat_in_sess
-- ,_l_is_rcnt_hrisk_sess
,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS

-- ,_l_scrn_broadcast
-- ,_l_delay_to_input_pi
-- ,_l_active_spoofing
-- ,_l_pmt_vloc_anom
-- ,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM

-- ,_l_accum_amt_anom
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM

-- ,_l_is_active_call
-- ,_l_is_long_sess
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,_L_TRUST_900
-- ,_L_TRUST_NEW_PAYEE
-- ,_L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE

-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYEE
-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYER
-- ,_L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,_l_cust_scamrisk_score
-- ,_b_recip_sum_short
-- ,_b_recip_sum_long
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG

-- ,_a_customer_age
-- ,_a_cust_sum_aaa_short
-- ,_a_cust_sum_aaa_long
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M

-- ,_x_cif_recipient_new_sum
------------------
-- Keep other columns as VARCHAR (mostly text)
,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,_x_cif_recipient_new_cnt
-- ,_x_telstra_last_call_dur
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_3
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_2
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_4
-- ,REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '') as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
-- REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '') as _N_NEW_IP_LOGON_PCODE,
-- REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '') as _A_LOGON_198_IP_PC,
-- REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '') as _A_LOGON_NB_IP_PC,
-- COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,


,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT

-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE


,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT


-- ,_x_telstra_max_call_dur
-- -- ,_a_telstra_active_call
-- ,_a_telstra_tp_outbnd_avg_dur
-- ,_a_telstra_multi_calls
-- ,_a_crypto_mnthly_sum
-- COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
-- COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
-- COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM

,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250717'
and     dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     TRAN_AMT > 0
order by    transactiondatetime",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_001,X-Large,SUCCESS,2025-08-31 06:15:44.173 Z,2025-08-31 07:36:30.923 Z
130.511250,4752.538519680500,5826428702720,0,"create or replace table PRD_P01_DMN_FRAUMD.LABMLFRD.TECHDS_DEHURYSK_SCAM_RETRO_BASE2 as 
(
WITH code1_data AS (
        SELECT DISTINCT

    -- Transaction datetime (parsed from alternate date/time fields)
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
    -- Transaction ID (concatenation of 3 fields)x
    ,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
    -- Snapshot date of transaction (parsed from MID_EVENT_TS)
    ,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
    -- Account identifier (bank, branch, account number)
    ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
    -- Party identifier (customer number padded)
    ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
    -- Transaction date (alternate format)
    ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d

    -- Feature from leaky.txt, no description
    ,dtl_ex_0_20s_001
    -- Feature from leaky.txt, no description
    -- ,dtl_ex_1_5s_01
    -- Customer number (must be present, dropped for modelling)
    ,SSX_CUST_NUM
    -- Transaction amount
    -- ,tgx_tran_amt
    -- -- Max 30-day risk score
    -- ,_l_max_30d_score
    -- -- BC risk score
    -- ,_l_bc_score
    -- -- Max 30-day mule risk score
    -- ,_l_max_30d_mule_score

    ,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

-- ,_l_adv_key_combo
-- ,_l_clpbrd_evnt
-- ,_l_concurrent_sess
-- ,_l_export_data
-- ,_l_import_data
-- ,_l_rat_in_sess
-- ,_l_is_rcnt_hrisk_sess
,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS

-- ,_l_scrn_broadcast
-- ,_l_delay_to_input_pi
-- ,_l_active_spoofing
-- ,_l_pmt_vloc_anom
-- ,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM

-- ,_l_accum_amt_anom
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM

-- ,_l_is_active_call
-- ,_l_is_long_sess
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,_L_TRUST_900
-- ,_L_TRUST_NEW_PAYEE
-- ,_L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE

-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYEE
-- ,_L_TRUST_RCNT_HI_ATO_AS_PAYER
-- ,_L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,_l_cust_scamrisk_score
-- ,_b_recip_sum_short
-- ,_b_recip_sum_long
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG

-- ,_a_customer_age
-- ,_a_cust_sum_aaa_short
-- ,_a_cust_sum_aaa_long
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M

,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM

------------------
-- Keep other columns as VARCHAR (mostly text)
,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1,
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE,
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,_x_cif_recipient_new_cnt
-- ,_x_telstra_last_call_dur
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_3
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_2
-- ,REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '') as _B_CLIENT_POSTCODE_4
-- ,REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '') as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
-- REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '') as _N_NEW_IP_LOGON_PCODE,
-- REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '') as _A_LOGON_198_IP_PC,
-- REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '') as _A_LOGON_NB_IP_PC,
-- COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,


,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE


,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT

,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT


-- ,_x_telstra_max_call_dur
-- -- ,_a_telstra_active_call
-- ,_a_telstra_tp_outbnd_avg_dur
-- ,_a_telstra_multi_calls
-- ,_a_crypto_mnthly_sum
,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
-- COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
-- COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM

,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20241001'
and  mid_event_ts < '20250717'
and     dtl_ex_1_5s_01 not in ('U290'
							,'T290'
							,'F290'
							,'290'
							,'P290'
							,'I290'
							,'N207N'
							,'N242N'
							,'N244N'
							,'N246N'
							,'K290'
							,'Y290')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     TRAN_AMT > 0
order by    transactiondatetime
-- limit 10000
),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2024-10-01'
    and SNAP_D < '2025-07-17'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,

        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1

--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK );",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_001,X-Large,SUCCESS,2025-08-31 10:44:59.905 Z,2025-08-31 12:55:30.580 Z
37.265083,710.485831156373,0,0,"create or replace temporary table Digital_Transactions as
select    
    b.fraudtype,
    b.DETECTION,
    b.case_detection,
    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_ANY_CUST_FTP_DT, 38, 2), '1960-01-01 00:00:00') as _B_ANY_CUST_FTP_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_x_cif_recipient_new_date, 38, 2), '1960-01-01 00:00:00') as _x_cif_recipient_new_date,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_BC_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _L_BC_EVENT_DT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_SCM_RSK_HGH_DT, 38, 2), '1960-01-01 00:00:00') as _L_SCM_RSK_HGH_DT,
    _L_NC_RESPONSE_CODE,
    dtl_ex_0_20s_001 AS RECEIPT_NUM,
    (a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID,
    cmx_tran_id,
    hdr_activity_type,
    ssx_cust_num,
    chl_id_ob_userid,
    chl_id_pb_userid,
    dtl_ex_1_5s_01 as dmx_5byte_string_01,
    _a_cse_chg_dwl_ind AS DWL_change,
    dtl_ex_0_n_006 as Task_ID,
    dtl_ex_0_i_002 AS FTP_Indicator_1,
    rsp_ex_2_i_006 AS FTP_Indicator_2,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_SUM, 38, 2) as _X_CIF_RECIPIENT_SUM,
    TRY_TO_NUMBER(_X_CIF_RECIPIENT_NEW_SUM, 38, 2) as _X_CIF_RECIPIENT_NEW_SUM,
    TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2) as _x_cif_recipient_new_cnt,
    TRY_TO_NUMBER(TGX_TRAN_AMT) AS TGX_TRAN_AMT,
    TRY_TO_NUMBER(_A_BTS_CUST_AGE, 38, 2)as _A_BTS_CUST_AGE,
    tgx_bank_name,
    tgx_bank_num,
    tgx_branch_id,
    tgx_acct_num,
    tgx_name,
    _L_ACCT_NUM,
    _L_BANK_NUM,
    _l_branch_id, 
    DTL_EX_3_80S_003 AS pmt_description_1,
    tgx_description AS pmt_description_2,
    TRY_TO_NUMBER(_L_SCM_RSK_HGH_SCR, 38, 2) as _L_SCM_RSK_HGH_SCR,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 4) as CERBERUS_SCORE_1,
    TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 5) as CERBERUS_SCORE_2,
    TRY_TO_NUMBER(_L_CUST_SCAMRISK_SCORE, 38, 2) as _L_CUST_SCAMRISK_SCORE,
    TRY_TO_NUMBER(a._l_se_score, 38, 2) as _L_SE_SCORE,
    TRY_TO_NUMBER(a._l_bc_score, 38, 2) as _L_BC_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_score, 38, 2) as _L_MAX_30D_SCORE,
    TRY_TO_NUMBER(a._l_max_30d_se_score, 38, 2) as _L_MAX_30D_SE_S,
    TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2) as _l_max_30d_mule_score,
    TRY_TO_NUMBER(_L_NUM_SESS_2H, 38, 2) as _L_NUM_SESS_2H,
    TRY_TO_NUMBER(_L_NUM_SESS_4H, 38, 2) as _L_NUM_SESS_4H,
    TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE,38,2) as _L_TRUST_NEW_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE,38,2) as _L_TRUST_UNUSED_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN,38,2) as _L_TRUST_PAYEE_HIGH_VLOC_IN,
	TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT,38,2) as _L_TRUST_PAYEE_DORM_ACCT,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_ATO_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_SES_AS_PAYER,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYEE,
	TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER,38,2) as _L_TRUST_RCNT_HI_MS_AS_PAYER,
    TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev,38,2) as _l_rcnt_hi_scr_on_dev,
    TRY_TO_NUMBER(_B_RECIP_SUM_LONG, 38, 2) as _B_RECIP_SUM_LONG,
    TRY_TO_NUMBER(_B_RECIP_SUM_SHORT, 38, 2) as _B_RECIP_SUM_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_CNT_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_CNT_DATE,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_LONG, 38, 2) as _B_RECIP_FTP_CNT_LONG,
    TRY_TO_NUMBER(_B_RECIP_FTP_CNT_SHORT, 38, 2) as _B_RECIP_FTP_CNT_SHORT,
    TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_B_RECIP_FTP_SUM_DATE, 38, 2), '1960-01-01 00:00:00') as _B_RECIP_FTP_SUM_DATE,
from LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
    on a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
where mid_event_ts >= '20241101'
and mid_event_ts <= '20250101';",ZAIDIS2,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-08-31 22:23:18.187 Z,2025-08-31 23:00:34.092 Z
30.222833,13617.535493835807,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250917_231934(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250616
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-17 23:19:56.952 Z,2025-09-17 23:50:10.322 Z
54.395333,36.735997803510,3326332616704,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-05-31'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-03-01' and '2025-05-31'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-03-01' and '2025-05-31') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMC_SUM_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    CMC_SUM_TRAN_SUM_N,
    CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_SUM_N,
    CMC_SUM_FINL_APRD_TRAN_SUM_N,
    CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    CMC_SUM_DOMS_TRAN_CNT_Q,
    CMC_SUM_OSEA_TRAN_CNT_Q,
    CMC_SUM_DOMS_TRAN_SUM_N,
    CMC_SUM_OSEA_TRAN_SUM_N,
    CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMC_SUM_3DS_TRAN_CNT_Q,
    CMC_SUM_N3D_TRAN_CNT_Q,
    CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMC_SUM_3DS_TRAN_SUM_N,
    CMC_SUM_N3D_TRAN_SUM_N,
    CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    CMC_SUM_ATM_TRAN_CNT_Q,
    CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    CMC_SUM_CHIP_TRAN_CNT_Q,
    CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    CMC_SUM_CARD_PRES_TRAN_SUM_N,
    CMC_SUM_ATM_TRAN_SUM_N,
    CMC_SUM_FALL_BACK_TRAN_SUM_N,
    CMC_SUM_CHIP_TRAN_SUM_N,
    CMC_SUM_PAY_PASS_TRAN_SUM_N,
    CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-26 10:23:48.307 Z,2025-08-26 11:18:12.027 Z
43.294017,817.840562790632,863624605696,0,"CREATE OR REPLACE TABLE PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D AS
select distinct tran_id,
SSX_CUST_NUM,
CHL_ID_CARD_NUM,
CHL_CT_TERM_OWNER_ID,
CHL_CT_ACQ_ID,
TRANSACTIONDATETIME,
TRANSACTION_HOUR,
DTL_CA_CLIENT_AMT,
_C_CC_GBL_N3D_1D_SUM_1,
_C_CC_HIGH_VEL_APPLE_SUM_1,
_C_CRD_APAY_CNT_1,
_C_CC_GBL_N3D_1D_CNT_1,
_C_CC_CNP_VEL_6HR_SUM_1,
_C_CRD_APAY_SUM_1,
_C_CRD_SAFE_MERCHANT,
_C_2WAY_CRD_FRD_RULE_FLAG,
_C_CC_CNP_LTRANS_6HR_COUNT_1,
_C_CC_CNP_VEL_6HR_COUNT_1,
_L_CITY_AGE,
_A_CRD_NPP_PAYMENT_AMOUNT,
_A_CLIENT_COUNTRY_CNT_3,
_A_CUSTOMER_AGE,
_A_CLIENT_COUNTRY_CNT_10,
_A_NPP_FTP_SUM,
_L_PASTE_IN_LOGIN_CNT,
_A_CUST_SUM_AAA_LONG,
_L_G_CON_DEV,
_L_DEV_FAM_AGE,
_L_TOUCH_CNT,
_B_RECIP_SUM_AAA_LONG,
_L_RISKY_KEY_COMBO,
_A_C_G,
_L_SCORE_4,
_A_E,
_A_NPP_INB_PMT_VAL,
_A_CLIENT_COUNTRY_CNT_2,
_A_PROF_CAPP_DEVICE_CNT_1,
_A_CRD_SCAM_SUPP_7D_SUM_1,
_A_CLIENT_CITY_CNT_2,
_L_UID_AGE,
_L_SCRN_W,
_L_ASN_AGE,
_L_SCORE_2,
_A_CUST_NPP_OUT_SUM_AAA_5,
_L_BC_SESS_CNT,
_L_ACC_AMT_1H,
_A_LIST_WL_SCAM_DRIVE_LICENSE,
_A_CC_CASH_ADVANCE_AMT,
_A_CUST_SUM_AAA_SHORT,
_A_P_L_1,
_L_PMT_AMT,
_L_ISP_AGE,
_L_ACC_AMT_7D,
_A_CLIENT_COUNTRY_CNT_7,
_L_CONCURRENT_SESS,
_A_CAPP_HCE_CNT_1,
_L_SCORE_5,
_L_MUID_AGE_PER_USER,
_A_CUST_ACCT_BAL,
_L_CUST_SCAMRISK_SCORE,
_A_ATM_WITHDRAWAL_SUM_AMT,
_L_TAP_CNT,
_A_LIST_WL_SCAM_TP_IP,
_L_MAX_30D_SCORE,
_B_RECIP_SUM_AAA_1,
_X_CIF_SENDER_SUM,
_L_M_L_1,
_L_SCRN_H,
_A_CUST_NPP_OUT_SUM_AAA_2,
_A_CUST_ACTION_IND,
_A_P_L_C,
_A_CUST_AVG_ACCT_BAL,
_L_AND_ID_AGE,
_X_CIF_REC_SUM,
_L_SESS_CNT_MOB_SDK,
_L_TOTAL_SESS_CNT,
_A_CURR_CAPP_DEVICE_NFTP_CNT,
_L_NC_ACCT_NUM_NAME_CONF,
_A_CLIENT_COUNTRY_CNT_5,
_A_U,
_B_RECIP_SUM_AAA_7,
_L_SCM_RSK_SCR_2,
_B_RECIP_SUM_AAA_4,
_L_BC_SCORE,
_L_DAYS_LST_DEV_AND,
_A_PROF_CAPP_DEVICE_CNT_3,
_L_DAYS_LST_DEV_IOS,
_X_LAST_N_TXN_COUNT,
_A_T,
_A_CUST_NPP_IN_SUM_AAA_2,
_L_MINS_LST_LGN_CAPPED,
_L_ACC_AMT_2H,
_L_ACC_AMT_4H,
_A_LIST_BL_PASSPORT,
_A_LIST_WL_SCAM_PASSPORT,
_A_LIST_BL_SCAM_PASSPORT,
_B_RECIP_SUM_AAA_6,
_A_PROF_CAPP_DEVICE_CNT_2,
_A_CLIENT_COUNTRY_CNT_6,
_A_BTS_BCH_SUM,
_A_BTS_CUST_AGE,
_A_CURR_CAPP_DEVICE_CNT,
_A_CURR_NB_BROWSER_CNT,
_A_PREV_CAPP_DEVICE_CNT,
_A_Q,
_A_R,
_L_CNTRY_AGE,
_A_NPP_IN_UNRELATED_SUM_24_1,
_X_FT_OVER5K_RECIP_CNT,
_X_CIF_RECIPIENT_NEW_CNT,
_A_NPP_IN_UNRELATED_SUM_24_2,
_B_NPP_OUT_SUM_1,
_L_ACC_AMT_1D,
_A_TRANSPORT_REG_CNT_1,
_A_MULTI_CNT,
_L_M_L_4,
_A_PROF_CAPP_DEVICE_NFTP_1,
_X_NAME_MATCH_CNT,
_A_PROF_CAPP_DEVICE_CNT_5,
_A_PROF_CAPP_DEVICE_CNT_4,
_L_SESS_CNT_WEB,
_B_RECIP_SUM_AAA_2,
_L_M_L_C,
_L_TIME_ZONE,
_A_CUST_NPP_IN_SUM_AAA_1,
_L_IP_AGE,
_A_NPP_INBOUND_SUM_AMT,
_X_FT_OVER5K_RECIP_SUM,
_X_CIF_SENDER_CNT,
_A_NB_LOGONS_CNT_2,
_A_CLC_FTP_AMT,
_L_TRVL_SPD,
_B_RECIP_SUM_LONG,
_A_CRYPTO_MNTHLY_SUM,
_A_GL_TRF_ACC_BAL,
_L_SESS_CNT_MOB_BROWSER,
_L_SCORE_3,
_A_CRD_CRYPTO_PROC_FLG,
_B_NPP_OUT_CNT_2,
_A_NPP_OUT_CNT_2,
_A_SCH_AMT,
_A_P_L_3,
_B_NPP_OUT_FTP_SUM_1,
_L_SDID_CNT_1,
_A_CUST_NPP_OUT_SUM_AAA_LONG,
_A_LIST_RL1_SCAM_CUST_CIF,
_L_NUM_SESS_2H,
_A_VPN_VPS_IP_LOGON_COUNT,
_A_GEO_DISTANCE,
_X_NAME_MATCH_IND,
_A_NB_LOGONS_CNT_3,
_L_DAYS_LST_DEV_JS,
_A_FTP_SUM_1,
_L_NUM_SESS_4H,
_L_NC_MATCH_NAME_CONF,
_B_RECIP_SUM_AAA_5,
_L_DPI_CHANGE,
_B_RECIP_SUM_1,
_A_SCAM_RISKY_MCC_PRELEAD_AMT,
_L_M_L_3,
_X_CIF_REC_CNT,
_A_LIST_BL_SCAM_TP_IP,
_B_CRYPTO_RISK,
_A_LIST_BL_SCAM_DRIVE_LICENSE,
_B_RECIP_SUM_AAA_SHORT,
_L_CLIPB_EVENT_CNT,
_B_LIST_RL1_SCAM_TP_CIF,
_B_NPP_BLACKLIST_RECIP_FLAG,
_A_CIF_ESTABLISH_CHANNEL,
_A_ECV_DOCUMENT_IP,
_A_CUST_OS_VER,
_A_CUST_OS_NAME,
_A_2WAY_TYPE,
_A_CLIENT_CITY_10,
_L_PUSH_API_1,
_L_PUSH_API_2,
_L_PUSH_API_3,
_L_PUSH_API_4,
_A_CLIENT_CITY_6,
_L_NC_WINNING_ALG,
_L_PROXY_TYPE,
_L_LANG_3,
_L_LANG_1,
_L_LANG_2,
_L_NC_RESPONSE_CODE,
_A_PROF_RISK_IND,
_A_LATEST_NCRG_ISP,
CHL_CT_TERM_OWNER_NAME,
_C_CNP_MER_NM_CURR,
DTL_EX_0_2S_002,
DTL_EX_3_80S_002,
_A_MRISK_FOREIGN_IP_CNTRY_CODE,
DTL_CA_AUTH_SYS_DEC,
CHL_CT_MER_MCC,
ATH_PC_CUST_PRESENT,
_A_CIF_ESTABLISH_CUST_PCODE,
CHL_CT_TERM_CNTRY_CODE,
DTL_CA_MERCH_CURR_CODE,
PARTY_TYPE,
GENDER,
DMC_CNT,
YCS_CNT,
TRAN_CNT,
DPST_CNT,
CC_CNT,
TRD_CNT,
PL_CNT,
INVST_CNT,
MORT_CNT,
INSRNC_CNT,
BTA_CNT,
BUS_LN_CNT,
OTH_CNT,
NTBNK_FAC,
REL_MNG,
FA_1,
FA_2,
NO_1,
NO_2,
FA,
FP,
GOVT_BENE,
PRVT_CUST,
HL_ASOC,
CORP_EMPL,
TRUSTEE,
INTL_STU,
MAR_STS_ORG_STR,
EMPL_CLAS_LGL_STS,
HOME_OWN,
_X_NPP_OUT_SUM_DATE_DIFF,
_A_CC_DT_DIFF,
_A_ONLINE_PL_DT_DIFF,
_A_CIF_ESTABLISH_DT_DIFF,
_A_ECV_DOCUMENT_DT_DIFF,
_A_AUTO_DEC_CP_PP_DT_DIFF,
_A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
_A_SCAMP1_MLW_DT_DIFF,
_A_SCAMP2_MLW_DT_DIFF,
_A_SCAMP5_MLW_DT_DIFF,
_A_SCAMP7_MLW_DT_DIFF,
_L_PUSH_API_DT_1_DIFF,
_L_PUSH_API_DT_2_DIFF,
_L_PUSH_API_DT_3_DIFF,
_L_PUSH_API_DT_4_DIFF,
TARGET,
CUS_SUM_TRAN_CNT_Q,
CUS_SUM_UPST_APRD_TRAN_CNT_Q,
CUS_SUM_TRAN_SUM_N,
CUS_SUM_UPST_DCLN_TRAN_CNT_Q,
CUS_SUM_RULE_DCLN_TRAN_CNT_Q,
CUS_SUM_FINL_APRD_TRAN_CNT_Q,
CUS_SUM_UPST_APRD_TRAN_SUM_N,
CUS_SUM_FINL_APRD_TRAN_SUM_N,
CUS_SUM_FDP_RULE_TRIG_CNT_Q,
CUS_SUM_DOMS_TRAN_CNT_Q,
CUS_SUM_OSEA_TRAN_CNT_Q,
CUS_SUM_DOMS_TRAN_SUM_N,
CUS_SUM_OSEA_TRAN_SUM_N,
CUS_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CUS_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CUS_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CUS_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CUS_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CUS_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CUS_SUM_CARD_PRES_TRAN_CNT_Q,
CUS_SUM_ATM_TRAN_CNT_Q,
CUS_SUM_FALL_BACK_TRAN_CNT_Q,
CUS_SUM_CHIP_TRAN_CNT_Q,
CUS_SUM_PAY_PASS_TRAN_CNT_Q,
CUS_SUM_CARD_PRES_TRAN_SUM_N,
CUS_SUM_ATM_TRAN_SUM_N,
CUS_SUM_FALL_BACK_TRAN_SUM_N,
CUS_SUM_CHIP_TRAN_SUM_N,
CUS_SUM_PAY_PASS_TRAN_SUM_N,
CUS_SUM_CAPP_PSWD_CHNG_CNT_Q,
CUS_SUM_CAPP_DVIC_REGR_CNT_Q,
CUS_SUM_CAPP_LOGN_CNT_Q,
CUS_SUM_NTB_LOGN_CNT_Q,
CUS_SUM_VIEW_CARD_DETL_CNT_Q,
CUS_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CUS_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CUS_MAX_C_2WAY_CRD_RULE_FLAG,
CRD_SUM_TRAN_CNT_Q,
CRD_SUM_UPST_APRD_TRAN_CNT_Q,
CRD_SUM_UPST_DCLN_TRAN_CNT_Q,
CRD_SUM_RULE_DCLN_TRAN_CNT_Q,
CRD_SUM_FINL_APRD_TRAN_CNT_Q,
CRD_SUM_INCO_EXPY_CNT_Q,
CRD_SUM_INCO_CVVA_CNT_Q,
CRD_SUM_INCO_PIN_CNT_Q,
CRD_SUM_OVER_LIMT_DCLN_CNT_Q,
CRD_SUM_TRAN_SUM_N,
CRD_SUM_UPST_APRD_TRAN_SUM_N,
CRD_SUM_UPST_DCLN_TRAN_SUM_N,
CRD_SUM_RULE_DCLN_TRAN_SUM_N,
CRD_SUM_FINL_APRD_TRAN_SUM_N,
CRD_SUM_INCO_EXPY_SUM_N,
CRD_SUM_INCO_CVVA_SUM_N,
CRD_SUM_INCO_PIN_SUM_N,
CRD_SUM_OVER_LIMT_DCLN_SUM_N,
CRD_SUM_FDP_RULE_TRIG_CNT_Q,
CRD_SUM_DOMS_TRAN_CNT_Q,
CRD_SUM_OSEA_TRAN_CNT_Q,
CRD_SUM_DOMS_TRAN_SUM_N,
CRD_SUM_OSEA_TRAN_SUM_N,
CRD_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CRD_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CRD_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CRD_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CRD_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CRD_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CRD_SUM_CARD_PRES_TRAN_CNT_Q,
CRD_SUM_ATM_TRAN_CNT_Q,
CRD_SUM_FALL_BACK_TRAN_CNT_Q,
CRD_SUM_CHIP_TRAN_CNT_Q,
CRD_SUM_PAY_PASS_TRAN_CNT_Q,
CRD_SUM_CARD_PRES_TRAN_SUM_N,
CRD_SUM_ATM_TRAN_SUM_N,
CRD_SUM_FALL_BACK_TRAN_SUM_N,
CRD_SUM_CHIP_TRAN_SUM_N,
CRD_SUM_PAY_PASS_TRAN_SUM_N,
CRD_SUM_CAPP_PSWD_CHNG_CNT_Q,
CRD_SUM_CAPP_DVIC_REGR_CNT_Q,
CRD_SUM_CAPP_LOGN_CNT_Q,
CRD_SUM_NTB_LOGN_CNT_Q,
CRD_SUM_VIEW_CARD_DETL_CNT_Q,
CRD_MAX_CARD_USER_VARY_HIGH_RISK_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_FRAU_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_RULE_PUSH_SENT_F,
CRD_MAX_CARD_USER_VARY_WHLI_F,
CRD_MAX_CARD_USER_VARY_DO_NOT_CTCT_F,
CMA_SUM_TRAN_CNT_Q,
CMA_SUM_UPST_APRD_TRAN_CNT_Q,
CMA_SUM_TRAN_SUM_N,
CMA_SUM_UPST_DCLN_TRAN_CNT_Q,
CMA_SUM_RULE_DCLN_TRAN_CNT_Q,
CMA_SUM_FINL_APRD_TRAN_CNT_Q,
CMA_SUM_UPST_APRD_TRAN_SUM_N,
CMA_SUM_FINL_APRD_TRAN_SUM_N,
CMA_SUM_FDP_RULE_TRIG_CNT_Q,
CMA_SUM_DOMS_TRAN_CNT_Q,
CMA_SUM_OSEA_TRAN_CNT_Q,
CMA_SUM_DOMS_TRAN_SUM_N,
CMA_SUM_OSEA_TRAN_SUM_N,
CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CMA_SUM_CARD_PRES_TRAN_CNT_Q,
CMA_SUM_ATM_TRAN_CNT_Q,
CMA_SUM_FALL_BACK_TRAN_CNT_Q,
CMA_SUM_CHIP_TRAN_CNT_Q,
CMA_SUM_PAY_PASS_TRAN_CNT_Q,
CMA_SUM_CARD_PRES_TRAN_SUM_N,
CMA_SUM_ATM_TRAN_SUM_N,
CMA_SUM_FALL_BACK_TRAN_SUM_N,
CMA_SUM_CHIP_TRAN_SUM_N,
CMA_SUM_PAY_PASS_TRAN_SUM_N,
CMA_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CMA_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CMA_MAX_C_2WAY_CRD_RULE_FLAG,
CMC_SUM_TRAN_CNT_Q,
CMC_SUM_UPST_APRD_TRAN_CNT_Q,
CMC_SUM_TRAN_SUM_N,
CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
CMC_SUM_FINL_APRD_TRAN_CNT_Q,
CMC_SUM_UPST_APRD_TRAN_SUM_N,
CMC_SUM_FINL_APRD_TRAN_SUM_N,
CMC_SUM_FDP_RULE_TRIG_CNT_Q,
CMC_SUM_DOMS_TRAN_CNT_Q,
CMC_SUM_OSEA_TRAN_CNT_Q,
CMC_SUM_DOMS_TRAN_SUM_N,
CMC_SUM_OSEA_TRAN_SUM_N,
CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
CMC_SUM_CARD_PRES_TRAN_CNT_Q,
CMC_SUM_ATM_TRAN_CNT_Q,
CMC_SUM_FALL_BACK_TRAN_CNT_Q,
CMC_SUM_CHIP_TRAN_CNT_Q,
CMC_SUM_PAY_PASS_TRAN_CNT_Q,
CMC_SUM_CARD_PRES_TRAN_SUM_N,
CMC_SUM_ATM_TRAN_SUM_N,
CMC_SUM_FALL_BACK_TRAN_SUM_N,
CMC_SUM_CHIP_TRAN_SUM_N,
CMC_SUM_PAY_PASS_TRAN_SUM_N,
CMC_MAX_C_2WAY_CRD_HR_RULE_FLAG,
CMC_MAX_C_2WAY_CRD_FRD_RULE_FLAG,
CMC_MAX_C_2WAY_CRD_RULE_FLAG,
MAQ_SUM_TRAN_CNT_Q,
MAQ_SUM_UPST_APRD_TRAN_CNT_Q,
MAQ_SUM_TRAN_SUM_N,
MAQ_SUM_UPST_DCLN_TRAN_CNT_Q,
MAQ_SUM_RULE_DCLN_TRAN_CNT_Q,
MAQ_SUM_FINL_APRD_TRAN_CNT_Q,
MAQ_SUM_UPST_APRD_TRAN_SUM_N,
MAQ_SUM_FINL_APRD_TRAN_SUM_N,
MAQ_SUM_FDP_RULE_TRIG_CNT_Q,
MAQ_SUM_DOMS_TRAN_CNT_Q,
MAQ_SUM_OSEA_TRAN_CNT_Q,
MAQ_SUM_DOMS_TRAN_SUM_N,
MAQ_SUM_OSEA_TRAN_SUM_N,
MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q,
MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q,
MAQ_SUM_CARD_NOT_PRES_TRAN_SUM_N,
MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N,
MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N,
MAQ_SUM_CARD_PRES_TRAN_CNT_Q,
MAQ_SUM_ATM_TRAN_CNT_Q,
MAQ_SUM_FALL_BACK_TRAN_CNT_Q,
MAQ_SUM_CHIP_TRAN_CNT_Q,
MAQ_SUM_PAY_PASS_TRAN_CNT_Q,
MAQ_SUM_CARD_PRES_TRAN_SUM_N,
MAQ_SUM_ATM_TRAN_SUM_N,
MAQ_SUM_FALL_BACK_TRAN_SUM_N,
MAQ_SUM_CHIP_TRAN_SUM_N,
MAQ_SUM_PAY_PASS_TRAN_SUM_N,
from PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG2D;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-26 17:11:40.707 Z,2025-08-26 17:54:58.348 Z
126.583983,49.897184282541,8647044358144,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_TRAIN_FDT_card_merc_catg_tran_prfl_agg2d as
(WITH date_series AS (
    SELECT DISTINCT
        tran_d
    FROM
        PRD_P01_DMN_FRAUMD.lcl.cust_tran_prfl
    where    
        tran_d between '2025-03-01' and '2025-07-01'
    order by tran_d
),
hourly_data AS (
    SELECT
        card_i,
        merc_catg_c,
        tran_d,
        TRAN_CNT_Q,
        UPST_APRD_TRAN_CNT_Q,
        UPST_DCLN_TRAN_CNT_Q,
        RULE_DCLN_TRAN_CNT_Q,
        FINL_APRD_TRAN_CNT_Q,
        TRAN_SUM_N,
        UPST_APRD_TRAN_SUM_N,
        FINL_APRD_TRAN_SUM_N,
        FDP_RULE_TRIG_CNT_Q,
        DOMS_TRAN_CNT_Q,
        OSEA_TRAN_CNT_Q,
        DOMS_TRAN_SUM_N,
        OSEA_TRAN_SUM_N,
        CARD_NOT_PRES_TRAN_CNT_Q,
        ""3DS_TRAN_CNT_Q"",
        N3D_TRAN_CNT_Q,
        CARD_NOT_PRES_TRAN_SUM_N,
        ""3DS_TRAN_SUM_N"",
        N3D_TRAN_SUM_N,
        CARD_PRES_TRAN_CNT_Q,
        ATM_TRAN_CNT_Q,
        FALL_BACK_TRAN_CNT_Q,
        CHIP_TRAN_CNT_Q,
        PAY_PASS_TRAN_CNT_Q,
        CARD_PRES_TRAN_SUM_N,
        ATM_TRAN_SUM_N,
        FALL_BACK_TRAN_SUM_N,
        CHIP_TRAN_SUM_N,
        PAY_PASS_TRAN_SUM_N,
        CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        CUV_FRAU_RULE_PUSH_SENT_F,
        CUV_RULE_PUSH_SENT_F
    FROM
        PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL
    where    
        tran_d between '2025-03-01' and '2025-07-01'
),
all_dates AS (
    SELECT
        card_i,
        merc_catg_c,
        ds.tran_d
    FROM
        (SELECT DISTINCT card_i, merc_catg_c FROM PRD_P01_DMN_FRAUMD.lcl.CARD_MERC_CATG_TRAN_PRFL where tran_d between '2025-03-01' and '2025-07-01') ca
    CROSS JOIN date_series ds
),
daily_data AS (
    SELECT
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d) AS activity_day,
        COALESCE(SUM(hd.TRAN_CNT_Q), 0) AS DAILY_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_CNT_Q), 0) AS DAILY_UPST_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.TRAN_SUM_N), 0) AS DAILY_TRAN_SUM_N,
        COALESCE(SUM(hd.UPST_DCLN_TRAN_CNT_Q), 0) AS DAILY_UPST_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.RULE_DCLN_TRAN_CNT_Q), 0) AS DAILY_RULE_DCLN_TRAN_CNT_Q,
        COALESCE(SUM(hd.FINL_APRD_TRAN_CNT_Q), 0) AS DAILY_FINL_APRD_TRAN_CNT_Q,
        COALESCE(SUM(hd.UPST_APRD_TRAN_SUM_N), 0) AS DAILY_UPST_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FINL_APRD_TRAN_SUM_N), 0) AS DAILY_FINL_APRD_TRAN_SUM_N,
        COALESCE(SUM(hd.FDP_RULE_TRIG_CNT_Q), 0) AS DAILY_FDP_RULE_TRIG_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_CNT_Q), 0) AS DAILY_DOMS_TRAN_CNT_Q,
        COALESCE(SUM(hd.OSEA_TRAN_CNT_Q), 0) AS DAILY_OSEA_TRAN_CNT_Q,
        COALESCE(SUM(hd.DOMS_TRAN_SUM_N), 0) AS DAILY_DOMS_TRAN_SUM_N,
        COALESCE(SUM(hd.OSEA_TRAN_SUM_N), 0) AS DAILY_OSEA_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_NOT_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.""3DS_TRAN_CNT_Q""), 0) AS DAILY_3DS_TRAN_CNT_Q,
        COALESCE(SUM(hd.N3D_TRAN_CNT_Q), 0) AS DAILY_N3D_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_NOT_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_NOT_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.""3DS_TRAN_SUM_N""), 0) AS DAILY_3DS_TRAN_SUM_N,
        COALESCE(SUM(hd.N3D_TRAN_SUM_N), 0) AS DAILY_N3D_TRAN_SUM_N,
        COALESCE(SUM(hd.CARD_PRES_TRAN_CNT_Q), 0) AS DAILY_CARD_PRES_TRAN_CNT_Q,
        COALESCE(SUM(hd.ATM_TRAN_CNT_Q), 0) AS DAILY_ATM_TRAN_CNT_Q,
        COALESCE(SUM(hd.FALL_BACK_TRAN_CNT_Q), 0) AS DAILY_FALL_BACK_TRAN_CNT_Q,
        COALESCE(SUM(hd.CHIP_TRAN_CNT_Q), 0) AS DAILY_CHIP_TRAN_CNT_Q,
        COALESCE(SUM(hd.PAY_PASS_TRAN_CNT_Q), 0) AS DAILY_PAY_PASS_TRAN_CNT_Q,
        COALESCE(SUM(hd.CARD_PRES_TRAN_SUM_N), 0) AS DAILY_CARD_PRES_TRAN_SUM_N,
        COALESCE(SUM(hd.ATM_TRAN_SUM_N), 0) AS DAILY_ATM_TRAN_SUM_N,
        COALESCE(SUM(hd.FALL_BACK_TRAN_SUM_N), 0) AS DAILY_FALL_BACK_TRAN_SUM_N,
        COALESCE(SUM(hd.CHIP_TRAN_SUM_N), 0) AS DAILY_CHIP_TRAN_SUM_N,
        COALESCE(SUM(hd.PAY_PASS_TRAN_SUM_N), 0) AS DAILY_PAY_PASS_TRAN_SUM_N,
        COALESCE(MAX(hd.CUV_HIGH_RISK_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_FRAU_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_FRAU_RULE_PUSH_SENT_F,
        COALESCE(MAX(hd.CUV_RULE_PUSH_SENT_F), 0) AS DAILY_CUV_RULE_PUSH_SENT_F
    FROM
        all_dates ad
    LEFT JOIN hourly_data hd
    ON ad.card_i = hd.card_i AND ad.merc_catg_c = hd.merc_catg_c AND ad.tran_d = hd.tran_d
    GROUP BY
        ad.card_i,
        ad.merc_catg_c,
        DATE_TRUNC('day', ad.tran_d)
),
aggregated_data AS (
    SELECT
        card_i,
        merc_catg_c,
        activity_day AS window_start_date,
        SUM(DAILY_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_CNT_Q,
        SUM(DAILY_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_TRAN_SUM_N,
        SUM(DAILY_UPST_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
        SUM(DAILY_RULE_DCLN_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
        SUM(DAILY_FINL_APRD_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_CNT_Q,
        SUM(DAILY_UPST_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_UPST_APRD_TRAN_SUM_N,
        SUM(DAILY_FINL_APRD_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FINL_APRD_TRAN_SUM_N,
        SUM(DAILY_FDP_RULE_TRIG_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FDP_RULE_TRIG_CNT_Q,
        SUM(DAILY_DOMS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_CNT_Q,
        SUM(DAILY_OSEA_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_CNT_Q,
        SUM(DAILY_DOMS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_DOMS_TRAN_SUM_N,
        SUM(DAILY_OSEA_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_OSEA_TRAN_SUM_N,
        SUM(DAILY_CARD_NOT_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
        SUM(DAILY_3DS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_CNT_Q,
        SUM(DAILY_N3D_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_CNT_Q,
        SUM(DAILY_CARD_NOT_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
        SUM(DAILY_3DS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_3DS_TRAN_SUM_N,
        SUM(DAILY_N3D_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_N3D_TRAN_SUM_N,
        SUM(DAILY_CARD_PRES_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_CNT_Q,
        SUM(DAILY_ATM_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_CNT_Q,
        SUM(DAILY_FALL_BACK_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_CNT_Q,
        SUM(DAILY_CHIP_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_CNT_Q,
        SUM(DAILY_PAY_PASS_TRAN_CNT_Q) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_CNT_Q,
        SUM(DAILY_CARD_PRES_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CARD_PRES_TRAN_SUM_N,
        SUM(DAILY_ATM_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_ATM_TRAN_SUM_N,
        SUM(DAILY_FALL_BACK_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_FALL_BACK_TRAN_SUM_N,
        SUM(DAILY_CHIP_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_CHIP_TRAN_SUM_N,
        SUM(DAILY_PAY_PASS_TRAN_SUM_N) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_SUM_PAY_PASS_TRAN_SUM_N,
        MAX(DAILY_CUV_HIGH_RISK_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_FRAU_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
        MAX(DAILY_CUV_RULE_PUSH_SENT_F) OVER (PARTITION BY card_i, merc_catg_c ORDER BY activity_day ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) AS CMC_MAX_CUV_RULE_PUSH_SENT_F
    FROM
        daily_data
)
SELECT
    card_i, --as chl_id_card_num,
    merc_catg_c,
    window_start_date,
    -- window_start_date + INTERVAL '2 days' AS window_end_date,
    CMC_SUM_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_CNT_Q,
    CMC_SUM_TRAN_SUM_N,
    CMC_SUM_UPST_DCLN_TRAN_CNT_Q,
    CMC_SUM_RULE_DCLN_TRAN_CNT_Q,
    CMC_SUM_FINL_APRD_TRAN_CNT_Q,
    CMC_SUM_UPST_APRD_TRAN_SUM_N,
    CMC_SUM_FINL_APRD_TRAN_SUM_N,
    CMC_SUM_FDP_RULE_TRIG_CNT_Q,
    CMC_SUM_DOMS_TRAN_CNT_Q,
    CMC_SUM_OSEA_TRAN_CNT_Q,
    CMC_SUM_DOMS_TRAN_SUM_N,
    CMC_SUM_OSEA_TRAN_SUM_N,
    CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q,
    CMC_SUM_3DS_TRAN_CNT_Q,
    CMC_SUM_N3D_TRAN_CNT_Q,
    CMC_SUM_CARD_NOT_PRES_TRAN_SUM_N,
    CMC_SUM_3DS_TRAN_SUM_N,
    CMC_SUM_N3D_TRAN_SUM_N,
    CMC_SUM_CARD_PRES_TRAN_CNT_Q,
    CMC_SUM_ATM_TRAN_CNT_Q,
    CMC_SUM_FALL_BACK_TRAN_CNT_Q,
    CMC_SUM_CHIP_TRAN_CNT_Q,
    CMC_SUM_PAY_PASS_TRAN_CNT_Q,
    CMC_SUM_CARD_PRES_TRAN_SUM_N,
    CMC_SUM_ATM_TRAN_SUM_N,
    CMC_SUM_FALL_BACK_TRAN_SUM_N,
    CMC_SUM_CHIP_TRAN_SUM_N,
    CMC_SUM_PAY_PASS_TRAN_SUM_N,
    CMC_MAX_CUV_HIGH_RISK_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_FRAU_RULE_PUSH_SENT_F,
    CMC_MAX_CUV_RULE_PUSH_SENT_F
FROM
    aggregated_data
ORDER BY
    card_i,
    merc_catg_c,
    window_start_date);",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-25 15:54:35.494 Z,2025-08-25 18:01:10.533 Z
49.016533,0.000000000000,37705,0,"execute streamlit ""PRD_P01_DMN_FRAUMD"".""LABMLFRD"".""HF6LQX9C1ZU__PGH""()",WANGC34,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-02 04:25:35.222 Z,2025-09-02 05:14:36.214 Z
36.073683,11280.717887610197,0,0,"SELECT TOP 100
    -- Retro output
    retr.*,

    -- Cards transaction
    TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066 AS TRAN_I,
    tran.SSX_CUST_NUM, -- CIF
    tran.CHL_ID_CARD_NUM, --Card number
    tran.CHL_CT_TERM_OWNER_ID, --merchant ID
    tran.CHL_CT_ACQ_ID -- acquirer ID
FROM
    PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_RETRO_SCORES retr
LEFT JOIN
    FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT tran
ON 
    retr.TRAN_IDNN_BK = TO_NUMBER(tran.DTL_EX_0_N_064)||tran.DTL_EX_0_N_065||tran.DTL_EX_0_N_066
          
",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-09-01 04:04:19.162 Z,2025-09-01 04:40:23.583 Z
59.535150,687.776755005121,32921157632,0,"CREATE OR REPLACE temporary TABLE transx AS 
select  
b.FRAUDTYPE
,b.DETECTION
,b.case_detection
,TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(a.dtl_ex_0_n_064 || a.dtl_ex_0_n_065 || a.dtl_ex_0_n_066) as TRAN_ID
,ssx_cust_num AS XQO_CUST_NUM
,chl_id_ob_userid AS HQO_OB_USERID
,TRY_TO_NUMBER(tgx_tran_amt, 38, 2) as TRAN_AMT
,TRY_TO_NUMBER(_A_CUSTOMER_AGE, 38, 2) as _A_CUSTOMER_AGE
,TRY_TO_NUMBER(_L_SE_SCORE, 38, 2) as _L_SE_SCORE
,TRY_TO_NUMBER(_L_BC_SCORE, 38, 2) as _L_BC_SCORE
,TRY_TO_NUMBER(dtl_ex_0_n_034, 38, 4) as CERBERUS_SCORE
,TGX_BANK_NAME
,TGX_BANK_NUM
,TGX_BRANCH_ID
,TGX_ACCT_NUM
,TGX_NAME
,dtl_ex_1_5s_01     /* task id */
,dtl_ex_0_i_002 as FTP_ind
/* BC risk factors */
,_L_FLAT_PHONE
,_L_IS_RAT
,_L_IS_MOB_RAT
,_L_IS_RCNT_RAT
,_l_rat_in_sess
,_L_PREV_RAT_DT
,_L_FIRST_RAT_DT
,_L_IS_MOB_RAT_DT
,_L_SESS_CNT_MOB_SDK
,_L_DPI_CHANGE 
,_L_NEW_DEV
,_L_RARE_SCRN_SZ
,_L_scrn_res_anom
,_l_lrg_dist_known_loc
,_L_NEW_BROWSER
,_L_NEW_DESKTOP_USER
,_L_IS_ACTIVE_CALL 
,_L_IS_LONG_SESS
,_L_NEW_MOB_BROWSER_USER
,_L_DEV_CHANGE_ANOM
,_L_TZONE_MISMATCH  
,_L_ADV_KEY_COMBO
,_L_IP_CNTRY_CODE
,_L_NEW_IP
,_L_RISKY_IP
,_L_RISKY_ISP
,_i_all_logons_fdt
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_n_client_details_view, 38, 2), '1960-01-01 00:00:00'::timestamp) as _n_client_details_view
,TRY_TO_NUMBER(_A_CAPP_LOGON_CNT_1, 38, 2) as _A_CAPP_LOGON_CNT_1 /* capp login counts within last 24 hours, 2 is between 24 and 48 hours etc */
,TRY_TO_NUMBER(_A_NB_LOGONS_CNT_1, 38, 2) as _A_NB_LOGONS_CNT_1
,_A_TELSTRA_API_EVENT_ID /* this is task id e.g.C513B  */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_TELSTRA_API_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _A_TELSTRA_API_EVENT_DT
,COALESCE(NULLIF(_A_TELSTRA_CALL_DURATION, ''), 0) / 60 as _A_TELSTRA_CALL_DURATION /* in minutes */
,_a_telstra_active_call 
-- trust 
,_l_trust_1000 
,_l_trust_900
,_L_PUSH_API_1
,_L_PUSH_API_2
,_L_PUSH_API_3
,_L_PUSH_API_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_1, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_1
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_2, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_2
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_3, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_3
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_L_PUSH_API_DT_4, 38, 2), '1960-01-01 00:00:00') as _L_PUSH_API_DT_4
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_RST_PSWD_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_RST_PSWD_DT /* reset password date */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_CLIENT_IDTO_PW, 38, 2), '1960-01-01 00:00:00') as _N_CLIENT_IDTO_PW
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_CSE_MOD_MOB_DT, 38, 2), '1960-01-01 00:00:00') as _A_CSE_MOD_MOB_DT
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_PHONE_CHG_ALL, 38, 2), '1960-01-01 00:00:00') as _A_PHONE_CHG_ALL /*mobile phone number change date*/
/* scam p indicators and dates */
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP5_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP5_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP5_MLW_IND, 38, 2) as _N_SCAMP5_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP6_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP6_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP6_MLW_IND, 38, 2) as _N_SCAMP6_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP7_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP7_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP7_MLW_IND, 38, 2) as _N_SCAMP7_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP1_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP1_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP1_MLW_IND, 38, 2) as _N_SCAMP1_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP2_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP2_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP2_MLW_IND, 38, 2) as _N_SCAMP2_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP3_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP3_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP3_MLW_IND, 38, 2) as _N_SCAMP3_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP4_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP4_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP4_MLW_IND, 38, 2) as _N_SCAMP4_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_SCAMP_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_SCAMP_MLW_DT
,TRY_TO_NUMBER(_N_SCAMP_MLW_IND, 38, 2) as _N_SCAMP_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_A_SCAMP20_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _A_SCAMP20_MLW_DT
,TRY_TO_NUMBER(_A_SCAMP20_MLW_IND, 38, 2) as _A_SCAMP20_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P21_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P21_MLW_DT
,TRY_TO_NUMBER(_N_M100_P21_MLW_IND, 38, 2) as _N_M100_P21_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P22_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P22_MLW_DT
,TRY_TO_NUMBER(_N_M100_P22_MLW_IND, 38, 2) as _N_M100_P22_MLW_IND
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_M100_P23_MLW_DT, 38, 2), '1960-01-01 00:00:00') as _N_M100_P23_MLW_DT
,TRY_TO_NUMBER(_N_M100_P23_MLW_IND, 38, 2) as _N_M100_P23_MLW_IND
/* CAPP rego */
,TRY_TO_NUMBER(_N_BC_NCRG_ATO_SCORE, 38, 2) as _N_BC_NCRG_ATO_SCORE
,TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_BC_NCRG_EVENT_DT, 38, 2), '1960-01-01 00:00:00') as _N_BC_NCRG_EVENT_DT
from        LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a
left join   PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b
on          a.dtl_ex_0_20s_001 = b.rua_20byte_string_001
    where   mid_event_ts >= '20250701'
    AND     mid_event_ts < '20250825'
order by    TRANSACTIONDATETIME;",WANGC34,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-09-01 01:27:59.380 Z,2025-09-01 02:27:31.489 Z
44.739133,100.347337007523,129864,0,"create or replace table PRD_P01_DMN_FRAUMD.labmlfrd.techds_sai_csr_it5_7day_20250911064113_scored as
(
select
tran_id,
-- dtl_ca_client_amt,
-- ssx_cust_num,
PRD_P01_DMN_FRAUMD.LABMLFRD.CARDS_SCAMS_RETRO_TEST_SAI_MOJO('modelname=pipeline_it5_F2_xval_7day_all_redmojsiz_20250911064113.mojo', 
array_construct(
TRANSACTION_HOUR, DTL_CA_CLIENT_AMT, _C_CC_GBL_N3D_1D_CNT_1, _C_CRD_SAFE_MERCHANT, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CLIENT_COUNTRY_CNT_3, _A_CUSTOMER_AGE, _A_NPP_FTP_SUM, _A_CUST_SUM_AAA_LONG, _L_DEV_FAM_AGE, _A_NPP_INB_PMT_VAL, _A_CLIENT_COUNTRY_CNT_2, _A_PROF_CAPP_DEVICE_CNT_1, _A_CRD_SCAM_SUPP_7D_SUM_1, _L_UID_AGE, _L_SCORE_2, _L_BC_SESS_CNT, _A_CC_CASH_ADVANCE_AMT, _A_P_L_1, _L_PMT_AMT, _A_CLIENT_COUNTRY_CNT_7, _L_MUID_AGE_PER_USER, _L_CUST_SCAMRISK_SCORE, _L_MAX_30D_SCORE, _L_SCRN_H, _A_P_L_C, _A_CUST_AVG_ACCT_BAL, _L_SESS_CNT_MOB_SDK, _L_TOTAL_SESS_CNT, _A_CURR_CAPP_DEVICE_NFTP_CNT, _A_CLIENT_COUNTRY_CNT_5, _L_SCM_RSK_SCR_2, _L_BC_SCORE, _L_DAYS_LST_DEV_AND, _A_PROF_CAPP_DEVICE_CNT_3, _A_CLIENT_COUNTRY_CNT_6, _A_BTS_BCH_SUM, _A_BTS_CUST_AGE, _A_CURR_NB_BROWSER_CNT, _A_PREV_CAPP_DEVICE_CNT, _L_CNTRY_AGE, _A_MULTI_CNT, _A_PROF_CAPP_DEVICE_NFTP_1, _L_SESS_CNT_WEB, _L_IP_AGE, _A_CLC_FTP_AMT, _A_CRYPTO_MNTHLY_SUM, _L_SESS_CNT_MOB_BROWSER, _A_P_L_3, _A_LIST_RL1_SCAM_CUST_CIF, _A_VPN_VPS_IP_LOGON_COUNT, _L_PUSH_API_1, _L_PUSH_API_2, _A_LATEST_NCRG_ISP, CHL_CT_TERM_OWNER_NAME, _C_CNP_MER_NM_CURR, DTL_EX_3_80S_002, _A_MRISK_FOREIGN_IP_CNTRY_CODE, DTL_CA_AUTH_SYS_DEC, CHL_CT_MER_MCC, ATH_PC_CUST_PRESENT, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, GENDER, CC_CNT, FA_1, NO_1, GOVT_BENE, CORP_EMPL, MAR_STS_ORG_STR, HOME_OWN, _A_CC_DT_DIFF, _A_CIF_ESTABLISH_DT_DIFF, _A_ECV_DOCUMENT_DT_DIFF, _L_PUSH_API_DT_1_DIFF, _L_PUSH_API_DT_2_DIFF, _L_PUSH_API_DT_3_DIFF, CMA_SUM_TRAN_SUM_N, CMA_SUM_UPST_DCLN_TRAN_CNT_Q, CMA_SUM_RULE_DCLN_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_CNT_Q, CMA_SUM_FINL_APRD_TRAN_SUM_N, CMA_SUM_FDP_RULE_TRIG_CNT_Q, CMA_SUM_OSEA_TRAN_CNT_Q, CMA_SUM_DOMS_TRAN_SUM_N, CMA_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMA_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMA_SUM_CARD_NOT_PRES_TRAN_SUM_N, CMA_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMA_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMA_SUM_CARD_PRES_TRAN_CNT_Q, CMA_SUM_CARD_PRES_TRAN_SUM_N, CMA_SUM_PAY_PASS_TRAN_SUM_N, CMC_SUM_UPST_APRD_TRAN_CNT_Q, CMC_SUM_TRAN_SUM_N, CMC_SUM_UPST_DCLN_TRAN_CNT_Q, CMC_SUM_RULE_DCLN_TRAN_CNT_Q, CMC_SUM_FINL_APRD_TRAN_CNT_Q, CMC_SUM_UPST_APRD_TRAN_SUM_N, CMC_SUM_FINL_APRD_TRAN_SUM_N, CMC_SUM_FDP_RULE_TRIG_CNT_Q, CMC_SUM_DOMS_TRAN_CNT_Q, CMC_SUM_DOMS_TRAN_SUM_N, CMC_SUM_OSEA_TRAN_SUM_N, CMC_SUM_CARD_NOT_PRES_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, CMC_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, CMC_SUM_SECU_PCOL_DABL_TRAN_SUM_N, CMC_SUM_CARD_PRES_TRAN_CNT_Q, CMC_SUM_CARD_PRES_TRAN_SUM_N, CMC_SUM_PAY_PASS_TRAN_SUM_N, MAQ_SUM_UPST_APRD_TRAN_CNT_Q, MAQ_SUM_TRAN_SUM_N, MAQ_SUM_UPST_DCLN_TRAN_CNT_Q, MAQ_SUM_RULE_DCLN_TRAN_CNT_Q, MAQ_SUM_FINL_APRD_TRAN_CNT_Q, MAQ_SUM_UPST_APRD_TRAN_SUM_N, MAQ_SUM_FINL_APRD_TRAN_SUM_N, MAQ_SUM_FDP_RULE_TRIG_CNT_Q, MAQ_SUM_DOMS_TRAN_CNT_Q, MAQ_SUM_CARD_NOT_PRES_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_DABL_TRAN_CNT_Q, MAQ_SUM_SECU_PCOL_ENBL_TRAN_SUM_N, MAQ_SUM_SECU_PCOL_DABL_TRAN_SUM_N, MAQ_SUM_CARD_PRES_TRAN_CNT_Q, MAQ_SUM_PAY_PASS_TRAN_CNT_Q, MAQ_SUM_CARD_PRES_TRAN_SUM_N, MAQ_SUM_CHIP_TRAN_SUM_N, MAQ_SUM_PAY_PASS_TRAN_SUM_N
)) as target_0
-- 1 - try_to_double(target_0) as target_1
from 
PRD_P01_DMN_FRAUMD.labmlfrd.TECHDS_SAI_CARDS_SCAMS_RETRO_20250825_FDT_AGG7D_OOT
)
;",SAIKIRKA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-15 03:14:56.390 Z,2025-09-15 03:59:40.738 Z
44.940217,11212.583100594581,920770654208,0,"CREATE OR REPLACE TABLE LABMLFRD.CARD_TRAN_FPF AS (
-- -- INSERT INTO LABMLFRD.CARD_TRAN_PRFL (
    WITH TRAN AS (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS TRAN_I
            , TO_CHAR(SSX_CUST_NUM) AS CUST_I
        	, CHL_ID_CARD_NUM AS CARD_I
        	, DTL_EX_0_20S_004 AS DPAN_I
            , TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') AS TRAN_S
            , TRY_TO_DATE(TTS_TRAN_DATE_ALT, 'YYYYMMDD') AS TRAN_D
            , CAST(SUBSTR(TTS_TRAN_TIME_ALT,1,2) AS INT) AS TRAN_HOUR_T
            , UPPER(TO_CHAR(TO_DATE(TTS_TRAN_DATE_ALT, 'YYYYMMDD'), 'DY')) AS TRAN_DAY_X
        	, CASE WHEN CHL_CT_MEDIA = 'V' THEN 1 ELSE 0 END AS TOKN_F
            , TRY_TO_DATE(ATH_PC_CARD_EXP_DATE, 'YYYYMMDD') AS CARD_EXPY_D
            , CASE WHEN CHL_CT_WHICH_CARD IN (1,0) THEN 1 ELSE 0 END AS PRIM_CAHD_F
        	, DTL_CA_CLIENT_AMT AS TRAN_AMT_N
        	, ATH_PC_POS AS POS_ENTR_C
            , CASE WHEN DTL_CA_REVERSAL_IND = 'N' THEN 0 ELSE 1 END AS REVS_INDA_F
            , CASE WHEN ATH_PC_PIN_VRFY = 'V' THEN 0 ELSE 1 END AS PIN_VRFY_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'C' THEN 1 ELSE 0 END AS PAIN_CUST_F
        	, CASE WHEN SUBSTR(DTL_EX_0_10S_002,1,1) = 'M' THEN 1 ELSE 0 END AS PAIN_MERC_F
        	, CASE WHEN DTL_EX_0_I_022 = 'R' THEN 1 ELSE 0 END AS RCRR_F
        	, DTL_EX_0_3S_002 AS SECU_LEVL_INDA_C
            , SUBSTR(DTL_EX_3_80S_003,1,2) AS ACCT_AUTT_V
            , CASE WHEN ATH_PC_POS IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_NOT_PRES_INDA_F
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS ""3DS_INDA_F""
            , CASE WHEN CARD_NOT_PRES_INDA_F = 1 AND DTL_EX_0_3S_002 NOT IN ('005','006','05','06','211','212','242','911','912') THEN 1 ELSE 0 END AS N3D_INDA_F
            , CASE WHEN ATH_PC_POS NOT IN ('00','01','81','8E','8F','10','96') THEN 1 ELSE 0 END AS CARD_PRES_INDA_F
            , CASE WHEN CARD_PRES_INDA_F = '1' AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS ATM_TRAN_F
            , CASE WHEN POS_ENTR_C IN ('62','79','80') AND CHL_CT_MER_MCC = '6011' THEN 1 ELSE 0 END AS FALL_BACK_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '05' THEN 1 ELSE 0 END AS CHIP_TRAN_INDA_F
            , CASE WHEN POS_ENTR_C = '07' THEN 1 ELSE 0 END AS PAY_PASS_TRAN_INDA_F
        	, REPLACE(DTL_CA_AUTH_SYS_DEC,' ','') AS UPST_DCDE_C
        	, REPLACE(DTL_CA_AUTH_SYS_INFO,' ','') AS UPST_REAS_C
            , REPLACE(RSP_ACTION_CODE,' ','') AS FINL_DCDE_C
            , DTL_EX_0_2S_002
            , DTL_EX_3_80S_002
            , ATH_PC_CUST_PRESENT
            , CASE WHEN UPST_DCDE_C = '1' AND FINL_DCDE_C != '1' THEN 1 ELSE 0 END AS RULE_DCLN_F
        	, CASE WHEN FINL_DCDE_C = '1' THEN 1 ELSE 0 END AS FINL_APRD_TRAN_CNT_F
        	, CASE WHEN UPST_REAS_C IN ('20','21','22','81','BE') THEN 1 ELSE 0 END  AS INCO_EXPY_F
        	, CASE WHEN UPST_REAS_C IN ('30','31','34','36','41','42','43','44','45','46','47') THEN 1 ELSE 0 END AS INCO_CVVA_F
        	, CASE WHEN UPST_REAS_C IN ('11','12','CP','MP','PE','PM') THEN 1 ELSE 0 END AS INCO_PIN_F
        	, CASE WHEN UPST_REAS_C IN ('T7','CL','87','88','89','90','98') THEN 1 ELSE 0 END AS OVER_LIMT_DCLN_F /* $ OVER LIMIT, DELINQUANT OR TRASACTION LIMIT */
            
            , CHL_CT_ACQ_ID AS ACQR_I
        	, CHL_CT_TERM_OWNER_ID AS MERC_I
        	, REPLACE(CHL_CT_TERM_OWNER_NAME,' ','') AS MERC_M
        	, CHL_CT_TERM_ID AS MERC_TRML_I
        	, CHL_CT_TERM_CNTRY_CODE AS CNTY_C
        	, CHL_CT_MER_MCC AS MERC_CATG_C
            , CASE WHEN CHL_CT_TERM_CNTRY_CODE = '036' THEN 1 ELSE 0 END AS DOMS_TRAN_INDA_F

        	-- , RSP_EX_2_8S_002 AS FDP_CARD_PRFL_X
         --    , SUBSTR(RSP_EX_2_8S_001,1,5) AS FDP_RULE_TRIG_X
         --    , SUBSTR(RSP_EX_2_8S_004,1,1) AS FDP_RULE_PUSH_TYPE_F
        	-- , SUBSTR(RSP_EX_2_8S_002,8,1) AS PUSH_EXIT_C
         --    , CASE WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='1' AND RSP_EX_2_I_009='2' THEN '1WP_REG'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='2' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_DEV'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='3' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_DEV'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='4' AND RSP_EX_2_I_009='2' THEN '1WP_DMGD_CARD'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='5' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_DEV'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='A' AND RSP_EX_2_I_009='5' THEN 'REG_2WP_CIF'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='B' AND RSP_EX_2_I_009='5' THEN '5X_2WP_APVD_CIF'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='G' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_CIF'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='H' AND RSP_EX_2_I_009='5' THEN '5X_2WP_DEC_DEV'
         --    	WHEN SUBSTR(RSP_EX_2_8S_004,1,1)='I' AND RSP_EX_2_I_009='5' THEN 'HR_2WP_CIF'
         --    	ELSE 'NO_PUSH' END AS PUSH_TYPE_QLFY_X
         
            , CASE WHEN DTL_EX_3_8S_004 = '' THEN NULL ELSE TO_NUMBER(DTL_EX_3_8S_004) END AS MCRD_SCOR_N
            , dtl_ex_0_n_029 AS H2O_CNPv1_SCOR_N
            , dtl_ex_0_n_034 AS H2O_CNPv2_SCOR_N,

            -- numerical UV columns, if missing then -1 as default
            _C_CC_GBL_N3D_1D_CNT_1,
            _C_CC_CNP_VEL_6HR_SUM_1,
            _C_CRD_APAY_SUM_1,
            _C_CRD_SAFE_MERCHANT,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_CC_CNP_LTRANS_6HR_COUNT_1,
            _C_CC_CNP_VEL_6HR_COUNT_1,
            _L_CITY_AGE,
            _A_CRD_NPP_PAYMENT_AMOUNT,
            _A_CLIENT_COUNTRY_CNT_3,
            _A_CUSTOMER_AGE,
            _A_CLIENT_COUNTRY_CNT_10,
            _A_NPP_FTP_SUM,
            _L_PASTE_IN_LOGIN_CNT,
            _A_CUST_SUM_AAA_LONG,
            _L_G_CON_DEV,
            _L_DEV_FAM_AGE,
            _L_TOUCH_CNT,
            _B_RECIP_SUM_AAA_LONG,
            _L_RISKY_KEY_COMBO,
            _A_C_G,
            _L_SCORE_4,
            _A_E,
            _A_NPP_INB_PMT_VAL,
            _A_CLIENT_COUNTRY_CNT_2,
            _A_PROF_CAPP_DEVICE_CNT_1,
            _A_CRD_SCAM_SUPP_7D_SUM_1,
            _A_CLIENT_CITY_CNT_2,
            _L_UID_AGE,
            _L_SCRN_W,
            _L_ASN_AGE,
            _L_SCORE_2,
            _A_CUST_NPP_OUT_SUM_AAA_5,
            _L_BC_SESS_CNT,
            _L_ACC_AMT_1H,
            _A_LIST_WL_SCAM_DRIVE_LICENSE,
            _A_CC_CASH_ADVANCE_AMT,
            _A_CUST_SUM_AAA_SHORT,
            _A_P_L_1,
            _L_PMT_AMT,
            _L_ISP_AGE,
            _L_ACC_AMT_7D,
            _A_CLIENT_COUNTRY_CNT_7,
            _L_CONCURRENT_SESS,
            _A_CAPP_HCE_CNT_1,
            _L_SCORE_5,
            _L_MUID_AGE_PER_USER,
            _A_CUST_ACCT_BAL,
            _L_CUST_SCAMRISK_SCORE,
            _A_ATM_WITHDRAWAL_SUM_AMT,
            _L_TAP_CNT,
            _A_LIST_WL_SCAM_TP_IP,
            _L_MAX_30D_SCORE,
            _B_RECIP_SUM_AAA_1,
            _X_CIF_SENDER_SUM,
            _L_M_L_1,
            _L_SCRN_H,
            _A_CUST_NPP_OUT_SUM_AAA_2,
            _A_CUST_ACTION_IND,
            _A_P_L_C,
            _A_CUST_AVG_ACCT_BAL,
            _l_and_id_age,
            _X_CIF_REC_SUM,
            _L_SESS_CNT_MOB_SDK,
            _L_TOTAL_SESS_CNT,
            _A_CURR_CAPP_DEVICE_NFTP_CNT,
            _L_NC_ACCT_NUM_NAME_CONF,
            _A_CLIENT_COUNTRY_CNT_5,
            _A_U,
            _B_RECIP_SUM_AAA_7,
            _L_SCM_RSK_SCR_2,
            _B_RECIP_SUM_AAA_4,
            _L_BC_SCORE,
            _L_DAYS_LST_DEV_AND,
            _A_PROF_CAPP_DEVICE_CNT_3,
            _L_DAYS_LST_DEV_IOS,
            _X_LAST_N_TXN_COUNT,
            _A_T,
            _A_CUST_NPP_IN_SUM_AAA_2,
            _L_MINS_LST_LGN_CAPPED,
            _L_ACC_AMT_2H,
            _L_ACC_AMT_4H,
            _A_LIST_BL_PASSPORT,
            _A_LIST_WL_SCAM_PASSPORT,
            _A_LIST_BL_SCAM_PASSPORT,
            _B_RECIP_SUM_AAA_6,
            _A_PROF_CAPP_DEVICE_CNT_2,
            _A_CLIENT_COUNTRY_CNT_6,
            _A_BTS_BCH_SUM,
            _A_BTS_CUST_AGE,
            _A_CURR_CAPP_DEVICE_CNT,
            _A_CURR_NB_BROWSER_CNT,
            _A_PREV_CAPP_DEVICE_CNT,
            _A_Q,
            _A_R,
            _L_CNTRY_AGE,
            _A_NPP_IN_UNRELATED_SUM_24_1,
            _X_FT_OVER5K_RECIP_CNT,
            _X_CIF_RECIPIENT_NEW_CNT,
            _A_NPP_IN_UNRELATED_SUM_24_2,
            _B_NPP_OUT_SUM_1,
            _L_ACC_AMT_1D,
            _A_TRANSPORT_REG_CNT_1,
            _A_MULTI_CNT,
            _L_M_L_4,
            _A_PROF_CAPP_DEVICE_NFTP_1,
            _X_NAME_MATCH_CNT,
            _A_PROF_CAPP_DEVICE_CNT_5,
            _A_PROF_CAPP_DEVICE_CNT_4,
            _L_SESS_CNT_WEB,
            _B_RECIP_SUM_AAA_2,
            _L_M_L_C,
            _L_TIME_ZONE,
            _A_CUST_NPP_IN_SUM_AAA_1,
            _L_IP_AGE,
            _A_NPP_INBOUND_SUM_AMT,
            _X_FT_OVER5K_RECIP_SUM,
            _X_CIF_SENDER_CNT,
            _A_NB_LOGONS_CNT_2,
            _A_CLC_FTP_AMT,
            _L_TRVL_SPD,
            _B_RECIP_SUM_LONG,
            _A_CRYPTO_MNTHLY_SUM,
            _A_GL_TRF_ACC_BAL,
            _L_SESS_CNT_MOB_BROWSER,
            _L_SCORE_3,
            _A_CRD_CRYPTO_PROC_FLG,
            _B_NPP_OUT_CNT_2,
            _A_NPP_OUT_CNT_2,
            _A_SCH_AMT,
            _A_P_L_3,
            _B_NPP_OUT_FTP_SUM_1,
            _L_SDID_CNT_1,
            _A_CUST_NPP_OUT_SUM_AAA_LONG,
            _A_LIST_RL1_SCAM_CUST_CIF,
            _L_NUM_SESS_2H,
            _A_VPN_VPS_IP_LOGON_COUNT,
            _A_GEO_DISTANCE,
            _X_NAME_MATCH_IND,
            _A_NB_LOGONS_CNT_3,
            _L_DAYS_LST_DEV_JS,
            _A_FTP_SUM_1,
            _L_NUM_SESS_4H,
            _L_NC_MATCH_NAME_CONF,
            _B_RECIP_SUM_AAA_5,
            _L_DPI_CHANGE,
            _B_RECIP_SUM_1,
            _A_SCAM_RISKY_MCC_PRELEAD_AMT,
            _L_M_L_3,
            _X_CIF_REC_CNT,
            _A_LIST_BL_SCAM_TP_IP,

            _A_LIST_BL_SCAM_DRIVE_LICENSE,
            _B_RECIP_SUM_AAA_SHORT,
            _L_CLIPB_EVENT_CNT,
            _B_LIST_RL1_SCAM_TP_CIF,
            _B_NPP_BLACKLIST_RECIP_FLAG,

            -- categorical UV columns
            _A_CIF_ESTABLISH_CHANNEL,-- customer established channel (if = 'O' then it's electronic)
            _A_ECV_DOCUMENT_IP,
            _A_CUST_OS_VER,
            _A_CUST_OS_NAME,
            _A_2WAY_TYPE,
            _A_CLIENT_CITY_10,
            _L_PUSH_API_1,
            _L_PUSH_API_2,
            _L_PUSH_API_3,
            _L_PUSH_API_4,
            _A_CLIENT_CITY_6,
            _L_NC_WINNING_ALG,
            _L_PROXY_TYPE,
            _L_LANG_3,
            _L_LANG_1,
            _L_LANG_2,
            _L_NC_RESPONSE_CODE,
            _A_PROF_RISK_IND,
            _A_LATEST_NCRG_ISP,
            _A_MRISK_FOREIGN_IP_CNTRY_CODE,
            _A_CIF_ESTABLISH_CUST_PCODE,
        
            -- features extracted from fingerprints data
            case when substr(_L_FINGERPRINT_1, 1, 1) in ('P', 'O') then substr(_L_FINGERPRINT_1, 1, 1) else NULL end as PARTY_TYPE, -- ""P"" for personal, ""O"" for organisations,
            case when substr(_L_FINGERPRINT_1, 2, 1) in ('M', 'F') then substr(_L_FINGERPRINT_1, 2, 1) else NULL end as GENDER, -- M or F
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 3, 1)) AS DMC_CNT, -- count of scheme debit cards
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 4, 1)) AS YCS_CNT, -- count of travel money cards    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 5, 1)) AS TRAN_CNT, -- count of personal txn accts   
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 6, 1)) AS DPST_CNT, -- count of money management accounts    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 7, 1)) AS CC_CNT, -- count of credit cards    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 8, 1)) AS TRD_CNT, -- count of trading accounts    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 9, 1)) AS PL_CNT, -- count of personal loan accounts 
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 10, 1)) AS INVST_CNT, -- count of investment accounts 
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 11, 1)) AS MORT_CNT, -- count of mortgage accounts 
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 12, 1)) AS INSRNC_CNT, -- count of insurance accounts 
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 13, 1)) AS BTA_CNT, -- count of business txn accounts    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 14, 1)) AS BUS_LN_CNT, -- count of business loans    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 15, 1)) AS OTH_CNT, -- count of other accounts    

            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 16, 1)) as NTBNK_FAC, -- 1/0 indicator whether the customer has a netbank facility
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_1, 17, 1)) as REL_MNG, -- indicates whether the customer is relationship managed    
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 1, 2)) as FA_1, -- 1st known foreign association   
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 3, 2)) as FA_2, -- 2nd known foreign association    
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 5, 2)) as NO_1, -- name association 1  
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 7, 2)) as NO_2, -- name association 2  
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 11, 2)) as FA, -- foreign address    
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_2, 13, 2)) as FP, -- foreign phone number 
            -- TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 1, 1)) as GOVT_BENE, -- government benefits code    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 2, 1)) as PRVT_CUST, -- private customer flag    
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 3, 1)) as HL_ASOC, -- any association with a home loan
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 4, 1)) as CORP_EMPL, -- employed by large corporate
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 6, 1)) as TRUSTEE, -- trustee flag/part of a trust fund
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 16, 1)) as INTL_STU, -- international student flag
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 12, 1)) as MAR_STS_ORG_STR, -- marital status/business structure (person/org diff)
            TRY_TO_NUMBER(substr(_L_FINGERPRINT_3, 13, 1)) as EMPL_CLAS_LGL_STS, -- employment classification or org status
            TRY_TO_NUMBER(SUBSTR(_L_FINGERPRINT_3, 14, 1)) as HOME_OWN, -- home ownership status
            
            -- time differences
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_x_npp_out_sum_date AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) AS _x_npp_out_sum_date_diff,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CC_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CC_DT_DIFF, -- customer recent credit card application datetime
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_ONLINE_PL_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_ONLINE_PL_DT_DIFF, -- customer recent personal loan application datetime
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CIF_ESTABLISH_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CIF_ESTABLISH_DT_DIFF, -- when the customer is established
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_a_ecv_document_dt AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _a_ecv_document_dt_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_AUTO_DEC_CP_PP_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_AUTO_DEC_CP_PP_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_CAPP_NOTIFY_OPT_OUT_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_CAPP_NOTIFY_OPT_OUT_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP1_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP1_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP2_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP2_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP5_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP5_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_A_SCAMP7_MLW_DT AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _A_SCAMP7_MLW_DT_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_1 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_1_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_2 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_2_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_3 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_3_DIFF,
            COALESCE(datediff('hour', TIMESTAMPADD(SECOND, CAST(_L_PUSH_API_DT_4 AS FLOAT), '1960-01-01 00:00:00'), TRAN_S), -1) as _L_PUSH_API_DT_4_DIFF,

            /* H2O UVS NOT ALREADY LISTED ABOVE */
            _c_cc_n3d_ovs_975_sum_1,
            dtl_ex_0_n_009,
            _c_crd_n3d_score_sum_1,
            _c_cc_ind_tran_3d,
            dtl_ex_3_8s_007,
            ssa_c_bal,
            _c_cc_n3d_dom_999_cnt_1,
            _c_crd_apay_cnt_1,
            _c_crd_cnp_trn_cnt_1,
            dtl_ca_auth_sys_info,
            _c_crd_cnp_trn_cnt_5,
            _c_cc_recov_trans_sum_1,
            _c_cc_high_vel_apple_sum_1,
            _c_crd_cnp_trn_sum_1,
            _c_crd_all_trn_cnt_2,
            _c_n3d_merc_id_sum_1,
            _c_cc_tran_account_bin,
            chl_ct_mer_mcc,
            _c_n3d_merc_id_sum_2,
            _c_os_retail_keyed_cnt_1,
            _c_n3d_merc_id_1,
            chl_ct_ch_post_code,
            ssa_c_cash_limit,
            dtl_ca_client_tran_type,
            _c_n3d_merc_id_2,
            _c_crd_cnp_trn_cnt_2,
            _c_cc_gbl_n3d_cnt_2,
            _c_crd_cnp_trn_sum_3,
            _c_crd_cnp_trn_sum_2,
            _c_cc_cnp_vel_6hr_count_2,
            _c_n3d_merc_id_sum_3,
            _c_crd_cnp_trn_sum_4,
            _c_cc_sfw_microsoft_cnt_1,
            _c_vul_velo_cnp_sum_1,
            _a_all_bpay_acct_sum_3,
            _a_capp_logon_cnt_3,
            _a_client_branch_1,
            _a_client_country_1,
            _a_client_country_cnt_1,
            _a_client_postcode_cnt_2,
            _a_curr_capp_device_os,
            _a_devcie_geo_long_avg_incl,
            _a_fire_ct,
            _a_joint_acct_num_1,
            _a_open_ml_suppress_prob_scr,
            _a_open_ml_suppress_raw_scr,
            _a_sso_capp_netbank_cnt,
            _c_apay_dpan_cnt_1,
            _c_cc_cnp_ltrans_6hr_count_4,
            _c_cc_gbl_n3d_cnt_1,
            _c_cc_gbl_n3d_sum_2,
            _c_cc_ind_card_credit,
            _c_cc_ind_mer_domestic,
            _c_cc_list_ind_p03,
            _c_cc_payment_amount,
            _c_cc_recov_trans_cnt_1,
            _c_crd_all_trn_sum_1,
            _c_crd_all_trn_sum_2,
            _c_crd_cnp_trn_cnt_4,
            _c_crd_dom_cnp_hv_sum_1,
            _c_crd_n3d_visa_score_sum_1,
            _c_crd_n3d_visa_score_sum_2,
            _c_crd_n3d_visa_score_sum_dt,
            _c_mdes_dpan_2,
            _c_n3d_merc_id_3,
            _c_n3d_merc_id_7,
            _c_n3d_merc_id_sum_4,
            _c_n3d_merc_id_sum_5,
            _c_n3d_merc_id_sum_6,
            _c_n3d_merc_id_sum_9,
            ssa_c_open_to_buy,
            ssa_acct_num,
            chl_ct_acq_cntry_code,
            rsp_score_3,
            dtl_ca_client_amt,
            dtl_ca_merch_amt
            
        FROM 
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
        WHERE
            TTS_TRAN_DATE >= TO_CHAR($END_D-90,'YYYYMMDD')
            AND TTS_TRAN_DATE <= TO_CHAR($END_D,'YYYYMMDD')
            
            AND HDR_ACTIVITY_TYPE = 'CA'
            AND SSX_CUST_NUM != ''
            AND CHL_ID_CARD_NUM != ''
    )
    -- , CUST_TRAN_PRFL AS (
    -- SELECT 
    --     CUST_I

    --     -- Digital events
    --     , CAPP_PSWD_CHNG_CNT_Q
    -- 	, CAPP_PSWD_CHNG_LAST_S
    -- 	, CAPP_DVIC_REGR_CNT_Q
    -- 	, CAPP_DVIC_REGR_LAST_S
    -- 	, CAPP_LOGN_CNT_Q
    -- 	, CAPP_LOGN_LAST_S
    -- 	, NTB_LOGN_CNT_Q
    -- 	, NTB_LOGN_LAST_S
    -- 	, VIEW_CARD_DETL_CNT_Q
    -- 	, VIEW_CARD_DETL_LAST_S
    -- FROM
    --     LCL.CUST_TRAN_PRFL
    -- WHERE
    --     CUST_I IN (SELECT CUST_I FROM TRAN)
    -- )
    --  -- Analyst declined disputed transactions
    -- , CONFIRMED_FPF AS (
    --     SELECT
    --         b.DSPT_CASE_I
    --         , b.DSPT_CASE_EVNT_I
    --         , b.DSPT_CASE_CRAT_S
    --         , b.DSPT_TRAN_I
    --         , a.TRAN_ID
    --         , 1 AS FPF_INDA_F
    --     FROM 
    --         LABMLFRD.CARD_TRAN_GROS_FRAU a
    --     LEFT JOIN
    --         LABMLFRD.CARD_TRAN_DAIS_DSPT b
    --     ON
    --         a.TRAN_ID=b.TRAN_I
    --     WHERE 
    --         a.OUTCOME IN ('Resolved-CLOSED: INVEST DECLINE')
    --         AND b.DSPT_TRAN_DCDE_X IN ('Fraud Referral','Customer Liable')
    -- )
    , LABELS AS (
        SELECT 
            CUST_I,
            TRAN_I,
            PEGA_CASENUMBER,
            DSPT_CASE_I,
            MIN(FPF_INDA_F) AS FPF_INDA_F
        FROM (
            -- STP
            SELECT DISTINCT
                CUST_I,
                TRAN_I, 
                '' AS PEGA_CASENUMBER,
                DSPT_CASE_I,
                '9' AS FPF_INDA_F
            FROM LABMLFRD.CARD_TRAN_DAIS_DSPT
            WHERE UPPER(DSPT_TRAN_DCDE_X) LIKE ANY ('%CHARGE%OFF%','%CHARGEBACK%','%WRITE%OFF%')
                AND DSPT_SRCE_SYST_M != 'GS'
                AND TRAN_I IS NOT NULL
                AND CUST_I IS NOT NULL
            UNION ALL
            -- Analyst declined
            SELECT DISTINCT
                COALESCE(TO_CHAR(a.SSX_CUST_NUM),b.CUST_I) AS CUST_I,
                a.TRAN_ID AS TRAN_I,
                PEGA_CASENUMBER,
                DSPT_CASE_I,
                '1' AS FPF_INDA_F
            FROM LABMLFRD.CARD_TRAN_GROS_FRAU a
            LEFT JOIN LABMLFRD.CARD_TRAN_DAIS_DSPT b ON a.TRAN_ID=b.TRAN_I
            WHERE CUST_I IS NOT NULL
                AND UPPER(A.OUTCOME) LIKE ('%CLOSED%INVEST%DECLINE%')
                AND UPPER(b.DSPT_TRAN_DCDE_X) LIKE ANY ('%FRAUD%REFERRAL%','%CUSTOMER%LIABLE%')
                AND b.TRAN_I IS NOT NULL
        )
        GROUP BY ALL 
    )
    , FRAUD_TRANS AS (
        SELECT
            *
        FROM (
            SELECT TRAN_ID AS TRAN_I
            FROM LABMLFRD.CARD_TRAN_GROS_FRAU
            WHERE TRAN_I IS NOT NULL
            UNION ALL
            SELECT TRAN_I
            FROM LABMLFRD.CARD_TRAN_DAIS_DSPT
            WHERE TRAN_I IS NOT NULL
        )
        WHERE 
            TRAN_I NOT IN (SELECT TRAN_I FROM LABELS)
    )   
    -- Daisy case information
    , DNA_CASE AS (
    SELECT 
        a.PATY_I
        
        , COUNT(DISTINCT a.DSPT_CASE_I) AS DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , SUM(a.DSPT_CASE_TRAN_Q) AS DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , SUM(a.TOTL_TRAN_AND_FEE_A) AS DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , COUNT(DISTINCT CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , SUM(CASE WHEN a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , COUNT(DISTINCT CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , SUM(CASE WHEN b.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL THEN a.TOTL_TRAN_AND_FEE_A  ELSE 0 END) AS DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-30) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , COUNT(DISTINCT CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_I END) AS DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.DSPT_CASE_TRAN_Q ELSE 0 END) AS DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , SUM(CASE WHEN c.DSPT_CASE_I IS NOT NULL AND a.DSPT_CASE_CRAT_S >= TO_TIMESTAMP($END_D-90) THEN a.TOTL_TRAN_AND_FEE_A ELSE 0 END) AS DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
    FROM 
        (SELECT DISTINCT
            PATY_I
            , DSPT_CASE_I
            , DSPT_CASE_EVNT_I
            , DSPT_CASE_CRAT_S
            , DSPT_CASE_TRAN_Q
            , TOTL_TRAN_AND_FEE_A
        FROM
            CNS.OMN_BV_RBS_SVRQ_DSPT_CASE_DETL
        WHERE
            DSPT_TYPE_C = 'DT1'
        QUALIFY 
            ROW_NUMBER() OVER (PARTITION BY DSPT_CASE_I ORDER BY DSPT_CASE_EVNT_I DESC)=1
        ) a
    LEFT JOIN
        (SELECT DISTINCT DSPT_CASE_I 
        FROM LABELS WHERE FPF_INDA_F='1') b
    ON 
        a.DSPT_CASE_I = b.DSPT_CASE_I
    LEFT JOIN 
        (SELECT DISTINCT DSPT_CASE_I 
        FROM LABELS WHERE FPF_INDA_F='9') c
    ON
        a.DSPT_CASE_I = c.DSPT_CASE_I
    GROUP BY
        a.PATY_I
    )
    -- Output
    SELECT DISTINCT
    	a.* -- Transaction info, including UVs (e.g. WPR rego date, etc)

        , dai.DNA_CASE_CNT_Q -- Count of DNA disputes raised total
        , dai.DNA_TRAN_CNT_Q -- Count of DNA transactions raised total
        , dai.DNA_TRAN_SUM_A -- Sum of DNA disputes raised total
        
        , dai.DNA_CASE_CNT_LAST_30D_Q -- Count of DNAs raised in last 30 days
        , dai.DNA_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised in last 30 days
        , dai.DNA_CASE_SUM_LAST_30D_A -- Sum of DNAs raised in last 30 days

        , dai.DNA_CASE_CNT_LAST_90D_Q -- Count of DNAs raised in last 90 days
        , dai.DNA_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised in last 90 days
        , dai.DNA_CASE_SUM_LAST_90D_A -- Sum of DNAs raised in last 90 days
        
        , dai.DNA_DCLN_CASE_CNT_Q -- Count of DNAs raised and declined
        , dai.DNA_DCLN_TRAN_CNT_Q -- Count of DNA transactions raised and declined
        , dai.DNA_DCLN_CASE_SUM_A -- Sum of DNAs raised and declined
        
        , dai.DNA_DCLN_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and declined in last 30 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and declined in the last 30 days
        , dai.DNA_DCLN_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and declined in last 30 days
        
        , dai.DNA_DCLN_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and declined in last 90 days
        , dai.DNA_DCLN_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and declined in the last 90 days
        , dai.DNA_DCLN_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and declined in last 90 days

        , dai.DNA_APRD_CASE_CNT_Q -- Count of DNAs raised and auto-approved
        , dai.DNA_APRD_TRAN_CNT_Q -- Count of DNA transactions raised and auto-approved
        , dai.DNA_APRD_CASE_SUM_A -- Sum of DNAs raised and auto-approved
        
        , dai.DNA_APRD_CASE_CNT_LAST_30D_Q -- Count of DNAs raised and auto-approved in last 30 days
        , dai.DNA_APRD_TRAN_CNT_LAST_30D_Q -- Count of DNA transactions raised and auto-approved in the last 30 days
        , dai.DNA_APRD_CASE_SUM_LAST_30D_A -- Sum of DNAs raised and auto-approved in last 30 days
        
        , dai.DNA_APRD_CASE_CNT_LAST_90D_Q -- Count of DNAs raised and auto-approved in last 90 days
        , dai.DNA_APRD_TRAN_CNT_LAST_90D_Q -- Count of DNA transactions raised and auto-approved in the last 90 days
        , dai.DNA_APRD_CASE_SUM_LAST_90D_A -- Sum of DNAs raised and auto-approved in last 90 days
        
        , IFNULL(fpf.FPF_INDA_F,'0') AS FPF_INDA_F
        , CASE WHEN frd.TRAN_I IS NOT NULL THEN 1 ELSE 0 END AS FRAUDTAG
        
    FROM
    	TRAN a
    LEFT JOIN 
        DNA_CASE dai
    ON 
        a.CUST_I = dai.PATY_I
    LEFT JOIN
        LABELS fpf
    ON
        a.TRAN_I = fpf.TRAN_I
    LEFT JOIN
        FRAUD_TRANS frd
    ON
        a.TRAN_I = frd.TRAN_I
)
;",THORPNA,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-15 06:07:32.626 Z,2025-09-15 06:52:29.039 Z
59.425733,3258.343372821808,0,0,"select *, CASE
    WHEN b.FRAUDTYPE = 'OFI' THEN 1
    ELSE 0
  END AS target,
  dtl_ex_0_n_064,
  dtl_ex_0_n_065,
  dtl_ex_0_n_066
FROM PRD_P01_DMN_FRAUMD.LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT a left JOIN 
PRD_P01_DMN_FRAUMD.LABMLFRD.DTL_FRAUDMASTER b ON a.dtl_ex_0_n_064 = b.rua_numeric_064 and a.dtl_ex_0_n_065 = b.rua_numeric_065 and 
a.dtl_ex_0_n_066 = b.rua_numeric_066
WHERE
  a.TTS_TRAN_DATE_ALT between 20250715 and 20250801
  AND NOT a.DTL_EX_0_20S_001 IS NULL 
  -- and a.hdr_source = 'NPP INB'
  and a.ssx_cust_num <> 'Not Available';",LEEJ78,R_DAC_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_001,X-Large,SUCCESS,2025-08-21 04:42:36.904 Z,2025-08-21 05:42:02.448 Z
79.573333,0.007329210639,0,0,"SELECT  *  FROM ( SELECT ""RULE_PREFIX"" FROM ( SELECT substring(""RULE_NAME"", 1, 3) AS ""RULE_PREFIX"" FROM ( SELECT ""RULE_NAME"" FROM ( SELECT ""RULE_NAME"" FROM LABMLFRD.TBL_DIM_MULTI_RULE_FIRE_VW2) GROUP BY ""RULE_NAME"")) GROUP BY ""RULE_PREFIX"") LIMIT 100",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-19 02:39:27.451 Z,2025-08-19 03:59:01.851 Z
80.815267,0.007329210639,0,0,"SELECT  *  FROM ( SELECT ""RULE_PREFIX"" FROM ( SELECT substring(""RULE_NAME"", 1, 3) AS ""RULE_PREFIX"" FROM LABMLFRD.TBL_DIM_MULTI_RULE_FIRE_VW2) GROUP BY ""RULE_PREFIX"") LIMIT 100",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-19 02:38:12.961 Z,2025-08-19 03:59:01.877 Z
33.542517,519.957743330858,143765532672,0,"WITH code1_data AS (
    SELECT DISTINCT
--         TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
-- (dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID,
-- TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d,
-- TO_DATE(SUBSTR(mid_event_ts, 1, 8), 'YYYYMMDD') as evnt_d,
-- TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D,
-- CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I,
-- CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK,

TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME
,(dtl_ex_0_n_064 || dtl_ex_0_n_065 || dtl_ex_0_n_066) as TRAN_ID
,TO_DATE(MID_EVENT_TS, 'YYYYMMDDHH24MISSFF') as SSX_SNAP_D
        ,CONCAT(TGX_BANK_NUM,'~',TGX_BRANCH_ID,'~',TGX_ACCT_NUM) AS RCPI_ACCT_I
        ,CONCAT('SAP~PT~+', LPAD(SSX_CUST_NUM, 10, 0)) as SSX_PATY_IDNN_BK
        ,TO_DATE(SUBSTR(TTS_TRAN_DATE_ALT, 1, 8), 'YYYYMMDD') AS tran_d
-- ,tts_tran_date_alt
-- ,tts_tran_time_alt
,dtl_ex_0_20s_001
-- ,dtl_ex_1_5s_01
,SSX_CUST_NUM
,COALESCE(TRY_TO_NUMBER(tgx_tran_amt, 38, 2), -1) as TRAN_AMT
,COALESCE(TRY_TO_NUMBER(_l_max_30d_score, 38, 2), -1) as _L_MAX_30D_SCORE
,COALESCE(TRY_TO_NUMBER(_l_bc_score, 38, 2), -1) as _L_BC_SCORE
,COALESCE(TRY_TO_NUMBER(_l_max_30d_mule_score, 38, 2), -1) as _L_MAX_30D_MULE_SCORE

,COALESCE(TRY_TO_NUMBER(_l_adv_key_combo, 38, 2), -1) as _L_ADV_KEY_COMBO
,COALESCE(TRY_TO_NUMBER(_l_clpbrd_evnt, 38, 2), -1) as _L_CLPBRD_EVNT
,COALESCE(TRY_TO_NUMBER(_l_concurrent_sess, 38, 2), -1) as _L_CONCURRENT_SESS
,COALESCE(TRY_TO_NUMBER(_l_export_data, 38, 2), -1) as _L_EXPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_import_data, 38, 2), -1) as _L_IMPORT_DATA
,COALESCE(TRY_TO_NUMBER(_l_rat_in_sess, 38, 2), -1) as _L_RAT_IN_SESS
,COALESCE(TRY_TO_NUMBER(_l_is_rcnt_hrisk_sess, 38, 2), -1) as _L_IS_RCNT_HRISK_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_lrg_dist_known_loc, 38, 2), -1) as _L_LRG_DIST_KNOWN_LOC -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_rare_scrn_sz, 38, 2), -1) as _L_RARE_SCRN_SZ -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_risky_isp, 38, 2), -1) as _L_RISKY_ISP
--,COALESCE(TRY_TO_NUMBER(_l_tzone_mismatch, 38, 2), -1) as _L_TZONE_MISMATCH
,COALESCE(TRY_TO_NUMBER(_l_scrn_broadcast, 38, 2), -1) as _L_SCRN_BROADCAST
,COALESCE(TRY_TO_NUMBER(_l_delay_to_input_pi, 38, 2), -1) as _L_DELAY_TO_INPUT_PI
,COALESCE(TRY_TO_NUMBER(_l_active_spoofing, 38, 2), -1) as _L_ACTIVE_SPOOFING
,COALESCE(TRY_TO_NUMBER(_l_pmt_vloc_anom, 38, 2), -1) as _L_PMT_VLOC_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_rcnt_hi_scr_on_dev, 38, 2), -1) as _L_RCNT_HI_SCR_ON_DEV -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_accum_amt_anom, 38, 2), -1) as _L_ACCUM_AMT_ANOM
-- ,COALESCE(TRY_TO_NUMBER(_l_is_active_call, 38, 2), -1) as _L_IS_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_is_long_sess, 38, 2), -1) as _L_IS_LONG_SESS
-- ,COALESCE(TRY_TO_NUMBER(_l_type_patterns_anomaly, 38, 2), -1) as _L_TYPE_PATTERNS_ANOMALY -- Not in feature list
--,COALESCE(TRY_TO_NUMBER(_l_seg_typing_pi, 38, 2), -1) as _L_SEG_TYPING_PI
,COALESCE(TRY_TO_NUMBER(_L_TRUST_900, 38, 2), -1) as _L_TRUST_900
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_1000, 38, 2), -1) as _L_TRUST_1000 -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_NEW_PAYEE, 38, 2), -1) as _L_TRUST_NEW_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_UNUSED_PAYEE, 38, 2), -1) as _L_TRUST_UNUSED_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_HIGH_VLOC_IN, 38, 2), -1) as _L_TRUST_PAYEE_HIGH_VLOC_IN -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_L_TRUST_PAYEE_DORM_ACCT, 38, 2), -1) as _L_TRUST_PAYEE_DORM_ACCT
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYEE
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_ATO_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_ATO_AS_PAYER
,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYEE
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_SES_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_SES_AS_PAYER -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYEE, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYEE -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_L_TRUST_RCNT_HI_MS_AS_PAYER, 38, 2), -1) as _L_TRUST_RCNT_HI_MS_AS_PAYER -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_l_cust_scamrisk_score, 38, 2), -1) as _L_CUST_SCAMRISK_SCORE
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_short, 38, 2), -1) as _B_RECIP_SUM_SHORT
,COALESCE(TRY_TO_NUMBER(_b_recip_sum_long, 38, 2), -1) as _B_RECIP_SUM_LONG
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_short, 38, 2), -1) as _B_RECIP_FTP_CNT_SHORT -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_b_recip_ftp_cnt_long, 38, 2), -1) as _B_RECIP_FTP_CNT_LONG -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_customer_age, 38, 2), -1) as _A_CUSTOMER_AGE
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_short, 38, 2), -1) as _A_CUST_SUM_AAA_SHORT
,COALESCE(TRY_TO_NUMBER(_a_cust_sum_aaa_long, 38, 2), -1) as _A_CUST_SUM_AAA_LONG
,COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_cnt_7, 38, 2),0) as FTP_CNT_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_ftp_sum_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_3, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_4, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_5, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_6, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_ftp_sum_7, 38, 2),0) as FTP_SUM_7DAYS
,COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_nb_logons_cnt_3, 38, 2),0) as NB_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_1, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_2, 38, 2),0) +
COALESCE(TRY_TO_NUMBER(_a_capp_logon_cnt_3, 38, 2),0) as CAPP_LOGONS_CNT_3M
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_sum, 38, 2),0) as _X_CIF_RECIPIENT_NEW_SUM,
------------------
-- Keep other columns as VARCHAR (mostly text)
--,COALESCE(CAST(_A_CAPP_REGO_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IND,
COALESCE(CAST(_A_CUST_LINK_SUM_AAA_3 AS VARCHAR(50)), '-1') as _A_CUST_LINK_SUM_AAA_3,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_3,
COALESCE(CAST(_A_CAPP_REGO_1D_IND AS VARCHAR(50)), '-1') as _A_CAPP_REGO_1D_IND,
COALESCE(CAST(_L_PMT_AMT AS VARCHAR(50)), '-1') as _L_PMT_AMT,
-- ,COALESCE(CAST(_A_ACCT_AGG_FLAG AS VARCHAR(50)), '-1') as _A_ACCT_AGG_FLAG -- Not in feature list
COALESCE(CAST(_X_NPP_OUT_SUM_DATE AS VARCHAR(50)), '-1') as _X_NPP_OUT_SUM_DATE,
COALESCE(CAST(_B_NB_HRISK_BILLER_SUM_1 AS VARCHAR(50)), '-1') as _B_NB_HRISK_BILLER_SUM_1,
COALESCE(CAST(_L_ACC_AMT_1D AS VARCHAR(50)), '-1') as _L_ACC_AMT_1D,
COALESCE(CAST(_L_SCORE_3 AS VARCHAR(50)), '-1') as _L_SCORE_3,
COALESCE(CAST(_B_RECIP_SUM_AAA_6 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_6,
COALESCE(CAST(_A_CLIENT_CITY_7 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_7,
COALESCE(CAST(_L_ACC_AMT_1H AS VARCHAR(50)), '-1') as _L_ACC_AMT_1H,
COALESCE(CAST(_A_BTS_WDL_SUM_LONG AS VARCHAR(50)), '-1') as _A_BTS_WDL_SUM_LONG,
COALESCE(CAST(_L_SCORE_4 AS VARCHAR(50)), '-1') as _L_SCORE_4,
-- ,COALESCE(CAST(_B_RECIP_SUM_1 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_1 -- Not in feature list
COALESCE(CAST(_L_NEW_PAYEE_PER_USER AS VARCHAR(50)), '-1') as _L_NEW_PAYEE_PER_USER,
COALESCE(CAST(_A_CLIENT_CITY_2 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_2,
COALESCE(CAST(_L_BC_SESS_CNT AS VARCHAR(50)), '-1') as _L_BC_SESS_CNT,
COALESCE(CAST(_A_CSE_CHG_DWL_NEW_AMT AS VARCHAR(50)), '-1') as _A_CSE_CHG_DWL_NEW_AMT,
COALESCE(CAST(_A_CLIENT_CITY_1 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_1,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_5 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_5,
COALESCE(CAST(_L_MINS_LST_LGN_CAPPED AS VARCHAR(50)), '-1') as _L_MINS_LST_LGN_CAPPED,
COALESCE(CAST(_B_RECIP_SUM_AAA_7 AS VARCHAR(50)), '-1') as _B_RECIP_SUM_AAA_7,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_2 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_2,
COALESCE(CAST(_A_CLIENT_CITY_10 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_10,
COALESCE(CAST(_L_NUM_SESS_2H AS VARCHAR(50)), '-1') as _L_NUM_SESS_2H,
-- ,COALESCE(CAST(_L_NEW_PAYEE AS VARCHAR(50)), '-1') as _L_NEW_PAYEE -- Not in feature list
COALESCE(CAST(_N_CUST_TXN_COUNT AS VARCHAR(50)), '-1') as _N_CUST_TXN_COUNT,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_3 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_3,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_1,
-- ,COALESCE(CAST(_A_CURR_CAPP_DEVICE_VENDOR AS VARCHAR(100)), '-1') as _A_CURR_CAPP_DEVICE_VENDOR -- Not in feature list
COALESCE(CAST(_A_NPP_FTP_SUM2 AS VARCHAR(50)), '-1') as _A_NPP_FTP_SUM2,
COALESCE(CAST(_A_CLIENT_CITY_6 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_6,
COALESCE(CAST(_B_CLIENT_POSTCODE_CNT_1 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_CNT_1,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_NFTP_CNT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_NFTP_CNT,
COALESCE(CAST(_A_NPP_OUT_SUM_1 AS VARCHAR(50)), '-1') as _A_NPP_OUT_SUM_1,
COALESCE(CAST(_A_CLIENT_CITY_8 AS VARCHAR(100)), '-1') as _A_CLIENT_CITY_8,
COALESCE(CAST(_N_CRYPTO_RECIPIENT_CNT AS VARCHAR(50)), '-1') as _N_CRYPTO_RECIPIENT_CNT,
COALESCE(CAST(_N_H_2 AS VARCHAR(50)), '-1') as _N_H_2,
COALESCE(CAST(_A_GEO_DISTANCE AS VARCHAR(50)), '-1') as _A_GEO_DISTANCE,
COALESCE(CAST(_N_CAPP_LOGONS_CNT_1 AS VARCHAR(50)), '-1') as _N_CAPP_LOGONS_CNT_1,
COALESCE(CAST(_N_CAPP_LINKED_CNT_2 AS VARCHAR(50)), '-1') as _N_CAPP_LINKED_CNT_2,
COALESCE(CAST(_B_CLIENT_POSTCODE_SUM_4 AS VARCHAR(50)), '-1') as _B_CLIENT_POSTCODE_SUM_4,
COALESCE(CAST(_X_CIF_REC_SUM AS VARCHAR(50)), '-1') as _X_CIF_REC_SUM,
COALESCE(CAST(_L_M_L_C AS VARCHAR(50)), '-1') as _L_M_L_C,
COALESCE(CAST(_A_MULTI_CNT AS VARCHAR(50)), '-1') as _A_MULTI_CNT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_NFTP_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_NFTP_3,
COALESCE(CAST(_N_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_3 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_3,
COALESCE(CAST(_N_RP_SES_IP_1 AS VARCHAR(50)), '-1') as _N_RP_SES_IP_1,
COALESCE(CAST(_A_CAPP_REGO_IP_COUNTRY AS VARCHAR(50)), '-1') as _A_CAPP_REGO_IP_COUNTRY,
COALESCE(CAST(_A_CUST_STATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_CUST_STATE_IP_ACTIVITY,
COALESCE(CAST(_A_LOGON_NB_IP_CNTRY AS VARCHAR(50)), '-1') as _A_LOGON_NB_IP_CNTRY,
COALESCE(CAST(_A_MRISK_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_MRISK_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_DEVCIE_GEO_LAT_AVG_INCL AS VARCHAR(50)), '-1') as _A_DEVCIE_GEO_LAT_AVG_INCL,
COALESCE(CAST(_N_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_N_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _N_INTERSTATE_IP_STATE,
COALESCE(CAST(_N_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_INTERSTATE_IP_STATE AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_STATE,
COALESCE(CAST(_A_INTERSTATE_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_2 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_2,
COALESCE(CAST(_A_INTERSTATE_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_INTERSTATE_IP_TASK_ID,
COALESCE(CAST(_A_IS_IP_DT_1 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_1,
COALESCE(CAST(_A_SAFE_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_SAFE_CUST_LATITUDE,
COALESCE(CAST(_A_CURR_CAPP_DEVICE_LATT AS VARCHAR(50)), '-1') as _A_CURR_CAPP_DEVICE_LATT,
COALESCE(CAST(_A_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_N_HRISK_FOREIGN_IP_ACTIVITY AS VARCHAR(50)), '-1') as _N_HRISK_FOREIGN_IP_ACTIVITY,
COALESCE(CAST(_A_IS_IP_DT_3 AS VARCHAR(50)), '-1') as _A_IS_IP_DT_3,
COALESCE(CAST(_A_CURR_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_CURR_CUST_LATITUDE,
COALESCE(CAST(_N_CLOUD_SERV_LATEST_LOGON_DT AS VARCHAR(50)), '-1') as _N_CLOUD_SERV_LATEST_LOGON_DT,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_1 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_1,
COALESCE(CAST(_A_PROF_CAPP_DEVICE_LATT_2 AS VARCHAR(50)), '-1') as _A_PROF_CAPP_DEVICE_LATT_2,
COALESCE(CAST(_A_FOREIGN_IP_TASK_ID AS VARCHAR(50)), '-1') as _A_FOREIGN_IP_TASK_ID,
COALESCE(CAST(_A_PREV_CUST_LATITUDE AS VARCHAR(50)), '-1') as _A_PREV_CUST_LATITUDE
--newly added
-- ,COALESCE(TRY_TO_NUMBER(_l_risky_key_combo, 38, 2), -1) as _L_RISKY_KEY_COMBO -- Not in feature list
-- ,COALESCE(TRY_TO_NUMBER(_l_keyb_nav_anom, 38, 2), -1) as _L_KEYB_NAV_ANOM -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_x_cif_recipient_new_cnt, 38, 2), -1) as _X_CIF_RECIPIENT_NEW_CNT
,COALESCE(TRY_TO_NUMBER(_x_telstra_last_call_dur, 38, 2),-1) as _X_TELSTRA_LAST_CALL_DUR
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_3, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_3
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_2, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_2
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_B_CLIENT_POSTCODE_4, '[^0-9.-]', '')), -1) as _B_CLIENT_POSTCODE_4
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_MRISK_FOREIGN_IP_CNTRY_CODE, '[^0-9.-]', '')), -1) as _A_MRISK_FOREIGN_IP_CNTRY_CODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_N_NEW_IP_LOGON_PCODE, '[^0-9.-]', '')), -1) as _N_NEW_IP_LOGON_PCODE,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_198_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_198_IP_PC,
COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(_A_LOGON_NB_IP_PC, '[^0-9.-]', '')), -1) as _A_LOGON_NB_IP_PC,
COALESCE(CAST(_X_LAST_N_TXN_COUNT AS VARCHAR(50)), '-1') as _X_LAST_N_TXN_COUNT,

COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_count, 38, 2), -1) as _A_TELSTRA_TP_OUTBND_COUNT
-- ,COALESCE(TRY_TO_NUMBER(_A_TELSTRA_TP_NUM_SP, 38, 2),-1) as _A_TELSTRA_TP_NUM_SP -- Not in feature list

-------------------
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_2, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_2
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_3, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_3
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_4, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_4
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_b_open_last_payer_cif_dt_5, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _B_OPEN_LAST_PAYER_CIF_DT_5
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_new_capp_rego_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NEW_CAPP_REGO_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cse_chg_dwl_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CSE_CHG_DWL_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_cif_establish_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CIF_ESTABLISH_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_nb_lastlogon_dt_1, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_NB_LASTLOGON_DT_1
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_curr_capp_device_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_CURR_CAPP_DEVICE_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_telstra_long_call, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_TELSTRA_LONG_CALL

,case when TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date) > '2000-01-01'::date
      then datediff('day', TIMESTAMPADD(day, TRY_TO_NUMBER(_a_crypto_last_pymnt_date, 38, 2), '1960-01-01'::date),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))
      else -1
end as _A_CRYPTO_LAST_PYMNT_DATE
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp1_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP1_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp2_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP2_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp3_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP3_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp4_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP4_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp5_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP5_MLW_DT
-- ,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
--       then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp6_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
--                    TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
--       else -1
-- end as _N_SCAMP6_MLW_DT -- Not in feature list
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp7_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP7_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp10_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP10_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp20_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP20_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_scamp21_mlw_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_SCAMP21_MLW_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p1_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P1_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p5_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P5_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_a_m100_app_p8_ind_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _A_M100_APP_P8_IND_DT
,case when TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp) > '2000-01-01 00:00:00'::timestamp_ntz
      then datediff('second', TIMESTAMPADD(second, TRY_TO_NUMBER(_n_m100_app_p9_dt, 38, 2), '1960-01-01 00:00:00'::timestamp),
                   TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF'))/86400
      else -1
end as _N_M100_APP_P9_DT

,COALESCE(TRY_TO_NUMBER(_x_telstra_max_call_dur, 38, 2),-1) as _X_TELSTRA_MAX_CALL_DUR
-- ,COALESCE(TRY_TO_NUMBER(_a_telstra_active_call,38,2), -1) as _A_TELSTRA_ACTIVE_CALL -- Not in feature list
,COALESCE(TRY_TO_NUMBER(_a_telstra_tp_outbnd_avg_dur, 38, 2),-1) as _A_TELSTRA_TP_OUTBND_AVG_DUR
,COALESCE(TRY_TO_NUMBER(_a_telstra_multi_calls,38,2),-1) as _A_TELSTRA_MULTI_CALLS
,COALESCE(TRY_TO_NUMBER(_a_crypto_mnthly_sum, 38, 2),-1) as _A_CRYPTO_MNTHLY_SUM
--,substr(_l_fingerprint_1,1,1) as PARTY_TYPE
,substr(_l_fingerprint_1,2,1) as GENDER
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,5,1),1.),-1) as TRAN_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,11,1),1.),-1) as MORT_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,13,1),1.),-1) as BUSI_TRAN_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_Fingerprint_1,3,1),1.),-1) as DMC_COUNT
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,6,1),1.),-1) as DEPOSIT_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,7,1),1.),-1) as CC_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,8,1),1.),-1) as TRADE_ACCT_COUNT
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,9,1),1.),-1) as PL_ACCT_COUNT -- Not in feature list
,substr(_l_fingerprint_2,5,2) as NAME_ORIG_ASSOC
-- ,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_1,12,1),1.),-1) as INSUR_ACCT_COUNT -- Not in feature list
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_2,1,2), '[^0-9.-]', '')), -1) as MAIN_FOREIGN_ASSOC
,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,1,1), '[^0-9.-]', '')), -1) as GOVT_BENEFITS
-- ,COALESCE(TRY_TO_NUMBER(REGEXP_REPLACE(substr(_l_fingerprint_3,2,1), '[^0-9.-]', '')), -1) as PRIV_PREM_CUST -- Not in feature list
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,12,2)),-1)/10,10) as BAL_LAST_MON
,POWER(COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_3,14,2)), -1)/10,10) as BAL_TWO_MON_AGO
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,1,3)),-1)/100) as GAMBLING_SPEND_LAST_YEAR
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,4,3)), -1)/100) as GAMBLING_SPEND_THREE_MON
,POWER(10,COALESCE(TRY_TO_NUMBER(substr(_l_fingerprint_4,7,3)), -1)/100) as GAMBLING_SPEND_ONE_MON

from        lcl.fdp_customer_transactions_send_flat
where   mid_event_ts >= '20250701'
and  mid_event_ts < '20250731'
-- and     dtl_ex_1_5s_01 in ('C205N'
							-- ,'C207N'
							-- ,'C242N'
							-- ,'C244N'
							-- ,'C246N'
							-- ,'N205N'
							-- ,'N207N'
							-- ,'N242N'
							-- ,'N244N'
							-- ,'N246N'
							-- ,'X232N'
							-- ,'X243N'
							-- ,'X246N')
and     hdr_source = 'NPP OUT'
and SSX_CUST_NUM <> ''
and SSX_CUST_NUM IS NOT NULL
and SSX_CUST_NUM <> 'Not Available'
and     tran_amt > 0
order by    transactiondatetime

),



code2_data AS (
    SELECT 
        PATY_IDNN_BK, 
        SNAP_D, 
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_30D_BPAY_TRAN_A, 16, 2),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_FOOT_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE(TRY_TO_NUMBER(DPAT_TOTL_TD_FOOT_A, 16, 2),-1)  as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A, 16, 2),-1)  as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE(TRY_TO_NUMBER(DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q, 38, 0),-1)  as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_PRSL_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(DPAT_TOTL_BUSN_TRAN_BALN_A, 16, 2),-1)  as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,38, 0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE(TRY_TO_NUMBER(AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,38,0),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,38,0),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE(TRY_TO_NUMBER(DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,38,0),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE(TRY_TO_NUMBER(DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q,38,0),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    FROM PRD_P01_DMN_CBIRBS.LCL.MLOP_FEAT_ATTR_PATY_FEAT_LTST where SNAP_D >= '2025-07-01'
    and SNAP_D < '2025-07-31'
)

SELECT 
    c1.*,
    -- Selected columns from code2
        c2.PATY_IDNN_BK, 
        c2.SNAP_D, 
        COALESCE((c2.DPAT_TOTL_DPAT_30D_BPAY_TRAN_A),-1) as DPAT_TOTL_DPAT_30D_BPAY_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_BANK_INIT_TRAN_A,
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A),-1) as DPAT_TOTL_DPAT_LAST_30D_PENS_TRAN_A,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_FOOT_A),-1) as DPAT_TOTL_PRSL_TRAN_FOOT_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_FOOT_A),-1) as DPAT_TOTL_BUSN_TRAN_FOOT_A,
-- ,COALESCE((c2.DPAT_TOTL_TD_FOOT_A),-1) as DPAT_TOTL_TD_FOOT_A -- Not in feature list
 COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A),-1) as DPAT_TOTL_DPAT_LAST_30D_AVRG_FOOT_A,
 COALESCE((c2.DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_POSV_BALN_MOVE_Q,
 --COALESCE((c2.DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q),-1) as DPAT_DPAT_LAST_30D_NEG_BALN_MOVE_Q,
 COALESCE((c2.DPAT_TOTL_PRSL_TRAN_BALN_A),-1) as DPAT_TOTL_PRSL_TRAN_BALN_A,
 COALESCE((c2.DPAT_TOTL_BUSN_TRAN_BALN_A),-1) as DPAT_TOTL_BUSN_TRAN_BALN_A,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_1,
 COALESCE((c2.AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30),-1) as AUTT_AUTN_EVNT_LOGIN_NUM_LOGIN_VIST_DAILY_30,
        --DIGT_INTA_SNAP_D,
        COALESCE((c2.DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q),-1) as DPAT_TOTL_DPAT_LAST_30D_BPY_DIGT_DR_Q,
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q),-1) as DIGT_INTA_LAST_1_30_DAY_STMT_VIEW_Q,
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HL_CALO_INTA_Q -- Not in feature list
        -- ,COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_HBAP_INTA_Q -- Not in feature list
        COALESCE((c2.DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q),-1) as DIGT_INTA_LAST_1_30_DAY_GENL_HL_INTA_Q,
        --DIGT_EVNT_SNAP_D,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_1D_PAYT_PAGE_VSIT_Q,
        COALESCE((c2.DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q),-1) as DIGT_EVNT_DETL_LAST_30D_PAYT_PAGE_VSIT_Q
    
    
FROM code1_data c1
-- LEFT JOIN recipient_data r2
-- ON c1.RCPI_ACCT_I = r2.RCPI_ACCT_ID
--Join with code2 using the NPP.SNAP_D >= RPF.SNAP_D condition
ASOF JOIN code2_data c2 
    MATCH_CONDITION(c1.SSX_SNAP_D >= c2.SNAP_D )
    ON c1.SSX_PATY_IDNN_BK = c2.PATY_IDNN_BK-- );  -- This implements NPP.SNAP_D >= RPF.SNAP_D
 ",DEHURYSK,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-26 08:01:56.271 Z,2025-08-26 08:35:28.822 Z
40.022450,12540.330526411533,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PKENGINEERING_TESTING_TNB(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250710
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-08-26 22:52:54.694 Z,2025-08-26 23:32:56.041 Z
76.272483,13950.657568819821,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_DEPLOY10_V3_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""RSP_ACTION_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_CUST_SPEND_SUM_AAA_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_CC_RECOV_TRANS_SUM_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_C_N3D_TST_CNT_1"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_AUTH_COUNT"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_Q_NON_AU_IND"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_C_CC_GBL_N3D_1D_CNT_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CC_SFW_GOOGLE_CNT_2"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""_Q_COF_DECL_CNT_DAY_1"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_L_MAX_30D_SCORE_H2O"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_L_ACC_AMT_7D"" DOUBLE, ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_C_CRD_DOM_CNP_HV_SUM_1"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""CHL_CT_TERM_OWNER_ID"" STRING(16777216), ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_A_Q"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_3"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""_A_GEO_LONG_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_2"" DOUBLE, ""_C_N3D_MERC_ID_1"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_2"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, DTL_EX_3_8S_009, _M_TOTAL_COUNT, DTL_CA_AUTH_SYS_INFO, _C_CC_GBL_N3D_SUM_1, _C_CC_GBL_N3D_CNT_1, _C_N3D_OVS_6H_SUM_1, DTL_CA_MERCH_CURR_CODE, _C_CRD_SAFE_MERCHANT, RSP_ACTION_CODE, _Q_MER_FRAUD_SCORE_CNT_6, DTL_EX_3_20S_004, _Q_KEYED_APVD_CNT_DAY_1, _A_CUST_SPEND_SUM_AAA_1, _C_N3D_MERC_ID_SUM_2, _C_CC_RECOV_TRANS_SUM_1, _A_D_D_1, ATH_PC_CUST_PRESENT, _Q_MER_FRAUD_SCORE_CNT_5, ATH_PC_ACS_REFER_CODE, _Q_MER_FRAUD_SCORE_SUM_6, _C_N3D_MERC_ID_SUM_1, _L_BC_SESS_ID, _C_N3D_TST_CNT_1, _M_FIRST_USE_DATE, _Q_AUTH_COUNT, _M_TOTAL_SUM, _C_2WAY_5X_CRD_CNT, _Q_MER_FRAUD_SCORE_CNT_3, CHL_CT_TERM_CNTRY_CODE, _A_BTS_CUST_AGE, _C_N3D_MERC_ID_SUM_3, _Q_NON_AU_IND, _A_CRD_NPP_PAYMENT_AMOUNT, _C_CC_GBL_N3D_1D_CNT_1, DTL_EX_3_80S_001, _C_CRD_VISA_MERC_SUM_1, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_2, _C_CC_SFW_GOOGLE_CNT_2, _A_D_D_3, _Q_COF_DECL_CNT_DAY_1, _A_AUS_IP_ACTIVITY, _A_BTS_CUST_DOB, _L_MAX_30D_SCORE_H2O, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _C_CC_2DAY_AMT_6, _A_D_D_2, _L_ACC_AMT_7D, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _A_PROF_CAPP_DEVICE_1, _C_CRD_DOM_CNP_HV_SUM_1, _L_BC_SCORE_H2O, _C_CC_CNP_VEL_6HR_COUNT_1, CHL_CT_TERM_OWNER_ID, _C_CC_OS_FB_CNT_3, _A_Q, _Q_MER_FRAUD_SCORE_SUM_1, _C_CRD_DOM_CNP_HV_CNT_1, _Q_MER_FRAUD_SCORE_SUM_3, _C_CRD_3D_TRN_SUM_1, _A_GEO_LONG_1, _C_CC_CNP_VEL_6HR_COUNT_2, _C_N3D_MERC_ID_1, _C_CC_GBL_N3D_CNT_2, CHL_CT_MER_MCC
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250818 and 20250820
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-19 21:45:01.335 Z,2025-08-19 23:01:17.684 Z
76.446917,14155.784625038505,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D012_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_CNP_LTRANS_6HR_COUNT_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_4"" DOUBLE, ""DTL_EX_2_ENTITY_ID_6"" STRING(16777216), ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""DTL_CA_CLIENT_TRAN_TYPE"" STRING(16777216), ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_M_TOTAL_COUNT"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_A_U"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_CC_2DAY_VEL_6"" DOUBLE, ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CRD_CNP_TRN_SUM_3"" DOUBLE, ""_A_DTL_CAPP_NBANK_SSO_DT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_A_D_D_1"" DOUBLE, ""_M_MERCHANT_RETAIL_IND"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_A_GEO_LONG_1"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_A_CAPP_REGO_IP_ADDRESS"" STRING(16777216), ""_M_TOTAL_SUM_RETAIL"" DOUBLE, ""CHL_CT_CH_POST_CODE"" STRING(16777216), ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_2"" DOUBLE, ""_Q_DOM_DECL_CNT_DAY_1"" DOUBLE, ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_C_CC_2DAY_VEL_4"" DOUBLE, ""_C_CRD_3D_TRN_SUM_3"" DOUBLE, ""_C_N3D_DOM_6H_SUM_1"" DOUBLE, ""_L_SE_SCORE_5"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_CC_TRAN_ACCOUNT_BIN"" STRING(16777216), ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_Q_KEYED_DECL_CNT_DAY_1"" DOUBLE, ""_C_MDES_DPAN_CNT_CURR"" DOUBLE, ""_C_CC_SCR_ATTCK_30SEC_COUNT_2"" DOUBLE, ""_A_24H_CNP_DC_RTL_SUM_CURR_MAX"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_L_SCORE_H2O_5"" DOUBLE, ""SSA_D_AVAIL_BAL"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_UA_DEVICE_PREV_DT_4"" BIGINT, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, _C_CC_CNP_LTRANS_6HR_COUNT_1, ATH_PC_CUST_PRESENT, DTL_EX_3_8S_009, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _Q_MER_FRAUD_SCORE_CNT_5, _Q_MER_FRAUD_SCORE_SUM_6, _M_TOTAL_SUM, _C_N3D_TST_CNT_1, _Q_MER_FRAUD_SCORE_CNT_4, DTL_EX_2_ENTITY_ID_6, _C_CC_CNP_VEL_6HR_COUNT_1, DTL_CA_CLIENT_TRAN_TYPE, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_1, DTL_EX_3_80S_001, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _M_TOTAL_COUNT, CHL_CT_MER_MCC, _Q_AUTH_COUNT, _C_N3D_MERC_ID_SUM_3, _A_U, _C_N3D_MERC_ID_SUM_2, _C_N3D_MERC_ID_SUM_1, _A_BTS_CUST_AGE, _C_CC_2DAY_VEL_6, _L_MAX_30D_MULE_SCORE, _C_CRD_CNP_TRN_SUM_3, _A_DTL_CAPP_NBANK_SSO_DT, _A_PROF_CAPP_DEVICE_1, _A_D_D_1, _M_MERCHANT_RETAIL_IND, _C_CC_GBL_N3D_CNT_1, _L_BC_SESS_ID, _A_GEO_LONG_1, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CAPP_REGO_IP_ADDRESS, _M_TOTAL_SUM_RETAIL, CHL_CT_CH_POST_CODE, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _Q_MER_FRAUD_SCORE_CNT_2, _Q_DOM_DECL_CNT_DAY_1, _C_CC_2DAY_AMT_6, _C_CC_2DAY_VEL_4, _C_CRD_3D_TRN_SUM_3, _C_N3D_DOM_6H_SUM_1, _L_SE_SCORE_5, _C_2WAY_5X_CRD_CNT, _C_CC_TRAN_ACCOUNT_BIN, _C_N3D_OVS_6H_SUM_1, _Q_KEYED_DECL_CNT_DAY_1, _C_MDES_DPAN_CNT_CURR, _C_CC_SCR_ATTCK_30SEC_COUNT_2, _A_24H_CNP_DC_RTL_SUM_CURR_MAX, _Q_MER_FRAUD_SCORE_CNT_3, DTL_CA_AUTH_SYS_INFO, _L_SCORE_H2O_5, SSA_D_AVAIL_BAL
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_PREV_DT_4,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250818 and 20250820
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-19 21:45:01.334 Z,2025-08-19 23:01:28.149 Z
35.912717,13322.627589866519,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D011_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""_M_TOTAL_COUNT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""DTL_EX_3_8S_009"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""DTL_EX_3_20S_004"" STRING(16777216), ""_C_CC_GBL_N3D_SUM_1"" DOUBLE, ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_A_BTS_BIO_SE"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""_Q_KEYED_APVD_CNT_DAY_1"" DOUBLE, ""_A_D_D_1"" DOUBLE, ""DTL_EX_0_2S_002"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_3"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""_A_D_D_3"" DOUBLE, ""SSA_C_CASH_LIMIT"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_NON_AU_IND"" DOUBLE, ""_A_AUS_IP_ACTIVITY"" DOUBLE, ""_L_BC_SCORE_H2O"" DOUBLE, ""_A_BTS_CUST_DOB"" DOUBLE, ""_A_CLIENT_CITY_DATE_2"" DOUBLE, ""_Q_CRD_F2F_BIN_ATTACK_CNTRY_2"" STRING(16777216), ""_L_SDID_H2O"" STRING(16777216), ""_C_CRD_VISA_MERC_SUM_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CC_2DAY_VEL_2"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_2"" DOUBLE, ""_C_CRD_3D_TRN_SUM_1"" DOUBLE, ""ATH_PC_ACS_REFER_CODE"" STRING(16777216), ""_C_CNP_MER_NM_1"" STRING(16777216), ""_C_CNP_APL_VEL_CNT"" DOUBLE, ""_A_D_D_2"" DOUBLE, ""_C_CC_OS_FB_CNT_3"" DOUBLE, ""_L_SCORE_H2O_5"" DOUBLE, ""_C_CRD_DOM_CNP_HV_CNT_1"" DOUBLE, ""_A_CAPP_LOGON_CNT_2"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, _M_TOTAL_COUNT, _A_PROF_CAPP_DEVICE_1, DTL_CA_AUTH_SYS_INFO, _Q_AUTH_COUNT, DTL_EX_3_8S_009, DTL_CA_MERCH_CURR_CODE, _C_CC_GBL_N3D_CNT_1, DTL_EX_3_20S_004, _C_CC_GBL_N3D_SUM_1, _C_N3D_OVS_6H_SUM_1, _M_TOTAL_SUM, ATH_PC_CUST_PRESENT, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _A_BTS_BIO_SE, _A_BTS_CUST_AGE, CHL_CT_TERM_CNTRY_CODE, _Q_KEYED_APVD_CNT_DAY_1, _A_D_D_1, DTL_EX_0_2S_002, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _Q_CRD_F2F_BIN_ATTACK_CNTRY_3, _Q_MER_FRAUD_SCORE_CNT_3, _A_D_D_3, SSA_C_CASH_LIMIT, _C_N3D_TST_CNT_1, _C_N3D_MERC_ID_SUM_1, _C_CC_CNP_VEL_6HR_COUNT_1, _C_2WAY_5X_CRD_CNT, _C_N3D_MERC_ID_SUM_2, DTL_EX_3_80S_001, _Q_NON_AU_IND, _A_AUS_IP_ACTIVITY, _L_BC_SCORE_H2O, _A_BTS_CUST_DOB, _A_CLIENT_CITY_DATE_2, _Q_CRD_F2F_BIN_ATTACK_CNTRY_2, _L_SDID_H2O, _C_CRD_VISA_MERC_SUM_1, _Q_MER_FRAUD_SCORE_CNT_5, _L_BC_SESS_ID, _L_MAX_30D_MULE_SCORE, _C_CC_2DAY_VEL_2, _Q_MER_FRAUD_SCORE_SUM_2, _C_CRD_3D_TRN_SUM_1, ATH_PC_ACS_REFER_CODE, _C_CNP_MER_NM_1, _C_CNP_APL_VEL_CNT, _A_D_D_2, _C_CC_OS_FB_CNT_3, _L_SCORE_H2O_5, _C_CRD_DOM_CNP_HV_CNT_1, _A_CAPP_LOGON_CNT_2
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250818 and 20250820
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-19 22:43:16.893 Z,2025-08-19 23:19:11.656 Z
76.824300,14155.808380939067,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_CCA_TRANSACTIONS_FRAUD_CNP_D012_V1_TEST_FIRES_ONLY(""CMX_TRAN_ID"" STRING(134217728), ""HOUR"" BIGINT, ""_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE, ""_C_MARV_RULE_I"" STRING(16777216), ""LAG_C_MARV_RULE_I"" STRING(16777216), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""DTL_EX_3_8S_007"" STRING(16777216), ""CHL_CT_TERM_CNTRY_CODE"" STRING(16777216), ""DTL_CA_MERCH_CURR_CODE"" STRING(16777216), ""_C_CC_CNP_LTRANS_6HR_COUNT_1"" DOUBLE, ""ATH_PC_CUST_PRESENT"" STRING(16777216), ""DTL_EX_3_8S_009"" STRING(16777216), ""_C_CRD_SAFE_MERCHANT"" DOUBLE, ""_M_FIRST_USE_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_5"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_6"" DOUBLE, ""_M_TOTAL_SUM"" DOUBLE, ""_C_N3D_TST_CNT_1"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_4"" DOUBLE, ""DTL_EX_2_ENTITY_ID_6"" STRING(16777216), ""_C_CC_CNP_VEL_6HR_COUNT_1"" DOUBLE, ""DTL_CA_CLIENT_TRAN_TYPE"" STRING(16777216), ""_A_BTS_BIO_SE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_SUM_1"" DOUBLE, ""DTL_EX_3_80S_001"" STRING(16777216), ""_Q_MER_FRAUD_SCORE_CNT_6"" DOUBLE, ""_A_FOREIGN_IP_ACTIVITY"" DOUBLE, ""_M_TOTAL_COUNT"" DOUBLE, ""CHL_CT_MER_MCC"" STRING(16777216), ""_Q_AUTH_COUNT"" DOUBLE, ""_C_N3D_MERC_ID_SUM_3"" DOUBLE, ""_A_U"" DOUBLE, ""_C_N3D_MERC_ID_SUM_2"" DOUBLE, ""_C_N3D_MERC_ID_SUM_1"" DOUBLE, ""_A_BTS_CUST_AGE"" DOUBLE, ""_C_CC_2DAY_VEL_6"" DOUBLE, ""_L_MAX_30D_MULE_SCORE"" DOUBLE, ""_C_CRD_CNP_TRN_SUM_3"" DOUBLE, ""_A_DTL_CAPP_NBANK_SSO_DT"" DOUBLE, ""_A_PROF_CAPP_DEVICE_1"" STRING(16777216), ""_A_D_D_1"" DOUBLE, ""_M_MERCHANT_RETAIL_IND"" DOUBLE, ""_C_CC_GBL_N3D_CNT_1"" DOUBLE, ""_L_BC_SESS_ID"" STRING(16777216), ""_A_GEO_LONG_1"" DOUBLE, ""_A_CRD_NPP_PAYMENT_AMOUNT"" DOUBLE, ""_A_CAPP_REGO_IP_ADDRESS"" STRING(16777216), ""_M_TOTAL_SUM_RETAIL"" DOUBLE, ""CHL_CT_CH_POST_CODE"" STRING(16777216), ""_L_ACC_AMT_7D_H2O"" DOUBLE, ""_C_2WAY_5X_CRD_DATE"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_2"" DOUBLE, ""_Q_DOM_DECL_CNT_DAY_1"" DOUBLE, ""_C_CC_2DAY_AMT_6"" DOUBLE, ""_C_CC_2DAY_VEL_4"" DOUBLE, ""_C_CRD_3D_TRN_SUM_3"" DOUBLE, ""_C_N3D_DOM_6H_SUM_1"" DOUBLE, ""_L_SE_SCORE_5"" DOUBLE, ""_C_2WAY_5X_CRD_CNT"" DOUBLE, ""_C_CC_TRAN_ACCOUNT_BIN"" STRING(16777216), ""_C_N3D_OVS_6H_SUM_1"" DOUBLE, ""_Q_KEYED_DECL_CNT_DAY_1"" DOUBLE, ""_C_MDES_DPAN_CNT_CURR"" DOUBLE, ""_C_CC_SCR_ATTCK_30SEC_COUNT_2"" DOUBLE, ""_A_24H_CNP_DC_RTL_SUM_CURR_MAX"" DOUBLE, ""_Q_MER_FRAUD_SCORE_CNT_3"" DOUBLE, ""DTL_CA_AUTH_SYS_INFO"" STRING(16777216), ""_L_SCORE_H2O_5"" DOUBLE, ""SSA_D_AVAIL_BAL"" DOUBLE, ""TRANSACTIONDATETIME"" TIMESTAMP_NTZ, ""_A_24H_CNP_DC_RTL_SUM_MAX_DT"" BIGINT, ""_A_UA_DEVICE_PREV_DT_4"" BIGINT, ""_A_TELCO_DT_1"" BIGINT, ""_A_ALL_LOGON_DT"" BIGINT, ""_A_CAPP_LOGON_DT"" BIGINT, ""_A_LOGON_198_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT"" BIGINT, ""_A_LAST_NB_LOGIN_DT_1"" BIGINT)    AS  SELECT  *  FROM (
        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TRY_CAST(SUBSTR(TTS_TRAN_TIME_ALT, 1, 2) AS NUMBER) AS HOUR,
            _C_2WAY_CRD_FRD_RULE_FLAG,
            _C_2WAY_CRD_HR_RULE_FLAG,
            _C_MARV_RULE_I,
            LAG(_C_MARV_RULE_I) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_MARV_RULE_I, 
            TTS_TRAN_DATE_ALT, CHL_ID_CARD_NUM, DTL_CA_MERCH_AMT, DTL_CA_CLIENT_AMT,
            DTL_EX_3_8S_007, CHL_CT_TERM_CNTRY_CODE, DTL_CA_MERCH_CURR_CODE, _C_CC_CNP_LTRANS_6HR_COUNT_1, ATH_PC_CUST_PRESENT, DTL_EX_3_8S_009, _C_CRD_SAFE_MERCHANT, _M_FIRST_USE_DATE, _Q_MER_FRAUD_SCORE_CNT_5, _Q_MER_FRAUD_SCORE_SUM_6, _M_TOTAL_SUM, _C_N3D_TST_CNT_1, _Q_MER_FRAUD_SCORE_CNT_4, DTL_EX_2_ENTITY_ID_6, _C_CC_CNP_VEL_6HR_COUNT_1, DTL_CA_CLIENT_TRAN_TYPE, _A_BTS_BIO_SE, _Q_MER_FRAUD_SCORE_SUM_1, DTL_EX_3_80S_001, _Q_MER_FRAUD_SCORE_CNT_6, _A_FOREIGN_IP_ACTIVITY, _M_TOTAL_COUNT, CHL_CT_MER_MCC, _Q_AUTH_COUNT, _C_N3D_MERC_ID_SUM_3, _A_U, _C_N3D_MERC_ID_SUM_2, _C_N3D_MERC_ID_SUM_1, _A_BTS_CUST_AGE, _C_CC_2DAY_VEL_6, _L_MAX_30D_MULE_SCORE, _C_CRD_CNP_TRN_SUM_3, _A_DTL_CAPP_NBANK_SSO_DT, _A_PROF_CAPP_DEVICE_1, _A_D_D_1, _M_MERCHANT_RETAIL_IND, _C_CC_GBL_N3D_CNT_1, _L_BC_SESS_ID, _A_GEO_LONG_1, _A_CRD_NPP_PAYMENT_AMOUNT, _A_CAPP_REGO_IP_ADDRESS, _M_TOTAL_SUM_RETAIL, CHL_CT_CH_POST_CODE, _L_ACC_AMT_7D_H2O, _C_2WAY_5X_CRD_DATE, _Q_MER_FRAUD_SCORE_CNT_2, _Q_DOM_DECL_CNT_DAY_1, _C_CC_2DAY_AMT_6, _C_CC_2DAY_VEL_4, _C_CRD_3D_TRN_SUM_3, _C_N3D_DOM_6H_SUM_1, _L_SE_SCORE_5, _C_2WAY_5X_CRD_CNT, _C_CC_TRAN_ACCOUNT_BIN, _C_N3D_OVS_6H_SUM_1, _Q_KEYED_DECL_CNT_DAY_1, _C_MDES_DPAN_CNT_CURR, _C_CC_SCR_ATTCK_30SEC_COUNT_2, _A_24H_CNP_DC_RTL_SUM_CURR_MAX, _Q_MER_FRAUD_SCORE_CNT_3, DTL_CA_AUTH_SYS_INFO, _L_SCORE_H2O_5, SSA_D_AVAIL_BAL
            , TO_TIMESTAMP(tts_tran_date_alt || ' ' || tts_tran_time_alt, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_24H_CNP_DC_RTL_SUM_MAX_DT, '1960-01-01 00:00:00'))
            END as _A_24H_CNP_DC_RTL_SUM_MAX_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_UA_DEVICE_PREV_DT_4, '1960-01-01 00:00:00'))
            END as _A_UA_DEVICE_PREV_DT_4,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_TELCO_DT_1, '1960-01-01 00:00:00'))
            END as _A_TELCO_DT_1,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_ALL_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_ALL_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_CAPP_LOGON_DT, '1960-01-01 00:00:00'))
            END as _A_CAPP_LOGON_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LOGON_198_DT, '1960-01-01 00:00:00'))
            END as _A_LOGON_198_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT,
CASE 
                WHEN TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00') = '1960-01-01 00:00:00' THEN NULL
                ELSE DATEDIFF(DAY, TRANSACTIONDATETIME, TIMESTAMPADD(SECOND, _A_LAST_NB_LOGIN_DT_1, '1960-01-01 00:00:00'))
            END as _A_LAST_NB_LOGIN_DT_1
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT

            WHERE
                UPPER(HDR_ACTIVITY_TYPE) = 'CA' 
                AND UPPER(DTL_CA_AUTH_SYS_INFO) NOT IN ('TA', 'TB')
                AND SUBSTR(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 1, 6) != '903601' 
                AND DTL_CA_AUTH_SYS_DEC = '1'
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250818 and 20250820
        )",BROOKSOW,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-08-19 21:45:41.073 Z,2025-08-19 23:02:30.531 Z
37.601583,10773.958909377456,0,0,"create or replace table FRD_ECV_NM_H20_2M as 
        
SELECT 
to_timestamp(TTS_TRAN_DATE_ALT || ' ' || TTS_TRAN_TIME_ALT, 'YYYYMMDD HH24:MI:SS.FF') as TRANSACTIONDATETIME,
SSX_CUST_NUM, 
SSX_CUST_NAME,
dtl_ex_1_5s_01, 
TGX_TRAN_AMT,
SUBSTR(dtl_ex_1_5s_01, 1, 1) as tran_made_on_cApp,
_l_acc_amt_1d,
_l_acc_amt_1h,
_l_acc_amt_2h,
_l_acc_amt_4h,
_l_acc_amt_7d,
_l_accel_event_cnt,
_l_alt_tab_cnt,
_l_and_id_age,
_l_anon_status,
_l_asn_age,
_l_bcksp_cnt,
_l_browser_age,
_l_city_age,
_l_clipb_copy_cnt,
_l_clipb_cut_cnt,
_l_clipb_event_cnt,
_l_clipb_paste_cnt,
_l_cntry_age,
_l_ctrl_tab_cnt,
_l_days_lst_dev_and,
_l_days_lst_dev_ios,
_l_days_lst_dev_js,
_l_days_lst_new_cookie,
_l_dbl_click_cnt,
_l_delete_cnt,
_l_dev_fam,
_l_dev_fam_age,
_l_dev_source,
_l_f_func_cnt,
_l_gyro_event_cnt,
_l_ip_age,
_l_ip_city,
_l_ip_cntry_code,
_l_ip_geo_ip,
_l_ip_geo_lat,
_l_ip_geo_long,
_l_ip_geo_state,
_l_is_f12,
_l_is_lh_int,
_l_is_on_call,
_l_is_priv_brows,
_l_is_rh_int,
_l_isp_age,
_l_lalt_cnt,
_l_lang_1,
_l_lang_2,
_l_lang_3,
_l_lcmd_cnt,
_l_lctrl_cnt,
_l_left_click_cnt,
_l_lshift_cnt,
_l_lst_proxy,
_l_mins_lst_lgn_capped,
_l_mouse_cnt,
_l_num_sess_2h,
_l_num_sess_4h,
_l_orient_event_cnt,
_l_overlap_sess_diff_dev,
_l_paste_in_login_cnt,
_l_priv_browsing_cnt,
_l_proxy_lvl,
_l_proxy_type,
_l_prt_scrn_cnt,
_l_ralt_cnt,
_l_rcmd_cnt,
_l_rctrl_cnt,
_l_right_click_cnt,
_l_rshift_cnt,
_l_scrn_h,
_l_scrn_w,
_l_sess_cnt_mob_browser,
_l_sess_cnt_mob_sdk,
_l_sess_cnt_web,
_l_shift_tab_cnt,
_l_swipe_cnt,
_l_tab_cnt,
_l_tap_cnt,
_l_time_zone,
_l_total_sess_cnt,
_l_touch_cnt,
_l_trvl_spd,
_l_uid_age,
_l_g_con_dev,
_l_g_con_ip,
_l_g_con_wifi,
_l_g_fluid_typing_pi,
_l_g_gen_payee,
_l_g_no_delay_to_input_pi,
_l_g_prev_used_pi,
_l_bc_event_dt,
_l_sess_id,
_l_policy_action,
_l_policy_nm,
_l_max_30d_score,
_l_bc_muid,
_l_policy_id,
_l_recip_ftp,
_l_adv_key_combo,
_l_app_togg,
_l_concurrent_sess,
_l_dev_tools,
_l_dev_change_anom,
_l_export_data,
_l_fast_traveler,
_l_frd_mac_adrs,
_l_hi_dead_time,
_l_import_export_pi,
_l_input_otp_delay,
_l_ip_mismatch_anomaly,
_l_is_active_call,
_l_is_soc_eng_rat,
_l_new_asn,
_l_new_browser,
_l_new_dev,
_l_new_dev_con_ip,
_l_new_ip,
_l_new_payee,
_l_new_user,
_l_nhuman_mouse_bhv,
_l_rare_browser,
_l_rare_cores,
_l_rare_cores_anomaly,
_l_rat_in_sess,
_l_rcnt_pmt_settings_ch,
_l_rcnt_prof_settings_ch,
_l_rcnt_req_loan,
_l_rcnt_risky_dev,
_l_risky_amt,
_l_risky_apps,
_l_risky_browser,
_l_risky_elements_int,
_l_risky_guid,
_l_risky_import_export,
_l_risky_ip,
_l_risky_isp,
_l_risky_key_combo,
_l_risky_payee,
_l_risky_wifi,
_l_tzone_mismatch,
_l_dom_hand_ch_anomaly,
_l_deleting_pi,
_l_ft_rat_app_inst,
_l_import_data,
_l_import_pi_data,
_l_is_long_sess,
_l_is_rcnt_hrisk_sess,
_l_key_mouse_anomaly,
_l_lgn_import_anomaly,
_l_delay_to_input_pi,
_l_low_fam_contact_det,
_l_mouse_doodl,
_l_new_browser_anomaly,
_l_new_desktop_user,
_l_new_mob_app_user,
_l_new_mob_browser_user,
_l_new_payee_per_user,
_l_os_ch_anomaly,
_l_priv_browsing_anomaly,
_l_type_patterns_anomaly,
_l_rcnt_linked_dev,
_l_rcnt_linked_ip,
_l_risky_import,
_l_seg_typing_pi,
_l_sim_ip_cntry_mismatch,
_l_is_bot,
_l_is_emu,
_l_is_mlw,
_l_is_mob_rat,
_l_is_rat,
_l_is_rcnt_rat,
_l_voice_scam,
_l_platform,
_l_bc_sess_cnt,
_l_bc_sess_id,
_l_m_m_1,
_l_m_m_2,
_l_m_m_3,
_l_m_m_4,
_l_m_m_5,
_l_first_rat_dt,
_l_prev_rat_dt,
_l_rat_cnt_1,
_l_rat_cnt_2,
_l_rat_cnt_3,
_l_rat_cnt_4,
_l_rat_check,
_l_score_1,
_l_score_2,
_l_score_3,
_l_score_4,
_l_score_5,
_l_score_dt_1,
_l_score_dt_2,
_l_score_dt_3,
_l_score_dt_4,
_l_score_dt_5,
_l_rare_scrn_sz,
_l_lrg_dist_known_loc,
_l_clpbrd_evnt,
_l_new_lang,
_l_scrn_res_anom,
_l_accum_amt_anom,
_l_frst_proxy,
_l_drag_n_drop,
_l_pmt_vloc_anom,
_l_flat_phone,
_l_rcnt_hi_scr_on_dev,
_l_g_con_geoloc,
_l_g_accum_amt,
_l_bank_num,
_l_acct_num,
_l_pmt_descr,
_l_pmt_amt,
_l_bpay_biller,
_l_bpay_crn,
_N_MII_ASSOC_NUM_CNT
        , _N_MII_AV_IN_CALL
        , _N_MII_AV_OUT_CALL
        , _N_MII_BRANCH_INT
        , _N_MII_CALLEE_CNT
        , _N_MII_CALLR_CNT
        , _N_MII_CALL_ACTIV
        , _N_MII_CALL_INACTIV
        , _N_MII_CUST_TENURE
        , _N_MII_DATA_ACTIV
        , _N_MII_DATA_INACTIV
        , _N_MII_DATA_USE_CH
        , _N_MII_DEV_BRAND
        , _N_MII_DEV_CNT
        , _N_MII_DEV_MNTHS
        , _N_MII_DWELL_MATCH
        , TIMESTAMPADD(SECOND, TRY_TO_NUMBER(_N_MII_EVENT_DT, 38, 2), '1960-01-01 00:00:00') AS _N_MII_EVENT_DT
        , _N_MII_HOME_PCODE
        , _N_MII_INB_SMS_CH
        , _N_MII_IN_CALL_CH
        , _N_MII_IN_CALL_CNT
        , _N_MII_IN_SMS_CNT
        , _N_MII_LOYALTY
        , _N_MII_MULT_PROD
        , _N_MII_NAME_MATCH
        , _N_MII_NEW_CALLEE_RATIO
        , _N_MII_NEW_CALLR_RATIO
        , _N_MII_NEW_RECIP_RATIO
        , _N_MII_NEW_SENDER_RATIO
        , _N_MII_OUT_CALL_CH
        , _N_MII_OUT_CALL_CNT
        , _N_MII_OUT_SMS_CH
        , _N_MII_OUT_SMS_CNT
        , _N_MII_PCODES_VISITED
        , _N_MII_PCODE_MATCH
        , _N_MII_SERV_CNT
        , _N_MII_SERV_TENURE
        , _N_MII_SERV_TYPE
        , _N_MII_SERV_USAGE
        , _N_MII_SIM_SWAP
        , _N_MII_SIM_SWAP_DT
        , _N_MII_SMS_ACTIV
        , _N_MII_SMS_INACTIV
        , _N_MII_SMS_RECIP_CNT
        , _N_MII_SMS_SENDER_CNT
FROM  LCL.FDP_DIGITAL_NONMONETARY_TRANSACTIONS_SEND_FLAT
WHERE SSX_CUST_NUM IS NOT NULL
AND mid_event_ts >= TO_CHAR(TIMESTAMPADD(month, -($trainingPeriod + 1), TO_DATE($testingStart, 'YYYY-MM-DD')), 'YYYYMMDDHH24MISSFF6') 
AND mid_event_ts < TO_CHAR(LAST_DAY(TO_DATE($testingStart, 'YYYY-MM-DD')), 'YYYYMMDDHH24MISSFF6')
AND dtl_ex_1_5s_01 in ('N508B', 'N509B', 'N510B', 'N511B','C517B', 'N522B','N524B','O001B')
;",PAULS13,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_002,X-Large,SUCCESS,2025-09-09 14:23:34.685 Z,2025-09-09 15:01:10.780 Z
32.833533,13529.898962184787,0,0,"CREATE  OR  REPLACE    TABLE  LABMLFRD.TECHDS_MARVIN_CCA_WIDE_TRANS_PK_E2E_ENGINEER_TEST_20250916_045720(""CMX_TRAN_ID"" STRING(134217728), ""TTS_TRAN_DATE_ALT"" STRING(16777216), ""TTS_TRAN_TIME_ALT"" STRING(16777216), ""CHL_ID_CARD_NUM"" STRING(16777216), ""CHL_CT_ASSO_DEC_CODE"" STRING(16777216), ""DTL_CA_MERCH_AMT"" DOUBLE, ""DTL_CA_CLIENT_AMT"" DOUBLE, ""ATH_PC_POS"" STRING(16777216), ""RSP_EX_2_I_009"" STRING(16777216), ""RSP_EX_2_30S_003"" STRING(16777216), ""RSP_ACTION_CODE"" STRING(16777216), ""LAG_C_2WAY_CRD_FRD_RULE_FLAG"" DOUBLE, ""LAG_C_2WAY_CRD_HR_RULE_FLAG"" DOUBLE)    AS  SELECT  * 
 FROM (

        SELECT
            TO_NUMBER(DTL_EX_0_N_064)||DTL_EX_0_N_065||DTL_EX_0_N_066 AS CMX_TRAN_ID,
            TTS_TRAN_DATE_ALT, 
            TTS_TRAN_TIME_ALT,
            CHL_ID_CARD_NUM,
            CHL_CT_ASSO_DEC_CODE,
            DTL_CA_MERCH_AMT,
            DTL_CA_CLIENT_AMT,
            ATH_PC_POS,
            RSP_EX_2_I_009, /* Sent an alert */
            RSP_EX_2_30S_003, /* What type of alert */
            RSP_ACTION_CODE,
            LAG(_C_2WAY_CRD_FRD_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_FRD_RULE_FLAG,
            LAG(_C_2WAY_CRD_HR_RULE_FLAG) OVER (PARTITION BY CHL_ID_CARD_NUM ORDER BY TO_TIMESTAMP(CONCAT(TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT), 'YYYYMMDDHH24:MI:SS.FF6') DESC) AS LAG_C_2WAY_CRD_HR_RULE_FLAG
        FROM
            LCL.FDP_CARDS_MONETARY_TRANSACTIONS_SEND_FLAT 
    
            WHERE
                HDR_ACTIVITY_TYPE = 'CA' 
                AND DTL_CA_AUTH_SYS_INFO NOT IN ('TA', 'TB', 'ta', 'tb')
                AND LEFT(REPLACE(CHL_ID_CARD_NUM, ' ', ''), 6) != '903601'
                AND DTL_CA_AUTH_SYS_DEC = '1' 
                AND ATH_PC_POS IN ('00', '01', '81', '8E', '8F', '10', '96')
                AND TTS_TRAN_DATE_ALT BETWEEN 20250615 AND 20250616
        
)",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-16 04:59:38.326 Z,2025-09-16 05:32:28.338 Z
30.789367,1.549536108971,0,0,"SELECT 
    count(1) AS ""COUNT(LITERAL())""
 FROM (
 SELECT 
    ""LABEL"", 
    ""TTS_TRAN_DATE_ALT"", 
    ""DTL_CA_CLIENT_AMT"", 
    ""CHL_ID_CARD_NUM"", 
    ""CMX_TRAN_ID"", 
    ""CATEGORY"", 
    ""DETECT_METHOD"", 
    ""RSP_EX_2_I_009"", 
    ""RSP_EX_2_30S_003"", 
    ""RULE_0"", 
    ""RULE_1"", 
    ""RULE_2"", 
    ""RULE_3"", 
    ""RULE_4"", 
    ""RULE_5"", 
    ""RULE_6"", 
    ""RULE_7"", 
    ""RULE_8"", 
    ""RULE_9"", 
    ""RULE_10"", 
    ""RULE_11"", 
    ""RULE_12"", 
    ""RULE_13"", 
    ""RULE_14"", 
    ""RULE_15"", 
    ""RULE_16"", 
    ""RULE_17"", 
    ""RULE_18"", 
    ""RULE_19"", 
    ""RULE_20"", 
    ""RULE_21"", 
    ""RULE_22"", 
    ""RULE_23"", 
    ""RULE_24"", 
    ""RULE_25"", 
    ""RULE_26"", 
    ""RULE_27"", 
    ""RULE_28"", 
    ""RULE_29"", 
    ""RULE_30"", 
    ""RULE_31"", 
    ""RULE_32"", 
    ""RULE_33"", 
    ""RULE_34"", 
    ""RULE_35"", 
    ""RULE_36"", 
    ""RULE_37"", 
    ""RULE_38"", 
    ""RULE_39"", 
    ""RULE_40"", 
    ""RULE_41"", 
    ""RULE_42"", 
    ""RULE_43"", 
    ""RULE_44"", 
    ""RULE_45"", 
    ""RULE_46"", 
    ""RULE_47"", 
    ""RULE_48"", 
    ""RULE_49"", 
    ""RULE_50"", 
    ""RULE_51"", 
    ""RULE_52"", 
    ""RULE_53"", 
    ""RULE_54"", 
    ""RULE_55"", 
    ""RULE_56"", 
    ""RULE_57"", 
    ""RULE_58"", 
    ""RULE_59"", 
    ""RULE_60"", 
    ""RULE_61"", 
    ""RULE_62"", 
    ""RULE_63"", 
    ""RULE_64"", 
    ""RULE_65"", 
    ""RULE_66"", 
    ""RULE_67"", 
    ""RULE_68"", 
    ""RULE_69"", 
    ""RULE_70"", 
    ""RULE_71"", 
    ""RULE_72"", 
    ""RULE_73"", 
    ""RULE_74"", 
    ""RULE_75"", 
    ""RULE_76"", 
    ""RULE_77"", 
    ""RULE_78"", 
    ""RULE_79"", 
    ""RULE_80"", 
    ""RULE_81"", 
    ""RULE_82"", 
    ""RULE_83"", 
    ""RULE_84"", 
    ""RULE_85"", 
    ""RULE_86"", 
    ""RULE_87"", 
    ""RULE_88"", 
    ""RULE_89"", 
    ""RULE_90"", 
    ""RULE_91"", 
    ""RULE_92"", 
    ""RULE_93"", 
    ""RULE_94"", 
    ""RULE_95"", 
    ""RULE_96"", 
    ""RULE_97"", 
    ""RULE_98"", 
    ""RULE_99"", 
    ""RULE_100"", 
    ""RULE_101"", 
    ""RULE_102"", 
    ""RULE_103"", 
    ""RULE_104"", 
    ""RULE_105"", 
    ""RULE_106"", 
    ""RULE_107"", 
    ""RULE_108"", 
    ""RULE_109"", 
    ""RULE_110"", 
    ""RULE_111"", 
    ""RULE_112"", 
    ""RULE_113"", 
    ""RULE_114"", 
    ""RULE_115"", 
    ""RULE_116"", 
    ""RULE_117"", 
    ""RULE_118"", 
    ""RULE_119"", 
    ""RULE_120"", 
    ""RULE_121"", 
    ""RULE_122"", 
    ""RULE_123"", 
    ""RULE_124"", 
    ""RULE_125"", 
    ""RULE_126"", 
    ""RULE_127"", 
    ""RULE_128"", 
    ""RULE_129"", 
    ""RULE_130"", 
    ""RULE_131"", 
    ""RULE_132"", 
    ""RULE_133"", 
    to_date(""TTS_TRAN_DATE_ALT"", 'yyyyMMdd') AS ""DATE_TMP""
 FROM (
 SELECT 
     * 
 FROM (
 SELECT 
    label, 
    TTS_TRAN_DATE_ALT, 
    DTL_CA_CLIENT_AMT, 
    CHL_ID_CARD_NUM, 
    CMX_TRAN_ID, 
    CATEGORY, 
    DETECT_METHOD, 
    RSP_EX_2_I_009, 
    RSP_EX_2_30S_003, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_80S_001_FREQ IS NOT NULL AND _Q_MER_FRAUD_SCORE_SUM_6 < 1552453.5 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_80S_001_FREQ >= 30.5 AND DTL_EX_3_8S_007_FREQ >= 46.0 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_0, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_U < 33136.0625 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _C_CRD_3D_TRN_SUM_1 < 114.994995 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_1, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_80S_001_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 15967.0 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_COUNT_RETAIL < 23.0 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 11216.0 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1552453.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_80S_001_FREQ < 30.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_2, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _C_CC_2DAY_AMT_6 < 185.5 AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 65.5 AND _C_CRD_3D_TRN_SUM_1 < 114.994995 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND CHL_CT_MER_MCC_FREQ < 709.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_3, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_80S_001_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _C_CNP_MER_NM_1_FREQ IS NOT NULL AND _C_CNP_MER_NM_1_FREQ < 47.0 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_80S_001_FREQ >= 8.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_4, 
    (DTL_EX_3_8S_007_FREQ IS NOT NULL AND _L_SDID_H2O_FREQ IS NOT NULL AND _L_SDID_H2O_FREQ IS NOT NULL AND _A_P_L_C < 10.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _L_SDID_H2O_FREQ < 448.5 AND _L_SDID_H2O_FREQ >= 7.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND DTL_EX_3_8S_007_FREQ < 2971.5) as rule_5, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _C_CRD_3D_TRN_SUM_1 < 114.994995 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM < 814.915039 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 404.0 AND SSA_C_CASH_LIMIT < 1900.0) as rule_6, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _C_CRD_3D_TRN_SUM_1 < 114.994995 AND _M_TOTAL_COUNT_RETAIL < 1.5 AND _M_TOTAL_SUM < 814.915039 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5 AND SSA_C_CASH_LIMIT >= 1900.0) as rule_7, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_CUST_SPEND_SUM_AAA_1 < 218.86499 AND _A_U >= 33136.0625 AND _L_MAX_30D_SCORE_H2O >= 152.5 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 1.56999993 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_8, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_DOB >= 9367.5 AND _C_CRD_3D_TRN_SUM_1 < 114.994995 AND _M_FIRST_USE_DATE < 23902.5 AND _M_TOTAL_SUM < 814.915039 AND _M_TOTAL_SUM_RETAIL < 505.119995 AND _Q_3DS_IND < 0.5 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_20S_004_FREQ >= 9162.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_9, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SCORE_H2O >= 258.5 AND _L_BC_SESS_ID_FREQ >= 15.5 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ >= 1034.5) as rule_10, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _A_CLIENT_CITY_DATE_2 < 2062345860.0 AND _A_DTL_CAPP_NBANK_SSO_DT < 2064513020.0 AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 381.0 AND _M_FIRST_USE_DATE >= 23902.5 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_11, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _A_DTL_CAPP_NBANK_SSO_DT < 2064513020.0 AND _M_FIRST_USE_DATE >= 23902.5 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_12, 
    (DTL_EX_3_8S_007_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CNP_MER_NM_CURR_FREQ IS NOT NULL AND _C_CNP_MER_NM_CURR_FREQ >= 873.5 AND _C_N3D_MERC_ID_SUM_3 < 0.00499999989 AND _L_BC_SESS_ID_FREQ >= 17.5 AND _M_RECENT_SUM_WEEK_5 >= 13.0249996 AND _M_TOTAL_COUNT >= 18.5 AND DTL_EX_3_8S_007_FREQ >= 2971.5) as rule_13, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _C_CNP_MER_NM_CURR_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9330.5 AND _C_CC_2DAY_AMT_6 < 83.6750031 AND _C_CNP_MER_NM_CURR_FREQ >= 46.5 AND _M_TOTAL_SUM < 814.915039 AND _Q_MER_FRAUD_SCORE_SUM_6 >= 1552453.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_EX_3_8S_009_FREQ < 1034.5 AND SSA_C_CASH_LIMIT < 1900.0) as rule_14, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_24H_CNP_DC_RTL_SUM_CURR_MAX >= 103.635002 AND _A_U < 14200.5898 AND _C_CRD_CNP_TRN_SUM_3 >= 23.7250004 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1503129.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_15, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _C_CC_2DAY_AMT_6 < 83.6750031 AND _M_TOTAL_SUM < 814.915039 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1552453.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_EX_3_8S_009_FREQ < 404.0 AND SSA_C_CASH_LIMIT < 1900.0) as rule_16, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _A_DTL_CAPP_NBANK_SSO_DT < 2064513020.0 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 65.5 AND _M_FIRST_USE_DATE >= 23902.5 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_17, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND ATH_PC_CUST_PRESENT_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ >= 3.5 AND _M_RECENT_SUM_WEEK_1 < 9.92499924 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND ATH_PC_CUST_PRESENT_FREQ < 11170.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_18, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_DOB >= 9367.5 AND _C_CRD_3D_TRN_SUM_4 < 173.809998 AND _M_TOTAL_SUM < 814.915039 AND _Q_AUTH_COUNT < 58.5 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_CA_MERCH_AMT < 23.9799995 AND DTL_EX_3_20S_004_FREQ >= 9162.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_19, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065596930.0 AND _C_CC_2DAY_AMT_6 < 185.5 AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _C_CRD_3D_TRN_SUM_1 < 114.994995 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_MAX_30D_MULE_SCORE < 943.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND CHL_CT_MER_MCC_FREQ < 709.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_20, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065596930.0 AND _A_BTS_CUST_DOB < 9367.5 AND _C_CC_2DAY_AMT_6 >= 83.6750031 AND _C_CC_2DAY_VEL_5 < 2.5 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _C_N3D_MERC_ID_SUM_3 >= 0.0149999997 AND _L_MAX_30D_MULE_SCORE < 943.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM < 803.530029 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 20.8150005 AND DTL_EX_3_20S_004_FREQ >= 5798.5 AND DTL_EX_3_8S_009_FREQ >= 404.0 AND SSA_C_CASH_LIMIT < 1900.0) as rule_21, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND ATH_PC_ACS_REFER_CODE_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _C_CC_2DAY_VEL_6 < 5.5 AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 381.0 AND _L_BC_SESS_ID_FREQ >= 9.5 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 3012.0 AND ATH_PC_ACS_REFER_CODE_FREQ < 10806.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 8.43499947 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_22, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_CRD_NPP_PAYMENT_AMOUNT >= 45.2999992 AND _A_DIGITAL_BPAY_FTP_DT >= -206.5 AND _A_P_L_C >= 10.5 AND _A_U < 14200.5898 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _L_BC_SESS_ID_FREQ >= 3.5 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1503129.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 1.56999993 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_23, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065604610.0 AND _A_CAPP_LOGON_DT >= -1.5 AND _L_BC_SESS_ID_FREQ >= 9.5 AND _M_TOTAL_SUM < 4.43000031 AND _Q_MER_FRAUD_SCORE_CNT_5 < 6.5 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_CLIENT_AMT >= 20.8150005 AND DTL_EX_3_8S_007_FREQ >= 2971.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_24, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND _C_CC_2DAY_AMT_6 >= 185.5 AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _C_N3D_MERC_ID_SUM_1 < 1.80500007 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1552453.5 AND CHL_CT_MER_MCC_FREQ < 709.0 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_25, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _A_DTL_CAPP_NBANK_SSO_DT < 2064513020.0 AND _M_FIRST_USE_DATE >= 23902.5 AND _M_RECENT_SUM_WEEK_1 < 9.92499924 AND _M_TOTAL_SUM < 814.915039 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_26, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_24H_CNP_DC_RTL_SUM_MAX_DT >= -2.5 AND _A_BTS_CUST_DOB >= 9367.5 AND _C_CC_GBL_N3D_1D_CNT_1 >= 2.5 AND _C_CRD_3D_TRN_SUM_3 >= 5.06999969 AND _L_BC_SESS_ID_FREQ >= 2.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM < 814.915039 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_27, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_U < 33136.0625 AND _C_CC_GBL_N3D_1D_CNT_1 >= 2.5 AND _M_FIRST_USE_DATE < 23902.5 AND _M_TOTAL_SUM_RETAIL < 505.119995 AND _Q_MER_FRAUD_SCORE_CNT_2 >= 126503.0 AND _Q_MER_FRAUD_SCORE_SUM_6 >= 1503129.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 1034.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_28, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_NPP_FTP_SUM >= 93.3499985 AND _C_CC_2DAY_AMT_6 < 2.46500015 AND _C_CC_GBL_N3D_SUM_1 >= 7.47999954 AND _L_BC_SESS_ID_FREQ >= 9.5 AND CHL_CT_TERM_CNTRY_CODE_FREQ >= 10184.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_29, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _C_CC_2DAY_AMT_6 < 50.7000008 AND _M_RECENT_SUM_WEEK_1 >= 9.92499924 AND _M_TOTAL_SUM < 814.915039 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1552453.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_30, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _C_CC_GBL_N3D_1D_CNT_1 >= 2.5 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 381.0 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SCORE_H2O >= 258.5 AND DTL_CA_CLIENT_AMT >= 8.43499947 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_31, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065596930.0 AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_MAX_30D_MULE_SCORE < 943.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM_RETAIL < 100.110001 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 42.2799988 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_32, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_MERCH_CURR_CODE_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _A_PROF_CAPP_DEVICE_1_FREQ IS NOT NULL AND _A_D_D_1 < 2065549820.0 AND _A_DIGITAL_BPAY_FTP_DT >= -101.5 AND _A_PROF_CAPP_DEVICE_1_FREQ >= 8.5 AND _C_CC_CNP_VEL_6HR_COUNT_1 >= 11.5 AND _L_BC_SCORE_H2O < 432.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_COUNT < 18.5 AND _M_TOTAL_COUNT >= 2.5 AND _Q_MER_FRAUD_SCORE_SUM_1 >= 2223398.75 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ < 1793.5 AND DTL_CA_CLIENT_AMT >= 2.88000011 AND DTL_CA_MERCH_CURR_CODE_FREQ < 10892.0 AND DTL_EX_3_8S_007_FREQ >= 2971.5 AND DTL_EX_3_8S_009_FREQ >= 2992.0) as rule_33, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_MAX_30D_MULE_SCORE >= 960.0 AND _M_TOTAL_SUM < 814.915039 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_EX_3_8S_007_FREQ >= 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_34, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _A_U < 14200.5898 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 11216.0 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1503129.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_MERCH_AMT < 23.9799995 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_35, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND ATH_PC_CUST_PRESENT_FREQ IS NOT NULL AND _C_CNP_MER_NM_CURR_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9330.5 AND _C_CNP_MER_NM_CURR_FREQ >= 46.5 AND _M_RECENT_SUM_WEEK_1 < 9.92499924 AND _Q_MER_FRAUD_SCORE_SUM_6 >= 1552453.5 AND ATH_PC_CUST_PRESENT_FREQ < 11170.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_36, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_AGE >= 31.2671242 AND _A_DIGITAL_BPAY_FTP_DT >= -206.5 AND _A_P_L_C >= 10.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _M_TOTAL_COUNT_RETAIL < 1.5 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1552453.5 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_EX_3_8S_007_FREQ < 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_37, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND ATH_PC_CUST_PRESENT_FREQ IS NOT NULL AND _A_U < 14200.5898 AND _M_RECENT_SUM_WEEK_1 < 9.92499924 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1503129.5 AND ATH_PC_CUST_PRESENT_FREQ < 11170.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_38, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065596930.0 AND _A_CRD_NPP_PAYMENT_AMOUNT >= 45.2999992 AND _A_DIGITAL_BPAY_FTP_DT >= -206.5 AND _A_P_L_C >= 10.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_BC_SESS_ID_FREQ >= 9.5 AND _L_MAX_30D_MULE_SCORE < 943.5 AND _M_FIRST_USE_DATE >= 23902.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_39, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_PROF_CAPP_DEVICE_1_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065604610.0 AND _A_BTS_CUST_DOB < 9367.5 AND _A_PROF_CAPP_DEVICE_1_FREQ < 8.5 AND _C_CC_2DAY_AMT_6 < 83.6750031 AND _C_CRD_3D_TRN_SUM_3 < 9.96999931 AND _L_BC_SESS_ID_FREQ < 9.5 AND _M_TOTAL_COUNT < 18.5 AND _M_TOTAL_SUM < 296.179993 AND _Q_MER_FRAUD_SCORE_CNT_5 < 6.5 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 42.2799988 AND DTL_EX_3_20S_004_FREQ >= 9162.5 AND DTL_EX_3_8S_007_FREQ >= 2971.5 AND DTL_EX_3_8S_009_FREQ >= 404.0 AND SSA_C_CASH_LIMIT < 1900.0) as rule_40, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _C_CC_CNP_LTRANS_6HR_COUNT_1 < 2.5 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ < 11216.0 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_009_FREQ < 265.0) as rule_41, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_CRD_CNP_TRN_SUM_3 < 33.9900017 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SCORE_H2O >= 258.5 AND _M_FIRST_USE_DATE >= 23739.5 AND _M_RECENT_SUM_WEEK_5 >= 13.9849997 AND _M_TOTAL_SUM_RETAIL >= 200.845001 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ >= 1034.5) as rule_42, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _C_CC_2DAY_AMT_6 < 83.6750031 AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _M_RECENT_SUM_WEEK_1 < 9.92499924 AND _M_TOTAL_SUM < 814.915039 AND CHL_CT_MER_MCC_FREQ < 709.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 404.0 AND SSA_C_CASH_LIMIT < 1900.0) as rule_43, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND ATH_PC_ACS_REFER_CODE_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _A_DTL_CAPP_NBANK_SSO_DT >= 2064513020.0 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 381.0 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_BC_SESS_ID_FREQ < 3.5 AND _M_FIRST_USE_DATE >= 23902.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND ATH_PC_ACS_REFER_CODE_FREQ < 10806.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 8.43499947 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_44, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND _C_CC_2DAY_AMT_6 < 185.5 AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _M_FIRST_USE_DATE < 23902.5 AND _M_TOTAL_COUNT_RETAIL < 1.5 AND _M_TOTAL_SUM_RETAIL < 505.119995 AND _Q_3DS_IND < 0.5 AND _Q_MER_FRAUD_SCORE_SUM_6 >= 1552453.5 AND CHL_CT_MER_MCC_FREQ < 709.0 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_007_FREQ < 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_45, 
    (DTL_EX_3_8S_007_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _C_CC_GBL_N3D_CNT_2 >= 2.5 AND _C_N3D_MERC_ID_SUM_3 >= 0.00499999989 AND _M_TOTAL_COUNT >= 18.5 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_CLIENT_AMT < 12.4899998 AND DTL_EX_3_8S_007_FREQ >= 2971.5) as rule_46, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_MERCH_CURR_CODE_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _C_CNP_MER_NM_4_FREQ IS NOT NULL AND _C_CNP_MER_NM_4_FREQ >= 15.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1552453.5 AND DTL_CA_AUTH_SYS_INFO_FREQ < 1793.5 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_CA_MERCH_CURR_CODE_FREQ >= 10892.0 AND DTL_EX_3_8S_009_FREQ < 404.0 AND SSA_C_BAL >= 3415.68994) as rule_47, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_U < 33136.0625 AND _C_CRD_CNP_TRN_SUM_3 < 33.9900017 AND _M_RECENT_SUM_WEEK_5 >= 13.9849997 AND _Q_MER_FRAUD_SCORE_CNT_2 >= 126503.0 AND _Q_MER_FRAUD_SCORE_SUM_6 >= 1503129.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_48, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ >= 3.5 AND _L_SE_SCORE_5 >= 778.5 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND _Q_MER_FRAUD_SCORE_CNT_5 >= 866.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_49, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _A_CAPP_LOGON_DT < -1.5 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SCORE_H2O >= 258.5 AND _M_TOTAL_SUM < 4.43000031 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_CLIENT_AMT >= 42.2799988 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_50, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_DIGITAL_BPAY_FTP_DT < -206.5 AND _A_P_L_C >= 10.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _L_BC_SESS_ID_FREQ >= 9.5 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 3012.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 1034.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_51, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND ATH_PC_ACS_REFER_CODE_FREQ IS NOT NULL AND _A_PROF_CAPP_DEVICE_1_FREQ IS NOT NULL AND _A_CLIENT_CITY_DATE_2 >= 2064998270.0 AND _A_PROF_CAPP_DEVICE_1_FREQ >= 8.5 AND _L_BC_SCORE_H2O >= 432.5 AND _M_TOTAL_COUNT < 18.5 AND ATH_PC_ACS_REFER_CODE_FREQ < 10806.0 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_CLIENT_AMT >= 20.8150005 AND DTL_EX_3_8S_007_FREQ >= 2971.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_52, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_DOB >= 9367.5 AND _C_CC_GBL_N3D_1D_CNT_1 >= 2.5 AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _L_MAX_30D_SCORE_H2O >= 682.5 AND _M_TOTAL_SUM < 814.915039 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_EX_3_20S_004_FREQ >= 9162.5 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_53, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9330.5 AND _A_CLIENT_CITY_DATE_2 < 2062345860.0 AND _A_DTL_CAPP_NBANK_SSO_DT < 2064513020.0 AND _C_CC_2DAY_AMT_6 < 50.7000008 AND _M_FIRST_USE_DATE >= 23902.5 AND _M_RECENT_SUM_WEEK_1 >= 9.92499924 AND _Q_MER_FRAUD_SCORE_SUM_6 >= 1552453.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_54, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _C_CC_GBL_N3D_1D_CNT_1 >= 2.5 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 381.0 AND _L_BC_SESS_ID_FREQ >= 3.5 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND _M_TOTAL_SUM < 814.915039 AND _Q_MER_FRAUD_SCORE_SUM_2 >= 136115872.0 AND DTL_CA_CLIENT_AMT >= 8.43499947 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_55, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 15967.0 AND _A_BTS_CUST_DOB >= 9367.5 AND _A_CRD_NPP_PAYMENT_AMOUNT >= 45.2999992 AND _A_DIGITAL_BPAY_FTP_DT >= -206.5 AND _A_P_L_C >= 10.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _C_CRD_CNP_TRN_SUM_3 >= 10.0799999 AND _M_TOTAL_SUM < 814.915039 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 11216.0 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_56, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065596930.0 AND _A_BTS_CUST_DOB < 9367.5 AND _C_CC_2DAY_AMT_6 < 83.6750031 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SCORE_H2O < 258.5 AND _L_MAX_30D_MULE_SCORE < 943.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM < 814.915039 AND _M_TOTAL_SUM_RETAIL < 100.110001 AND _Q_AUTH_COUNT < 93.5 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 42.2799988 AND DTL_EX_3_8S_009_FREQ >= 404.0 AND SSA_C_CASH_LIMIT < 1900.0) as rule_57, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _A_BTS_CUST_AGE >= 31.2671242 AND _M_TOTAL_COUNT_RETAIL < 1.5 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 11216.0 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_007_FREQ < 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_58, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2033177340.0 AND _L_BC_SESS_ID_FREQ < 9.5 AND _M_TOTAL_SUM < 296.179993 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ < 1793.5 AND DTL_CA_CLIENT_AMT < 2.88000011 AND DTL_EX_3_8S_007_FREQ >= 2971.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_59, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND _L_SDID_H2O_FREQ IS NOT NULL AND _A_P_L_C < 10.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _L_SDID_H2O_FREQ >= 7.5 AND _M_FIRST_USE_DATE < 23902.5 AND _M_TOTAL_SUM_RETAIL < 505.119995 AND _Q_3DS_IND < 0.5 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_60, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _A_R < 281.429993 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 65.5 AND _C_CRD_3D_TRN_SUM_3 >= 5.06999969 AND _L_BC_SESS_ID_FREQ < 2.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_61, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _C_CC_2DAY_VEL_6 < 5.5 AND _C_CC_GBL_N3D_1D_CNT_1 >= 2.5 AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _Q_AUTH_COUNT < 58.5 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 3012.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 0.335000008 AND DTL_CA_MERCH_AMT < 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_62, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_GBL_N3D_1D_CNT_1 >= 2.5 AND _C_CRD_3D_TRN_SUM_3 >= 5.06999969 AND _C_CRD_CNP_TRN_SUM_3 < 10.7449999 AND _L_BC_SESS_ID_FREQ >= 2.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _Q_AUTH_COUNT >= 58.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 0.335000008 AND DTL_CA_MERCH_AMT < 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_63, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _C_CNP_MER_NM_4_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065596930.0 AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 381.0 AND _C_CNP_MER_NM_4_FREQ >= 128.5 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_MAX_30D_MULE_SCORE < 943.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT < 8.43499947 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_64, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065596930.0 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _C_N3D_MERC_ID_SUM_1 < 10.3850002 AND _L_BC_SESS_ID_FREQ < 3.5 AND _L_MAX_30D_MULE_SCORE < 943.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_65, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_BC_SESS_ID_FREQ < 9.5 AND _L_BC_SESS_ID_FREQ >= 3.5 AND _L_MAX_30D_MULE_SCORE >= 943.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM < 296.179993 AND _Q_MER_FRAUD_SCORE_SUM_2 >= 136115872.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 1.56999993 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ >= 404.0 AND SSA_D_AVAIL_BAL < 279.570007) as rule_66, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _C_CRD_CNP_TRN_SUM_3 < 23.7250004 AND DTL_CA_CLIENT_AMT >= 5.28999996 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_67, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND _C_CNP_MER_NM_4_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065590530.0 AND _C_CNP_MER_NM_4_FREQ < 73.5 AND _M_FIRST_USE_DATE >= 23902.5 AND _M_TOTAL_SUM >= 814.915039 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_68, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 15967.0 AND _M_FIRST_USE_DATE >= 23902.5 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 11216.0 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_69, 
    (_C_CNP_MER_NM_CURR_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _C_CNP_MER_NM_CURR_FREQ >= 873.5 AND _L_BC_SCORE_H2O < 387.0 AND _L_MAX_30D_SCORE_H2O < 212.0 AND _M_RECENT_SUM_WEEK_5 >= 13.0249996 AND _M_TOTAL_SUM < 814.915039) as rule_70, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _A_24H_CNP_DC_RTL_SUM_CURR_MAX >= 103.635002 AND _A_BTS_BIO_SE < 349.0 AND _C_CRD_CNP_TRN_SUM_3 >= 23.7250004 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_71, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND _C_CC_2DAY_VEL_4 >= 36.0 AND _C_CC_GBL_N3D_1D_CNT_1 < 2.5 AND _M_FIRST_USE_DATE < 23794.5 AND _M_TOTAL_SUM_RETAIL < 505.119995 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_72, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_GBL_N3D_1D_CNT_1 >= 2.5 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _L_BC_SESS_ID_FREQ >= 9.5 AND _M_FIRST_USE_DATE >= 23902.5 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_73, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_GBL_N3D_1D_CNT_1 >= 2.5 AND _L_BC_SESS_ID_FREQ >= 3.5 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND _Q_MER_FRAUD_SCORE_SUM_2 >= 136115872.0 AND DTL_CA_CLIENT_AMT >= 1.56999993 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 1034.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_74, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _M_TOTAL_COUNT_RETAIL < 1.5 AND _M_TOTAL_SUM < 814.915039 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_007_FREQ < 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5 AND SSA_C_CASH_LIMIT < 1900.0) as rule_75, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_MAX_30D_MULE_SCORE >= 943.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM >= 4.43000031 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.88000011 AND DTL_EX_3_8S_009_FREQ >= 2992.0 AND SSA_D_AVAIL_BAL < 279.570007) as rule_76, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _L_BC_SCORE_H2O >= 490.5 AND _M_TOTAL_SUM < 814.915039 AND CHL_CT_MER_MCC_FREQ < 784.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT < 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 404.0 AND SSA_C_CASH_LIMIT < 1900.0) as rule_77, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _C_N3D_MERC_ID_SUM_2 < 4.49499989 AND _M_TOTAL_COUNT_RETAIL >= 1.5 AND _Q_MER_FRAUD_SCORE_CNT_6 >= 273046.5 AND CHL_CT_MER_MCC_FREQ >= 709.0 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_EX_3_20S_004_FREQ >= 5798.5 AND DTL_EX_3_8S_007_FREQ < 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_78, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 381.0 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SCORE_H2O < 258.5 AND _M_FIRST_USE_DATE >= 23902.5 AND _Q_AUTH_COUNT >= 93.5 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_79, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065596930.0 AND _A_U < 33136.0625 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_MAX_30D_MULE_SCORE < 943.5 AND _M_FIRST_USE_DATE >= 23902.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1503129.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_80, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065596930.0 AND _C_CRD_3D_TRN_SUM_1 < 114.994995 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_MAX_30D_MULE_SCORE < 943.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_81, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _A_PROF_CAPP_DEVICE_1_FREQ IS NOT NULL AND _A_CAPP_LOGON_DT < -1.5 AND _A_PROF_CAPP_DEVICE_1_FREQ >= 8.5 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_N3D_MERC_ID_SUM_3 >= 0.0149999997 AND _M_TOTAL_COUNT < 18.5 AND _M_TOTAL_SUM < 4.43000031 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_CLIENT_AMT >= 42.2799988 AND DTL_EX_3_8S_007_FREQ >= 2971.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_82, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_24H_CNP_DC_RTL_SUM_MAX_DT < -2.5 AND _C_CC_GBL_N3D_1D_CNT_1 >= 2.5 AND _C_CRD_3D_TRN_SUM_3 >= 5.06999969 AND _L_BC_SESS_ID_FREQ < 9.5 AND _L_BC_SESS_ID_FREQ >= 2.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM < 296.179993 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_EX_3_20S_004_FREQ >= 9162.5 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_83, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND _C_CNP_MER_NM_CURR_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9330.5 AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _C_CNP_MER_NM_CURR_FREQ >= 46.5 AND _C_N3D_MERC_ID_SUM_2 < 4.49499989 AND _Q_MER_FRAUD_SCORE_SUM_6 >= 1552453.5 AND CHL_CT_MER_MCC_FREQ >= 709.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_EX_3_20S_004_FREQ >= 5798.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_84, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_CAPP_LOGON_DT < -1.5 AND _C_CC_2DAY_VEL_5 < 2.5 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SESS_ID_FREQ < 9.5 AND _M_TOTAL_SUM < 296.179993 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 20.8150005 AND DTL_EX_3_20S_004_FREQ >= 9162.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_85, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _A_CAPP_LOGON_DT < -1.5 AND _C_CC_2DAY_AMT_6 >= 83.6750031 AND _C_CC_2DAY_VEL_5 >= 2.5 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM < 4.43000031 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 20.8150005 AND DTL_EX_3_8S_009_FREQ >= 404.0 AND SSA_C_CASH_LIMIT < 1900.0) as rule_86, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _C_CRD_3D_TRN_SUM_1 < 114.994995 AND _L_BC_SESS_ID_FREQ >= 3.5 AND _M_FIRST_USE_DATE < 23902.5 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND _M_TOTAL_SUM < 814.915039 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_87, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _C_CC_2DAY_AMT_6 < 50.7000008 AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _L_BC_SESS_ID_FREQ >= 3.5 AND _M_RECENT_SUM_WEEK_1 >= 9.92499924 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND _M_TOTAL_SUM < 814.915039 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 404.0 AND SSA_C_CASH_LIMIT < 1900.0) as rule_88, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065596930.0 AND _A_BTS_CUST_DOB >= 9367.5 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_MAX_30D_MULE_SCORE < 943.5 AND _L_MAX_30D_SCORE_H2O >= 682.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM < 814.915039 AND _M_TOTAL_SUM_RETAIL < 100.110001 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 42.2799988 AND DTL_EX_3_20S_004_FREQ >= 9162.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_89, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _A_24H_CNP_DC_RTL_SUM_MAX_DT >= -2.5 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 381.0 AND _C_CRD_3D_TRN_SUM_3 >= 5.06999969 AND _C_N3D_MERC_ID_SUM_3 >= 0.0149999997 AND _L_BC_SESS_ID_FREQ >= 2.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM >= 803.530029 AND _Q_COF_DECL_CNT_DAY_1 >= 61368.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 8.43499947 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_90, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065604610.0 AND _A_BTS_CUST_DOB >= 9367.5 AND _A_CAPP_LOGON_DT < -1.5 AND _C_CC_2DAY_VEL_5 < 2.5 AND _L_MAX_30D_SCORE_H2O < 682.5 AND _M_TOTAL_SUM < 4.43000031 AND _Q_MER_FRAUD_SCORE_CNT_5 < 6.5 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 20.8150005 AND DTL_EX_3_20S_004_FREQ >= 9162.5 AND DTL_EX_3_8S_007_FREQ >= 2971.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_91, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _A_DIGITAL_BPAY_FTP_DT < -206.5 AND _A_P_L_C >= 10.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _L_BC_SESS_ID_FREQ >= 3.5 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND _M_TOTAL_SUM < 814.915039 AND _M_TOTAL_SUM_RETAIL < 42.9099998 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 3012.0 AND _Q_MER_FRAUD_SCORE_SUM_6 >= 1552453.5 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 404.0 AND SSA_C_CASH_LIMIT >= 1900.0) as rule_92, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 15967.0 AND _C_CRD_CNP_TRN_SUM_3 < 10.0799999 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 11216.0 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_93, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _A_BTS_CUST_DOB >= 15967.0 AND _Q_AUTH_COUNT >= 383.0 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 11216.0 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 1034.5) as rule_94, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND _A_BTS_CUST_DOB >= 9330.5 AND _L_ACC_AMT_7D_H2O >= 36910.9492 AND _Q_MER_FRAUD_SCORE_SUM_6 >= 1552453.5 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_95, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ >= 65.5 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_96, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ < 9.5 AND _M_FIRST_USE_DATE >= 23902.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 1034.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_97, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ >= 381.0 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SCORE_H2O < 258.5 AND _Q_MER_FRAUD_SCORE_SUM_3 < 164.5 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_98, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_DOB >= 9367.5 AND _M_RECENT_SUM_WEEK_1 < 9.92499924 AND _M_TOTAL_SUM < 814.915039 AND DTL_CA_AUTH_SYS_INFO_FREQ < 1793.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_99, 
    (DTL_EX_3_8S_007_FREQ IS NOT NULL AND _C_CNP_MER_NM_CURR_FREQ IS NOT NULL AND _A_R < 380.779999 AND _C_CNP_MER_NM_CURR_FREQ < 873.5 AND _C_CRD_CNP_TRN_SUM_3 < 33.9900017 AND _L_BC_SCORE_H2O >= 164.0 AND _M_RECENT_SUM_WEEK_5 >= 13.9849997 AND _M_TOTAL_COUNT_RETAIL < 6.5 AND DTL_EX_3_8S_007_FREQ < 2971.5) as rule_100, 
    (DTL_EX_3_8S_007_FREQ IS NOT NULL AND _C_CNP_MER_NM_CURR_FREQ IS NOT NULL AND _C_CNP_MER_NM_CURR_FREQ < 873.5 AND _C_CRD_CNP_TRN_SUM_3 >= 33.9900017 AND _M_RECENT_SUM_WEEK_5 >= 13.9849997 AND _M_TOTAL_COUNT_RETAIL < 6.5 AND _M_TOTAL_COUNT_RETAIL >= 2.5 AND _Q_AUTH_COUNT < 1.5 AND DTL_EX_3_8S_007_FREQ < 2971.5) as rule_101, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _A_24H_CNP_DC_RTL_SUM_CURR_MAX >= 103.635002 AND _A_BTS_CUST_DOB < 9330.5 AND _C_CRD_CNP_TRN_SUM_3 >= 23.7250004 AND _Q_MER_FRAUD_SCORE_SUM_6 >= 1552453.5 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_EX_3_20S_004_FREQ < 681.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_102, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _M_TOTAL_COUNT_RETAIL >= 1.5 AND _Q_MER_FRAUD_SCORE_CNT_6 >= 273046.5 AND CHL_CT_MER_MCC_FREQ < 709.0 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_EX_3_8S_007_FREQ < 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_103, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _C_CC_2DAY_VEL_5 < 2.5 AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _M_TOTAL_SUM_RETAIL < 100.110001 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 42.2799988 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_104, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _C_N3D_MERC_ID_SUM_2 < 4.49499989 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND CHL_CT_MER_MCC_FREQ >= 709.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_105, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND _A_DTL_CAPP_NBANK_SSO_DT < 2064513020.0 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SCORE_H2O >= 258.5 AND _M_FIRST_USE_DATE >= 23902.5 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 1034.5) as rule_106, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _C_CRD_CNP_TRN_SUM_3 < 12.3699999 AND _M_FIRST_USE_DATE < 23902.5 AND _M_TOTAL_SUM_RETAIL >= 505.119995 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_107, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _L_BC_SESS_ID_FREQ < 9.5 AND _M_FIRST_USE_DATE < 23902.5 AND _M_TOTAL_SUM >= 296.179993 AND _M_TOTAL_SUM_RETAIL < 505.119995 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_108, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_AGE >= 31.2671242 AND _A_P_L_C < 10.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _M_TOTAL_COUNT_RETAIL < 1.5 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_007_FREQ < 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_109, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 65.5 AND _C_CRD_3D_TRN_SUM_1 < 114.994995 AND _M_TOTAL_SUM < 814.915039 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_110, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ IS NOT NULL AND _C_CC_TRAN_ACCOUNT_BIN_FREQ < 65.5 AND _C_CRD_CNP_TRN_SUM_3 < 10.7449999 AND _M_RECENT_SUM_WEEK_1 < 9.92499924 AND _Q_AUTH_COUNT >= 58.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_CA_MERCH_AMT < 23.9799995 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_111, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_DTL_CAPP_NBANK_SSO_DT < 2064513020.0 AND _M_FIRST_USE_DATE >= 23902.5 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_20S_004_FREQ < 5798.5 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ >= 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_112, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_2DAY_VEL_5 < 2.5 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SESS_ID_FREQ >= 9.5 AND _M_TOTAL_SUM_RETAIL < 100.110001 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_CLIENT_AMT >= 42.2799988 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_113, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND _A_24H_CNP_DC_RTL_SUM_MAX_DT >= -1.5 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SCORE_H2O < 258.5 AND _Q_AUTH_COUNT < 93.5 AND DTL_CA_CLIENT_AMT < 0.335000008 AND DTL_CA_MERCH_AMT < 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 1034.5) as rule_114, 
    (DTL_CA_MERCH_CURR_CODE_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_DOB < 9367.5 AND _A_D_D_1 < 2065549820.0 AND _C_CC_2DAY_AMT_6 >= 440.565002 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM < 814.915039 AND _Q_MER_FRAUD_SCORE_SUM_1 >= 2223398.75 AND DTL_CA_AUTH_SYS_INFO_FREQ < 1793.5 AND DTL_CA_MERCH_CURR_CODE_FREQ < 10892.0 AND SSA_C_CASH_LIMIT < 1900.0) as rule_115, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ IS NOT NULL AND _L_SDID_H2O_FREQ IS NOT NULL AND _A_P_L_C < 10.5 AND _C_CC_2DAY_VEL_6 < 5.5 AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _L_SDID_H2O_FREQ >= 7.5 AND _Q_CRD_F2F_BIN_ATTACK_CNTRY_3_FREQ >= 3012.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ >= 1034.5) as rule_116, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _A_PROF_CAPP_DEVICE_1_FREQ IS NOT NULL AND _A_NPP_FTP_SUM >= 93.3499985 AND _A_PROF_CAPP_DEVICE_1_FREQ >= 8.5 AND _C_CC_2DAY_AMT_6 < 2.46500015 AND _C_CC_GBL_N3D_SUM_1 >= 7.47999954 AND _L_BC_SCORE_H2O >= 432.5 AND _M_TOTAL_COUNT < 18.5 AND CHL_CT_TERM_CNTRY_CODE_FREQ >= 10184.0 AND DTL_EX_3_8S_007_FREQ >= 2971.5 AND DTL_EX_3_8S_009_FREQ >= 2992.0) as rule_117, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _C_CC_GBL_N3D_1D_CNT_1 < 2.5 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_MAX_30D_MULE_SCORE >= 943.5 AND _M_FIRST_USE_DATE >= 23794.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_118, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND _C_CC_2DAY_AMT_6 < 185.5 AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _M_TOTAL_COUNT_RETAIL < 1.5 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1552453.5 AND CHL_CT_MER_MCC_FREQ < 709.0 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_CA_CLIENT_AMT >= 2.41499996 AND DTL_EX_3_8S_007_FREQ < 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_119, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_DIGITAL_BPAY_FTP_DT < -206.5 AND _A_P_L_C >= 10.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_120, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_CA_MERCH_CURR_CODE_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _C_CC_GBL_N3D_1D_CNT_1 >= 2.5 AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _L_BC_SESS_ID_FREQ < 9.5 AND _M_TOTAL_SUM < 814.915039 AND _M_TOTAL_SUM >= 296.179993 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_MERCH_CURR_CODE_FREQ >= 10892.0 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_121, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND CHL_CT_MER_MCC_FREQ IS NOT NULL AND ATH_PC_CUST_PRESENT_FREQ IS NOT NULL AND _C_CC_2DAY_AMT_6 >= 185.5 AND _C_CC_RECOV_TRANS_SUM_1 < 0.00999999978 AND _C_N3D_MERC_ID_SUM_1 < 1.80500007 AND _M_RECENT_SUM_WEEK_1 < 9.92499924 AND ATH_PC_CUST_PRESENT_FREQ >= 11170.5 AND CHL_CT_MER_MCC_FREQ < 709.0 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_122, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_80S_001_FREQ IS NOT NULL AND DTL_EX_2_ENTITY_ID_6_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_PROF_CAPP_DEVICE_1_FREQ IS NOT NULL AND _A_CLIENT_CITY_DATE_2 >= 2064998270.0 AND _A_PROF_CAPP_DEVICE_1_FREQ >= 8.5 AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _L_BC_SCORE_H2O >= 432.5 AND _M_TOTAL_COUNT < 18.5 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_EX_2_ENTITY_ID_6_FREQ >= 397.0 AND DTL_EX_3_80S_001_FREQ < 201.5 AND DTL_EX_3_8S_007_FREQ >= 2971.5 AND DTL_EX_3_8S_009_FREQ >= 1034.5) as rule_123, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND _C_CC_GBL_N3D_1D_CNT_1 < 2.5 AND _C_CC_GBL_N3D_CNT_1 < 1.5 AND _C_N3D_MERC_ID_SUM_3 < 0.0149999997 AND _L_BC_SCORE_H2O < 258.5 AND _M_FIRST_USE_DATE >= 23794.5 AND _Q_AUTH_COUNT < 58.5 AND DTL_CA_CLIENT_AMT >= 0.335000008 AND DTL_CA_MERCH_AMT < 23.9799995 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_124, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _C_CRD_CNP_TRN_SUM_3 < 10.7449999 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND _Q_AUTH_COUNT >= 58.5 AND DTL_CA_CLIENT_AMT < 1.56999993 AND DTL_CA_CLIENT_AMT >= 0.335000008 AND DTL_CA_MERCH_AMT < 23.9799995 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 2992.0 AND DTL_EX_3_8S_009_FREQ >= 1034.5) as rule_125, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND ATH_PC_CUST_PRESENT_FREQ IS NOT NULL AND _A_BTS_CUST_DOB >= 9367.5 AND _M_RECENT_SUM_WEEK_1 < 9.92499924 AND _M_TOTAL_SUM < 814.915039 AND ATH_PC_CUST_PRESENT_FREQ < 11170.5 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 9162.5 AND DTL_EX_3_8S_007_FREQ >= 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_126, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_U < 14200.5898 AND _C_CRD_3D_TRN_SUM_3 >= 5.06999969 AND _C_N3D_MERC_ID_SUM_1 < 10.3850002 AND _L_BC_SESS_ID_FREQ < 3.5 AND _L_BC_SESS_ID_FREQ >= 2.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _Q_MER_FRAUD_SCORE_SUM_6 < 1503129.5 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 8759.0 AND DTL_CA_CLIENT_AMT >= 1.56999993 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_127, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_R < 281.429993 AND _C_CRD_3D_TRN_SUM_1 < 114.994995 AND _C_CRD_3D_TRN_SUM_3 >= 5.06999969 AND _L_BC_SESS_ID_FREQ < 2.5 AND _M_RECENT_SUM_WEEK_1 >= 9.92499924 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_128, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_P_L_C < 10.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _L_BC_SESS_ID_FREQ >= 3.5 AND _M_FIRST_USE_DATE < 23902.5 AND _M_RECENT_SUM_WEEK_5 < 13.9849997 AND _M_TOTAL_SUM_RETAIL < 505.119995 AND _Q_MER_FRAUD_SCORE_SUM_2 >= 136115872.0 AND DTL_CA_CLIENT_AMT >= 1.56999993 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 2992.0) as rule_129, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_AGE >= 31.2671242 AND _A_BTS_CUST_DOB >= 9367.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _M_FIRST_USE_DATE < 23902.5 AND _M_TOTAL_COUNT_RETAIL < 1.5 AND _M_TOTAL_SUM < 814.915039 AND DTL_CA_AUTH_SYS_INFO_FREQ < 8759.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_MERCH_AMT >= 23.9799995 AND DTL_EX_3_20S_004_FREQ >= 9162.5 AND DTL_EX_3_8S_007_FREQ < 167.5 AND DTL_EX_3_8S_009_FREQ < 1034.5) as rule_130, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND CHL_CT_TERM_CNTRY_CODE_FREQ IS NOT NULL AND _L_BC_SESS_ID_FREQ IS NOT NULL AND _A_PROF_CAPP_DEVICE_1_FREQ IS NOT NULL AND _A_DIGITAL_BPAY_FTP_DT >= -101.5 AND _A_PROF_CAPP_DEVICE_1_FREQ >= 8.5 AND _L_BC_SCORE_H2O < 432.5 AND _L_BC_SESS_ID_FREQ < 9.5 AND _M_TOTAL_COUNT < 18.5 AND _M_TOTAL_SUM < 296.179993 AND _M_TOTAL_SUM_RETAIL < 100.110001 AND CHL_CT_TERM_CNTRY_CODE_FREQ < 10184.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 42.2799988 AND DTL_EX_3_20S_004_FREQ >= 9162.5 AND DTL_EX_3_8S_007_FREQ >= 2971.5 AND DTL_EX_3_8S_009_FREQ >= 404.0) as rule_131, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_80S_001_FREQ IS NOT NULL AND DTL_EX_2_ENTITY_ID_6_FREQ IS NOT NULL AND DTL_CA_MERCH_CURR_CODE_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_BTS_CUST_AGE < 39.1863022 AND _A_BTS_CUST_DOB >= 9367.5 AND _A_D_D_1 < 2065549820.0 AND _C_CC_GBL_N3D_CNT_1 >= 1.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _M_TOTAL_SUM < 814.915039 AND _Q_MER_FRAUD_SCORE_SUM_1 >= 2223398.75 AND DTL_CA_AUTH_SYS_INFO_FREQ < 1793.5 AND DTL_CA_CLIENT_AMT >= 43.3600006 AND DTL_CA_MERCH_CURR_CODE_FREQ < 10892.0 AND DTL_EX_2_ENTITY_ID_6_FREQ >= 397.0 AND DTL_EX_3_80S_001_FREQ < 201.5 AND DTL_EX_3_8S_009_FREQ >= 1034.5) as rule_132, 
    (DTL_EX_3_8S_009_FREQ IS NOT NULL AND DTL_EX_3_8S_007_FREQ IS NOT NULL AND DTL_EX_3_20S_004_FREQ IS NOT NULL AND DTL_CA_AUTH_SYS_INFO_FREQ IS NOT NULL AND _A_AUS_IP_ACTIVITY < 2065596930.0 AND _A_CRD_NPP_PAYMENT_AMOUNT >= 45.2999992 AND _A_DIGITAL_BPAY_FTP_DT >= -206.5 AND _A_P_L_C >= 10.5 AND _C_CC_RECOV_TRANS_SUM_1 >= 0.00999999978 AND _C_CRD_3D_TRN_SUM_3 < 5.06999969 AND _L_MAX_30D_MULE_SCORE < 943.5 AND _M_RECENT_SUM_WEEK_5 < 13.0249996 AND _Q_MER_FRAUD_SCORE_CNT_5 < 866.0 AND DTL_CA_AUTH_SYS_INFO_FREQ >= 1793.5 AND DTL_CA_CLIENT_AMT >= 2.99499989 AND DTL_EX_3_20S_004_FREQ >= 681.5 AND DTL_EX_3_8S_007_FREQ < 2971.5 AND DTL_EX_3_8S_009_FREQ < 404.0) as rule_133
 FROM (
 SELECT 
     * 
 FROM LABMLFRD.TECHDS_MARVIN_CCA_TRANSACTIONS_ENCODED_FRAUD_E2E_ENGINEER_TEST_20250916_062816
 WHERE 
    ((""CATEGORY"" = 'validation') OR (""CATEGORY"" = 'test'))
)
)
 WHERE 
    rule_0 or rule_1 or rule_2 or rule_3 or rule_4 or rule_5 or rule_6 or rule_7 or rule_8 or rule_9 or rule_10 or rule_11 or rule_12 or rule_13 or rule_14 or rule_15 or rule_16 or rule_17 or rule_18 or rule_19 or rule_20 or rule_21 or rule_22 or rule_23 or rule_24 or rule_25 or rule_26 or rule_27 or rule_28 or rule_29 or rule_30 or rule_31 or rule_32 or rule_33 or rule_34 or rule_35 or rule_36 or rule_37 or rule_38 or rule_39 or rule_40 or rule_41 or rule_42 or rule_43 or rule_44 or rule_45 or rule_46 or rule_47 or rule_48 or rule_49 or rule_50 or rule_51 or rule_52 or rule_53 or rule_54 or rule_55 or rule_56 or rule_57 or rule_58 or rule_59 or rule_60 or rule_61 or rule_62 or rule_63 or rule_64 or rule_65 or rule_66 or rule_67 or rule_68 or rule_69 or rule_70 or rule_71 or rule_72 or rule_73 or rule_74 or rule_75 or rule_76 or rule_77 or rule_78 or rule_79 or rule_80 or rule_81 or rule_82 or rule_83 or rule_84 or rule_85 or rule_86 or rule_87 or rule_88 or rule_89 or rule_90 or rule_91 or rule_92 or rule_93 or rule_94 or rule_95 or rule_96 or rule_97 or rule_98 or rule_99 or rule_100 or rule_101 or rule_102 or rule_103 or rule_104 or rule_105 or rule_106 or rule_107 or rule_108 or rule_109 or rule_110 or rule_111 or rule_112 or rule_113 or rule_114 or rule_115 or rule_116 or rule_117 or rule_118 or rule_119 or rule_120 or rule_121 or rule_122 or rule_123 or rule_124 or rule_125 or rule_126 or rule_127 or rule_128 or rule_129 or rule_130 or rule_131 or rule_132 or rule_133
)
 WHERE 
    (""CATEGORY"" = 'validation')
) LIMIT 1",CLEMINRD,R_USR_FRAUMD_LABMLFRD_RW,WH_USR_PRD_P01_FRAUMD_LABMLFRD_003,2X-Large,SUCCESS,2025-09-16 12:39:07.872 Z,2025-09-16 13:09:55.234 Z
