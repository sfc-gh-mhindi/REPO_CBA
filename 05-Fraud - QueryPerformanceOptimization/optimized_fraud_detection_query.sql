-- OPTIMIZED Fraud Detection Query - Early Alert Filtering + Explicit Columns
-- Based on DIGT_ALRT_DETC_MICR_BTCH_EVNT_STG__dbt_tmp.sql

CREATE OR REPLACE TEMPORARY VIEW PRD_P01_DMN_FRAUMD.LCL.DIGT_ALRT_DETC_MICR_BTCH_EVNT_STG__dbt_tmp AS (

-- Common date filters calculated once
WITH date_filters AS (
    SELECT 
        TO_CHAR(CURRENT_TIMESTAMP() - INTERVAL '30 DAY', 'YYYYMMDD') AS date_filter_30d,
        TO_CHAR(CURRENT_TIMESTAMP() - INTERVAL '30 DAY', 'HH:MI:SS.FF2') AS time_filter_30d,
        TO_CHAR(CURRENT_TIMESTAMP() - INTERVAL '30 DAY', 'YYYYMMDD HH:MI:SS.FF2') AS datetime_filter_30d,
        TO_CHAR(CURRENT_TIMESTAMP() - INTERVAL '30 DAY', 'YYYYMMDDHH24MISSFF6') AS kafka_filter_30d,
        DATEADD(DAY, -30, CURRENT_DATE) AS date_30d_ago
),

-- Step 1: Get alerts first for early filtering
alerts_with_users AS (
    SELECT 
        A.ALERT_ID,
        A.ALERT_TYPE,
        A.ALERT_VALUE,
        A.STRATEGY_NAME,
        A.ALERT_LAST_TRANSACTION_TIMESTAMP AS CASEACTIONDATETIME,
        A.ALERT_CREATE_TIMESTAMP AS CASECREATEDATETIME,
        A.BUSINESS_UNIT_NAME,
        A.ALERT_TYPE_NAME,
        A.RULE_NAME AS DETECTED_ALERT_STRATEGY_NAME,
        A.NETBANK_ID,
        A.CUSTOMER_ID
    FROM LCL.DIGT_ALRT_DETC_MICR_BTCH_RAW_DEDUP_STG A
),

-- Step 2: FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT NPP Events with early alert filtering (your preferred pattern)
npp_events_with_alerts AS (
    SELECT
        'LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT' AS SRC_DATA,
        CONCAT(E.DTL_EX_0_N_064::VARCHAR, E.DTL_EX_0_N_065::VARCHAR, E.DTL_EX_0_N_066::VARCHAR) AS UNIQUE_EVENT_ID,
        E.DTL_EX_1_5S_01::VARCHAR AS DTL_EX_1_5S_01,
        E.CHL_ID_OB_USERID::VARCHAR AS CHL_ID_OB_USERID,
        E.SSX_CUST_NUM::VARCHAR AS SSX_CUST_NUM,
        E.TTS_TRAN_DATE_ALT,
        E.TTS_TRAN_TIME_ALT,
        CONCAT(TRY_TO_DATE(E.TTS_TRAN_DATE_ALT,'YYYYMMDD')::VARCHAR, ' ', TRY_TO_TIME(E.TTS_TRAN_TIME_ALT,'HH:MI:SS.FF2')::VARCHAR) AS TTS_TRAN_DATETIME_ALT,
        E.CHL_OB_IP_ISP::VARCHAR AS CHL_OB_IP_ISP,
        E.DTL_EX_0_10S_004::VARCHAR AS DTL_EX_0_10S_004,
        E.DTL_EX_0_20S_004::VARCHAR AS DTL_EX_0_20S_004,
        E.DTL_EX_0_30S_001::VARCHAR AS DTL_EX_0_30S_001,
        E.DTL_EX_0_30S_002::VARCHAR AS DTL_EX_0_30S_002,
        E.DTL_EX_0_80S_002::VARCHAR AS DTL_EX_0_80S_002,
        E.DTL_EX_3_N_002::VARCHAR AS DTL_EX_3_N_002,
        E.DTL_EX_0_4S_001::VARCHAR AS DTL_EX_0_4S_001,
        E.DTL_EX_0_I_002::VARCHAR AS DTL_EX_0_I_002,
        E.DTL_EX_0_I_003::VARCHAR AS DTL_EX_0_I_003,
        E.DTL_EX_0_I_004::VARCHAR AS DTL_EX_0_I_004,
        E.DTL_EX_0_I_005::VARCHAR AS DTL_EX_0_I_005,
        E.DTL_EX_0_I_006::VARCHAR AS DTL_EX_0_I_006,
        E.DTL_EX_0_I_009::VARCHAR AS DTL_EX_0_I_009,
        E.DTL_EX_0_N_001::VARCHAR AS DTL_EX_0_N_001,
        E.DTL_EX_0_N_004::VARCHAR AS DTL_EX_0_N_004,
        E.DTL_EX_0_N_006::VARCHAR AS DTL_EX_0_N_006,
        E.DTL_EX_0_N_009::VARCHAR AS DTL_EX_0_N_009,
        E.DTL_EX_0_N_011::VARCHAR AS DTL_EX_0_N_011,
        E.DTL_EX_0_N_012::VARCHAR AS DTL_EX_0_N_012,
        E.DTL_EX_0_N_013::VARCHAR AS DTL_EX_0_N_013,
        E.DTL_EX_0_N_014::VARCHAR AS DTL_EX_0_N_014,
        E.DTL_EX_0_N_015::VARCHAR AS DTL_EX_0_N_015,
        E.DTL_EX_0_N_016::VARCHAR AS DTL_EX_0_N_016,
        E.DTL_EX_0_N_017::VARCHAR AS DTL_EX_0_N_017,
        E.DTL_EX_0_N_019::VARCHAR AS DTL_EX_0_N_019,
        E.DTL_EX_0_N_021::VARCHAR AS DTL_EX_0_N_021,
        E.DTL_EX_0_N_029::VARCHAR AS DTL_EX_0_N_029,
        E.DTL_EX_0_N_034::VARCHAR AS DTL_EX_0_N_034,
        E.DTL_EX_0_N_040::VARCHAR AS DTL_EX_0_N_040,
        E.DTL_EX_0_N_041::VARCHAR AS DTL_EX_0_N_041,
        E.DTL_EX_0_N_056::VARCHAR AS DTL_EX_0_N_056,
        E.DTL_EX_0_N_064::VARCHAR AS DTL_EX_0_N_064,
        E.DTL_EX_0_N_065::VARCHAR AS DTL_EX_0_N_065,
        E.DTL_EX_0_N_066::VARCHAR AS DTL_EX_0_N_066,
        TRY_TO_DATE(E.DTL_EX_1_DATE_01,'YYYYMMDD')::VARCHAR AS DTL_EX_1_DATE_01,
        E.HDR_ACCT_TYPE::VARCHAR AS HDR_ACCT_TYPE,
        E.HDR_ACTIVITY_TYPE::VARCHAR AS HDR_ACTIVITY_TYPE,
        E.RSP_ACTION_CODE::VARCHAR AS RSP_ACTION_CODE,
        E.RSP_EX_2_30S_001::VARCHAR AS RSP_EX_2_30S_001,
        E.SSX_CUST_BIRTH_DT::VARCHAR AS SSX_CUST_BIRTH_DT,
        E.TGX_ACCT_NUM::VARCHAR AS TGX_ACCT_NUM,
        E.TGX_BANK_NAME::VARCHAR AS TGX_BANK_NAME,
        E.TGX_BANK_NUM::VARCHAR AS TGX_BANK_NUM,
        E.TGX_BRANCH_ID::VARCHAR AS TGX_BRANCH_ID,
        E.TGX_CNTRY_CODE::VARCHAR AS TGX_CNTRY_CODE,
        E.TGX_DESCRIPTION::VARCHAR AS TGX_DESCRIPTION,
        E.TGX_NAME::VARCHAR AS TGX_NAME,
        TRY_TO_DECIMAL(E.TGX_TRAN_AMT::VARCHAR,38,2)::VARCHAR AS TGX_TRAN_AMT,
        NULL AS DTL_NM_SUB_TRAN_TYPE,
        -- Alert columns
        A.ALERT_ID, A.ALERT_TYPE, A.ALERT_VALUE, A.STRATEGY_NAME,
        A.ALERT_LAST_TRANSACTION_TIMESTAMP AS CASEACTIONDATETIME, 
        A.ALERT_CREATE_TIMESTAMP AS CASECREATEDATETIME, 
        A.BUSINESS_UNIT_NAME,
        A.ALERT_TYPE_NAME, 
        A.RULE_NAME AS DETECTED_ALERT_STRATEGY_NAME
    FROM LCL.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT E
    CROSS JOIN date_filters DF
    INNER JOIN alerts_with_users A 
        ON (A.NETBANK_ID = E.CHL_ID_OB_USERID OR A.CUSTOMER_ID = E.SSX_CUST_NUM)
    -- Your preferred datetime filtering pattern
    WHERE E.TTS_TRAN_DATE_ALT >= DF.date_filter_30d
      AND CONCAT(E.TTS_TRAN_DATE_ALT, ' ', E.TTS_TRAN_TIME_ALT) >= DF.datetime_filter_30d
),

-- Step 3: FDP_DIGITAL_MONETARY_TRANSACTIONS_SEND_FLAT Digital Monetary Events with early alert filtering
digt_mon_events_with_alerts AS (
    SELECT
        'LCL.FDP_DIGITAL_MONETARY_TRANSACTIONS_SEND_FLAT' AS SRC_DATA,
        CONCAT(E.DTL_EX_0_N_064::VARCHAR, E.DTL_EX_0_N_065::VARCHAR, E.DTL_EX_0_N_066::VARCHAR) AS UNIQUE_EVENT_ID,
        E.DTL_EX_1_5S_01::VARCHAR AS DTL_EX_1_5S_01,
        E.CHL_ID_OB_USERID::VARCHAR AS CHL_ID_OB_USERID,
        E.SSX_CUST_NUM::VARCHAR AS SSX_CUST_NUM,
        E.TTS_TRAN_DATE_ALT,
        E.TTS_TRAN_TIME_ALT,
        CONCAT(TRY_TO_DATE(E.TTS_TRAN_DATE_ALT,'YYYYMMDD')::VARCHAR, ' ', TRY_TO_TIME(E.TTS_TRAN_TIME_ALT,'HH:MI:SS.FF2')::VARCHAR) AS TTS_TRAN_DATETIME_ALT,
        E.CHL_OB_IP_ISP::VARCHAR AS CHL_OB_IP_ISP,
        E.DTL_EX_0_10S_004::VARCHAR AS DTL_EX_0_10S_004,
        E.DTL_EX_0_20S_004::VARCHAR AS DTL_EX_0_20S_004,
        E.DTL_EX_0_30S_001::VARCHAR AS DTL_EX_0_30S_001,
        E.DTL_EX_0_30S_002::VARCHAR AS DTL_EX_0_30S_002,
        E.DTL_EX_0_80S_002::VARCHAR AS DTL_EX_0_80S_002,
        E.DTL_EX_3_N_002::VARCHAR AS DTL_EX_3_N_002,
        E.DTL_EX_0_4S_001::VARCHAR AS DTL_EX_0_4S_001,
        E.DTL_EX_0_I_002::VARCHAR AS DTL_EX_0_I_002,
        E.DTL_EX_0_I_003::VARCHAR AS DTL_EX_0_I_003,
        E.DTL_EX_0_I_004::VARCHAR AS DTL_EX_0_I_004,
        E.DTL_EX_0_I_005::VARCHAR AS DTL_EX_0_I_005,
        E.DTL_EX_0_I_006::VARCHAR AS DTL_EX_0_I_006,
        E.DTL_EX_0_I_009::VARCHAR AS DTL_EX_0_I_009,
        E.DTL_EX_0_N_001::VARCHAR AS DTL_EX_0_N_001,
        E.DTL_EX_0_N_004::VARCHAR AS DTL_EX_0_N_004,
        E.DTL_EX_0_N_006::VARCHAR AS DTL_EX_0_N_006,
        E.DTL_EX_0_N_009::VARCHAR AS DTL_EX_0_N_009,
        E.DTL_EX_0_N_011::VARCHAR AS DTL_EX_0_N_011,
        E.DTL_EX_0_N_012::VARCHAR AS DTL_EX_0_N_012,
        E.DTL_EX_0_N_013::VARCHAR AS DTL_EX_0_N_013,
        E.DTL_EX_0_N_014::VARCHAR AS DTL_EX_0_N_014,
        E.DTL_EX_0_N_015::VARCHAR AS DTL_EX_0_N_015,
        E.DTL_EX_0_N_016::VARCHAR AS DTL_EX_0_N_016,
        E.DTL_EX_0_N_017::VARCHAR AS DTL_EX_0_N_017,
        E.DTL_EX_0_N_019::VARCHAR AS DTL_EX_0_N_019,
        E.DTL_EX_0_N_021::VARCHAR AS DTL_EX_0_N_021,
        E.DTL_EX_0_N_029::VARCHAR AS DTL_EX_0_N_029,
        E.DTL_EX_0_N_034::VARCHAR AS DTL_EX_0_N_034,
        E.DTL_EX_0_N_040::VARCHAR AS DTL_EX_0_N_040,
        E.DTL_EX_0_N_041::VARCHAR AS DTL_EX_0_N_041,
        E.DTL_EX_0_N_056::VARCHAR AS DTL_EX_0_N_056,
        E.DTL_EX_0_N_064::VARCHAR AS DTL_EX_0_N_064,
        E.DTL_EX_0_N_065::VARCHAR AS DTL_EX_0_N_065,
        E.DTL_EX_0_N_066::VARCHAR AS DTL_EX_0_N_066,
        TRY_TO_DATE(E.DTL_EX_1_DATE_01,'YYYYMMDD')::VARCHAR AS DTL_EX_1_DATE_01,
        E.HDR_ACCT_TYPE::VARCHAR AS HDR_ACCT_TYPE,
        E.HDR_ACTIVITY_TYPE::VARCHAR AS HDR_ACTIVITY_TYPE,
        E.RSP_ACTION_CODE::VARCHAR AS RSP_ACTION_CODE,
        E.RSP_EX_2_30S_001::VARCHAR AS RSP_EX_2_30S_001,
        E.SSX_CUST_BIRTH_DT::VARCHAR AS SSX_CUST_BIRTH_DT,
        E.TGX_ACCT_NUM::VARCHAR AS TGX_ACCT_NUM,
        E.TGX_BANK_NAME::VARCHAR AS TGX_BANK_NAME,
        E.TGX_BANK_NUM::VARCHAR AS TGX_BANK_NUM,
        E.TGX_BRANCH_ID::VARCHAR AS TGX_BRANCH_ID,
        E.TGX_CNTRY_CODE::VARCHAR AS TGX_CNTRY_CODE,
        E.TGX_DESCRIPTION::VARCHAR AS TGX_DESCRIPTION,
        E.TGX_NAME::VARCHAR AS TGX_NAME,
        TRY_TO_DECIMAL(E.TGX_TRAN_AMT::VARCHAR,38,2)::VARCHAR AS TGX_TRAN_AMT,
        NULL AS DTL_NM_SUB_TRAN_TYPE,
        -- Alert columns
        A.ALERT_ID, A.ALERT_TYPE, A.ALERT_VALUE, A.STRATEGY_NAME,
        A.ALERT_LAST_TRANSACTION_TIMESTAMP AS CASEACTIONDATETIME, 
        A.ALERT_CREATE_TIMESTAMP AS CASECREATEDATETIME, 
        A.BUSINESS_UNIT_NAME,
        A.ALERT_TYPE_NAME, 
        A.RULE_NAME AS DETECTED_ALERT_STRATEGY_NAME
    FROM LCL.FDP_DIGITAL_MONETARY_TRANSACTIONS_SEND_FLAT E
    CROSS JOIN date_filters DF
    INNER JOIN alerts_with_users A 
        ON (A.NETBANK_ID = E.CHL_ID_OB_USERID OR A.CUSTOMER_ID = E.SSX_CUST_NUM)
    WHERE E.TTS_TRAN_DATE_ALT >= DF.date_filter_30d
      AND CONCAT(E.TTS_TRAN_DATE_ALT, ' ', E.TTS_TRAN_TIME_ALT) >= DF.datetime_filter_30d
),

-- Step 4: FDP_DIGT_NMON_TRAN_SBST Digital Non-Monetary Events with early alert filtering
digt_nonmon_events_with_alerts AS (
    SELECT
        'LCL.FDP_DIGT_NMON_TRAN_SBST' AS SRC_DATA,
        CONCAT(E.DTL_EX_0_N_064::VARCHAR, E.DTL_EX_0_N_065::VARCHAR, E.DTL_EX_0_N_066::VARCHAR) AS UNIQUE_EVENT_ID,
        E.DTL_EX_1_5S_01::VARCHAR AS DTL_EX_1_5S_01,
        E.CHL_ID_OB_USERID::VARCHAR AS CHL_ID_OB_USERID,
        E.SSX_CUST_NUM::VARCHAR AS SSX_CUST_NUM,
        E.TTS_TRAN_DATE_ALT,
        E.TTS_TRAN_TIME_ALT,
        CONCAT(TRY_TO_DATE(E.TTS_TRAN_DATE_ALT,'YYYYMMDD')::VARCHAR, ' ', TRY_TO_TIME(E.TTS_TRAN_TIME_ALT,'HH:MI:SS.FF2')::VARCHAR) AS TTS_TRAN_DATETIME_ALT,
        E.CHL_OB_IP_ISP::VARCHAR AS CHL_OB_IP_ISP,
        E.DTL_EX_0_10S_004::VARCHAR AS DTL_EX_0_10S_004,
        E.DTL_EX_0_20S_004::VARCHAR AS DTL_EX_0_20S_004,
        E.DTL_EX_0_30S_001::VARCHAR AS DTL_EX_0_30S_001,
        E.DTL_EX_0_30S_002::VARCHAR AS DTL_EX_0_30S_002,
        E.DTL_EX_0_80S_002::VARCHAR AS DTL_EX_0_80S_002,
        E.DTL_EX_3_N_002::VARCHAR AS DTL_EX_3_N_002,
        E.DTL_EX_0_4S_001::VARCHAR AS DTL_EX_0_4S_001,
        E.DTL_EX_0_I_002::VARCHAR AS DTL_EX_0_I_002,
        E.DTL_EX_0_I_003::VARCHAR AS DTL_EX_0_I_003,
        E.DTL_EX_0_I_004::VARCHAR AS DTL_EX_0_I_004,
        E.DTL_EX_0_I_005::VARCHAR AS DTL_EX_0_I_005,
        E.DTL_EX_0_I_006::VARCHAR AS DTL_EX_0_I_006,
        E.DTL_EX_0_I_009::VARCHAR AS DTL_EX_0_I_009,
        E.DTL_EX_0_N_001::VARCHAR AS DTL_EX_0_N_001,
        E.DTL_EX_0_N_004::VARCHAR AS DTL_EX_0_N_004,
        E.DTL_EX_0_N_006::VARCHAR AS DTL_EX_0_N_006,
        E.DTL_EX_0_N_009::VARCHAR AS DTL_EX_0_N_009,
        E.DTL_EX_0_N_011::VARCHAR AS DTL_EX_0_N_011,
        E.DTL_EX_0_N_012::VARCHAR AS DTL_EX_0_N_012,
        E.DTL_EX_0_N_013::VARCHAR AS DTL_EX_0_N_013,
        E.DTL_EX_0_N_014::VARCHAR AS DTL_EX_0_N_014,
        E.DTL_EX_0_N_015::VARCHAR AS DTL_EX_0_N_015,
        E.DTL_EX_0_N_016::VARCHAR AS DTL_EX_0_N_016,
        E.DTL_EX_0_N_017::VARCHAR AS DTL_EX_0_N_017,
        E.DTL_EX_0_N_019::VARCHAR AS DTL_EX_0_N_019,
        E.DTL_EX_0_N_021::VARCHAR AS DTL_EX_0_N_021,
        E.DTL_EX_0_N_029::VARCHAR AS DTL_EX_0_N_029,
        E.DTL_EX_0_N_034::VARCHAR AS DTL_EX_0_N_034,
        E.DTL_EX_0_N_040::VARCHAR AS DTL_EX_0_N_040,
        E.DTL_EX_0_N_041::VARCHAR AS DTL_EX_0_N_041,
        E.DTL_EX_0_N_056::VARCHAR AS DTL_EX_0_N_056,
        E.DTL_EX_0_N_064::VARCHAR AS DTL_EX_0_N_064,
        E.DTL_EX_0_N_065::VARCHAR AS DTL_EX_0_N_065,
        E.DTL_EX_0_N_066::VARCHAR AS DTL_EX_0_N_066,
        TRY_TO_DATE(E.DTL_EX_1_DATE_01,'YYYYMMDD')::VARCHAR AS DTL_EX_1_DATE_01,
        E.HDR_ACCT_TYPE::VARCHAR AS HDR_ACCT_TYPE,
        E.HDR_ACTIVITY_TYPE::VARCHAR AS HDR_ACTIVITY_TYPE,
        E.RSP_ACTION_CODE::VARCHAR AS RSP_ACTION_CODE,
        E.RSP_EX_2_30S_001::VARCHAR AS RSP_EX_2_30S_001,
        E.SSX_CUST_BIRTH_DT::VARCHAR AS SSX_CUST_BIRTH_DT,
        E.TGX_ACCT_NUM::VARCHAR AS TGX_ACCT_NUM,
        E.TGX_BANK_NAME::VARCHAR AS TGX_BANK_NAME,
        E.TGX_BANK_NUM::VARCHAR AS TGX_BANK_NUM,
        E.TGX_BRANCH_ID::VARCHAR AS TGX_BRANCH_ID,
        E.TGX_CNTRY_CODE::VARCHAR AS TGX_CNTRY_CODE,
        E.TGX_DESCRIPTION::VARCHAR AS TGX_DESCRIPTION,
        E.TGX_NAME::VARCHAR AS TGX_NAME,
        TRY_TO_DECIMAL(E.TGX_TRAN_AMT::VARCHAR,38,2)::VARCHAR AS TGX_TRAN_AMT,
        NULL AS DTL_NM_SUB_TRAN_TYPE,
        -- Alert columns
        A.ALERT_ID, A.ALERT_TYPE, A.ALERT_VALUE, A.STRATEGY_NAME,
        A.ALERT_LAST_TRANSACTION_TIMESTAMP AS CASEACTIONDATETIME, 
        A.ALERT_CREATE_TIMESTAMP AS CASECREATEDATETIME, 
        A.BUSINESS_UNIT_NAME,
        A.ALERT_TYPE_NAME, 
        A.RULE_NAME AS DETECTED_ALERT_STRATEGY_NAME
    FROM LCL.FDP_DIGT_NMON_TRAN_SBST E
    CROSS JOIN date_filters DF
    INNER JOIN alerts_with_users A 
        ON (A.NETBANK_ID = E.CHL_ID_OB_USERID OR A.CUSTOMER_ID = E.SSX_CUST_NUM)
    WHERE E.TTS_TRAN_DATE_ALT >= DF.date_filter_30d
      AND CONCAT(E.TTS_TRAN_DATE_ALT, ' ', E.TTS_TRAN_TIME_ALT) >= DF.datetime_filter_30d
),

-- Step 5: UV Events derived from latest FDP_DIGT_NMON_TRAN_SBST records
uv_events_formatted AS (
    SELECT
        'DERIVED_UV_FROM_LCL.FDP_DIGT_NMON_TRAN_SBST' AS SRC_DATA,
        CONCAT(UV.DTL_EX_0_N_064, UV.DTL_EX_0_N_065, UV.DTL_EX_0_N_066, '_', uv_events.event_code, '_', ROW_NUMBER() OVER (PARTITION BY UV.CHL_ID_OB_USERID, uv_events.event_code ORDER BY uv_events.event_date)) AS UNIQUE_EVENT_ID,
        uv_events.event_code AS DTL_EX_1_5S_01,
        UV.CHL_ID_OB_USERID::VARCHAR AS CHL_ID_OB_USERID,
        UV.SSX_CUST_NUM::VARCHAR AS SSX_CUST_NUM,
        TO_DATE(uv_events.event_date)::VARCHAR AS TTS_TRAN_DATE_ALT,
        TO_TIME(uv_events.event_date)::VARCHAR AS TTS_TRAN_TIME_ALT,
        CONCAT(TO_DATE(uv_events.event_date)::VARCHAR, ' ', TO_TIME(uv_events.event_date)::VARCHAR) AS TTS_TRAN_DATETIME_ALT,
        -- Populate only relevant columns for UV events, rest as NULL
        NULL AS CHL_OB_IP_ISP,
        NULL AS DTL_EX_0_10S_004,
        CASE WHEN uv_events.event_code = 'M100' THEN uv_events.additional_info END AS DTL_EX_0_20S_004,
        NULL AS DTL_EX_0_30S_001,
        NULL AS DTL_EX_0_30S_002,
        NULL AS DTL_EX_0_80S_002,
        NULL AS DTL_EX_3_N_002,
        NULL AS DTL_EX_0_4S_001,
        NULL AS DTL_EX_0_I_002,
        CASE WHEN uv_events.event_code = 'T0101' AND uv_events.additional_info IS NOT NULL THEN '1' END AS DTL_EX_0_I_003,
        NULL AS DTL_EX_0_I_004,
        NULL AS DTL_EX_0_I_005,
        NULL AS DTL_EX_0_I_006,
        NULL AS DTL_EX_0_I_009,
        NULL AS DTL_EX_0_N_001,
        NULL AS DTL_EX_0_N_004,
        NULL AS DTL_EX_0_N_006,
        NULL AS DTL_EX_0_N_009,
        NULL AS DTL_EX_0_N_011,
        NULL AS DTL_EX_0_N_012,
        NULL AS DTL_EX_0_N_013,
        NULL AS DTL_EX_0_N_014,
        NULL AS DTL_EX_0_N_015,
        NULL AS DTL_EX_0_N_016,
        NULL AS DTL_EX_0_N_017,
        NULL AS DTL_EX_0_N_019,
        NULL AS DTL_EX_0_N_021,
        NULL AS DTL_EX_0_N_029,
        NULL AS DTL_EX_0_N_034,
        NULL AS DTL_EX_0_N_040,
        NULL AS DTL_EX_0_N_041,
        NULL AS DTL_EX_0_N_056,
        UV.DTL_EX_0_N_064,
        UV.DTL_EX_0_N_065,
        UV.DTL_EX_0_N_066,
        NULL AS DTL_EX_1_DATE_01,
        NULL AS HDR_ACCT_TYPE,
        NULL AS HDR_ACTIVITY_TYPE,
        NULL AS RSP_ACTION_CODE,
        uv_events.additional_info AS RSP_EX_2_30S_001,
        NULL AS SSX_CUST_BIRTH_DT,
        NULL AS TGX_ACCT_NUM,
        NULL AS TGX_BANK_NAME,
        NULL AS TGX_BANK_NUM,
        NULL AS TGX_BRANCH_ID,
        NULL AS TGX_CNTRY_CODE,
        NULL AS TGX_DESCRIPTION,
        NULL AS TGX_NAME,
        NULL AS TGX_TRAN_AMT,
        uv_events.sub_tran_type AS DTL_NM_SUB_TRAN_TYPE,
        -- Alert columns
        UV.ALERT_ID, UV.ALERT_TYPE, UV.ALERT_VALUE, UV.STRATEGY_NAME,
        UV.CASEACTIONDATETIME, UV.CASECREATEDATETIME, UV.BUSINESS_UNIT_NAME,
        UV.ALERT_TYPE_NAME, UV.DETECTED_ALERT_STRATEGY_NAME
    FROM (
        -- Get latest UV data for users with alerts
        SELECT 
            E.CHL_ID_OB_USERID,
            E.SSX_CUST_NUM,
            E.DTL_EX_0_N_064::VARCHAR AS DTL_EX_0_N_064,
            E.DTL_EX_0_N_065::VARCHAR AS DTL_EX_0_N_065,
            E.DTL_EX_0_N_066::VARCHAR AS DTL_EX_0_N_066,
            -- UV timestamp fields converted from epoch
            DATEADD(SECOND, E._A_TRAVEL_DT, '1960-01-01 00:00:00') AS _A_TRAVEL_DT,
            DATEADD(SECOND, E._A_HCE_ADD_CARD_DT, '1960-01-01 00:00:00') AS _A_HCE_ADD_CARD_DT,
            DATEADD(SECOND, E._A_HCE_REMOVE_CARD_DT, '1960-01-01 00:00:00') AS _A_HCE_REMOVE_CARD_DT,
            DATEADD(SECOND, E._A_DIGI_WALLET_ADD_CARD_DT, '1960-01-01 00:00:00') AS _A_DIGI_WALLET_ADD_CARD_DT,
            DATEADD(SECOND, E._N_CLIENT_QA_RESET, '1960-01-01 00:00:00') AS _N_CLIENT_QA_RESET,
            DATEADD(SECOND, E._N_CLIENT_PASSWORD_TEMP, '1960-01-01 00:00:00') AS _N_CLIENT_PASSWORD_TEMP,
            DATEADD(SECOND, E._N_CLIENT_PW_FORGOT, '1960-01-01 00:00:00') AS _N_CLIENT_PW_FORGOT,
            DATEADD(SECOND, E._N_CLIENT_QA_CHG, '1960-01-01 00:00:00') AS _N_CLIENT_QA_CHG,
            DATEADD(SECOND, E._A_CLIENT_PORT_DATE_1, '1960-01-01 00:00:00') AS _A_CLIENT_PORT_DATE_1,
            DATEADD(SECOND, E._A_CLIENT_PORT_DATE_2, '1960-01-01 00:00:00') AS _A_CLIENT_PORT_DATE_2,
            DATEADD(SECOND, E._A_CLIENT_PORT_DATE_3, '1960-01-01 00:00:00') AS _A_CLIENT_PORT_DATE_3,
            DATEADD(SECOND, E._A_TELSTRA_API_EVENT_DT, '1960-01-01 00:00:00') AS _A_TELSTRA_API_EVENT_DT,
            E._A_TELSTRA_ACTIVE_CALL,
            E._A_TELSTRA_CALL_DURATION,
            E._N_5_RCNT_M100S_1,
            DATEADD(SECOND, E._N_5_RCNT_M100_DTS_1, '1960-01-01 00:00:00') AS _N_5_RCNT_M100_DTS_1,
            E._N_5_RCNT_M100S_2,
            DATEADD(SECOND, E._N_5_RCNT_M100_DTS_2, '1960-01-01 00:00:00') AS _N_5_RCNT_M100_DTS_2,
            E._N_5_RCNT_M100S_3,
            DATEADD(SECOND, E._N_5_RCNT_M100_DTS_3, '1960-01-01 00:00:00') AS _N_5_RCNT_M100_DTS_3,
            E._N_5_RCNT_M100S_4,
            DATEADD(SECOND, E._N_5_RCNT_M100_DTS_4, '1960-01-01 00:00:00') AS _N_5_RCNT_M100_DTS_4,
            E._N_5_RCNT_M100S_5,
            DATEADD(SECOND, E._N_5_RCNT_M100_DTS_5, '1960-01-01 00:00:00') AS _N_5_RCNT_M100_DTS_5,
            DATEADD(SECOND, E._A_2WAY_CUST_GEN_RESP_DT, '1960-01-01 00:00:00') AS _A_2WAY_CUST_GEN_RESP_DT,
            DATEADD(SECOND, E._A_2WAY_CUST_FRD_RESP_DT, '1960-01-01 00:00:00') AS _A_2WAY_CUST_FRD_RESP_DT,
            DATEADD(SECOND, E._N_2WNM_CL_GEN_DT, '1960-01-01 00:00:00') AS _N_2WNM_CL_GEN_DT,
            DATEADD(SECOND, E._N_2WNM_RAS_GEN_DT, '1960-01-01 00:00:00') AS _N_2WNM_RAS_GEN_DT,
            DATEADD(SECOND, E._N_2WNM_CL_FRD_DT, '1960-01-01 00:00:00') AS _N_2WNM_CL_FRD_DT,
            DATEADD(SECOND, E._N_2WNM_RAS_FRD_DT, '1960-01-01 00:00:00') AS _N_2WNM_RAS_FRD_DT,
            -- Alert columns for context
            A.ALERT_ID, A.ALERT_TYPE, A.ALERT_VALUE, A.STRATEGY_NAME,
            A.ALERT_LAST_TRANSACTION_TIMESTAMP AS CASEACTIONDATETIME, 
            A.ALERT_CREATE_TIMESTAMP AS CASECREATEDATETIME, 
            A.BUSINESS_UNIT_NAME,
            A.ALERT_TYPE_NAME, 
            A.RULE_NAME AS DETECTED_ALERT_STRATEGY_NAME
        FROM LCL.FDP_DIGT_NMON_TRAN_SBST E
        CROSS JOIN date_filters DF
        INNER JOIN alerts_with_users A 
            ON (A.NETBANK_ID = E.CHL_ID_OB_USERID OR A.CUSTOMER_ID = E.SSX_CUST_NUM)
        WHERE E.MID_EVENT_TS >= DF.kafka_filter_30d
        QUALIFY ROW_NUMBER() OVER (PARTITION BY E.CHL_ID_OB_USERID ORDER BY E.MID_EVENT_TS DESC) = 1
    ) UV
    CROSS JOIN (
        SELECT * FROM VALUES
        ('TD01', UV._A_TRAVEL_DT, NULL, NULL),
        ('U944', UV._A_HCE_ADD_CARD_DT, NULL, NULL),
        ('U945', UV._A_HCE_REMOVE_CARD_DT, NULL, NULL),
        ('U965', UV._A_DIGI_WALLET_ADD_CARD_DT, NULL, NULL),
        ('420', UV._N_CLIENT_QA_RESET, NULL, NULL),
        ('33', UV._N_CLIENT_PASSWORD_TEMP, NULL, NULL),
        ('F499', UV._N_CLIENT_PW_FORGOT, NULL, NULL),
        ('450', UV._N_CLIENT_QA_CHG, NULL, NULL),
        ('PORT', UV._A_CLIENT_PORT_DATE_1, NULL, NULL),
        ('PORT', UV._A_CLIENT_PORT_DATE_2, NULL, NULL),
        ('PORT', UV._A_CLIENT_PORT_DATE_3, NULL, NULL),
        ('2WNM', UV._N_2WNM_CL_FRD_DT, '2WNO', NULL),
        ('2WNM', UV._N_2WNM_RAS_FRD_DT, '2WNO', NULL),
        ('2WNM', UV._N_2WNM_CL_GEN_DT, '2WYES', NULL),
        ('2WNM', UV._N_2WNM_RAS_GEN_DT, '2WYES', NULL),
        ('2WMON', UV._A_2WAY_CUST_FRD_RESP_DT, '2WNO', NULL),
        ('2WMON', UV._A_2WAY_CUST_GEN_RESP_DT, '2WYES', NULL),
        ('M100', UV._N_5_RCNT_M100_DTS_1, NULL, UV._N_5_RCNT_M100S_1),
        ('M100', UV._N_5_RCNT_M100_DTS_2, NULL, UV._N_5_RCNT_M100S_2),
        ('M100', UV._N_5_RCNT_M100_DTS_3, NULL, UV._N_5_RCNT_M100S_3),
        ('M100', UV._N_5_RCNT_M100_DTS_4, NULL, UV._N_5_RCNT_M100S_4),
        ('M100', UV._N_5_RCNT_M100_DTS_5, NULL, UV._N_5_RCNT_M100S_5),
        ('T0101', UV._A_TELSTRA_API_EVENT_DT, NULL,
            CASE WHEN UV._A_TELSTRA_ACTIVE_CALL IS NOT NULL THEN
                (CASE WHEN UV._A_TELSTRA_ACTIVE_CALL = 'I' THEN 'INB CALL ' ELSE 'OUTB CALL ' END) ||
                (CASE WHEN UV._A_TELSTRA_CALL_DURATION < '60' THEN 
                    UV._A_TELSTRA_CALL_DURATION || ' SEC'
                ELSE (UV._A_TELSTRA_CALL_DURATION / '60') || ' MIN' END)
            END)
    ) AS uv_events(event_code, event_date, sub_tran_type, additional_info)
    WHERE uv_events.event_date IS NOT NULL 
      AND TO_DATE(uv_events.event_date) >= (SELECT date_30d_ago FROM date_filters)
),

-- Step 6: Combine all event sources (4 separate UNIONs like original)
all_events_combined AS (
    SELECT * FROM npp_events_with_alerts
    UNION ALL
    SELECT * FROM digt_mon_events_with_alerts
    UNION ALL
    SELECT * FROM digt_nonmon_events_with_alerts
    UNION ALL
    SELECT * FROM uv_events_formatted
)

-- Final SELECT: Apply all business logic and transformations
SELECT
    AE.SRC_DATA,
    AE.ALERT_ID AS DETECTED_ALERT,
    AE.ALERT_TYPE,
    AE.ALERT_VALUE,
    AE.STRATEGY_NAME, -- THIS FIELD IS USED FOR FILTERING ON DIGITAL AND SCAMS ALERT
    AE.CASEACTIONDATETIME,
    AE.CASECREATEDATETIME,
    AE.BUSINESS_UNIT_NAME, -- THIS FIELD IS USED FOR FILTERING ON DIGITAL AND SCAMS ALERT
    AE.ALERT_TYPE_NAME,
    AE.DETECTED_ALERT_STRATEGY_NAME, -- THIS FIELD IS USED IN RECOMMENDATION PROMPT FOR BLACKLIST RULE FILTERING
    NULLIF(TRIM(AE.SSX_CUST_BIRTH_DT),'') AS XQO_CUST_BIRTH_DT,
    NULLIF(TRIM(AE.TGX_ACCT_NUM),'') AS TPP_ACCT_NUM,
    NULLIF(TRIM(AE.TGX_BANK_NAME),'') AS TPP_BANK_NAME,
    NULLIF(TRIM(AE.TGX_BANK_NUM),'') AS TPP_BANK_NUM,
    NULLIF(TRIM(AE.TGX_BRANCH_ID),'') AS TPP_BRANCH_ID,
    NULLIF(TRIM(AE.TGX_CNTRY_CODE),'') AS TPP_CNTRY_CODE,
    NULLIF(TRIM(AE.TGX_DESCRIPTION),'') AS TPP_DESCRIPTION,
    NULLIF(TRIM(AE.TGX_NAME),'') AS TPP_NAME,
    NULLIF(TRIM(AE.TGX_TRAN_AMT),'') AS TPP_TRAN_AMT,
    NULLIF(TRIM(AE.UNIQUE_EVENT_ID),'') AS CMX_TRAN_ID,
    NULLIF(TRIM(AE.DTL_EX_1_5S_01),'') AS DMX_5BYTE_STRING_01,
    NULLIF(TRIM(B.TASKID_DESC),'') AS TASKID_DESCRIPTION,
    NULLIF(TRIM(AE.CHL_ID_OB_USERID),'') AS HQO_OB_USERID,
    NULLIF(TRIM(AE.SSX_CUST_NUM),'') AS XQO_CUST_NUM,
    NULLIF(TRIM(AE.TTS_TRAN_DATE_ALT),'') AS TRANSACTIONDATE,
    NULLIF(TRIM(AE.TTS_TRAN_TIME_ALT),'') AS TRANSACTIONTIME,
    NULLIF(TRIM(AE.TTS_TRAN_DATETIME_ALT),'') AS TRANSACTIONDATETIME,
    NULLIF(TRIM(AE.CHL_OB_IP_ISP),'') AS HOB_IP_ISP,
    NULLIF(TRIM(AE.DTL_EX_0_10S_004),'') AS DEVICE_FAMILY,
    NULLIF(TRIM(AE.DTL_EX_0_20S_004),'') AS RUA_20BYTE_STRING_004,
    NULLIF(TRIM(AE.DTL_EX_0_30S_001),'') AS BIOCATCH_POLICY,
    NULLIF(TRIM(AE.DTL_EX_0_30S_002),'') AS IP_CITY,
    NULLIF(TRIM(AE.DTL_EX_0_80S_002),'') AS RUA_80BYTE_NLS_STRING_002,
    NULLIF(TRIM(AE.DTL_EX_3_N_002),'') AS DTL_EX_3_N_002,
    CASE 
        WHEN AE.DTL_EX_3_N_002 = 3 THEN 'High'
        WHEN AE.DTL_EX_3_N_002 = 2 THEN 'Medium'
        WHEN AE.DTL_EX_3_N_002 = 1 THEN 'Low'
        WHEN AE.DTL_EX_3_N_002 = 0 THEN 'Not Available'
        ELSE 'Not Available' 
        END AS WISDOM_CONFIDENCE, -- Derived column from DTL_EX_3_N_002. Will be used in Recommendation Prompt
    NULLIF(TRIM(AE.DTL_EX_0_4S_001),'') AS RUA_4BYTE_STRING_001,
    NULLIF(TRIM(AE.DTL_EX_0_I_002),'') AS RUA_IND_002,
    NULLIF(TRIM(AE.DTL_EX_0_I_003),'') AS RUA_IND_003,
    NULLIF(TRIM(AE.DTL_EX_0_I_004),'') AS IS_MLW,
    NULLIF(TRIM(AE.DTL_EX_0_I_005),'') AS IS_RAT,
    NULLIF(TRIM(AE.DTL_EX_0_I_006),'') AS RUA_IND_006,
    NULLIF(TRIM(AE.DTL_EX_0_I_009),'') AS IS_MOB_RAT,
    NULLIF(TRIM(AE.DTL_EX_0_I_009),'') AS RUA_IND_009, -- SAME FIELD IS USED FOR DATA FROM DIFFERENT SOURCE SYSTEM (RUA_4BYTE_STRING_001)
    NULLIF(TRIM(AE.DTL_EX_0_N_004),'') AS MAX_30D_SCORE,
    NULLIF(TRIM(AE.DTL_EX_0_N_001),'') AS BC_SCORE, -- FIX FOR CORRECT BIOCATCH SCORE
    NULLIF(TRIM(AE.DTL_EX_0_N_009),'') AS CUSTOMER_AGE,
    NULLIF(TRIM(AE.DTL_EX_0_N_011),'') AS VOICE_SCAM,
    NULLIF(TRIM(AE.DTL_EX_0_N_012),'') AS DTL_EX_0_N_012,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_012,12,1)),'') AS IS_SOC_ENG_RAT, -- These numeric fields start with Placeholder_0 & is set to 9 by default (Sample:90101000100100). Hence, if it's Placeholder_1 -> Means the 2nd digit from the string
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_012,15,1)),'') AS IS_ACTIVE_CALL,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_012,5,1)),'') AS CONCURRENT_SESS,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_013,2,1)),'') AS RAT_IN_SESS,
    NULLIF(TRIM(AE.DTL_EX_0_N_013),'') AS DTL_EX_0_N_013,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_013,11,1)),'') AS NEW_DEV,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_013,12,1)),'') AS NEW_DEV_CON_IP,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_013,3,1)),'') AS NEW_USER,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_013,10,1)),'') AS DEV_CHANGE_ANOM,
    NULLIF(TRIM(AE.DTL_EX_0_N_014),'') AS DTL_EX_0_N_014,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_014,2,1)),'') AS RCNT_PROF_SETTINGS_CH,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_014,11,1)),'') AS TZONE_MISMATCH,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_014,12,1)),'') AS FAST_TRAVELER,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_014,15,1)),'') AS NEW_IP,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_014,9,1)),'') AS RISKY_IP,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_014,10,1)),'') AS RISKY_ISP,
    NULLIF(TRIM(AE.DTL_EX_0_N_015),'') AS DTL_EX_0_N_015,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_015,11,1)),'') AS NEW_MOB_APP_USER,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_015,12,1)),'') AS NEW_DESKTOP_USER,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_015,13,1)),'') AS NEW_MOB_BROWSER_USER,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_015,14,1)),'') AS FT_RAT_APP_INST,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_015,7,1)),'') AS IS_LONG_SESS,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_015,8,1)),'') AS OS_CH_ANOMALY,
    NULLIF(TRIM(AE.DTL_EX_0_N_016),'') AS DTL_EX_0_N_016,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_016,13,1)),'') AS RARE_SCRN_SZ,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_016,14,1)),'') AS LRG_DIST_KNOWN_LOC,
    NULLIF(TRIM(AE.DTL_EX_0_N_017),'') AS DTL_EX_0_N_017,
    NULLIF(TRIM(AE.DTL_NM_SUB_TRAN_TYPE),'') AS TNG_SUB_TRAN_TYPE, -- 2WYES AND 2WNO EVENTS ARE POPULATED INTO THIS FIELD FROM UV. SUBSEQUENT PYTHON FUNCTIONS WILL REFERENCE AS TNG_SUB_TRAN_TYPE
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_017,4,1)),'') AS ACCM_AMT_ANOM,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_017,7,1)),'') AS PMT_VLOC_ANOM,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_017,10,1)),'') AS SCREEN_BROADCAST,
    NULLIF(TRIM(AE.DTL_EX_0_N_019),'') AS DTL_EX_0_N_019,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_019,2,1)),'') AS G_CON_IP,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_019,6,1)),'') AS G_CON_DEV,
    NULLIF(TRIM(AE.DTL_EX_0_N_021),'') AS DTL_EX_0_N_021,
    NULLIF(TRIM(AE.DTL_EX_0_N_021),'') AS WISDOMFIRSTDATE,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_021,2,1)),'') AS CBALOWAPPCOUNT,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_021,3,1)),'') AS CBAVERYLOWAPPCOUNT,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_021,4,1)),'') AS CBALAZYRATNEWDEVICE,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_021,5,1)),'') AS CBALAZYRATEXISTINGDEVICE,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_021,6,1)),'') AS CBAIPWHITELIST,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_021,7,1)),'') AS CBAZEROTOUCHCOUNT,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_021,8,1)),'') AS CBAZEROTOUCHAREA,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_021,9,1)),'') AS CBAFLATPHONE,
    NULLIF(TRIM(AE.DTL_EX_0_N_029),'') AS RUA_NUMERIC_029,
    NULLIF(TRIM(AE.DTL_EX_0_N_034),'') AS RUA_NUMERIC_034,
    NULLIF(TRIM(AE.DTL_EX_0_N_040),'') AS DTL_EX_0_N_040,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_040,2,3)),'') AS ISP_AGE, -- 3 digits ranged from 0 to 999. Represent the number of days this ISP is seen
    NULLIF(TRIM(AE.DTL_EX_0_N_041),'') AS DTL_EX_0_N_041,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_041,2,3)),'') AS UID_AGE, -- 3 digits ranged from 0 to 999. Represent the number of days this userid is seen
    NULLIF(TRIM(AE.DTL_EX_0_N_056),'') AS DTL_EX_0_N_056,
    NULLIF(TRIM(SUBSTR(AE.DTL_EX_0_N_056,5,3)),'') AS USER_MUID_AGE, -- 3 digits ranged from 0 to 999. Represent the number of days this user device id is seen
    NULLIF(TRIM(AE.DTL_EX_0_N_064),'') AS DTL_EX_0_N_064,
    NULLIF(TRIM(AE.DTL_EX_0_N_065),'') AS DTL_EX_0_N_065,
    NULLIF(TRIM(AE.DTL_EX_0_N_066),'') AS DTL_EX_0_N_066,
    NULLIF(TRIM(AE.DTL_EX_1_DATE_01),'') AS DMX_DATE_01,
    NULLIF(TRIM(AE.HDR_ACCT_TYPE),'') AS SMH_ACCT_TYPE,
    NULLIF(TRIM(AE.HDR_ACTIVITY_TYPE),'') AS SMH_ACTIVITY_TYPE,
    NULLIF(TRIM(AE.RSP_ACTION_CODE),'') AS RRR_ACTION_CODE,
    NULLIF(TRIM(AE.RSP_EX_2_30S_001),'') AS RUR_30BYTE_STRING_001

FROM all_events_combined AE
LEFT JOIN LCL.FDP_TASK_DESC_REF B -- LEFT JOIN ON REFERENCE TABLE TO GET TASK_ID_DESCRIPTION  
    ON AE.DTL_EX_1_5S_01 = B.DTL_EX_1_5S_01 
    AND CURRENT_DATE BETWEEN B.EFFT_D AND B.EXPY_D
ORDER BY 
    AE.ALERT_ID, 
    AE.CHL_ID_OB_USERID, 
    AE.TTS_TRAN_DATETIME_ALT DESC

); 

/*
================================================================================
KEY STATISTICS ANALYSIS FOR PERFORMANCE TUNING & DATA PROFILING
================================================================================
Run these queries to analyze join and filter column distributions for optimization:

-- =============================================================================
-- 1. NPP EVENTS TABLE: PRD_P01_RAW.FDP.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
-- =============================================================================

-- JOIN COLUMN ANALYSIS (CHL_ID_OB_USERID, SSX_CUST_NUM)
SELECT 
    'NPP_EVENTS_JOIN_STATS' AS analysis_type,
    COUNT(*) AS total_records,
    COUNT(DISTINCT CHL_ID_OB_USERID) AS distinct_netbank_ids,
    COUNT(DISTINCT SSX_CUST_NUM) AS distinct_customer_ids,
    COUNT(DISTINCT CONCAT(CHL_ID_OB_USERID, '|', SSX_CUST_NUM)) AS distinct_user_combinations,
    
    -- NULL analysis for join columns
    COUNT(CASE WHEN CHL_ID_OB_USERID IS NULL THEN 1 END) AS null_netbank_ids,
    COUNT(CASE WHEN SSX_CUST_NUM IS NULL THEN 1 END) AS null_customer_ids,
    COUNT(CASE WHEN CHL_ID_OB_USERID IS NULL AND SSX_CUST_NUM IS NULL THEN 1 END) AS both_join_cols_null,
    
    -- Join column data quality
    ROUND(COUNT(DISTINCT CHL_ID_OB_USERID) * 100.0 / COUNT(*), 2) AS netbank_id_selectivity_pct,
    ROUND(COUNT(DISTINCT SSX_CUST_NUM) * 100.0 / COUNT(*), 2) AS customer_id_selectivity_pct
FROM PRD_P01_RAW.FDP.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT;

-- DATE FILTER ANALYSIS (TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT)
SELECT 
    'NPP_EVENTS_DATE_STATS' AS analysis_type,
    MIN(TTS_TRAN_DATE_ALT) AS min_transaction_date,
    MAX(TTS_TRAN_DATE_ALT) AS max_transaction_date,
    COUNT(DISTINCT TTS_TRAN_DATE_ALT) AS distinct_transaction_dates,
    
    -- 30-day filter impact analysis
    COUNT(CASE WHEN TTS_TRAN_DATE_ALT >= DATEADD(DAY, -30, CURRENT_DATE) THEN 1 END) AS records_last_30_days,
    COUNT(CASE WHEN TTS_TRAN_DATE_ALT >= DATEADD(DAY, -7, CURRENT_DATE) THEN 1 END) AS records_last_7_days,
    COUNT(CASE WHEN TTS_TRAN_DATE_ALT >= DATEADD(DAY, -1, CURRENT_DATE) THEN 1 END) AS records_last_1_day,
    
    -- Filter selectivity
    ROUND(COUNT(CASE WHEN TTS_TRAN_DATE_ALT >= DATEADD(DAY, -30, CURRENT_DATE) THEN 1 END) * 100.0 / COUNT(*), 2) AS last_30_days_selectivity_pct,
    
    -- Time distribution
    MIN(TTS_TRAN_TIME_ALT) AS min_transaction_time,
    MAX(TTS_TRAN_TIME_ALT) AS max_transaction_time,
    COUNT(DISTINCT TTS_TRAN_TIME_ALT) AS distinct_transaction_times
FROM PRD_P01_RAW.FDP.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT;

-- DAILY VOLUME ANALYSIS (Last 30 days)
SELECT 
    TTS_TRAN_DATE_ALT AS transaction_date,
    COUNT(*) AS daily_record_count,
    COUNT(DISTINCT CHL_ID_OB_USERID) AS daily_distinct_netbank_ids,
    COUNT(DISTINCT SSX_CUST_NUM) AS daily_distinct_customer_ids,
    MIN(TTS_TRAN_TIME_ALT) AS earliest_time,
    MAX(TTS_TRAN_TIME_ALT) AS latest_time
FROM PRD_P01_RAW.FDP.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
WHERE TTS_TRAN_DATE_ALT >= DATEADD(DAY, -30, CURRENT_DATE)
GROUP BY TTS_TRAN_DATE_ALT
ORDER BY TTS_TRAN_DATE_ALT DESC;

-- HOURLY DISTRIBUTION ANALYSIS (Peak hours)
SELECT 
    EXTRACT(HOUR FROM TTS_TRAN_TIME_ALT::TIME) AS transaction_hour,
    COUNT(*) AS hourly_record_count,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS hourly_percentage
FROM PRD_P01_RAW.FDP.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
WHERE TTS_TRAN_DATE_ALT >= DATEADD(DAY, -7, CURRENT_DATE)
GROUP BY EXTRACT(HOUR FROM TTS_TRAN_TIME_ALT::TIME)
ORDER BY hourly_record_count DESC;

-- =============================================================================
-- 2. DIGITAL MONETARY TABLE: PRD_P01_RAW.FDP.FDP_DIGITAL_MONETARY_TRANSACTIONS_SEND_FLAT
-- =============================================================================

-- JOIN COLUMN ANALYSIS (CHL_ID_OB_USERID, SSX_CUST_NUM)
SELECT 
    'DIGT_MON_EVENTS_JOIN_STATS' AS analysis_type,
    COUNT(*) AS total_records,
    COUNT(DISTINCT CHL_ID_OB_USERID) AS distinct_netbank_ids,
    COUNT(DISTINCT SSX_CUST_NUM) AS distinct_customer_ids,
    COUNT(DISTINCT CONCAT(CHL_ID_OB_USERID, '|', SSX_CUST_NUM)) AS distinct_user_combinations,
    
    -- NULL analysis for join columns
    COUNT(CASE WHEN CHL_ID_OB_USERID IS NULL THEN 1 END) AS null_netbank_ids,
    COUNT(CASE WHEN SSX_CUST_NUM IS NULL THEN 1 END) AS null_customer_ids,
    COUNT(CASE WHEN CHL_ID_OB_USERID IS NULL AND SSX_CUST_NUM IS NULL THEN 1 END) AS both_join_cols_null,
    
    -- Join column data quality
    ROUND(COUNT(DISTINCT CHL_ID_OB_USERID) * 100.0 / COUNT(*), 2) AS netbank_id_selectivity_pct,
    ROUND(COUNT(DISTINCT SSX_CUST_NUM) * 100.0 / COUNT(*), 2) AS customer_id_selectivity_pct
FROM PRD_P01_RAW.FDP.FDP_DIGITAL_MONETARY_TRANSACTIONS_SEND_FLAT;

-- DATE FILTER ANALYSIS (TTS_TRAN_DATE_ALT, TTS_TRAN_TIME_ALT)
SELECT 
    'DIGT_MON_EVENTS_DATE_STATS' AS analysis_type,
    MIN(TTS_TRAN_DATE_ALT) AS min_transaction_date,
    MAX(TTS_TRAN_DATE_ALT) AS max_transaction_date,
    COUNT(DISTINCT TTS_TRAN_DATE_ALT) AS distinct_transaction_dates,
    
    -- 30-day filter impact analysis
    COUNT(CASE WHEN TTS_TRAN_DATE_ALT >= DATEADD(DAY, -30, CURRENT_DATE) THEN 1 END) AS records_last_30_days,
    COUNT(CASE WHEN TTS_TRAN_DATE_ALT >= DATEADD(DAY, -7, CURRENT_DATE) THEN 1 END) AS records_last_7_days,
    COUNT(CASE WHEN TTS_TRAN_DATE_ALT >= DATEADD(DAY, -1, CURRENT_DATE) THEN 1 END) AS records_last_1_day,
    
    -- Filter selectivity
    ROUND(COUNT(CASE WHEN TTS_TRAN_DATE_ALT >= DATEADD(DAY, -30, CURRENT_DATE) THEN 1 END) * 100.0 / COUNT(*), 2) AS last_30_days_selectivity_pct,
    
    -- Time distribution
    MIN(TTS_TRAN_TIME_ALT) AS min_transaction_time,
    MAX(TTS_TRAN_TIME_ALT) AS max_transaction_time,
    COUNT(DISTINCT TTS_TRAN_TIME_ALT) AS distinct_transaction_times
FROM PRD_P01_RAW.FDP.FDP_DIGITAL_MONETARY_TRANSACTIONS_SEND_FLAT;

-- DAILY VOLUME ANALYSIS (Last 30 days)
SELECT 
    TTS_TRAN_DATE_ALT AS transaction_date,
    COUNT(*) AS daily_record_count,
    COUNT(DISTINCT CHL_ID_OB_USERID) AS daily_distinct_netbank_ids,
    COUNT(DISTINCT SSX_CUST_NUM) AS daily_distinct_customer_ids,
    MIN(TTS_TRAN_TIME_ALT) AS earliest_time,
    MAX(TTS_TRAN_TIME_ALT) AS latest_time
FROM PRD_P01_RAW.FDP.FDP_DIGITAL_MONETARY_TRANSACTIONS_SEND_FLAT
WHERE TTS_TRAN_DATE_ALT >= DATEADD(DAY, -30, CURRENT_DATE)
GROUP BY TTS_TRAN_DATE_ALT
ORDER BY TTS_TRAN_DATE_ALT DESC;

-- HOURLY DISTRIBUTION ANALYSIS (Peak hours)
SELECT 
    EXTRACT(HOUR FROM TTS_TRAN_TIME_ALT::TIME) AS transaction_hour,
    COUNT(*) AS hourly_record_count,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS hourly_percentage
FROM PRD_P01_RAW.FDP.FDP_DIGITAL_MONETARY_TRANSACTIONS_SEND_FLAT
WHERE TTS_TRAN_DATE_ALT >= DATEADD(DAY, -7, CURRENT_DATE)
GROUP BY EXTRACT(HOUR FROM TTS_TRAN_TIME_ALT::TIME)
ORDER BY hourly_record_count DESC;

-- =============================================================================
-- 3. COMPARATIVE ANALYSIS BETWEEN BOTH TABLES
-- =============================================================================

-- TABLE SIZE COMPARISON
SELECT 
    'TABLE_SIZE_COMPARISON' AS analysis_type,
    'NPP_EVENTS' AS table_type,
    COUNT(*) AS total_records,
    COUNT(DISTINCT CHL_ID_OB_USERID) AS distinct_users_netbank_id,
    COUNT(DISTINCT SSX_CUST_NUM) AS distinct_users_customer_id
FROM PRD_P01_RAW.FDP.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
WHERE TTS_TRAN_DATE_ALT >= DATEADD(DAY, -30, CURRENT_DATE)

UNION ALL

SELECT 
    'TABLE_SIZE_COMPARISON' AS analysis_type,
    'DIGT_MON_EVENTS' AS table_type,
    COUNT(*) AS total_records,
    COUNT(DISTINCT CHL_ID_OB_USERID) AS distinct_users_netbank_id,
    COUNT(DISTINCT SSX_CUST_NUM) AS distinct_users_customer_id
FROM PRD_P01_RAW.FDP.FDP_DIGITAL_MONETARY_TRANSACTIONS_SEND_FLAT
WHERE TTS_TRAN_DATE_ALT >= DATEADD(DAY, -30, CURRENT_DATE);

-- USER OVERLAP ANALYSIS (Users present in both tables)
WITH npp_users AS (
    SELECT DISTINCT CHL_ID_OB_USERID, SSX_CUST_NUM
    FROM PRD_P01_RAW.FDP.FDP_CUSTOMER_TRANSACTIONS_SEND_FLAT
    WHERE TTS_TRAN_DATE_ALT >= DATEADD(DAY, -30, CURRENT_DATE)
),
digt_mon_users AS (
    SELECT DISTINCT CHL_ID_OB_USERID, SSX_CUST_NUM
    FROM PRD_P01_RAW.FDP.FDP_DIGITAL_MONETARY_TRANSACTIONS_SEND_FLAT
    WHERE TTS_TRAN_DATE_ALT >= DATEADD(DAY, -30, CURRENT_DATE)
)
SELECT 
    'USER_OVERLAP_ANALYSIS' AS analysis_type,
    (SELECT COUNT(*) FROM npp_users) AS npp_only_users,
    (SELECT COUNT(*) FROM digt_mon_users) AS digt_mon_only_users,
    COUNT(*) AS users_in_both_tables,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM npp_users), 2) AS overlap_pct_of_npp,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM digt_mon_users), 2) AS overlap_pct_of_digt_mon
FROM npp_users n
INNER JOIN digt_mon_users d 
    ON n.CHL_ID_OB_USERID = d.CHL_ID_OB_USERID 
    AND n.SSX_CUST_NUM = d.SSX_CUST_NUM;


*/
