USE ROLE r_dev_npd_d12_gdwmig;
CREATE OR REPLACE PROCEDURE npd_d12_dmn_gdwmig.lcl.sp_bteq_DERV_ACCT_PATY_05_SET_PRTF_PRFR_FLAG(
  EXTR_DATE STRING DEFAULT '2024-01-01'
)
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
  error_code INTEGER DEFAULT 0;
  row_count INTEGER DEFAULT 0;
  total_rows INTEGER DEFAULT 0;
BEGIN
  -- Set preferred party flag for accounts with same RM for account and party
  -- Based on portfolio management and fund holder relationships
  
  -- Step 1: Clear staging table and populate with portfolio account party data
  DELETE FROM NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_PATY_PSST;
  
  INSERT INTO NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_PATY_PSST
  SELECT 
    DAP.ASSC_ACCT_I,
    DAP.PATY_I,
    DPAS.PRTF_CODE_X AS ACCT_PRTF_C,
    NULL AS PATY_PRTF_C,
    DAP.PATY_ACCT_REL_C,
    99 AS RANK_I
  FROM NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_ACCT_PATY_CURR DAP
  JOIN NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.GRD_GNRC_MAP_DERV_PATY_HOLD AHR
    ON TRIM(DAP.PATY_ACCT_REL_C) = AHR.PATY_ACCT_REL_C
  JOIN NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_STAG DPAS
    ON TRIM(DAP.ASSC_ACCT_I) = DPAS.ACCT_I
  WHERE TRIM(DPAS.PRTF_CODE_X) <> 'NA'
    AND :EXTR_DATE BETWEEN DAP.EFFT_D AND DAP.EXPY_D
  GROUP BY 1,2,3,4,5,6;
  
  row_count := SQLROWCOUNT;
  total_rows := total_rows + row_count;
  
  -- Step 2: Update priority rankings for fund holder relationships
  UPDATE NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_PATY_PSST
  SET RANK_I = DRVD.PRTY
  FROM (
    SELECT DISTINCT 
      PIG.PATY_I,
      GDFVC.PRTY
    FROM NPD_D12_DMN_GDWMIG_IBRG_V.PVDATA.PATY_INT_GRUP_CURR PIG
    INNER JOIN NPD_D12_DMN_GDWMIG_IBRG_V.PVDATA.INT_GRUP_DEPT_CURR IGD
      ON IGD.INT_GRUP_I = PIG.INT_GRUP_I
      AND TRIM(PIG.REL_C) = 'RLMT'
    INNER JOIN (
      SELECT 
        GFC.DEPT_LEAF_NODE_C AS DEPT_I,
        ORU.PRTY
      FROM NPD_D12_DMN_GDWMIG_IBRG_V.PVTECH.GRD_DEPT_FLAT_CURR GFC
      LEFT JOIN (
        SELECT 
          COALESCE(PRTY, 9999) AS PRTY,
          LKUP1_TEXT,
          COALESCE(UPDT_DTTS, CRAT_DTTS) AS LoadTimeStamp
        FROM NPD_D12_DMN_GDWMIG_IBRG_V.PVTECH.ODS_RULE
        WHERE TRIM(RULE_CODE) = 'RMPOC'
          AND :EXTR_DATE BETWEEN VALD_FROM AND VALD_TO
        QUALIFY ROW_NUMBER() OVER (PARTITION BY LKUP1_TEXT, PRTY ORDER BY LoadTimeStamp DESC) = 1
      ) ORU ON GFC.DEPT_L3_NODE_C = ORU.LKUP1_TEXT
      WHERE PRTY <> 9999
    ) GDFVC ON GDFVC.DEPT_I = IGD.DEPT_I
    WHERE PIG.PATY_I IN (
      SELECT DISTINCT PATY_I 
      FROM NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_PATY_PSST
    )
    QUALIFY ROW_NUMBER() OVER (PARTITION BY PIG.PATY_I ORDER BY GDFVC.PRTY ASC) = 1
  ) DRVD
  WHERE DERV_PRTF_ACCT_PATY_PSST.PATY_I = DRVD.PATY_I
    AND TRIM(DERV_PRTF_ACCT_PATY_PSST.PATY_ACCT_REL_C) = 'ZINTE0';
  
  -- Step 3: Clear and populate final staging table with ranked data
  DELETE FROM NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_PATY_STAG;
  
  INSERT INTO NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_PATY_STAG
  SELECT 
    DAPP.ACCT_I,
    DAPP.PATY_I,
    DAPP.ACCT_PRTF_C,
    DPPS.PRTF_CODE_X AS PATY_PRTF_C,
    DAPP.PATY_ACCT_REL_C,
    CASE 
      WHEN DAPP.RANK_I <> 99 AND TRIM(DAPP.PATY_ACCT_REL_C) = 'ZINTE0' THEN DAPP.RANK_I
      WHEN TRIM(DAPP.PATY_ACCT_REL_C) = 'ZINTE0' THEN 98
      ELSE 99
    END AS RANK_I
  FROM NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_PATY_PSST DAPP
  JOIN NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_PATY_STAG DPPS
    ON DAPP.PATY_I = DPPS.PATY_I
    AND (DPPS.PRTF_CODE_X = DAPP.ACCT_PRTF_C OR TRIM(DAPP.PATY_ACCT_REL_C) = 'ZINTE0')
    AND TRIM(DPPS.PRTF_CODE_X) <> 'NA';
  
  -- Step 4: Remove duplicate records based on ranking
  DELETE FROM NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_PATY_STAG
  WHERE (ACCT_I, RANK_I, PATY_I) IN (
    SELECT ACCT_I, RANK_I, PATY_I
    FROM (
      SELECT 
        ACCT_I,
        RANK_I,
        PATY_I
      FROM NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_PATY_STAG
      QUALIFY ROW_NUMBER() OVER (PARTITION BY ACCT_I ORDER BY RANK_I ASC, PATY_I DESC) > 1
    ) DRVD
  );
  
  -- Step 5: Populate RM working table
  DELETE FROM NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_ACCT_PATY_RM;
  
  INSERT INTO NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_ACCT_PATY_RM
  SELECT 
    DAP.ACCT_I,
    DAP.PATY_I,
    DAP.ASSC_ACCT_I,
    DAP.PATY_ACCT_REL_C,
    DAP.PRFR_PATY_F,
    DAP.SRCE_SYST_C,
    DAP.EFFT_D,
    DAP.EXPY_D,
    DAP.ROW_SECU_ACCS_C
  FROM NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_ACCT_PATY_CURR DAP
  JOIN NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_PATY_STAG T1
    ON TRIM(DAP.ASSC_ACCT_I) = T1.ACCT_I
  WHERE :EXTR_DATE BETWEEN DAP.EFFT_D AND DAP.EXPY_D;
  
  row_count := SQLROWCOUNT;
  total_rows := total_rows + row_count;
  
  -- Step 6: Set preferred party flag for identified account/party combinations
UPDATE NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_ACCT_PATY_RM T0
SET PRFR_PATY_F = 'Y'
FROM (
    SELECT 
        T1.ACCT_I,
        T1.PATY_I,
        T1.PATY_ACCT_REL_C,
        T1.EFFT_D,
        T1.EXPY_D
    FROM NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_ACCT_PATY_RM T1
    INNER JOIN NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.GRD_GNRC_MAP_DERV_PATY_HOLD T2
        ON TRIM(T1.PATY_ACCT_REL_C) = TRIM(T2.PATY_ACCT_REL_C)
    INNER JOIN NPD_D12_DMN_GDWMIG_IBRG.PDDSTG.DERV_PRTF_ACCT_PATY_STAG T4
        ON T1.ASSC_ACCT_I = T4.ACCT_I
        AND T1.PATY_I = T4.PATY_I
        AND TRIM(T1.PATY_ACCT_REL_C) = TRIM(T4.PATY_ACCT_REL_C)
    WHERE T1.EFFT_D <= :EXTR_DATE
    AND T1.EXPY_D >= :EXTR_DATE
    QUALIFY ROW_NUMBER() OVER (PARTITION BY T1.ACCT_I ORDER BY T4.RANK_I, T1.EFFT_D, T1.PATY_ACCT_REL_C, T4.PATY_I DESC) = 1
) SRC
WHERE T0.ACCT_I = SRC.ACCT_I
AND T0.PATY_I = SRC.PATY_I
AND T0.PATY_ACCT_REL_C = SRC.PATY_ACCT_REL_C
AND T0.EFFT_D = SRC.EFFT_D
AND T0.EXPY_D = SRC.EXPY_D;

  row_count := SQLROWCOUNT;
  total_rows := total_rows + row_count;
  
  RETURN 'SUCCESS: Portfolio preferred party flags set. Total rows processed: ' || :total_rows;
  
EXCEPTION
  WHEN OTHER THEN
    RETURN 'ERROR: ' || SQLERRM || ' (Code: ' || SQLCODE || ')';
END;
$$;