CREATE OR REPLACE PROCEDURE PS_GDW1_BTEQ.BTEQ_SPS.DERV_ACCT_PATY_04_POP_CURR_TABL_PROC(
    EXTR_D STRING DEFAULT '2023-01-01'
)
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
  error_code INTEGER DEFAULT 0;
BEGIN
  -- Populate staging table with rows from all sources effective on extract date
  -- Original Author: Helen Zak, Version 1.0 (04/06/2013)
  
  -- 1. Clean and populate ACCT_PATY_DEDUP with deduplicated ACCT_PATY data
  DELETE FROM PS_CLD_RW.PDDSTG.ACCT_PATY_DEDUP;
  
  INSERT INTO PS_CLD_RW.PDDSTG.ACCT_PATY_DEDUP
  SELECT AP.ACCT_I,
         PATY_I,
         AP.ACCT_I AS ASSC_ACCT_I,
         PATY_ACCT_REL_C,
         'N',
         SRCE_SYST_C,
         EFFT_D,
         CASE
           WHEN EFFT_D = EXPY_D THEN EXPY_D
           WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
           ELSE EXPY_D
         END AS EXPY_D,
         AP.ROW_SECU_ACCS_C
  FROM ps_gdw1_bteq.PVTECH.ACCT_PATY AP
  WHERE :EXTR_D BETWEEN AP.EFFT_D AND AP.EXPY_D
  QUALIFY ROW_NUMBER() OVER (PARTITION BY ACCT_I, PATY_I, PATY_ACCT_REL_C ORDER BY EFFT_D) = 1;
  
  -- 2. Initialize main table with ACCT_PATY data
  DELETE FROM PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_CURR;
  
  INSERT INTO PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_CURR
  SELECT ACCT_I, PATY_I, ASSC_ACCT_I, PATY_ACCT_REL_C, PRFR_PATY_F,
         SRCE_SYST_C, EFFT_D, EXPY_D, ROW_SECU_ACCS_C
  FROM PS_CLD_RW.PDDSTG.ACCT_PATY_DEDUP;
  
  -- 3. BPS accounts - convert using ACCT_REL and XREF table
  INSERT INTO PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_CURR
  SELECT AX.BPS_ACCT_I AS ACCT_I,
         AP.PATY_I,
         CBS_ACCT_I AS ASSC_ACCT_I,
         AP.PATY_ACCT_REL_C,
         'N' AS PRFR_PATY_F,
         AP.SRCE_SYST_C,
         (CASE WHEN AP.EFFT_D > AX.EFFT_D THEN AP.EFFT_D ELSE AX.EFFT_D END) AS EFFT_D,
         (CASE WHEN AP.EXPY_D < AX.EXPY_D THEN AP.EXPY_D ELSE AX.EXPY_D END) AS EXPY_D,
         AP.ROW_SECU_ACCS_C
  FROM (
    SELECT ACCT_I, PATY_I, PATY_ACCT_REL_C, SRCE_SYST_C, EFFT_D,
           CASE
             WHEN EFFT_D = EXPY_D THEN EXPY_D
             WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
             ELSE EXPY_D
           END AS EXPY_D,
           ROW_SECU_ACCS_C
    FROM PS_CLD_RW.PDDSTG.ACCT_PATY_DEDUP
    WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
  ) AP
  JOIN (
    SELECT CBS_ACCT_I, BPS_ACCT_I, EFFT_D,
           CASE
             WHEN EFFT_D = EXPY_D THEN EXPY_D
             WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
             ELSE EXPY_D
           END AS EXPY_D
    FROM ps_gdw1_bteq.PVTECH.ACCT_XREF_BPS_CBS
    WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
  ) AX ON AP.ACCT_I = AX.CBS_ACCT_I
  WHERE (
    (AP.EFFT_D BETWEEN AX.EFFT_D AND AX.EXPY_D)
    OR (AX.EFFT_D BETWEEN AP.EFFT_D AND AP.EXPY_D)
  )
  GROUP BY 1,2,3,4,5,6,7,8,9
  
  UNION ALL
  
  SELECT AR.OBJC_ACCT_I AS ACCT_I,
         BPS.PATY_I,
         BPS.CBS_ACCT_I AS ASSC_ACCT_I,
         BPS.PATY_ACCT_REL_C,
         'N' AS PRFR_PATY_F,
         BPS.SRCE_SYST_C,
         (CASE WHEN AR.EFFT_D > BPS.EFFT_D THEN AR.EFFT_D ELSE BPS.EFFT_D END) AS EFFT_D,
         (CASE WHEN AR.EXPY_D < BPS.EXPY_D THEN AR.EXPY_D ELSE BPS.EXPY_D END) AS EXPY_D,
         BPS.ROW_SECU_ACCS_C
  FROM (
    SELECT SUBJ_ACCT_I, OBJC_ACCT_I, EFFT_D,
           CASE
             WHEN EFFT_D = EXPY_D THEN EXPY_D
             WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
             ELSE EXPY_D
           END AS EXPY_D
    FROM ps_gdw1_bteq.PVTECH.ACCT_REL
    WHERE REL_C = 'FLBLL' AND :EXTR_D BETWEEN EFFT_D AND EXPY_D
  ) AR
  JOIN (
    SELECT AX.BPS_ACCT_I, CBS_ACCT_I, AP.PATY_I, AP.PATY_ACCT_REL_C, AP.SRCE_SYST_C,
           (CASE WHEN AP.EFFT_D > AX.EFFT_D THEN AP.EFFT_D ELSE AX.EFFT_D END) AS EFFT_D,
           (CASE WHEN AP.EXPY_D < AX.EXPY_D THEN AP.EXPY_D ELSE AX.EXPY_D END) AS EXPY_D,
           AP.ROW_SECU_ACCS_C
    FROM (
      SELECT ACCT_I, PATY_I, PATY_ACCT_REL_C, SRCE_SYST_C, EFFT_D,
             CASE
               WHEN EFFT_D = EXPY_D THEN EXPY_D
               WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
               ELSE EXPY_D
             END AS EXPY_D,
             ROW_SECU_ACCS_C
      FROM PS_CLD_RW.PDDSTG.ACCT_PATY_DEDUP
      WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
    ) AP
    JOIN (
      SELECT CBS_ACCT_I, BPS_ACCT_I, EFFT_D,
             CASE
               WHEN EFFT_D = EXPY_D THEN EXPY_D
               WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
               ELSE EXPY_D
             END AS EXPY_D
      FROM ps_gdw1_bteq.PVTECH.ACCT_XREF_BPS_CBS
      WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
    ) AX ON AP.ACCT_I = AX.CBS_ACCT_I
    WHERE (
      (AP.EFFT_D BETWEEN AX.EFFT_D AND AX.EXPY_D)
      OR (AX.EFFT_D BETWEEN AP.EFFT_D AND AP.EXPY_D)
    )
    GROUP BY 1,2,3,4,5,6,7,8
  ) BPS ON AR.SUBJ_ACCT_I = BPS.BPS_ACCT_I
  WHERE (
    (AR.EFFT_D BETWEEN BPS.EFFT_D AND BPS.EXPY_D)
    OR (BPS.EFFT_D BETWEEN AR.EFFT_D AND AR.EXPY_D)
  )
  GROUP BY 1,2,3,4,5,6,7,8,9;

  
  -- 4. CLS accounts - convert using CLS_FCLY and CLS_UNID_PATY
  INSERT INTO PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_CURR
  SELECT CLS.ACCT_I,
         AP.PATY_I,
         CLS.GDW_ACCT_I AS ASSC_ACCT_I,
         AP.PATY_ACCT_REL_C,
         'N' AS PRFR_PATY_F,
         AP.SRCE_SYST_C,
         (CASE WHEN AP.EFFT_D > CLS.EFFT_D THEN AP.EFFT_D ELSE CLS.EFFT_D END) AS EFFT_D,
         (CASE WHEN AP.EXPY_D < CLS.EXPY_D THEN AP.EXPY_D ELSE CLS.EXPY_D END) AS EXPY_D,
         AP.ROW_SECU_ACCS_C
  FROM (
    SELECT ACCT_I, PATY_I, PATY_ACCT_REL_C, SRCE_SYST_C, EFFT_D,
           CASE
             WHEN EFFT_D = EXPY_D THEN EXPY_D
             WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
             ELSE EXPY_D
           END AS EXPY_D,
           ROW_SECU_ACCS_C
    FROM PS_CLD_RW.PDDSTG.ACCT_PATY_DEDUP
    WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
  ) AP
  JOIN (
    SELECT CF.ACCT_I,
           'CLSCO'||TRIM(CUP.CRIS_DEBT_I) AS GDW_ACCT_I,
           (CASE WHEN CF.EFFT_D > CUP.EFFT_D THEN CF.EFFT_D ELSE CUP.EFFT_D END) AS EFFT_D,
           (CASE WHEN CF.EXPY_D < CUP.EXPY_D THEN CF.EXPY_D ELSE CUP.EXPY_D END) AS EXPY_D
    FROM (
      SELECT ACCT_I, SRCE_SYST_PATY_I, EFFT_D,
             CASE
               WHEN EFFT_D = EXPY_D THEN EXPY_D
               WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
               ELSE EXPY_D
             END AS EXPY_D
      FROM ps_gdw1_bteq.PVTECH.CLS_FCLY
      WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
    ) CF
    JOIN (
      SELECT SRCE_SYST_PATY_I, CRIS_DEBT_I, EFFT_D,
             CASE
               WHEN EFFT_D = EXPY_D THEN EXPY_D
               WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
               ELSE EXPY_D
             END AS EXPY_D
      FROM ps_gdw1_bteq.PVTECH.CLS_UNID_PATY
      WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
    ) CUP ON CUP.SRCE_SYST_PATY_I = CF.SRCE_SYST_PATY_I
    WHERE (
      (CUP.EFFT_D BETWEEN CF.EFFT_D AND CF.EXPY_D)
      OR (CF.EFFT_D BETWEEN CUP.EFFT_D AND CUP.EXPY_D)
    )
    GROUP BY 1,2,3,4
  ) AS CLS ON CLS.GDW_ACCT_I = AP.ACCT_I
  WHERE (
    (AP.EFFT_D BETWEEN CLS.EFFT_D AND CLS.EXPY_D)
    OR (CLS.EFFT_D BETWEEN AP.EFFT_D AND AP.EXPY_D)
  )
  GROUP BY 1,2,3,4,5,6,7,8,9;

  
  -- 5. THA accounts - populate staging table
  DELETE FROM PS_CLD_RW.PDDSTG.ACCT_PATY_REL_THA;
  
  INSERT INTO PS_CLD_RW.PDDSTG.ACCT_PATY_REL_THA
  SELECT THA_ACCT_I,
         TRAD_ACCT_I,
         EFFT_D,
         CASE
           WHEN EFFT_D = EXPY_D THEN EXPY_D
           WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
           ELSE EXPY_D
         END AS EXPY_D
  FROM ps_gdw1_bteq.PVTECH.THA_ACCT
  WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
  QUALIFY ROW_NUMBER() OVER (PARTITION BY THA_ACCT_I, EFFT_D ORDER BY TRAD_ACCT_I, CSL_CLNT_I DESC) = 1;
  
  -- 6. Insert THA account mappings
  INSERT INTO PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_CURR
  SELECT TA.THA_ACCT_I AS ACCT_I,
         AP.PATY_I,
         TA.TRAD_ACCT_I AS ASSC_ACCT_I,
         AP.PATY_ACCT_REL_C,
         'N' AS PRFR_PATY_F,
         AP.SRCE_SYST_C,
         (CASE WHEN TA.EFFT_D > AP.EFFT_D THEN TA.EFFT_D ELSE AP.EFFT_D END) AS EFFT_D,
         (CASE WHEN TA.EXPY_D < AP.EXPY_D THEN TA.EXPY_D ELSE AP.EXPY_D END) AS EXPY_D,
         AP.ROW_SECU_ACCS_C
  FROM (
    SELECT ACCT_I, PATY_I, PATY_ACCT_REL_C, SRCE_SYST_C, EFFT_D,
           CASE
             WHEN EFFT_D = EXPY_D THEN EXPY_D
             WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
             ELSE EXPY_D
           END AS EXPY_D,
           ROW_SECU_ACCS_C
    FROM PS_CLD_RW.PDDSTG.ACCT_PATY_DEDUP
    WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
  ) AP
  JOIN PS_CLD_RW.PDDSTG.ACCT_PATY_REL_THA TA ON TA.TRAD_ACCT_I = AP.ACCT_I
  WHERE (
    (TA.EFFT_D BETWEEN AP.EFFT_D AND AP.EXPY_D)
    OR (AP.EFFT_D BETWEEN TA.EFFT_D AND TA.EXPY_D)
  )
  GROUP BY 1,2,3,4,5,6,7,8,9;

  
  -- 7. Insert MID, MTX and LMS accounts using ACCT_UNID_PATY transformation
  INSERT INTO PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_CURR
  SELECT XREF.ACCT_I,
         AP.PATY_I,
         XREF.ASSC_ACCT_I,
         AP.PATY_ACCT_REL_C,
         'N' AS PRFR_PATY_F,
         AP.SRCE_SYST_C,
         (CASE WHEN AP.EFFT_D > XREF.EFFT_D THEN AP.EFFT_D ELSE XREF.EFFT_D END) AS EFFT_D,
         (CASE WHEN AP.EXPY_D < XREF.EXPY_D THEN AP.EXPY_D ELSE XREF.EXPY_D END) AS EXPY_D,
         AP.ROW_SECU_ACCS_C
  FROM (
    SELECT ACCT_I, PATY_I, PATY_ACCT_REL_C, SRCE_SYST_C, EFFT_D,
           CASE
             WHEN EFFT_D = EXPY_D THEN EXPY_D
             WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
             ELSE EXPY_D
           END AS EXPY_D,
           ROW_SECU_ACCS_C
    FROM PS_CLD_RW.PDDSTG.ACCT_PATY_DEDUP
    WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
  ) AP
  JOIN (
    SELECT XREF1.ACCT_I,
           XREF2.ASSC_ACCT_I,
           (CASE WHEN XREF2.EFFT_D > XREF1.EFFT_D THEN XREF2.EFFT_D ELSE XREF1.EFFT_D END) AS EFFT_D,
           (CASE WHEN XREF2.EXPY_D < XREF1.EXPY_D THEN XREF2.EXPY_D ELSE XREF1.EXPY_D END) AS EXPY_D
    FROM (
      SELECT ACCT_I, SRCE_SYST_PATY_I, SRCE_SYST_C, EFFT_D,
             CASE
               WHEN EFFT_D = EXPY_D THEN EXPY_D
               WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
               ELSE EXPY_D
             END AS EXPY_D
      FROM ps_gdw1_bteq.PVTECH.ACCT_UNID_PATY
      WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
    ) XREF1
    JOIN (
      SELECT ACCT_I AS ASSC_ACCT_I, SRCE_SYST_PATY_I, PATY_ACCT_REL_C, SRCE_SYST_C, ORIG_SRCE_SYST_C, EFFT_D,
             CASE
               WHEN EFFT_D = EXPY_D THEN EXPY_D
               WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
               ELSE EXPY_D
             END AS EXPY_D
      FROM ps_gdw1_bteq.PVTECH.ACCT_UNID_PATY
      WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
    ) XREF2 ON XREF2.SRCE_SYST_PATY_I = XREF1.SRCE_SYST_PATY_I
    JOIN PS_CLD_RW.PDDSTG.GRD_GNRC_MAP_DERV_UNID_PATY GGM 
      ON GGM.UNID_PATY_SRCE_SYST_C = XREF2.SRCE_SYST_C
     AND GGM.UNID_PATY_ACCT_REL_C = XREF2.PATY_ACCT_REL_C
     AND GGM.SRCE_SYST_C = XREF2.ORIG_SRCE_SYST_C
    WHERE XREF1.SRCE_SYST_C = GGM.SRCE_SYST_C
      AND ((XREF1.EFFT_D BETWEEN XREF2.EFFT_D AND XREF2.EXPY_D)
           OR (XREF2.EFFT_D BETWEEN XREF1.EFFT_D AND XREF1.EXPY_D))
  ) XREF ON XREF.ASSC_ACCT_I = AP.ACCT_I
  WHERE ((AP.EFFT_D BETWEEN XREF.EFFT_D AND XREF.EXPY_D)
         OR (XREF.EFFT_D BETWEEN AP.EFFT_D AND AP.EXPY_D))
  GROUP BY 1,2,3,4,5,6,7,8,9;

  
  -- 8. Include MOS account level mappings - Loan accounts
  INSERT INTO PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_CURR
  SELECT AX.ACCT_I,
         AP.PATY_I,
         AX.ASSC_ACCT_I,
         AP.PATY_ACCT_REL_C,
         'N' AS PRFR_PATY_F,
         AP.SRCE_SYST_C,
         (CASE WHEN AP.EFFT_D > AX.EFFT_D THEN AP.EFFT_D ELSE AX.EFFT_D END) AS EFFT_D,
         (CASE WHEN AP.EXPY_D < AX.EXPY_D THEN AP.EXPY_D ELSE AX.EXPY_D END) AS EXPY_D,
         AP.ROW_SECU_ACCS_C
  FROM (
    SELECT ACCT_I, PATY_I, PATY_ACCT_REL_C, SRCE_SYST_C, EFFT_D,
           CASE
             WHEN EFFT_D = EXPY_D THEN EXPY_D
             WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
             ELSE EXPY_D
           END AS EXPY_D,
           ROW_SECU_ACCS_C
    FROM PS_CLD_RW.PDDSTG.ACCT_PATY_DEDUP
    WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
  ) AP
  JOIN (
    -- Loan accounts processing
    SELECT T1.LOAN_I AS ACCT_I,
           UIP.ACCT_I AS ASSC_ACCT_I,
           (CASE WHEN UIP.EFFT_D > T1.EFFT_D THEN UIP.EFFT_D ELSE T1.EFFT_D END) AS EFFT_D,
           (CASE WHEN UIP.EXPY_D < T1.EXPY_D THEN UIP.EXPY_D ELSE T1.EXPY_D END) AS EXPY_D
    FROM (
      SELECT LOAN.LOAN_I,
             FCLY.SRCE_SYST_PATY_I,
             (CASE WHEN LOAN.EFFT_D > FCLY.EFFT_D THEN LOAN.EFFT_D ELSE FCLY.EFFT_D END) AS EFFT_D,
             (CASE WHEN LOAN.EXPY_D < FCLY.EXPY_D THEN LOAN.EXPY_D ELSE FCLY.EXPY_D END) AS EXPY_D
      FROM (
        SELECT LOAN_I, FCLY_I, EFFT_D,
               CASE
                 WHEN EFFT_D = EXPY_D THEN EXPY_D
                 WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
                 ELSE EXPY_D
               END AS EXPY_D
        FROM ps_gdw1_bteq.PVTECH.MOS_LOAN
        WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
      ) LOAN
      JOIN (
        SELECT SUBSTR(FCLY_I,1,14) AS MOS_FCLY_I, SRCE_SYST_PATY_I, EFFT_D,
               CASE
                 WHEN EFFT_D = EXPY_D THEN EXPY_D
                 WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
                 ELSE EXPY_D
               END AS EXPY_D
        FROM ps_gdw1_bteq.PVTECH.MOS_FCLY
        WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
      ) FCLY ON FCLY.MOS_FCLY_I = LOAN.FCLY_I
      WHERE ((FCLY.EFFT_D BETWEEN LOAN.EFFT_D AND LOAN.EXPY_D)
             OR (LOAN.EFFT_D BETWEEN FCLY.EFFT_D AND FCLY.EXPY_D))
    ) T1
    JOIN (
      SELECT ACCT_I, SRCE_SYST_PATY_I, EFFT_D,
             CASE
               WHEN EFFT_D = EXPY_D THEN EXPY_D
               WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
               ELSE EXPY_D
             END AS EXPY_D
      FROM ps_gdw1_bteq.PVTECH.ACCT_UNID_PATY
      WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
        AND SRCE_SYST_C = 'SAP'
        AND PATY_ACCT_REL_C = 'ACTO'
    ) UIP ON UIP.SRCE_SYST_PATY_I = T1.SRCE_SYST_PATY_I
    WHERE ((UIP.EFFT_D BETWEEN T1.EFFT_D AND T1.EXPY_D)
           OR (T1.EFFT_D BETWEEN UIP.EFFT_D AND UIP.EXPY_D))
  ) AX ON AX.ASSC_ACCT_I = AP.ACCT_I
  WHERE ((AX.EFFT_D BETWEEN AP.EFFT_D AND AP.EXPY_D)
         OR (AP.EFFT_D BETWEEN AX.EFFT_D AND AX.EXPY_D))
  GROUP BY 1,2,3,4,5,6,7,8,9

  UNION ALL
  
  -- Facility accounts processing
  SELECT AX.ACCT_I,
         AP.PATY_I,
         AX.ASSC_ACCT_I,
         AP.PATY_ACCT_REL_C,
         'N' AS PRFR_PATY_F,
         AP.SRCE_SYST_C,
         (CASE WHEN AP.EFFT_D > AX.EFFT_D THEN AP.EFFT_D ELSE AX.EFFT_D END) AS EFFT_D,
         (CASE WHEN AP.EXPY_D < AX.EXPY_D THEN AP.EXPY_D ELSE AX.EXPY_D END) AS EXPY_D,
         AP.ROW_SECU_ACCS_C
  FROM (
    SELECT ACCT_I, PATY_I, PATY_ACCT_REL_C, SRCE_SYST_C, EFFT_D,
           CASE
             WHEN EFFT_D = EXPY_D THEN EXPY_D
             WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
             ELSE EXPY_D
           END AS EXPY_D,
           ROW_SECU_ACCS_C
    FROM PS_CLD_RW.PDDSTG.ACCT_PATY_DEDUP
    WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
  ) AP
  JOIN (
    SELECT FCLY.FCLY_I AS ACCT_I,
           UIP.ACCT_I AS ASSC_ACCT_I,
           (CASE WHEN UIP.EFFT_D > FCLY.EFFT_D THEN UIP.EFFT_D ELSE FCLY.EFFT_D END) AS EFFT_D,
           (CASE WHEN UIP.EXPY_D < FCLY.EXPY_D THEN UIP.EXPY_D ELSE FCLY.EXPY_D END) AS EXPY_D
    FROM (
      SELECT FCLY_I, SRCE_SYST_PATY_I, EFFT_D,
             CASE
               WHEN EFFT_D = EXPY_D THEN EXPY_D
               WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
               ELSE EXPY_D
             END AS EXPY_D
      FROM ps_gdw1_bteq.PVTECH.MOS_FCLY
      WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
    ) FCLY
    JOIN (
      SELECT ACCT_I, SRCE_SYST_PATY_I, EFFT_D,
             CASE
               WHEN EFFT_D = EXPY_D THEN EXPY_D
               WHEN EXPY_D >= :EXTR_D THEN DATE '9999-12-31'
               ELSE EXPY_D
             END AS EXPY_D
      FROM ps_gdw1_bteq.PVTECH.ACCT_UNID_PATY
      WHERE :EXTR_D BETWEEN EFFT_D AND EXPY_D
        AND SRCE_SYST_C = 'SAP'
        AND PATY_ACCT_REL_C = 'ACTO'
    ) UIP ON UIP.SRCE_SYST_PATY_I = FCLY.SRCE_SYST_PATY_I
    WHERE ((UIP.EFFT_D BETWEEN FCLY.EFFT_D AND FCLY.EXPY_D)
           OR (FCLY.EFFT_D BETWEEN UIP.EFFT_D AND UIP.EXPY_D))
  ) AX ON AX.ASSC_ACCT_I = AP.ACCT_I
  WHERE ((AX.EFFT_D BETWEEN AP.EFFT_D AND AP.EXPY_D)
         OR (AP.EFFT_D BETWEEN AX.EFFT_D AND AX.EXPY_D))
  GROUP BY 1,2,3,4,5,6,7,8,9;
  
  RETURN 'SUCCESS: Completed processing for extract date ' || :EXTR_D;
  
EXCEPTION
  WHEN OTHER THEN
    RETURN 'ERROR: ' || SQLERRM || ' (Code: ' || SQLCODE || ')';
END;
$$;