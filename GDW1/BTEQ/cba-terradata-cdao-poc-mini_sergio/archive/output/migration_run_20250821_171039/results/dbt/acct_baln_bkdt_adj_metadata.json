{
  "success": false,
  "quality_score": 1.0,
  "model_sql": "{%- set process_name = 'ACCT_BALN_BKDT_ADJ_RULE_ISRT' -%}\n{%- set stream_name = 'ACCOUNT_BALANCE' -%}\n\n{{\n  config(\n    materialized='ibrg_cld_table',\n    incremental_strategy='truncate-load',\n    database=var('target_database'),\n    schema='DDSTG',\n    tmp_database=var('dcf_database'),\n    tmp_schema=var('dcf_schema'),\n    tmp_relation_type='view',\n    tags=['account_balance', 'backdated_adjustment', 'core_transform', 'sap_source'],\n    pre_hook=[\n        \"{{ log_dcf_exec_msg('Process ACCT_BALN_BKDT_ADJ_RULE_ISRT started') }}\"\n    ],\n    post_hook=[\n        \"{{ log_dcf_exec_msg('Process ACCT_BALN_BKDT_ADJ_RULE_ISRT ended') }}\"\n    ]\n  )\n}}\n\n/*\n    Model: ACCT_BALN_BKDT_ADJ_RULE\n    Purpose: Calculate the Backdated adjustment from ACCT BALN ADJ and apply it on ACCT BALN\n    Business Logic: \n    - Processes SAP balance adjustments with backdating logic\n    - Calculates business day 4 logic for adjustment timing\n    - Aggregates similar adjustments for the same period\n    Dependencies: \n    - {{ var('vtech_db') }}.{{ var('vtech_sch') }}.ACCT_BALN_ADJ\n    - {{ var('vtech_db') }}.{{ var('vtech_sch') }}.GRD_RPRT_CALR_CLYR\n    - {{ var('vtech_db') }}.{{ var('vtech_sch') }}.UTIL_PROS_ISAC\n*/\n\nWITH business_day_4 AS (\n    -- Calculation of Business day 4 Logic\n    SELECT\t\n        CALR_YEAR_N,\n        CALR_MNTH_N,\n        CALR_CALR_D\n    FROM {{ var('vtech_db') }}.{{ var('vtech_sch') }}.GRD_RPRT_CALR_CLYR grc\n    WHERE\t\n        CALR_WEEK_DAY_N NOT IN (1,7) \n        AND CALR_NON_WORK_DAY_F = 'N'\n        AND CALR_CALR_D BETWEEN ADD_MONTHS(CURRENT_DATE(),-13) AND ADD_MONTHS(CURRENT_DATE(),+1)\n    QUALIFY\tROW_NUMBER() OVER (\n        PARTITION BY CALR_YEAR_N, CALR_MNTH_N \n        ORDER BY CALR_CALR_D\n    ) = 4\n),\n\nadjustment_data AS (\n    SELECT\t\n        ADJ.ACCT_I AS ACCT_I,\n        ADJ.SRCE_SYST_C AS SRCE_SYST_C, \n        ADJ.BALN_TYPE_C AS BALN_TYPE_C,\n        ADJ.CALC_FUNC_C AS CALC_FUNC_C,\n        ADJ.TIME_PERD_C AS TIME_PERD_C,\n        ADJ.ADJ_FROM_D AS ADJ_FROM_D,\n        ADJ.ADJ_TO_D,\n        -- Adjustments impacting the current record need to be loaded on the next day to avoid changing the open balances\n        CASE \n            WHEN ADJ.EFFT_D = ADJ.ADJ_TO_D THEN DATEADD(day, 1, ADJ.EFFT_D)\n            ELSE ADJ.EFFT_D \n        END AS EFFT_D,\n        ADJ.GL_RECN_F,\n        ADJ.ADJ_A,\n        ADJ.PROS_KEY_EFFT_I\n    FROM {{ var('vtech_db') }}.{{ var('vtech_sch') }}.ACCT_BALN_ADJ adj\n    WHERE\t\n        SRCE_SYST_C = 'SAP'\n        AND BALN_TYPE_C = 'BALN'\n        AND CALC_FUNC_C = 'SPOT' \n        AND TIME_PERD_C = 'E' \n        -- Excluding the adjustments with $0 in value as this brings no change to the \n        -- $value in the ACCT BALN and had a negative impact on the last records in \n        -- ACCT BALN, so considerably important to eliminate\n        AND ADJ.ADJ_A <> 0 \n        -- Capturing delta adjustments\n        AND ADJ.EFFT_D >= (\n            SELECT MAX(BTCH_RUN_D) \n            FROM {{ var('vtech_db') }}.{{ var('vtech_sch') }}.UTIL_PROS_ISAC \n            WHERE TRGT_M = 'ACCT_BALN_BKDT' \n                AND SRCE_SYST_M = 'GDW'\n                AND COMT_F = 'Y'  \n                AND SUCC_F = 'Y'\n        )\n),\n\nbackdated_calculations AS (\n    SELECT \n        dt1.ACCT_I,\n        dt1.SRCE_SYST_C, \n        dt1.BALN_TYPE_C,\n        dt1.CALC_FUNC_C,\n        dt1.TIME_PERD_C,\n        dt1.ADJ_FROM_D,\n        CASE \n            -- When difference of months is 0\n            WHEN DATEDIFF(month, dt1.ADJ_FROM_D, dt1.EFFT_D) = 0 \n                THEN dt1.ADJ_FROM_D \n            -- Backdated logic calculation when difference of months is 1 \n            -- and DT1.EFFT_D is between Business day 1 and Biz day 4\n            WHEN DATEDIFF(month, dt1.ADJ_FROM_D, dt1.EFFT_D) = 1 \n                AND dt1.EFFT_D <= bsdy_4.CALR_CALR_D \n                THEN dt1.ADJ_FROM_D\n            -- Backdated logic calculation when difference of months is 1 \n            -- and DT1.EFFT_D is NOT between Business day 1 and Biz day 4\n            WHEN DATEDIFF(month, dt1.ADJ_FROM_D, dt1.EFFT_D) = 1 \n                AND dt1.EFFT_D > bsdy_4.CALR_CALR_D  \n                THEN DATE_TRUNC('month', dt1.EFFT_D)\n            -- Backdated logic calculation when difference of months is greater than 1 \n            -- and DT1.EFFT_D is between Business day 1 and Biz day 4\n            WHEN DATEDIFF(month, dt1.ADJ_FROM_D, dt1.EFFT_D) > 1 \n                AND dt1.EFFT_D <= bsdy_4.CALR_CALR_D \n                THEN DATEADD(month, -1, DATE_TRUNC('month', dt1.EFFT_D))\n            -- Backdated logic calculation when difference of months is greater than 1 \n            -- and DT1.EFFT_D is NOT between Business day 1 and Biz day 4\n            WHEN DATEDIFF(month, dt1.ADJ_FROM_D, dt1.EFFT_D) > 1 \n                AND dt1.EFFT_D > bsdy_4.CALR_CALR_D  \n                THEN DATE_TRUNC('month', dt1.EFFT_D)\n        END AS BKDT_ADJ_FROM_D,\n        dt1.ADJ_TO_D,\n        -- Similar adjustments for the same period are added\n        SUM(dt1.ADJ_A) AS ADJ_A,\n        dt1.EFFT_D,\n        dt1.GL_RECN_F,\n        dt1.PROS_KEY_EFFT_I\n    FROM adjustment_data dt1\n    INNER JOIN business_day_4 bsdy_4\n        ON EXTRACT(YEAR FROM dt1.EFFT_D) = EXTRACT(YEAR FROM bsdy_4.CALR_CALR_D)\n        AND EXTRACT(MONTH FROM dt1.EFFT_D) = EXTRACT(MONTH FROM bsdy_4.CALR_CALR_D)\n    WHERE\n        -- Including the adjustments that are excluded in the previous run for open record\n        dt1.EFFT_D <= (\n            SELECT MAX(BTCH_RUN_D) AS BTCH_RUN_D\n            FROM {{ var('vtech_db') }}.{{ var('vtech_sch') }}.UTIL_PROS_ISAC\n            WHERE TRGT_M = 'ACCT_BALN_ADJ' \n                AND SRCE_SYST_M = 'SAP'\n                AND COMT_F = 'Y'  \n                AND SUCC_F = 'Y'\n        )\n        -- To avoid any records that are processed in the previous runs\n        AND dt1.EFFT_D > (\n            SELECT MAX(BTCH_RUN_D) AS BTCH_RUN_D\n            FROM {{ var('vtech_db') }}.{{ var('vtech_sch') }}.UTIL_PROS_ISAC\n            WHERE TRGT_M = 'ACCT_BALN_BKDT' \n                AND SRCE_SYST_M = 'GDW'\n                AND COMT_F = 'Y'  \n                AND SUCC_F = 'Y'\n        )\n    GROUP BY \n        dt1.ACCT_I,\n        dt1.SRCE_SYST_C, \n        dt1.BALN_TYPE_C,\n        dt1.CALC_FUNC_C,\n        dt1.TIME_PERD_C,\n        dt1.ADJ_FROM_D,\n        BKDT_ADJ_FROM_D,\n        dt1.ADJ_TO_D,\n        dt1.EFFT_D,\n        dt1.GL_RECN_F, \n        dt1.PROS_KEY_EFFT_I\n),\n\nfinal AS (\n    SELECT \n        ACCT_I, \n        SRCE_SYST_C,\n        BALN_TYPE_C,\n        CALC_FUNC_C,\n        TIME_PERD_C,\n        ADJ_FROM_D,\n        BKDT_ADJ_FROM_D,\n        ADJ_TO_D,\n        ADJ_A,\n        EFFT_D,\n        GL_RECN_F,\n        PROS_KEY_EFFT_I               \n    FROM backdated_calculations\n    WHERE\n        -- To exclude any adjustments that fall in the period where the GL is closed\n        BKDT_ADJ_FROM_D <= ADJ_TO_D\n)\n\nSELECT * FROM final",
  "metadata": {
    "models_used": [
      "claude-4-sonnet",
      "snowflake-llama-3.3-70b"
    ],
    "preferred_model": "claude-4-sonnet",
    "quality_score": 1.0,
    "dbt_features": [
      "config",
      "variables",
      "macros",
      "jinja_variables",
      "incremental",
      "pre_hooks",
      "post_hooks",
      "tags"
    ],
    "total_time_ms": 55552,
    "comparison_notes": [
      "Selected claude-4-sonnet as preferred model",
      "claude-4-sonnet: Quality=1.000, Features=8, Time=30834ms",
      "snowflake-llama-3.3-70b: Quality=0.910, Features=8, Time=24600ms"
    ],
    "migration_notes": [
      "Converted Teradata date functions to Snowflake equivalents",
      "Organized logic using CTEs for better readability",
      "Added DBT configuration for materialization and metadata",
      "Used DBT variables for environment-specific configuration",
      "Converted from procedural BTEQ to declarative DBT model"
    ]
  },
  "warnings": [
    "Uses SELECT * - consider explicit column selection",
    "Incremental materialization without is_incremental() check"
  ],
  "execution_time_ms": 55553
}