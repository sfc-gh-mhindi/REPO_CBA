CREATE OR REPLACE PROCEDURE PS_GDW1_BTEQ.BTEQ_SPS.BTEQ_SAP_EDO_WKLY_LOAD_PROC()
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
  error_code INTEGER DEFAULT 0;
  row_count INTEGER DEFAULT 0;
  table_count INTEGER DEFAULT 0;
BEGIN
  -- Object Name: BTEQ_SAP_EDO_WKLY_LOAD.sql
  -- Description: to load the missing accounts
  
  -- Create XUJE_OFFSET_MC_RPT_1710 volatile table
  BEGIN
    DROP ICEBERG TABLE IF EXISTS PS_CLD_RW.TEMP.XUJE_OFFSET_MC_RPT_1710;
  EXCEPTION
    WHEN OTHER THEN
      NULL;
  END;
  
  CREATE ICEBERG TABLE PS_CLD_RW.TEMP.XUJE_OFFSET_MC_RPT_1710 AS
  (
    SELECT 
      OPEN_MC.INTR_CNCT_NUMB_OF_MAIN_CNCT AS OFFSET_MC_ID, 
      OPEN_MC.MSTR_CNCT_NUMB AS OFFSET_MC_NUMBER,
      OPEN_MC.SALE_PDCT,
      OPEN_MC.LOAD_S AS MCDMG_LOAD_S,
      CASE WHEN C.CTCT_STUS = '30' THEN 'OPEN' ELSE 'CLOSED' END AS PACKAGE_STATUS, 
      CASE WHEN C.CTCT_STUS = '50' THEN C.VALD_FROM ELSE NULL END AS CLOSURE_DATE,
      E.EXTL_CNCT_PART_1 AS PARTICIPATE_ACCOUNT_ID,
      CASE WHEN E.CNCT_TYPE_KEY = '5' THEN F.BANK END AS PARTICIPATE_ACCOUNT_BSB,            
      CASE WHEN E.CNCT_TYPE_KEY = '6' AND E.NON_SAP_ACCT_NUMB IS NOT NULL THEN NON_SAP_ACCT_NUMB 
           WHEN E.CNCT_TYPE_KEY = '5' AND EXTL_CNCT_PART_1 IS NOT NULL THEN F.EXTL_ACCT_NUMB END AS PARTICIPATE_ACCOUNT_NUMBER,
      CAST(E.CIF_PDCT_IDNN AS DECIMAL(4,0)) as Prxy_PDCT_IDNN,
      CASE WHEN E.CNCT_TYPE_KEY = '5' THEN 'SAP' ELSE E.SRCE_SYST END AS PARTICIPATE_ACCOUNT_SOURCE,
      CASE WHEN E.NON_SAP_ACCT_SALE_PDCT IS NOT NULL THEN NON_SAP_ACCT_SALE_PDCT ELSE F.SALE_PDCT END AS PARTICIPATE_ACCOUNT_SP, 
      E.LOAD_S AS PRXY_LOAD_S,
      CASE WHEN F.ACCT_STUS = '30' THEN 'OPEN' WHEN F.ACCT_STUS IS NULL AND G.ACCT_CLSE_DATE ='9999-12-31' THEN 'OPEN' ELSE 'CLOSED' END AS ACCT_STATUS, 
      G.PDCT_IDNN as Wul_pdct,
      G.LOAD_S AS WNSA_LOAD_S,
      P.SALES_PRODUCT_DESC AS PARTICIPATE_ACCOUNT_SP_DESCRIPTION,
      CAST(D.VALD_FROM AS DATE) AS DATE_OF_LINKAGE,
      CAST(D.ACTL_VALD_END AS DATE) AS EXPIRE_OF_LINKAGE,
      D.LOAD_S AS MCB_LOAD_S
    FROM 
    (
      SELECT B.INTR_CNCT_NUMB_OF_MAIN_CNCT, B.MSTR_CNCT_NUMB, B.LOAD_S, A.SALE_PDCT, C.LOAD_S AS CNCT_LOAD_S 
      FROM PS_CLD_RW.PVCBODS.CBA_FNCL_SERV_GL_DATA_CURR A
      INNER JOIN PS_CLD_RW.PVCBODS.MSTR_CNCT_MSTR_DATA_GENL_CURR B ON A.INTR_CNCT_ID = B.INTR_CNCT_NUMB_OF_MAIN_CNCT 
      INNER JOIN PS_CLD_RW.PVCBODS.CNCT_HEAD C ON C.CNCT = B.INTR_CNCT_NUMB_OF_MAIN_CNCT
      WHERE A.SALE_PDCT = '001603' AND A.SRCE_SYST_ISAC_CODE = 'E001' AND B.SRCE_SYST_ISAC_CODE = 'E001' AND C.SRCE_SYST_ISAC_CODE = 'E001'
      QUALIFY RANK() OVER (PARTITION BY C.CNCT ORDER BY C.LOAD_S DESC, C.VALD_FROM DESC) = 1
    ) AS OPEN_MC
    INNER JOIN PS_CLD_RW.PVCBODS.CNCT_HEAD_CURR C ON C.CNCT = OPEN_MC.INTR_CNCT_NUMB_OF_MAIN_CNCT
    LEFT OUTER JOIN 
    (
      SELECT * FROM PS_CLD_RW.PVCBODS.MSTR_CNCT_BALN_TRNF_PRTP
      WHERE SRCE_SYST_ISAC_CODE = 'E001'
      AND COALESCE(OBJC_BDT_APPT, '') <> '' 
      QUALIFY RANK() OVER (PARTITION BY INTR_CNCT_NUMB_OF_MAIN_CNCT, ELEM_OF_A_CNCT_HIER_GRUP, OBJC_BDT_APPT ORDER BY LOAD_S DESC) = 1
    ) D ON D.INTR_CNCT_NUMB_OF_MAIN_CNCT = OPEN_MC.INTR_CNCT_NUMB_OF_MAIN_CNCT
    LEFT OUTER JOIN 
    (
      SELECT * FROM PS_CLD_RW.PVCBODS.MSTR_CNCT_PRXY_ACCT 
      WHERE SRCE_SYST_ISAC_CODE = 'E001' AND CNCT_TYPE_KEY IN ('5', '6') 
      QUALIFY RANK() OVER (PARTITION BY ELEM_OF_A_CNCT_HIER_GRUP, CNCT_TYPE_KEY ORDER BY LOAD_S DESC) = 1
    ) E ON E.ELEM_OF_A_CNCT_HIER_GRUP = D.ELEM_OF_A_CNCT_HIER_GRUP
    LEFT OUTER JOIN PS_CLD_RW.PVCBODS.ACCT_MSTR_DATA_CURR F ON F.ACCT = E.EXTL_CNCT_PART_1 AND CNCT_CATG = '0001'
    LEFT JOIN 
    (
      SELECT * FROM PS_CLD_RW.PVCBODS.WUL_NON_SAP_ACCT 
      QUALIFY RANK() OVER(PARTITION BY ACCT_I ORDER BY LOAD_S DESC) = 1
    ) G ON 'HLSHL'||E.NON_SAP_ACCT_NUMB = G.ACCT_I
    INNER JOIN PS_CLD_RW.VEXTR.BD_SALE_PDCT P ON P.SALES_PRODUCT_CODE = PARTICIPATE_ACCOUNT_SP
    WHERE PARTICIPATE_ACCOUNT_SOURCE IS NOT NULL 
    GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
  );
  
  table_count := table_count + 1;
  
  -- Create EDO_MC_RECONCILIATION_GDW_1710 volatile table
  BEGIN
    DROP ICEBERG TABLE IF EXISTS PS_CLD_RW.TEMP.EDO_MC_RECONCILIATION_GDW_1710;
  EXCEPTION
    WHEN OTHER THEN
      NULL;
  END;
  
  CREATE ICEBERG TABLE PS_CLD_RW.TEMP.EDO_MC_RECONCILIATION_GDW_1710 AS
  (
    SELECT DISTINCT A.ACCT_I,
      TRIM(A.PDCT_N) AS MC_PDCT_N,
      B.OFFR_I,
      B.ACCT_OFFR_STRT_D,
      B.ACCT_OFFR_END_D,
      OBJC_ACCT_I,
      TRIM(D.PDCT_N) AS PARTICIPANT_PDCT_N
    FROM (
      SELECT * FROM PS_CLD_RW.PVTECH.ACCT_PDCT WHERE PDCT_N = '1603' 
      AND ACCT_I IN (
        SELECT ACCT_I FROM PS_CLD_RW.PVTECH.ACCT_BASE 
        WHERE ACCT_I LIKE 'SAPMC%' AND COALESCE(CLSE_D, DATE'9999-12-31') = '9999-12-31'
      )
      AND CURRENT_DATE - 1 BETWEEN EFFT_D AND EXPY_D
    ) A 
    LEFT JOIN (
      SELECT * FROM PS_CLD_RW.PVTECH.ACCT_OFFR 
      WHERE ACCT_OFFR_END_D = '9999-12-31' AND CURRENT_DATE - 1 BETWEEN EFFT_D AND EXPY_D
    ) B ON A.ACCT_I = B.ACCT_I 
    JOIN (
      SELECT * FROM PS_CLD_RW.PVTECH.ACCT_REL 
      WHERE Rel_c LIKE 'MC%' AND CURRENT_DATE - 1 BETWEEN EFFT_D AND EXPY_D
    ) C ON A.ACCT_I = C.SUBJ_ACCT_I 
    LEFT JOIN (
      SELECT * FROM PS_CLD_RW.PVTECH.ACCT_PDCT WHERE 
      ACCT_I IN (
        SELECT ACCT_I FROM PS_CLD_RW.PVTECH.ACCT_BASE 
        WHERE (ACCT_I LIKE 'HLSHL%' OR ACCT_I LIKE 'SAPSP%') 
        AND COALESCE(CLSE_D, DATE'9999-12-31') = '9999-12-31'
      )
      AND CURRENT_DATE - 1 BETWEEN EFFT_D AND EXPY_D
    ) D ON D.ACCT_I = C.OBJC_ACCT_I 
    GROUP BY 1, 2, 3, 4, 5, 6, 7
  );
  
  table_count := table_count + 1;
  
  -- Create HLS_DIFF_ODS_GDW_1710 volatile table
  BEGIN
    DROP ICEBERG TABLE IF EXISTS PS_CLD_RW.TEMP.HLS_DIFF_ODS_GDW_1710;
  EXCEPTION
    WHEN OTHER THEN
      NULL;
  END;
  
  CREATE ICEBERG TABLE PS_CLD_RW.TEMP.HLS_DIFF_ODS_GDW_1710 AS
  (
    SELECT DISTINCT A.* FROM 
    (
      SELECT * FROM PS_CLD_RW.TEMP.XUJE_OFFSET_MC_RPT_1710 
      WHERE PARTICIPATE_ACCOUNT_SOURCE = 'HLS' 
      AND DATE_OF_LINKAGE <= CURRENT_DATE - 2 
      AND EXPIRE_OF_LINKAGE >= CURRENT_DATE - 2
      AND PACKAGE_STATUS <> 'CLOSED'
    ) A
    LEFT JOIN 
    (
      SELECT SUBSTR(ACCT_I, 10) AS OFFSET_MC_NUMBER,
        PARTICIPANT_PDCT_N AS PARTICIPATE_ACCOUNT_SP, 
        SUBSTR(OBJC_ACCT_I, 6) AS PARTICIPATE_ACCOUNT_NUMBER 
      FROM PS_CLD_RW.TEMP.EDO_MC_RECONCILIATION_GDW_1710 
      WHERE SUBSTR(OBJC_ACCT_I, 1, 3) = 'HLS'
    ) B
    ON CAST(A.OFFSET_MC_NUMBER AS NUMBER) = CAST(B.OFFSET_MC_NUMBER AS NUMBER)
    AND CAST(A.PARTICIPATE_ACCOUNT_NUMBER AS NUMBER) = CAST(B.PARTICIPATE_ACCOUNT_NUMBER AS NUMBER)
    WHERE B.OFFSET_MC_NUMBER IS NULL
  );
  
  table_count := table_count + 1;
  
  -- Create SAP_DIFF_ODS_GDW_1710 volatile table
  BEGIN
    DROP ICEBERG TABLE IF EXISTS PS_CLD_RW.TEMP.SAP_DIFF_ODS_GDW_1710;
  EXCEPTION
    WHEN OTHER THEN
      NULL;
  END;
  
  CREATE ICEBERG TABLE PS_CLD_RW.TEMP.SAP_DIFF_ODS_GDW_1710 AS
  (
    SELECT DISTINCT A.* FROM 
    (
      SELECT * FROM PS_CLD_RW.TEMP.XUJE_OFFSET_MC_RPT_1710 
      WHERE PARTICIPATE_ACCOUNT_SOURCE = 'SAP' 
      AND DATE_OF_LINKAGE <= CURRENT_DATE - 2 
      AND EXPIRE_OF_LINKAGE >= CURRENT_DATE - 2
      AND PACKAGE_STATUS <> 'CLOSED'
    ) A
    LEFT JOIN 
    (
      SELECT SUBSTR(ACCT_I, 10) AS OFFSET_MC_NUMBER,
        SUBSTR(OBJC_ACCT_I, 8, 6) AS PARTICIPATE_ACCOUNT_BSB, 
        SUBSTR(OBJC_ACCT_I, 14) AS PARTICIPATE_ACCOUNT_NUMBER 
      FROM PS_CLD_RW.TEMP.EDO_MC_RECONCILIATION_GDW_1710 
      WHERE SUBSTR(OBJC_ACCT_I, 1, 3) = 'SAP'
    ) B
    ON CAST(A.OFFSET_MC_NUMBER AS NUMBER) = CAST(B.OFFSET_MC_NUMBER AS NUMBER)
    AND CAST(A.PARTICIPATE_ACCOUNT_BSB AS NUMBER) = CAST(B.PARTICIPATE_ACCOUNT_BSB AS NUMBER)
    AND CAST(A.PARTICIPATE_ACCOUNT_NUMBER AS NUMBER) = CAST(B.PARTICIPATE_ACCOUNT_NUMBER