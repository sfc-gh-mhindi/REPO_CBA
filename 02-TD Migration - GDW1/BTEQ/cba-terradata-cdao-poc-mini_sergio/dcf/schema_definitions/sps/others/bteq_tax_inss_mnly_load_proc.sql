CREATE OR REPLACE PROCEDURE PS_GDW1_BTEQ.BTEQ_SPS.BTEQ_TAX_INSS_MNLY_LOAD_PROC(
  ERROR_TABLE STRING DEFAULT 'PROCESS_ERROR_LOG',
  PROCESS_KEY STRING DEFAULT 'UNKNOWN_PROCESS'
)
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
  error_code INTEGER DEFAULT 0;
  row_count INTEGER DEFAULT 0;
  total_processed INTEGER DEFAULT 0;
BEGIN
  -- Object Name: BTEQ_TAX_INSS_MNLY_LOAD.sql
  -- Description: To load the missing accounts MONTHLY frequency
  
  -- Create temporary table ACCT_MSTR1 with monthly frequency filter
  BEGIN
    DROP ICEBERG TABLE IF EXISTS PS_CLD_RW.PDDSTG.ACCT_MSTR1;
  EXCEPTION
    WHEN OTHER THEN
      NULL;
  END;
  
  CREATE ICEBERG TABLE PS_CLD_RW.PDDSTG.ACCT_MSTR1 (
    ACCT STRING,
    BUSN_PTNR_NUMB STRING,
    SRCE_SYST_ISAC_CODE STRING,
    RSDT_STUS STRING,
    USER_IN_CYT_CALC STRING,
    LAST_UPDT_ON TIMESTAMP,
    CYT_DOCU_QOTE STRING,
    VALD_FROM DATE,
    VALD_TO DATE,
    LOAD_S TIMESTAMP
  );
  
  INSERT INTO PS_CLD_RW.PDDSTG.ACCT_MSTR1
  SELECT 
    ACCT,
    BUSN_PTNR_NUMB,
    SRCE_SYST_ISAC_CODE,
    RSDT_STUS,
    USER_IN_CYT_CALC,
    LAST_UPDT_ON,
    CYT_DOCU_QOTE,
    VALD_FROM,
    VALD_TO,
    LOAD_S
  FROM ps_gdw1_bteq.PVCBODS.ACCT_MSTR_CYT_DATA 
  WHERE LOAD_S BETWEEN (
    SELECT FNYR_RPRT_TMPD_STRT_D 
    FROM (
      SELECT CASE WHEN EXTRACT(MONTH FROM FNCL_CALR_D) = '7' 
        THEN CAST(CONCAT(EXTRACT(YEAR FROM FNCL_CALR_D)-1, '-06-30') AS DATE) 
        ELSE FNYR_RPRT_TMPD_STRT_D-1 
      END AS FNYR_RPRT_TMPD_STRT_D
      FROM ps_gdw1_bteq.PVTECH.GRD_RPRT_CALR_FNYR 
      WHERE FNCL_CALR_D = CURRENT_DATE
    ) A
  ) AND (
    SELECT FNYR_RPRT_TMPD_END_D 
    FROM (
      SELECT DATEADD(MONTH, 0, DATE_TRUNC('MONTH', FNCL_CALR_D)) + 1 AS FNYR_RPRT_TMPD_END_D
      FROM ps_gdw1_bteq.PVTECH.GRD_RPRT_CALR_FNYR 
      WHERE FNCL_CALR_D = CURRENT_DATE
    ) A
  );
  
  -- Create temporary table for missing accounts identification
  BEGIN
    DROP ICEBERG TABLE IF EXISTS PS_CLD_RW.PDDSTG.LOAD_MISSING_ACCTS1;
  EXCEPTION
    WHEN OTHER THEN
      NULL;
  END;
  
  CREATE ICEBERG TABLE PS_CLD_RW.PDDSTG.LOAD_MISSING_ACCTS1 (
    ACCT_I STRING,
    PATY_I STRING,
    SRCE_SYST_C STRING,
    RESI_STUS_C STRING,
    IDNN_TYPE_C STRING,
    IDNN_STUS_C STRING,
    RSDT_STUS STRING,
    USER_IN_CYT_CALC STRING,
    CYT_DOCU_QOTE STRING,
    VALD_TO_CYT DATE,
    VALD_TO DATE,
    LAST_UPDT_ON TIMESTAMP,
    ACCT_STUS STRING,
    VALD_FROM DATE,
    SRC_EFFT_D DATE,
    TGT_EFFT_D DATE,
    IND STRING
  );
  
  INSERT INTO PS_CLD_RW.PDDSTG.LOAD_MISSING_ACCTS1
  SELECT
    SRC.ACCT_I,
    SRC.PATY_I,
    TGT.SRCE_SYST_C,
    SRC.RESI_STUS_C,
    SRC.IDNN_TYPE_C,
    SRC.IDNN_STUS_C,
    SRC.RSDT_STUS,
    SRC.USER_IN_CYT_CALC,
    SRC.CYT_DOCU_QOTE,
    SRC.VALD_TO_CYT,
    SRC.VALD_TO,
    SRC.LAST_UPDT_ON,
    SRC.ACCT_STUS,
    SRC.VALD_FROM,
    SRC.RUN_STRM_PROS_D AS SRC_EFFT_D,
    TGT.EFFT_D AS TGT_EFFT_D,
    CASE 
      WHEN TGT.ACCT_I IS NULL AND TGT.PATY_I IS NULL THEN 'I'
      WHEN SRC.ACCT_I = TGT.ACCT_I AND SRC.PATY_I = TGT.PATY_I 
        AND (SRC.RESI_STUS_C <> TGT.RESI_STUS_C OR SRC.IDNN_TYPE_C <> TGT.IDNN_TYPE_C OR SRC.IDNN_STUS_C <> TGT.IDNN_STUS_C) THEN 'U'
      WHEN SRC.ACCT_I = TGT.ACCT_I AND SRC.PATY_I = TGT.PATY_I
        AND (SRC.VALD_TO_CYT <> '9999-12-31' OR SRC.VALD_TO <> '9999-12-31' OR SRC.ACCT_STUS = '50') THEN 'D'
      ELSE 'C'
    END AS IND
  FROM (
    SELECT
      ACCT_I,
      PATY_I,
      RSDT_STUS,
      USER_IN_CYT_CALC,
      CYT_DOCU_QOTE,
      CASE WHEN RESI_STUS_C IS NULL THEN '9999' ELSE RESI_STUS_C END AS RESI_STUS_C,
      CASE WHEN IDNN_TYPE_C IS NULL THEN '9999' ELSE IDNN_TYPE_C END AS IDNN_TYPE_C,
      CASE WHEN IDNN_STUS_C IS NULL THEN '9999' ELSE IDNN_STUS_C END AS IDNN_STUS_C,
      AMCD.VALD_TO AS VALD_TO_CYT,
      BP.VALD_TO,
      LAST_UPDT_ON,
      ACCT_STUS,
      AMD.VALD_FROM,
      UTIL.RUN_STRM_PROS_D
    FROM PS_CLD_RW.PDDSTG.ACCT_MSTR1 AMCD 
    INNER JOIN ps_gdw1_bteq.PVCBODS.ACCT_MSTR_DATA_GENL AMD
      ON AMD.ACCT = AMCD.ACCT
      AND AMD.SRCE_SYST_ISAC_CODE = AMCD.SRCE_SYST_ISAC_CODE
    INNER JOIN (
      SELECT
        PATY_I,
        BP.BUSN_PTNR_NUMB,
        BP.SRCE_SYST_ISAC_CODE,
        BP.LOAD_S,
        PI.LOAD_S AS LOAD_S_PI,
        COALESCE(PI.VALD_TO, DATE '9999-12-31') AS VALD_TO
      FROM (
        SELECT * FROM ps_gdw1_bteq.PVCBODS.BUSN_PTNR
        WHERE IS_CURR_IND = 1
      ) BP
      LEFT OUTER JOIN ps_gdw1_bteq.PVCBODS.PTNR_IDNN_NUMB PI
        ON BP.BUSN_PTNR_NUMB = PI.BUSN_PTNR_NUMB
        AND BP.SRCE_SYST_ISAC_CODE = PI.SRCE_SYST_ISAC_CODE
        AND PTNR_ID_TYPE = 'ZCIF00'
      QUALIFY ROW_NUMBER() OVER(PARTITION BY BP.BUSN_PTNR_NUMB, BP.SRCE_SYST_ISAC_CODE ORDER BY PI.LOAD_S DESC, PI.VALD_TO DESC) = 1
    ) BP
      ON BP.BUSN_PTNR_NUMB = AMCD.BUSN_PTNR_NUMB
      AND BP.SRCE_SYST_ISAC_CODE = AMCD.SRCE_SYST_ISAC_CODE
    INNER JOIN (
      SELECT RUN_STRM_PROS_D, SRCE_SYST_ISAC, EXT_FROM_S, EXT_TO_S 
      FROM ps_gdw1_bteq.UTILSTG.CBM_UTIL_RUN_STRM_OCCR_CNTL_H 
      WHERE RUN_STRM_C = 'SAP00' AND SRCE_SYST_ISAC = 'E001'
    ) UTIL
      ON UTIL.SRCE_SYST_ISAC = AMCD.SRCE_SYST_ISAC_CODE
    LEFT OUTER JOIN ps_gdw1_bteq.PVTECH.MAP_SAP_RESI_STUS AS MSRS
      ON MSRS.RESI_STUS = AMCD.RSDT_STUS 
      AND RUN_STRM_PROS_D BETWEEN MSRS.EFFT_D AND MSRS.EXPY_D
    LEFT OUTER JOIN ps_gdw1_bteq.PVTECH.MAP_SAP_IDNN_TYPE AS MSIT
      ON MSIT.SAP_IDNN_TYPE_C = AMCD.USER_IN_CYT_CALC 
      AND RUN_STRM_PROS_D BETWEEN MSIT.EFFT_D AND MSIT.EXPY_D
    LEFT OUTER JOIN ps_gdw1_bteq.PVTECH.MAP_SAP_IDNN_STUS AS MSIS
      ON MSIS.SAP_IDNN_STUS_C = AMCD.CYT_DOCU_QOTE 
      AND RUN_STRM_PROS_D BETWEEN MSIS.EFFT_D AND MSIS.EXPY_D
    WHERE
      AMD.LOAD_S <= UTIL.EXT_TO_S 
      AND COALESCE(AMD.UPD_LOAD_S, TIMESTAMP '9999-12-31 00:00:00.000000') > UTIL.EXT_TO_S
      AND AMCD.LOAD_S <= UTIL.EXT_TO_S
      AND COALESCE(AMD.PDCT, '') NOT IN (
        SELECT PDCT FROM ps_gdw1_bteq.PVTECH.MAP_SAP_INVL_PDCT
        WHERE PDCT_C = 'INVL' AND UTIL.RUN_STRM_PROS_D BETWEEN EFFT_D AND EXPY_D
      )
      AND (
        (AMCD.LOAD_S >= UTIL.EXT_FROM_S)
        OR (AMD.LOAD_S >= UTIL.EXT_FROM_S)
        OR (BP.VALD_TO <> '9999-12-31' AND BP.LOAD_S_PI >= UTIL.EXT_FROM_S)
      )
    QUALIFY ROW_NUMBER() OVER(PARTITION BY AMCD.ACCT, AMCD.BUSN_PTNR_NUMB, AMCD.SRCE_SYST_ISAC_CODE ORDER BY AMCD.VALD_FROM DESC, AMCD.LOAD_S DESC) = 1
  ) AS SRC
  LEFT OUTER JOIN (
    SELECT * FROM ps_gdw1_bteq.PVTECH.ACCT_PATY_TAX_INSS
    WHERE SRCE_SYST_C = 'SAP' AND ACCT_I LIKE 'SAP%'
    QUALIFY ROW_NUMBER() OVER(PARTITION BY ACCT_I, PATY_I, SRCE_SYST_C ORDER BY EFFT_D DESC, EXPY_D DESC) = 1
  ) TGT
    ON SRC.ACCT_I = TGT.ACCT_I AND SRC.PATY_I = TGT.PATY_I AND TGT.SRCE_SYST_C = 'SAP'
  WHERE IND = 'I';
  
  SELECT COUNT(*) INTO :row_count FROM PS_CLD_RW.PDDSTG.LOAD_MISSING_ACCTS1;
  total_processed := :row_count;
  
  -- Create utility processing key table
  BEGIN
    DROP ICEBERG TABLE IF EXISTS PS_CLD_RW.PDDSTG.UTIL_PROS_SAP_RUN;
  EXCEPTION
    WHEN OTHER THEN
      NULL;
  END;
  
  CREATE ICEBERG TABLE PS_CLD_RW.PDDSTG.UTIL_PROS_SAP_RUN (
    PROS_KEY_EFFT_I STRING
  );
  
  INSERT INTO PS_CLD_RW.PDDSTG.UTIL_PROS_SAP_RUN
  SELECT TO_CHAR(CAST(COALESCE(TOP_KEY_I, '0') + 1