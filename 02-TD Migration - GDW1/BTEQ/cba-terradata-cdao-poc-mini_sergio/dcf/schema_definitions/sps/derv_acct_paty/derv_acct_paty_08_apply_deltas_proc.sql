CREATE OR REPLACE PROCEDURE PS_GDW1_BTEQ.BTEQ_SPS.DERV_ACCT_PATY_08_APPLY_DELTAS_PROC(
  INPUT_PATH STRING DEFAULT '/tmp/input',
  OUTPUT_PATH STRING DEFAULT '/tmp/output',
  ERROR_TABLE STRING DEFAULT 'PROCESS_ERROR_LOG',
  PROCESS_KEY STRING DEFAULT 'UNKNOWN_PROCESS'
)
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
  error_code INTEGER DEFAULT 0;
  row_count INTEGER DEFAULT 0;
  total_rows INTEGER DEFAULT 0;
  pros_key INTEGER DEFAULT 0;
  extr_date DATE;
BEGIN
  -- Object Name: DERV_ACCT_PATY_08_APPLY_DELTAS
  -- Description: Apply the changes as determined in previous step
  -- Original Author: Helen Zak (2013)
  
  -- Get PROS_KEY and BTCH_RUN_D from UTIL_PROS_ISAC
  -- This replaces the file import/export logic from BTEQ
  SELECT PROS_KEY_I, BTCH_RUN_D 
  INTO :pros_key, :extr_date
  FROM ps_gdw1_bteq.PVTECH.UTIL_PROS_ISAC 
  WHERE PROS_KEY_I IS NOT NULL
  ORDER BY BTCH_RUN_D DESC
  LIMIT 1;
  
  -- 1. Update rows from DERV_ACCT_PATY that are no longer effective (logically delete)
  UPDATE PS_CLD_RW.STARCADPRODDATA.DERV_ACCT_PATY
  SET EXPY_D = :extr_date - 1,
      PROS_KEY_EXPY_I = :pros_key
  WHERE EXISTS (
    SELECT 1 
    FROM PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_DEL T2
    WHERE DERV_ACCT_PATY.ACCT_I = T2.ACCT_I
      AND DERV_ACCT_PATY.PATY_I = T2.PATY_I
      AND DERV_ACCT_PATY.PATY_ACCT_REL_C = T2.PATY_ACCT_REL_C
      AND DERV_ACCT_PATY.EFFT_D = T2.EFFT_D
      AND :extr_date BETWEEN DERV_ACCT_PATY.EFFT_D AND DERV_ACCT_PATY.EXPY_D
      AND :extr_date BETWEEN T2.EFFT_D AND T2.EXPY_D
  );
  
  row_count := SQLROWCOUNT;
  total_rows := total_rows + row_count;
  
  -- 2. Expire current rows that changed
  UPDATE PS_CLD_RW.STARCADPRODDATA.DERV_ACCT_PATY
  SET EXPY_D = :extr_date - 1,
      PROS_KEY_EXPY_I = :pros_key
  WHERE EXISTS (
    SELECT 1 
    FROM (
      SELECT * FROM PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_CHG 
      QUALIFY ROW_NUMBER() OVER (PARTITION BY ACCT_I, PATY_I, PATY_ACCT_REL_C ORDER BY EFFT_D DESC) = 1
    ) T2
    WHERE DERV_ACCT_PATY.ACCT_I = T2.ACCT_I
      AND DERV_ACCT_PATY.PATY_I = T2.PATY_I
      AND DERV_ACCT_PATY.PATY_ACCT_REL_C = T2.PATY_ACCT_REL_C
      AND (DERV_ACCT_PATY.ASSC_ACCT_I <> T2.ASSC_ACCT_I
        OR DERV_ACCT_PATY.PRFR_PATY_F <> T2.PRFR_PATY_F
        OR DERV_ACCT_PATY.SRCE_SYST_C <> T2.SRCE_SYST_C)
      AND :extr_date BETWEEN DERV_ACCT_PATY.EFFT_D AND DERV_ACCT_PATY.EXPY_D
      AND :extr_date BETWEEN T2.EFFT_D AND T2.EXPY_D
  );
  
  row_count := SQLROWCOUNT;
  total_rows := total_rows + row_count;
  
  -- 3. Insert new rows for the changes if they don't already exist
  INSERT INTO PS_CLD_RW.STARCADPRODDATA.DERV_ACCT_PATY
  SELECT T1.ACCT_I,
         T1.PATY_I,
         T1.ASSC_ACCT_I,
         T1.PATY_ACCT_REL_C,
         T1.PRFR_PATY_F,
         T1.SRCE_SYST_C,
         :extr_date AS EFFT_D,
         T1.EXPY_D,
         :pros_key AS PROS_KEY_EFFT_D,
         CASE
           WHEN T1.EXPY_D = T1.EFFT_D THEN :pros_key
           ELSE 0
         END AS PROS_KEY_EXPY_D,
         T1.ROW_SECU_ACCS_C
  FROM PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_CHG T1
  LEFT JOIN ps_gdw1_bteq.PVTECH.DERV_ACCT_PATY T2
    ON T1.ACCT_I = T2.ACCT_I
    AND T1.PATY_I = T2.PATY_I
    AND T1.PATY_ACCT_REL_C = T2.PATY_ACCT_REL_C
    AND T1.ASSC_ACCT_I = T2.ASSC_ACCT_I
    AND T1.SRCE_SYST_C = T2.SRCE_SYST_C
    AND T1.PRFR_PATY_F = T2.PRFR_PATY_F
    AND :extr_date BETWEEN T2.EFFT_D AND T2.EXPY_D
  WHERE :extr_date BETWEEN T1.EFFT_D AND T1.EXPY_D
    AND T2.ACCT_I IS NULL;
  
  row_count := SQLROWCOUNT;
  total_rows := total_rows + row_count;
  
  -- 4. Insert rows that exist now but didn't exist before
  INSERT INTO PS_CLD_RW.STARCADPRODDATA.DERV_ACCT_PATY
  SELECT T1.ACCT_I,
         T1.PATY_I,
         T1.ASSC_ACCT_I,
         T1.PATY_ACCT_REL_C,
         T1.PRFR_PATY_F,
         T1.SRCE_SYST_C,
         T1.EFFT_D,
         T1.EXPY_D,
         :pros_key AS PROS_KEY_EFFT_D,
         CASE
           WHEN T1.EXPY_D = T1.EFFT_D THEN :pros_key
           ELSE 0
         END AS PROS_KEY_EXPY_D,
         T1.ROW_SECU_ACCS_C
  FROM PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_ADD T1
  GROUP BY 1,2,3,4,5,6,7,8,9,10,11;
  
  row_count := SQLROWCOUNT;
  total_rows := total_rows + row_count;
  
  -- 5. Synchronize ROW_SECU_ACCS_C values with current rows in ACCT_PATY
  DELETE FROM PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_ROW_SECU_FIX;
  
  INSERT INTO PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_ROW_SECU_FIX
    (ACCT_I, PATY_I, ASSC_ACCT_I, PATY_ACCT_REL_C, PRFR_PATY_F, SRCE_SYST_C, EFFT_D, EXPY_D, ROW_SECU_ACCS_C)
  SELECT T1.ACCT_I,
         T1.PATY_I,
         T1.ASSC_ACCT_I,
         T1.PATY_ACCT_REL_C,
         T1.PRFR_PATY_F,
         T1.SRCE_SYST_C,
         T1.EFFT_D,
         T1.EXPY_D,
         T2.ROW_SECU_ACCS_C
  FROM PS_CLD_RW.STARCADPRODDATA.DERV_ACCT_PATY T1
  JOIN PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_FLAG T2
    ON T1.ACCT_I = T2.ACCT_I
    AND T1.PATY_I = T2.PATY_I
    AND T1.PATY_ACCT_REL_C = T2.PATY_ACCT_REL_C
    AND T1.ROW_SECU_ACCS_C <> T2.ROW_SECU_ACCS_C
  GROUP BY 1,2,3,4,5,6,7,8,9;
  
  -- Update ROW_SECU_ACCS_C values
  UPDATE PS_CLD_RW.STARCADPRODDATA.DERV_ACCT_PATY
  SET ROW_SECU_ACCS_C = T2.ROW_SECU_ACCS_C
  FROM PS_CLD_RW.PDDSTG.DERV_ACCT_PATY_ROW_SECU_FIX T2
  WHERE DERV_ACCT_PATY.ACCT_I = T2.ACCT_I
    AND DERV_ACCT_PATY.PATY_I = T2.PATY_I
    AND DERV_ACCT_PATY.PATY_ACCT_REL_C = T2.PATY_ACCT_REL_C;
  
  row_count := SQLROWCOUNT;
  total_rows := total_rows + row_count;
  
  RETURN 'SUCCESS: Applied deltas to DERV_ACCT_PATY. Total rows affected: ' || :total_rows;
  
EXCEPTION
  WHEN OTHER THEN
    RETURN 'ERROR: ' || SQLERRM || ' (Code: ' || SQLCODE || ')';
END;
$$;