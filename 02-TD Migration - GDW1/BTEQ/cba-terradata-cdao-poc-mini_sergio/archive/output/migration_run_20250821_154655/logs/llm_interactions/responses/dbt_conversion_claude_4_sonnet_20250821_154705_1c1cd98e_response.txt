# LLM Response
Interaction ID: 20250821_154705_1c1cd98e
Success: True
Processing Time: 40132ms
Quality Score: None

# Response
```sql
{%- set process_name = 'ACCT_BALN_BKDT_RECN_GET_PROS_KEY' -%}
{%- set stream_name = 'ACCT_BALN_BKDT_RECN' -%}

{{
  config(
    materialized='table',
    database=var('cad_prod_data_db'),
    schema='util',
    tags=['reconciliation', 'pros_key', 'util'],
    pre_hook=[
        "{{ log_dcf_exec_msg('ACCT_BALN_BKDT_RECN_GET_PROS_KEY Process started') }}"
    ],
    post_hook=[
        "{{ log_dcf_exec_msg('ACCT_BALN_BKDT_RECN_GET_PROS_KEY Process ended') }}",
        "UPDATE {{ var('cad_prod_data_db') }}.util.util_parm SET parm_ltrl_n = parm_ltrl_n + 1 WHERE parm_m = 'PROS_KEY'"
    ]
  )
}}

/*
    Model: ACCT_BALN_BKDT_RECN_GET_PROS_KEY
    Purpose: Reconciliation process - Capture the Latest Pros Key from UTIL PARM table and update UTIL PROS ISAC
    Business Logic: 
        - Gets next PROS_KEY from UTIL_PARM table
        - Inserts records for each batch run date between last successful and current batch runs
        - Creates tracking records for ACCT_BALN_BKDT reconciliation process
    Dependencies: 
        - {{ var('vtech_db') }}.util.util_parm
        - {{ var('vtech_db') }}.util.util_pros_isac  
        - {{ var('vtech_db') }}.calendar.grd_rprt_calr_clyr
*/

WITH util_parm AS (
    SELECT 
        parm_ltrl_n,
        parm_m
    FROM {{ var('vtech_db') }}.util.util_parm
    WHERE parm_m = 'PROS_KEY'
),

-- Capture last successful batch run date relating to the backdated adjustment solution
bkdt_prev AS (
    SELECT MAX(btch_run_d) AS btch_run_d 
    FROM {{ var('vtech_db') }}.util.util_pros_isac
    WHERE trgt_m = 'ACCT_BALN_BKDT' 
        AND srce_syst_m = 'GDW'
        AND comt_f = 'Y'  
        AND succ_f = 'Y'
),

-- Capture latest batch run date relating to the backdated adjustment solution into ACCT_BALN_BKDT
bkdt_curr AS (
    SELECT MAX(btch_run_d) AS btch_run_d 
    FROM {{ var('vtech_db') }}.util.util_pros_isac
    WHERE trgt_m = 'ACCT_BALN_BKDT' 
        AND srce_syst_m = 'GDW'
),

-- Get calendar dates between previous and current batch run dates
calendar_dates AS (
    SELECT cal.calr_calr_d
    FROM {{ var('vtech_db') }}.calendar.grd_rprt_calr_clyr cal
    CROSS JOIN bkdt_prev
    CROSS JOIN bkdt_curr
    WHERE cal.calr_calr_d > bkdt_prev.btch_run_d 
        AND cal.calr_calr_d <= bkdt_curr.btch_run_d
),

final AS (
    SELECT 
        parm.parm_ltrl_n + 1 AS pros_key_i,
        'CAD_X01_ACCT_BALN_BKDT_RECN' AS conv_m,
        'TD' AS conv_type_m,
        CURRENT_TIMESTAMP() AS pros_rqst_s,
        CURRENT_TIMESTAMP() AS pros_last_rqst_s,
        1 AS pros_rqst_q,
        dt.calr_calr_d AS btch_run_d,
        NULL AS btch_key_i,
        'GDW' AS srce_syst_m,
        'ACCT_BALN_BKDT' AS srce_m,
        'ACCT_BALN_BKDT_RECN' AS trgt_m,
        'N' AS succ_f,
        'N' AS comt_f,
        NULL AS comt_s,
        NULL AS mlti_load_efft_d,
        NULL AS syst_s,
        NULL AS mlti_load_comt_s,
        NULL AS syst_et_q,
        NULL AS syst_uv_q,
        NULL AS syst_ins_q,
        NULL AS syst_upd_q,
        NULL AS syst_del_q,
        NULL AS syst_et_tabl_m,
        NULL AS syst_uv_tabl_m,
        NULL AS syst_head_et_tabl_m,
        NULL AS syst_head_uv_tabl_m,
        NULL AS syst_trlr_et_tabl_m,
        NULL AS syst_trlr_uv_tabl_m,
        NULL AS prev_pros_key_i,
        NULL AS head_recd_type_c,
        NULL AS head_file_m,
        NULL AS head_btch_run_d,
        NULL AS head_file_crat_s,
        NULL AS head_genr_prgm_m,
        NULL AS head_btch_key_i,
        NULL AS head_pros_key_i,
        NULL AS head_pros_prev_key_i,
        NULL AS trlr_recd_type_c,
        NULL AS trlr_recd_q,
        NULL AS trlr_hash_totl_a,
        NULL AS trlr_colm_hash_totl_m,
        NULL AS trlr_eror_recd_q,
        NULL AS trlr_file_comt_s,
        NULL AS trlr_recd_isrt_q,
        NULL AS trlr_recd_updt_q,
        NULL AS trlr_recd_delt_q
    FROM util_parm parm
    CROSS JOIN calendar_dates dt
)

SELECT * FROM final
```