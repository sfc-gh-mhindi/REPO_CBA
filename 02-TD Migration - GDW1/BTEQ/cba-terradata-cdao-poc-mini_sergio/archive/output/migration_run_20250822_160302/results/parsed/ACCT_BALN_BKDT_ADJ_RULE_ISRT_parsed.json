{
  "sql_blocks": [
    {
      "sql": "DELETE PDDSTG.ACCT_BALN_BKDT_ADJ_RULE;",
      "start_line": 25,
      "end_line": 26,
      "snowflake_sql": "DELETE PDDSTG.ACCT_BALN_BKDT_ADJ_RULE",
      "error": null,
      "metadata": {
        "tables": [
          "ACCT_BALN_BKDT_ADJ_RULE"
        ],
        "columns": [],
        "functions": [],
        "window_functions": []
      },
      "complexity_metrics": {
        "total_nodes": 4,
        "select_count": 0,
        "join_count": 0,
        "subquery_count": 0,
        "where_conditions": 0,
        "case_statements": 0,
        "window_functions": 0,
        "aggregate_functions": 0
      },
      "teradata_features": [],
      "syntax_validation": {
        "valid": true,
        "error": null,
        "ast_type": "Delete"
      },
      "optimized_sql": "DELETE   \"pddstg\".\"acct_baln_bkdt_adj_rule\""
    },
    {
      "sql": "INSERT INTO PDDSTG.ACCT_BALN_BKDT_ADJ_RULE\n(\nACCT_I, \nSRCE_SYST_C,\nBALN_TYPE_C,\nCALC_FUNC_C,\nTIME_PERD_C,\nADJ_FROM_D,\nBKDT_ADJ_FROM_D,\nADJ_TO_D,\nADJ_A,\nEFFT_D,\nGl_RECN_F,\nPROS_KEY_EFFT_I               \n)\nSELECT \nDT1.ACCT_I,\nDT1.SRCE_SYST_C, \nDT1.BALN_TYPE_C,\nDT1.CALC_FUNC_C,\nDT1.TIME_PERD_C,\nDT1.ADJ_FROM_D,\nCASE WHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))  = 0 \nTHEN DT1.ADJ_FROM_D \n/*Backdated logic calculation when diffrence of months is 1 \nand DT1.EFFT_D is between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))  = 1 \nAND DT1.EFFT_D <= BSDY_4.CALR_CALR_D THEN DT1.ADJ_FROM_D\n\n/*Backdated logic calculation when diffrence of months is 1 \nand DT1.EFFT_D is NOT between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4)) = 1 \nAND DT1.EFFT_D > BSDY_4.CALR_CALR_D  THEN  DT1.EFFT_D - (EXTRACT (DAY FROM DT1.EFFT_D) - 1)  \n\n/*Backdated logic calculation when diffrence of months is greater than 1 \nand DT1.EFFT_D is between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))> 1 \nAND DT1.EFFT_D <= BSDY_4.CALR_CALR_D \nTHEN DT1.EFFT_D - (EXTRACT (DAY FROM DT1.EFFT_D) - 1)-INTERVAL '1' MONTH\n\n/*Backdated logic calculation when diffrence of months is greater than 1 \nand DT1.EFFT_D is  NOT between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))  > 1 \nAND DT1.EFFT_D > BSDY_4.CALR_CALR_D  THEN DT1.EFFT_D - (EXTRACT (DAY FROM DT1.EFFT_D) - 1) \nEND AS BKDT_ADJ_FROM_D,\nDT1.ADJ_TO_D,\n/*Similar adjustments for the same period are added */\nSUM(DT1.ADJ_A) AS ADJ_A,\nDT1.EFFT_D,\nDT1.Gl_RECN_F,\nDT1.PROS_KEY_EFFT_I\nFROM\n(\nSELECT\t\nADJ.ACCT_I AS ACCT_I,\nADJ.SRCE_SYST_C AS SRCE_SYST_C, \nADJ.BALN_TYPE_C AS BALN_TYPE_C,\nADJ.CALC_FUNC_C AS CALC_FUNC_C,\nADJ.TIME_PERD_C AS TIME_PERD_C,\nADJ.ADJ_FROM_D AS ADJ_FROM_D,\nADJ.ADJ_TO_D,\n/*Adjustments impacting the current record need to be loaded on the next day to avoid changing the open balances\n*/\n(CASE WHEN ADJ.EFFT_D = ADJ.ADJ_TO_D THEN EFFT_D+1\nELSE EFFT_D END) AS EFFT_D,\nADJ.Gl_RECN_F,\nADJ_A,\nPROS_KEY_EFFT_I\nFROM\nPVTECH.ACCT_BALN_ADJ  ADJ\nWHERE\t\nSRCE_SYST_C = 'SAP'\nAND BALN_TYPE_C='BALN'\nAND CALC_FUNC_C='SPOT' \nAND TIME_PERD_C = 'E' \n/*Excluding the adjustments  with $0 in value as this brings no change to the \n$value in tha ACCT BALN and had a negative impact on the last records in \nACCT BALN, so considerably important to eliminate*/\nAND ADJ.ADJ_A <> 0 \n/* Capturing delta adjustments*/\nAND ADJ.EFFT_D >= \n\t(SELECT MAX(BTCH_RUN_D) \n\tFROM PVTECH.UTIL_PROS_ISAC \n\tWHERE    TRGT_M='ACCT_BALN_BKDT' AND DERIVED_ACCOUNT_PARTY='GDW'\n\tAND COMT_F = 'Y'  \tAND SUCC_F='Y')\n)DT1\nINNER JOIN\n(\n/*Calulation of Business day 4 Logic*/\nSELECT\t\nCALR_YEAR_N,\nCALR_MNTH_N,\nCALR_CALR_D\nFROM\t\nPVTECH.GRD_RPRT_CALR_CLYR\nWHERE\t\nCALR_WEEK_DAY_N NOT IN (1,7) \nAND CALR_NON_WORK_DAY_F = 'N'\nAND CALR_CALR_D BETWEEN  ADD_MONTHS(CURRENT_DATE,-13) AND ADD_MONTHS(CURRENT_DATE,+1)\nQUALIFY\tROW_NUMBER() OVER (PARTITION BY CALR_YEAR_N, CALR_MNTH_N \nORDER\tBY CALR_CALR_D) = 4\n)BSDY_4\nON EXTRACT (YEAR \nFROM DT1.EFFT_D)=EXTRACT (YEAR FROM BSDY_4.CALR_CALR_D)\nAND EXTRACT (MONTH FROM DT1.EFFT_D)=EXTRACT (MONTH FROM BSDY_4.CALR_CALR_D)\n\nWHERE\n/*Including the adjustments that are excluded  in the previous run  for open record*/\nDT1.EFFT_D <= (SELECT MAX(BTCH_RUN_D) AS BTCH_RUN_D\nFROM PVTECH.UTIL_PROS_ISAC\nWHERE    TRGT_M='ACCT_BALN_ADJ' AND DERIVED_ACCOUNT_PARTY='SAP'\nAND COMT_F = 'Y'  AND SUCC_F='Y')\n\n/*To avoid any records that are processed in the previous runs */\nAND  DT1.EFFT_D > (SELECT MAX(BTCH_RUN_D) AS BTCH_RUN_D\nFROM PVTECH.UTIL_PROS_ISAC\nWHERE    \nTRGT_M='ACCT_BALN_BKDT' AND DERIVED_ACCOUNT_PARTY='GDW'\nAND COMT_F = 'Y'  AND SUCC_F='Y')\n\n/*To exclude any adjustments that fall in the period where the GL is closed*/\nAND BKDT_ADJ_FROM_D <= ADJ_TO_D\n\nGROUP BY ACCT_I,SRCE_SYST_C, BALN_TYPE_C ,CALC_FUNC_C,TIME_PERD_C,ADJ_FROM_D,\nBKDT_ADJ_FROM_D,ADJ_TO_D,EFFT_D,Gl_RECN_F, PROS_KEY_EFFT_I;",
      "start_line": 29,
      "end_line": 155,
      "snowflake_sql": "INSERT INTO PDDSTG.ACCT_BALN_BKDT_ADJ_RULE\n(\nACCT_I, \nSRCE_SYST_C,\nBALN_TYPE_C,\nCALC_FUNC_C,\nTIME_PERD_C,\nADJ_FROM_D,\nBKDT_ADJ_FROM_D,\nADJ_TO_D,\nADJ_A,\nEFFT_D,\nGl_RECN_F,\nPROS_KEY_EFFT_I               \n)\nSELECT \nDT1.ACCT_I,\nDT1.SRCE_SYST_C, \nDT1.BALN_TYPE_C,\nDT1.CALC_FUNC_C,\nDT1.TIME_PERD_C,\nDT1.ADJ_FROM_D,\nCASE WHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))  = 0 \nTHEN DT1.ADJ_FROM_D \n/*Backdated logic calculation when diffrence of months is 1 \nand DT1.EFFT_D is between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))  = 1 \nAND DT1.EFFT_D <= BSDY_4.CALR_CALR_D THEN DT1.ADJ_FROM_D\n\n/*Backdated logic calculation when diffrence of months is 1 \nand DT1.EFFT_D is NOT between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4)) = 1 \nAND DT1.EFFT_D > BSDY_4.CALR_CALR_D  THEN  DT1.EFFT_D - (EXTRACT (DAY FROM DT1.EFFT_D) - 1)  \n\n/*Backdated logic calculation when diffrence of months is greater than 1 \nand DT1.EFFT_D is between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))> 1 \nAND DT1.EFFT_D <= BSDY_4.CALR_CALR_D \nTHEN DT1.EFFT_D - (EXTRACT (DAY FROM DT1.EFFT_D) - 1)-INTERVAL '1' MONTH\n\n/*Backdated logic calculation when diffrence of months is greater than 1 \nand DT1.EFFT_D is  NOT between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))  > 1 \nAND DT1.EFFT_D > BSDY_4.CALR_CALR_D  THEN DT1.EFFT_D - (EXTRACT (DAY FROM DT1.EFFT_D) - 1) \nEND AS BKDT_ADJ_FROM_D,\nDT1.ADJ_TO_D,\n/*Similar adjustments for the same period are added */\nSUM(DT1.ADJ_A) AS ADJ_A,\nDT1.EFFT_D,\nDT1.Gl_RECN_F,\nDT1.PROS_KEY_EFFT_I\nFROM\n(\nSELECT\t\nADJ.ACCT_I AS ACCT_I,\nADJ.SRCE_SYST_C AS SRCE_SYST_C, \nADJ.BALN_TYPE_C AS BALN_TYPE_C,\nADJ.CALC_FUNC_C AS CALC_FUNC_C,\nADJ.TIME_PERD_C AS TIME_PERD_C,\nADJ.ADJ_FROM_D AS ADJ_FROM_D,\nADJ.ADJ_TO_D,\n/*Adjustments impacting the current record need to be loaded on the next day to avoid changing the open balances\n*/\n(CASE WHEN ADJ.EFFT_D = ADJ.ADJ_TO_D THEN EFFT_D+1\nELSE EFFT_D END) AS EFFT_D,\nADJ.Gl_RECN_F,\nADJ_A,\nPROS_KEY_EFFT_I\nFROM\nPVTECH.ACCT_BALN_ADJ  ADJ\nWHERE\t\nSRCE_SYST_C = 'SAP'\nAND BALN_TYPE_C='BALN'\nAND CALC_FUNC_C='SPOT' \nAND TIME_PERD_C = 'E' \n/*Excluding the adjustments  with $0 in value as this brings no change to the \n$value in tha ACCT BALN and had a negative impact on the last records in \nACCT BALN, so considerably important to eliminate*/\nAND ADJ.ADJ_A <> 0 \n/* Capturing delta adjustments*/\nAND ADJ.EFFT_D >= \n\t(SELECT MAX(BTCH_RUN_D) \n\tFROM PVTECH.UTIL_PROS_ISAC \n\tWHERE    TRGT_M='ACCT_BALN_BKDT' AND DERIVED_ACCOUNT_PARTY='GDW'\n\tAND COMT_F = 'Y'  \tAND SUCC_F='Y')\n)DT1\nINNER JOIN\n(\n/*Calulation of Business day 4 Logic*/\nSELECT\t\nCALR_YEAR_N,\nCALR_MNTH_N,\nCALR_CALR_D\nFROM\t\nPVTECH.GRD_RPRT_CALR_CLYR\nWHERE\t\nCALR_WEEK_DAY_N NOT IN (1,7) \nAND CALR_NON_WORK_DAY_F = 'N'\nAND CALR_CALR_D BETWEEN  ADD_MONTHS(CURRENT_DATE,-13) AND ADD_MONTHS(CURRENT_DATE,+1)\nQUALIFY\tROW_NUMBER() OVER (PARTITION BY CALR_YEAR_N, CALR_MNTH_N \nORDER\tBY CALR_CALR_D) = 4\n)BSDY_4\nON EXTRACT (YEAR \nFROM DT1.EFFT_D)=EXTRACT (YEAR FROM BSDY_4.CALR_CALR_D)\nAND EXTRACT (MONTH FROM DT1.EFFT_D)=EXTRACT (MONTH FROM BSDY_4.CALR_CALR_D)\n\nWHERE\n/*Including the adjustments that are excluded  in the previous run  for open record*/\nDT1.EFFT_D <= (SELECT MAX(BTCH_RUN_D) AS BTCH_RUN_D\nFROM PVTECH.UTIL_PROS_ISAC\nWHERE    TRGT_M='ACCT_BALN_ADJ' AND DERIVED_ACCOUNT_PARTY='SAP'\nAND COMT_F = 'Y'  AND SUCC_F='Y')\n\n/*To avoid any records that are processed in the previous runs */\nAND  DT1.EFFT_D > (SELECT MAX(BTCH_RUN_D) AS BTCH_RUN_D\nFROM PVTECH.UTIL_PROS_ISAC\nWHERE    \nTRGT_M='ACCT_BALN_BKDT' AND DERIVED_ACCOUNT_PARTY='GDW'\nAND COMT_F = 'Y'  AND SUCC_F='Y')\n\n/*To exclude any adjustments that fall in the period where the GL is closed*/\nAND BKDT_ADJ_FROM_D <= ADJ_TO_D\n\nGROUP BY ACCT_I,SRCE_SYST_C, BALN_TYPE_C ,CALC_FUNC_C,TIME_PERD_C,ADJ_FROM_D,\nBKDT_ADJ_FROM_D,ADJ_TO_D,EFFT_D,Gl_RECN_F, PROS_KEY_EFFT_I;",
      "error": null,
      "metadata": {
        "tables": [],
        "columns": [],
        "functions": [],
        "window_functions": []
      },
      "complexity_metrics": {
        "total_nodes": 0,
        "select_count": 0,
        "join_count": 0,
        "subquery_count": 0,
        "where_conditions": 0,
        "case_statements": 0,
        "window_functions": 0,
        "aggregate_functions": 0
      },
      "teradata_features": [
        "QUALIFY clause",
        "YEAR(4) TO MONTH intervals",
        "ADD_MONTHS function",
        "EXTRACT with complex syntax",
        "ROW_NUMBER() OVER"
      ],
      "syntax_validation": {
        "valid": false,
        "error": "Expecting ). Line 23, Col: 46.\n  E_C,\nDT1.CALC_FUNC_C,\nDT1.TIME_PERD_C,\nDT1.ADJ_FROM_D,\nCASE WHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR\u001b[4m(\u001b[0m4) TO MONTH) (INTERVAL MONTH(4))  = 0 \nTHEN DT1.ADJ_FROM_D \nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR",
        "error_type": "ParseError"
      },
      "optimized_sql": "INSERT INTO PDDSTG.ACCT_BALN_BKDT_ADJ_RULE\n(\nACCT_I, \nSRCE_SYST_C,\nBALN_TYPE_C,\nCALC_FUNC_C,\nTIME_PERD_C,\nADJ_FROM_D,\nBKDT_ADJ_FROM_D,\nADJ_TO_D,\nADJ_A,\nEFFT_D,\nGl_RECN_F,\nPROS_KEY_EFFT_I               \n)\nSELECT \nDT1.ACCT_I,\nDT1.SRCE_SYST_C, \nDT1.BALN_TYPE_C,\nDT1.CALC_FUNC_C,\nDT1.TIME_PERD_C,\nDT1.ADJ_FROM_D,\nCASE WHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))  = 0 \nTHEN DT1.ADJ_FROM_D \n/*Backdated logic calculation when diffrence of months is 1 \nand DT1.EFFT_D is between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))  = 1 \nAND DT1.EFFT_D <= BSDY_4.CALR_CALR_D THEN DT1.ADJ_FROM_D\n\n/*Backdated logic calculation when diffrence of months is 1 \nand DT1.EFFT_D is NOT between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4)) = 1 \nAND DT1.EFFT_D > BSDY_4.CALR_CALR_D  THEN  DT1.EFFT_D - (EXTRACT (DAY FROM DT1.EFFT_D) - 1)  \n\n/*Backdated logic calculation when diffrence of months is greater than 1 \nand DT1.EFFT_D is between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))> 1 \nAND DT1.EFFT_D <= BSDY_4.CALR_CALR_D \nTHEN DT1.EFFT_D - (EXTRACT (DAY FROM DT1.EFFT_D) - 1)-INTERVAL '1' MONTH\n\n/*Backdated logic calculation when diffrence of months is greater than 1 \nand DT1.EFFT_D is  NOT between Business day 1 and Biz day 4*/\nWHEN ((DT1.EFFT_D - DT1.ADJ_FROM_D) YEAR(4) TO MONTH) (INTERVAL MONTH(4))  > 1 \nAND DT1.EFFT_D > BSDY_4.CALR_CALR_D  THEN DT1.EFFT_D - (EXTRACT (DAY FROM DT1.EFFT_D) - 1) \nEND AS BKDT_ADJ_FROM_D,\nDT1.ADJ_TO_D,\n/*Similar adjustments for the same period are added */\nSUM(DT1.ADJ_A) AS ADJ_A,\nDT1.EFFT_D,\nDT1.Gl_RECN_F,\nDT1.PROS_KEY_EFFT_I\nFROM\n(\nSELECT\t\nADJ.ACCT_I AS ACCT_I,\nADJ.SRCE_SYST_C AS SRCE_SYST_C, \nADJ.BALN_TYPE_C AS BALN_TYPE_C,\nADJ.CALC_FUNC_C AS CALC_FUNC_C,\nADJ.TIME_PERD_C AS TIME_PERD_C,\nADJ.ADJ_FROM_D AS ADJ_FROM_D,\nADJ.ADJ_TO_D,\n/*Adjustments impacting the current record need to be loaded on the next day to avoid changing the open balances\n*/\n(CASE WHEN ADJ.EFFT_D = ADJ.ADJ_TO_D THEN EFFT_D+1\nELSE EFFT_D END) AS EFFT_D,\nADJ.Gl_RECN_F,\nADJ_A,\nPROS_KEY_EFFT_I\nFROM\nPVTECH.ACCT_BALN_ADJ  ADJ\nWHERE\t\nSRCE_SYST_C = 'SAP'\nAND BALN_TYPE_C='BALN'\nAND CALC_FUNC_C='SPOT' \nAND TIME_PERD_C = 'E' \n/*Excluding the adjustments  with $0 in value as this brings no change to the \n$value in tha ACCT BALN and had a negative impact on the last records in \nACCT BALN, so considerably important to eliminate*/\nAND ADJ.ADJ_A <> 0 \n/* Capturing delta adjustments*/\nAND ADJ.EFFT_D >= \n\t(SELECT MAX(BTCH_RUN_D) \n\tFROM PVTECH.UTIL_PROS_ISAC \n\tWHERE    TRGT_M='ACCT_BALN_BKDT' AND DERIVED_ACCOUNT_PARTY='GDW'\n\tAND COMT_F = 'Y'  \tAND SUCC_F='Y')\n)DT1\nINNER JOIN\n(\n/*Calulation of Business day 4 Logic*/\nSELECT\t\nCALR_YEAR_N,\nCALR_MNTH_N,\nCALR_CALR_D\nFROM\t\nPVTECH.GRD_RPRT_CALR_CLYR\nWHERE\t\nCALR_WEEK_DAY_N NOT IN (1,7) \nAND CALR_NON_WORK_DAY_F = 'N'\nAND CALR_CALR_D BETWEEN  ADD_MONTHS(CURRENT_DATE,-13) AND ADD_MONTHS(CURRENT_DATE,+1)\nQUALIFY\tROW_NUMBER() OVER (PARTITION BY CALR_YEAR_N, CALR_MNTH_N \nORDER\tBY CALR_CALR_D) = 4\n)BSDY_4\nON EXTRACT (YEAR \nFROM DT1.EFFT_D)=EXTRACT (YEAR FROM BSDY_4.CALR_CALR_D)\nAND EXTRACT (MONTH FROM DT1.EFFT_D)=EXTRACT (MONTH FROM BSDY_4.CALR_CALR_D)\n\nWHERE\n/*Including the adjustments that are excluded  in the previous run  for open record*/\nDT1.EFFT_D <= (SELECT MAX(BTCH_RUN_D) AS BTCH_RUN_D\nFROM PVTECH.UTIL_PROS_ISAC\nWHERE    TRGT_M='ACCT_BALN_ADJ' AND DERIVED_ACCOUNT_PARTY='SAP'\nAND COMT_F = 'Y'  AND SUCC_F='Y')\n\n/*To avoid any records that are processed in the previous runs */\nAND  DT1.EFFT_D > (SELECT MAX(BTCH_RUN_D) AS BTCH_RUN_D\nFROM PVTECH.UTIL_PROS_ISAC\nWHERE    \nTRGT_M='ACCT_BALN_BKDT' AND DERIVED_ACCOUNT_PARTY='GDW'\nAND COMT_F = 'Y'  AND SUCC_F='Y')\n\n/*To exclude any adjustments that fall in the period where the GL is closed*/\nAND BKDT_ADJ_FROM_D <= ADJ_TO_D\n\nGROUP BY ACCT_I,SRCE_SYST_C, BALN_TYPE_C ,CALC_FUNC_C,TIME_PERD_C,ADJ_FROM_D,\nBKDT_ADJ_FROM_D,ADJ_TO_D,EFFT_D,Gl_RECN_F, PROS_KEY_EFFT_I;"
    }
  ],
  "controls": [
    {
      "type": "RUN",
      "raw": ".RUN FILE=${ETL_APP_BTEQ}/bteq_login.sql",
      "args": null,
      "line_no": 1
    },
    {
      "type": "IF_ERRORCODE",
      "raw": ".IF ERRORCODE <> 0 THEN .GOTO EXITERR",
      "args": null,
      "line_no": 2
    },
    {
      "type": "IF_ERRORCODE",
      "raw": ".IF ERRORCODE <> 0 THEN .GOTO EXITERR",
      "args": null,
      "line_no": 27
    },
    {
      "type": "IF_ERRORCODE",
      "raw": ".IF ERRORCODE <> 0 THEN .GOTO EXITERR",
      "args": null,
      "line_no": 156
    },
    {
      "type": "LOGOFF",
      "raw": ".LOGOFF",
      "args": null,
      "line_no": 159
    },
    {
      "type": "LABEL",
      "raw": ".LABEL EXITERR",
      "args": null,
      "line_no": 161
    },
    {
      "type": "LOGOFF",
      "raw": ".LOGOFF",
      "args": null,
      "line_no": 163
    }
  ],
  "errors": []
}