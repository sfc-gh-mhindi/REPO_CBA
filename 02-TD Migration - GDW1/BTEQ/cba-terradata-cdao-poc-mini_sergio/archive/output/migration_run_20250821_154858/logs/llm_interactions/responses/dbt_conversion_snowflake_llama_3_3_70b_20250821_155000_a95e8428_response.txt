# LLM Response
Interaction ID: 20250821_155000_a95e8428
Success: True
Processing Time: 18021ms
Quality Score: None

# Response
```sql
{%- set process_name = 'ACCT_BALN_BKDT_STG_ISRT' -%}
{%- set stream_name = 'ACCT_BALN_BKDT_STG' -%}

{{
  config(
    materialized='table',
    database=var('target_database'),
    schema='target_schema',
    tags=['ACCT_BALN_BKDT_STG', 'ISRT'],
    pre_hook=[
        "{{ log_dcf_exec_msg('Process started') }}"
    ],
    post_hook=[
        "{{ log_dcf_exec_msg('Process ended') }}"
    ]
  )
}}

/*
    Model Documentation
    Purpose: Load ACCT_I that need to be adjusted into staging area
    Business Logic: Delete previous load and populate current balances that need to be adjusted
    Dependencies: ACCT_BALN_BKDT, ACCT_BALN_BKDT_ADJ_RULE, UTIL_PROS_ISAC
*/

WITH staging_table AS (
    SELECT 
        A.ACCT_I,
        A.BALN_TYPE_C,
        A.CALC_FUNC_C,                  
        A.TIME_PERD_C,                  
        A.BKDT_EFFT_D,
        A.BKDT_EXPY_D,
        A.BALN_A,
        A.CALC_F,
        A.PROS_KEY_EFFT_I,
        A.PROS_KEY_EXPY_I,
        A.BKDT_PROS_KEY_I,
        A.ORIG_SRCE_SYST_C,
        A.SRCE_SYST_C,
        A.LOAD_D
    FROM 
        {{ source('VTECH', 'ACCT_BALN_BKDT') }} A
    INNER JOIN 
    (
        SELECT 
            ACCT_I, 
            MIN(BKDT_ADJ_FROM_D) AS BKDT_ADJ_FROM_D
        FROM 
            {{ source('DDSTG', 'ACCT_BALN_BKDT_ADJ_RULE') }}
        GROUP BY 
            1
    ) B
    ON 
        A.ACCT_I = B.ACCT_I
    WHERE 
        A.BKDT_EXPY_D >= B.BKDT_ADJ_FROM_D
),

staging_table_2 AS (
    SELECT DISTINCT 
        DT1.ACCT_I,
        COALESCE(B.BALN_TYPE_C, 'BDCL') AS BALN_TYPE_C,
        COALESCE(B.CALC_FUNC_C, 'SPOT') AS CALC_FUNC_C,
        COALESCE(B.TIME_PERD_C, 'E') AS TIME_PERD_C,
        DT1.BKDT_EFFT_D,
        DT1.BKDT_EXPY_D,
        MAX(COALESCE(B.BALN_A, 0.0)) OVER (PARTITION BY DT1.ACCT_I, DT1.BKDT_EFFT_D, DT1.BKDT_EXPY_D) 
        + SUM(COALESCE(A.ADJ_A, 0.0)) OVER (PARTITION BY DT1.ACCT_I, DT1.BKDT_EFFT_D, DT1.BKDT_EXPY_D) AS BALN_A,
        COALESCE(B.CALC_F, 'N') AS CALC_F,
        B.PROS_KEY_EFFT_I,
        B.PROS_KEY_EXPY_I,
        PKEY.BKDT_PROS_KEY_I AS BKDT_PROS_KEY_I,
        A.PROS_KEY_EFFT_I AS ADJ_PROS_KEY_EFFT_I,
        COALESCE(B.ORIG_SRCE_SYST_C, 'SAP') AS ORIG_SRCE_SYST_C,
        COALESCE(B.SRCE_SYST_C, 'GDW') AS SRCE_SYST_C,
        CURRENT_DATE AS LOAD_D
    FROM 
        (
            SELECT 
                DT0.ACCT_I,
                (MAX(DT0.BKDT_EXPY_D) OVER (PARTITION BY DT0.ACCT_I ORDER BY DT0.BKDT_EXPY_D ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) + 1) AS BKDT_EFFT_D,
                DT0.BKDT_EXPY_D
            FROM 
                (
                    SELECT 
                        ACCT_I, 
                        BKDT_EXPY_D
                    FROM 
                        {{ source('DDSTG', 'ACCT_BALN_BKDT_STG1') }}
                    UNION 
                    SELECT 
                        ACCT_I, 
                        ADJ_TO_D
                    FROM 
                        {{ source('DDSTG', 'ACCT_BALN_BKDT_ADJ_RULE') }}
                    UNION 
                    SELECT 
                        ACCT_I, 
                        BKDT_EFFT_D - 1
                    FROM 
                        {{ source('DDSTG', 'ACCT_BKDT_STG1') }}
                    UNION 
                    SELECT 
                        ACCT_I, 
                        BKDT_ADJ_FROM_D - 1
                    FROM 
                        {{ source('DDSTG', 'ACCT_BALN_BKDT_ADJ_RULE') }}
                ) DT0 (ACCT_I, BKDT_EXPY_D)
            QUALIFY 
                BKDT_EFFT_D IS NOT NULL
        ) DT1
    LEFT OUTER JOIN 
        {{ source('DDSTG', 'ACCT_BALN_BKDT_STG1') }} B
    ON 
        DT1.ACCT_I = B.ACCT_I
        AND (
            (DT1.BKDT_EFFT_D, DT1.BKDT_EXPY_D) OVERLAPS (B.BKDT_EFFT_D, B.BKDT_EXPY_D)
            OR DT1.BKDT_EFFT_D = B.BKDT_EFFT_D
            OR DT1.BKDT_EXPY_D = B.BKDT_EXPY_D
        )
    LEFT OUTER JOIN 
        {{ source('DDSTG', 'ACCT_BALN_BKDT_ADJ_RULE') }} A
    ON 
        DT1.ACCT_I = A.ACCT_I
        AND (
            (DT1.BKDT_EFFT_D, DT1.BKDT_EXPY_D) OVERLAPS (A.BKDT_ADJ_FROM_D, A.ADJ_TO_D)
            OR DT1.BKDT_EFFT_D = A.BKDT_ADJ_FROM_D
            OR DT1.BKDT_EXPY_D = A.ADJ_TO_D
        )
    CROSS JOIN 
        (
            SELECT 
                MAX(PROS_KEY_I) AS BKDT_PROS_KEY_I
            FROM 
                {{ source('VTECH', 'UTIL_PROS_ISAC') }} 
            WHERE 
                CONV_M = 'CAD_X01_ACCT_BALN_BKDT'
        ) PKEY
)

SELECT * 
FROM staging_table_2
```