# LLM Request
Interaction ID: 20250821_155105_737f34ae
Timestamp: 2025-08-21T15:51:05.707119
Provider: snowflake_cortex
Model: claude-4-sonnet
Request Type: dbt_conversion
Temperature: None
Max Tokens: None

# Context Data
{
  "procedure_name": "ACCT_BALN_BKDT_UTIL_PROS_UPDT",
  "conversion_type": "bteq_to_dbt"
}

# Prompt
# BTEQ SQL to DBT Model Conversion

You are a senior data engineer expert in converting legacy BTEQ SQL scripts to modern DBT models with Jinja templating.

## CRITICAL INSTRUCTIONS - NO HALLUCINATION POLICY
- ONLY transform the logic provided in the source BTEQ SQL
- DO NOT add new business logic, columns, or transformations
- DO NOT create new table references not in the original
- PRESERVE all existing business logic exactly
- If unclear about any logic, maintain the original approach

## Source Context

### 1. Original BTEQ SQL Script
```sql
 .RUN FILE=%%BTEQ_LOGON_SCRIPT%%
.IF ERRORCODE <> 0 THEN .GOTO EXITERR

.SET QUIET OFF
.SET ECHOREQ ON
.SET FORMAT OFF
.SET WIDTH 120
----------------------------------------------------------------------
-- $LastChangedBy: vajapes $
-- $LastChangedDate: 2012-02-28 09:09:54 +1100 (Tue, 28 Feb 2012) $
-- $LastChangedRevision: 9226 $
----------------------------------------------------------------------
------------------------------------------------------------------------------
--
--  Description :  Updating  UTIL PROS ISAC with the status.
--
--   Ver  Date       Modified By            Description
--  ---- ---------- ---------------------- -----------------------------------
--  1.0  2011-10-05 Suresh Vajapeyajula     Initial Version
------------------------------------------------------------------------------

UPDATE %%CAD_PROD_DATA%%.UTIL_PROS_ISAC
FROM
(SELECT COUNT(*) FROM 
%%DDSTG%%.ACCT_BALN_BKDT_STG2)A(INS_CNT),
(SELECT COUNT(*) FROM 
%%DDSTG%%.ACCT_BALN_BKDT_STG1)B(DEL_CNT)
SET  
        COMT_F = 'Y',
	SUCC_F = 'Y',
	COMT_S = CURRENT_TIMESTAMP(0),
	SYST_INS_Q = A.INS_CNT,
	SYST_DEL_Q = B.DEL_CNT
WHERE 
CONV_M='CAD_X01_ACCT_BALN_BKDT'
AND PROS_KEY_I = (SELECT MAX(PROS_KEY_I) FROM %%VTECH%%.UTIL_PROS_ISAC 
WHERE CONV_M='CAD_X01_ACCT_BALN_BKDT'); 

.IF ERRORCODE <> 0 THEN .GOTO EXITERR

.QUIT 0
.LOGOFF
.EXIT

.LABEL EXITERR
.QUIT 1
.LOGOFF
.EXIT
```

### 2. Reference Stored Procedure Translation (for context)
```sql
CREATE OR REPLACE PROCEDURE ACCT_BALN_BKDT_UTIL_PROS_UPDT
(
    ERROR_TABLE STRING DEFAULT 'PROCESS_ERROR_LOG',
    PROCESS_KEY STRING DEFAULT 'UNKNOWN_PROCESS'
  )
  RETURNS STRING
  LANGUAGE SQL
  EXECUTE AS CALLER
AS
$$
DECLARE
-- =============================================================================
-- Procedure: ACCT_BALN_BKDT_UTIL_PROS_UPDT
-- Generated: 2025-08-21 15:51:05
-- Source: Converted from Teradata BTEQ script
-- Generator: SnowflakeSPGenerator v1.0
-- =============================================================================
-- Original BTEQ Preview:
--  .RUN FILE=%%BTEQ_LOGON_SCRIPT%%
-- .IF ERRORCODE <> 0 THEN .GOTO EXITERR
-- 
-- .SET QUIET OFF
-- .SET ECHOREQ ON
-- .SET FORMAT OFF
-- .SET WIDTH 120
-- ----------------------------------------------------------------------
-- -- $LastChangedBy: vajapes $
-- -- $LastChangedDate: 2012-02-28 09:09:54 +1100 (Tue, 28 Feb 2012) $
-- =============================================================================

  -- Variable declarations
  LET error_code INTEGER DEFAULT 0;
  LET sql_state STRING DEFAULT '00000';
  LET error_message STRING DEFAULT '';
  LET row_count INTEGER DEFAULT 0;
  LET current_step STRING DEFAULT 'INIT';

  -- Label tracking variables
  LET goto_exiterr BOOLEAN DEFAULT FALSE;

  -- Exception handling setup
  DECLARE
    general_exception EXCEPTION (-20001, 'General procedure error');
  BEGIN
    -- Main procedure logic starts here

    -- Line 1:  .RUN FILE=%%BTEQ_LOGON_SCRIPT%%
    -- RUN statement: Execute accumulated SQL
    -- (SQL execution handled inline in Snowflake)

    -- Line 2: .IF ERRORCODE <> 0 THEN .GOTO EXITERR
    IF (error_code <> 0) THEN
      GOTO error_exit;
    END IF;

    -- SQL Block (lines 22-38)
    current_step := 'EXECUTING_SQL';
    BEGIN
      UPDATE %%CAD_PROD_DATA%%.UTIL_PROS_ISAC
      FROM
      (SELECT COUNT(*) FROM 
      PDDSTG.ACCT_BALN_BKDT_STG2)A(INS_CNT),
      (SELECT COUNT(*) FROM 
      PDDSTG.ACCT_BALN_BKDT_STG1)B(DEL_CNT)
      SET  
              COMT_F = 'Y',
      	SUCC_F = 'Y',
      	COMT_S = CURRENT_TIMESTAMP(0),
      	SYST_INS_Q = A.INS_CNT,
      	SYST_DEL_Q = B.DEL_CNT
      WHERE 
      CONV_M='CAD_X01_ACCT_BALN_BKDT'
      AND PROS_KEY_I = (SELECT MAX(PROS_KEY_I) FROM PVTECH.UTIL_PROS_ISAC 
      WHERE CONV_M='CAD_X01_ACCT_BALN_BKDT');
      ;
      -- Get row count and check for errors
      row_count := SQLROWCOUNT;
      IF (SQLCODE <> 0) THEN
        error_code := SQLCODE;
        error_message := SQLERRM;
        GOTO error_exit;
      END IF;
    EXCEPTION
      WHEN OTHER THEN
        error_code := SQLCODE;
        error_message := SQLERRM;
        GOTO error_exit;
    END;

    -- Line 39: .IF ERRORCODE <> 0 THEN .GOTO EXITERR
    IF (error_code <> 0) THEN
      GOTO error_exit;
    END IF;

    -- Line 42: .LOGOFF
    -- LOGOFF: Connection cleanup handled by Snowflake
    current_step := 'LOGOFF_COMPLETED';

    -- Line 45: .LABEL EXITERR
    exiterr:

    -- Line 47: .LOGOFF
    -- LOGOFF: Connection cleanup handled by Snowflake
    current_step := 'LOGOFF_COMPLETED';

    -- Success path
    RETURN 'SUCCESS: ' || current_step || ' completed. Rows processed: ' || row_count;

    -- Error handling
    error_exit:
      -- Log error to error table if available
      INSERT INTO IDENTIFIER(:ERROR_TABLE) (PROCESS_KEY, ERROR_CODE, ERROR_MESSAGE, ERROR_TIMESTAMP)
      VALUES (:PROCESS_KEY, error_code, error_message, CURRENT_TIMESTAMP());
      
      RETURN 'ERROR: ' || error_message || ' (Code: ' || error_code || ')';

  EXCEPTION
    WHEN OTHER THEN
      RETURN 'FATAL ERROR: ' || SQLERRM || ' (Code: ' || SQLCODE || ')';
END;
$$;
```

### 3. Additional Analysis
BTEQ to DBT conversion for ACCT_BALN_BKDT_UTIL_PROS_UPDT


## DBT Conversion Requirements

### 1. DBT Model Structure
- Start with proper Jinja config block using config() macro
- Use appropriate materialization strategy (table, view, incremental)
- Add meaningful tags for categorization
- Include pre_hook and post_hook for logging if needed
- Set proper database/schema references using vars

### 2. SQL Best Practices
- Use modern SQL patterns (CTEs over subqueries where beneficial)
- Implement proper column naming and aliasing
- Add clear comments explaining business logic
- Use explicit column lists (avoid SELECT *)
- Optimize JOIN patterns and WHERE clause ordering

### 3. DBT-Specific Features
- Use ref() macro for model dependencies
- Use var() macro for configuration values
- Use source() macro if referencing source tables
- Add data quality tests where appropriate
- Use DBT's built-in functions for date/time operations

### 4. Materialization Strategy
- Choose appropriate materialization based on table usage:
  * `table` for frequently queried data
  * `view` for lightweight transformations
  * `incremental` for large datasets with delta processing
- Include incremental_strategy if using incremental

### 5. Configuration Best Practices
- Use meaningful database/schema configuration
- Add appropriate tags for data lineage
- Include pre/post hooks for process logging
- Set up proper error handling in hooks

### 6. Code Organization
- Use clear CTE naming that describes the transformation
- Group related logic into logical CTEs
- Add section comments for major transformations
- Maintain proper indentation and formatting

## Expected DBT Model Output Format

The output should be a complete DBT model file with:

```sql
{%- set process_name = 'YOUR_PROCESS_NAME' -%}
{%- set stream_name = 'YOUR_STREAM_NAME' -%}

{{
  config(
    materialized='your_strategy',
    database=var('target_database'),
    schema='target_schema',
    tags=['relevant', 'tags'],
    pre_hook=[
        "{{ log_dcf_exec_msg('Process started') }}"
    ],
    post_hook=[
        "{{ log_dcf_exec_msg('Process ended') }}"
    ]
  )
}}

/*
    Model Documentation
    Purpose: Brief description
    Business Logic: Key transformations
    Dependencies: Source tables/models
*/

WITH cte_name AS (
    -- Clear CTE logic
    SELECT ...
),

final AS (
    SELECT ...
)

SELECT * FROM final
```

## Specific Transformation Guidance

### BTEQ Control Flow â†’ DBT Patterns
- Convert DELETE + INSERT patterns to proper materialization
- Replace BTEQ variables with DBT vars and Jinja variables
- Transform error handling to DBT test patterns where possible
- Convert procedural logic to declarative SQL transformations

### Date/Time Functions
- Use DBT date functions or modern SQL equivalents
- Replace Teradata date arithmetic with standard functions
- Maintain timezone handling if present

### Process Control Tables
- Reference process control via source() or ref() macros
- Use var() for process configuration values
- Implement delta processing via incremental materialization

## Output Instructions

Provide ONLY the complete DBT model SQL code. Do not include explanations, markdown formatting, or additional commentary.

## DBT Model: