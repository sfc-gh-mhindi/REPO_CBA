{
  "success": false,
  "quality_score": 1.0,
  "model_sql": "{%- set process_name = 'ACCT_BALN_BKDT' -%}\n{%- set stream_name = 'ACCT_BALN_BKDT_ADJ_RULE' -%}\n\n{{\n  config(\n    materialized='ibrg_cld_table',\n    incremental_strategy='truncate-load',\n    database=var('target_database'),\n    tmp_database=var('dcf_database'),\n    tmp_schema=var('dcf_schema'),\n    tmp_relation_type='view',\n    schema='pddstg',\n    tags=['account_balance', 'backdated_adjustment', 'core_transform', 'sap_source', 'stream_acct_baln_bkdt'],\n    pre_hook=[\n        \"{{ log_process_start('\" ~ process_name ~ \"', '\" ~ stream_name ~ \"') }}\"\n    ],\n    post_hook=[\n        \"{{ log_process_success('\" ~ process_name ~ \"', '\" ~ stream_name ~ \"') }}\"\n    ]\n  )\n}}\n\n/*\n    Model: ACCT_BALN_BKDT_ADJ_RULE\n    Purpose: Calculate the Backdated adjustment from ACCT BALN ADJ and apply it on ACCT BALN\n    Business Logic: \n    - Processes SAP balance adjustments with backdating logic based on business day calculations\n    - Calculates business day 4 logic for adjustment timing decisions\n    - Aggregates similar adjustments for the same period\n    - Excludes zero-value adjustments and handles GL reconciliation flags\n    Dependencies: \n    - {{ var('vtech_db') }}.{{ var('vtech_sch') }}.ACCT_BALN_ADJ\n    - {{ var('vtech_db') }}.{{ var('vtech_sch') }}.GRD_RPRT_CALR_CLYR\n    - {{ var('vtech_db') }}.{{ var('vtech_sch') }}.UTIL_PROS_ISAC\n*/\n\nWITH business_day_4 AS (\n    -- Calculation of Business day 4 Logic\n    SELECT\t\n        CALR_YEAR_N,\n        CALR_MNTH_N,\n        CALR_CALR_D\n    FROM {{ var('vtech_db') }}.{{ var('vtech_sch') }}.GRD_RPRT_CALR_CLYR\n    WHERE\t\n        CALR_WEEK_DAY_N NOT IN (1,7) \n        AND CALR_NON_WORK_DAY_F = 'N'\n        AND CALR_CALR_D BETWEEN ADD_MONTHS(CURRENT_DATE,-13) AND ADD_MONTHS(CURRENT_DATE,+1)\n    QUALIFY\tROW_NUMBER() OVER (\n        PARTITION BY CALR_YEAR_N, CALR_MNTH_N \n        ORDER BY CALR_CALR_D\n    ) = 4\n),\n\nadjustment_data AS (\n    SELECT\t\n        ADJ.ACCT_I AS ACCT_I,\n        ADJ.SRCE_SYST_C AS SRCE_SYST_C, \n        ADJ.BALN_TYPE_C AS BALN_TYPE_C,\n        ADJ.CALC_FUNC_C AS CALC_FUNC_C,\n        ADJ.TIME_PERD_C AS TIME_PERD_C,\n        ADJ.ADJ_FROM_D AS ADJ_FROM_D,\n        ADJ.ADJ_TO_D,\n        -- Adjustments impacting the current record need to be loaded on the next day to avoid changing the open balances\n        CASE \n            WHEN ADJ.EFFT_D = ADJ.ADJ_TO_D THEN ADJ.EFFT_D + 1\n            ELSE ADJ.EFFT_D \n        END AS EFFT_D,\n        ADJ.Gl_RECN_F,\n        ADJ.ADJ_A,\n        ADJ.PROS_KEY_EFFT_I\n    FROM {{ var('vtech_db') }}.{{ var('vtech_sch') }}.ACCT_BALN_ADJ ADJ\n    WHERE\t\n        ADJ.SRCE_SYST_C = 'SAP'\n        AND ADJ.BALN_TYPE_C = 'BALN'\n        AND ADJ.CALC_FUNC_C = 'SPOT' \n        AND ADJ.TIME_PERD_C = 'E' \n        -- Excluding the adjustments with $0 in value as this brings no change to the \n        -- $value in the ACCT BALN and had a negative impact on the last records in \n        -- ACCT BALN, so considerably important to eliminate\n        AND ADJ.ADJ_A <> 0 \n        -- Capturing delta adjustments\n        AND ADJ.EFFT_D >= (\n            SELECT MAX(BTCH_RUN_D) \n            FROM {{ var('vtech_db') }}.{{ var('vtech_sch') }}.UTIL_PROS_ISAC \n            WHERE TRGT_M = 'ACCT_BALN_BKDT' \n                AND SRCE_SYST_M = 'GDW'\n                AND COMT_F = 'Y'  \n                AND SUCC_F = 'Y'\n        )\n),\n\nbackdated_calculations AS (\n    SELECT \n        DT1.ACCT_I,\n        DT1.SRCE_SYST_C, \n        DT1.BALN_TYPE_C,\n        DT1.CALC_FUNC_C,\n        DT1.TIME_PERD_C,\n        DT1.ADJ_FROM_D,\n        CASE \n            -- When difference of months is 0\n            WHEN MONTHS_BETWEEN(DT1.EFFT_D, DT1.ADJ_FROM_D) = 0 \n                THEN DT1.ADJ_FROM_D \n            -- Backdated logic calculation when difference of months is 1 \n            -- and DT1.EFFT_D is between Business day 1 and Biz day 4\n            WHEN MONTHS_BETWEEN(DT1.EFFT_D, DT1.ADJ_FROM_D) = 1 \n                AND DT1.EFFT_D <= BSDY_4.CALR_CALR_D \n                THEN DT1.ADJ_FROM_D\n            -- Backdated logic calculation when difference of months is 1 \n            -- and DT1.EFFT_D is NOT between Business day 1 and Biz day 4\n            WHEN MONTHS_BETWEEN(DT1.EFFT_D, DT1.ADJ_FROM_D) = 1 \n                AND DT1.EFFT_D > BSDY_4.CALR_CALR_D  \n                THEN DT1.EFFT_D - (EXTRACT(DAY FROM DT1.EFFT_D) - 1)\n            -- Backdated logic calculation when difference of months is greater than 1 \n            -- and DT1.EFFT_D is between Business day 1 and Biz day 4\n            WHEN MONTHS_BETWEEN(DT1.EFFT_D, DT1.ADJ_FROM_D) > 1 \n                AND DT1.EFFT_D <= BSDY_4.CALR_CALR_D \n                THEN DT1.EFFT_D - (EXTRACT(DAY FROM DT1.EFFT_D) - 1) - INTERVAL '1' MONTH\n            -- Backdated logic calculation when difference of months is greater than 1 \n            -- and DT1.EFFT_D is NOT between Business day 1 and Biz day 4\n            WHEN MONTHS_BETWEEN(DT1.EFFT_D, DT1.ADJ_FROM_D) > 1 \n                AND DT1.EFFT_D > BSDY_4.CALR_CALR_D  \n                THEN DT1.EFFT_D - (EXTRACT(DAY FROM DT1.EFFT_D) - 1)\n        END AS BKDT_ADJ_FROM_D,\n        DT1.ADJ_TO_D,\n        -- Similar adjustments for the same period are added\n        SUM(DT1.ADJ_A) AS ADJ_A,\n        DT1.EFFT_D,\n        DT1.Gl_RECN_F,\n        DT1.PROS_KEY_EFFT_I\n    FROM adjustment_data DT1\n    INNER JOIN business_day_4 BSDY_4\n        ON EXTRACT(YEAR FROM DT1.EFFT_D) = EXTRACT(YEAR FROM BSDY_4.CALR_CALR_D)\n        AND EXTRACT(MONTH FROM DT1.EFFT_D) = EXTRACT(MONTH FROM BSDY_4.CALR_CALR_D)\n    WHERE\n        -- Including the adjustments that are excluded in the previous run for open record\n        DT1.EFFT_D <= (\n            SELECT MAX(BTCH_RUN_D) AS BTCH_RUN_D\n            FROM {{ var('vtech_db') }}.{{ var('vtech_sch') }}.UTIL_PROS_ISAC\n            WHERE TRGT_M = 'ACCT_BALN_ADJ' \n                AND SRCE_SYST_M = 'SAP'\n                AND COMT_F = 'Y'  \n                AND SUCC_F = 'Y'\n        )\n        -- To avoid any records that are processed in the previous runs\n        AND DT1.EFFT_D > (\n            SELECT MAX(BTCH_RUN_D) AS BTCH_RUN_D\n            FROM {{ var('vtech_db') }}.{{ var('vtech_sch') }}.UTIL_PROS_ISAC\n            WHERE TRGT_M = 'ACCT_BALN_BKDT' \n                AND SRCE_SYST_M = 'GDW'\n                AND COMT_F = 'Y'  \n                AND SUCC_F = 'Y'\n        )\n    GROUP BY \n        DT1.ACCT_I,\n        DT1.SRCE_SYST_C, \n        DT1.BALN_TYPE_C,\n        DT1.CALC_FUNC_C,\n        DT1.TIME_PERD_C,\n        DT1.ADJ_FROM_D,\n        BKDT_ADJ_FROM_D,\n        DT1.ADJ_TO_D,\n        DT1.EFFT_D,\n        DT1.Gl_RECN_F, \n        DT1.PROS_KEY_EFFT_I\n)\n\nSELECT \n    ACCT_I, \n    SRCE_SYST_C,\n    BALN_TYPE_C,\n    CALC_FUNC_C,\n    TIME_PERD_C,\n    ADJ_FROM_D,\n    BKDT_ADJ_FROM_D,\n    ADJ_TO_D,\n    ADJ_A,\n    EFFT_D,\n    Gl_RECN_F,\n    PROS_KEY_EFFT_I               \nFROM backdated_calculations\nWHERE\n    -- To exclude any adjustments that fall in the period where the GL is closed\n    BKDT_ADJ_FROM_D <= ADJ_TO_D",
  "metadata": {
    "models_used": [
      "claude-4-sonnet"
    ],
    "preferred_model": "claude-4-sonnet",
    "quality_score": 1.0,
    "dbt_features": [
      "config",
      "variables",
      "macros",
      "jinja_variables",
      "incremental",
      "pre_hooks",
      "post_hooks",
      "tags"
    ],
    "total_time_ms": 83722,
    "comparison_notes": [
      "Selected claude-4-sonnet as preferred model",
      "claude-4-sonnet: Quality=1.000, Features=8, Time=83043ms"
    ],
    "migration_notes": [
      "Converted Teradata YEAR(4) TO MONTH interval syntax to MONTHS_BETWEEN function",
      "Preserved complex CASE statement logic for backdated adjustment calculations",
      "Maintained original business day 4 calculation using QUALIFY and ROW_NUMBER",
      "Converted DELETE+INSERT pattern to truncate-load incremental strategy",
      "Preserved all original filtering conditions and business logic exactly as specified"
    ]
  },
  "warnings": [
    "Incremental materialization without is_incremental() check"
  ],
  "execution_time_ms": 83726
}