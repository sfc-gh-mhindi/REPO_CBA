# LLM Response
Interaction ID: 20250821_171122_467317a1
Success: True
Processing Time: 24600ms
Quality Score: None

# Response
```sql
{%- set process_name = 'ACCT_BALN_BKDT_ADJ_RULE' -%}
{%- set stream_name = 'ACCT_BALN_BKDT_ADJ_RULE_STREAM' -%}

{{
  config(
    materialized='ibrg_cld_table',
    incremental_strategy='truncate-load',
    database=var('target_database'),
    schema='DDSTG',
    tmp_database=var('dcf_database'),
    tmp_schema=var('dcf_schema'),
    tmp_relation_type='view',
    tags=['ACCT_BALN_BKDT_ADJ_RULE', 'core_transform', 'accounting'],
    pre_hook=[
        "{{ log_dcf_exec_msg('Process ACCT_BALN_BKDT_ADJ_RULE started') }}"
    ],
    post_hook=[
        "{{ log_dcf_exec_msg('Process ACCT_BALN_BKDT_ADJ_RULE ended') }}"
    ]
  )
}}

/*
    Model Documentation
    Purpose: Calculate the Backdated adjustment from ACCT BALN ADJ and apply it on ACCT BALN
    Business Logic: Key transformations include calculating backdated adjustments based on business day 4 logic
    Dependencies: {{ var('vtech_db') }}.{{ var('vtech_sch') }}.ACCT_BALN_ADJ, {{ var('vtech_db') }}.{{ var('vtech_sch') }}.GRD_RPRT_CALR_CLYR, {{ var('gdwref_db') }}.{{ var('gdwref_sch') }}.UTIL_PROS_ISAC
*/

WITH 
-- Calculate adjustments for the current record
ADJ AS (
    SELECT
        ACCT_I,
        SRCE_SYST_C,
        BALN_TYPE_C,
        CALC_FUNC_C,
        TIME_PERD_C,
        ADJ_FROM_D,
        -- Adjustments impacting the current record need to be loaded on the next day to avoid changing the open balances
        CASE 
            WHEN EFFT_D = ADJ_TO_D THEN EFFT_D + INTERVAL '1 day'
            ELSE EFFT_D
        END AS EFFT_D,
        ADJ_TO_D,
        ADJ_A,
        Gl_RECN_F,
        PROS_KEY_EFFT_I
    FROM 
        {{ var('vtech_db') }}.{{ var('vtech_sch') }}.ACCT_BALN_ADJ
    WHERE 
        SRCE_SYST_C = 'SAP'
        AND BALN_TYPE_C = 'BALN'
        AND CALC_FUNC_C = 'SPOT'
        AND TIME_PERD_C = 'E'
        -- Excluding the adjustments with $0 in value as this brings no change to the value in the ACCT BALN
        AND ADJ_A <> 0
        -- Capturing delta adjustments
        AND EFFT_D >= (
            SELECT 
                MAX(BTCH_RUN_D) 
            FROM 
                {{ var('gdwref_db') }}.{{ var('gdwref_sch') }}.UTIL_PROS_ISAC 
            WHERE 
                TRGT_M = 'ACCT_BALN_BKDT' 
                AND SRCE_M = 'GDW'
                AND COMT_F = 'Y' 
                AND SUCC_F = 'Y'
        )
),

-- Calculate business day 4 logic
BSDY_4 AS (
    SELECT 
        CALR_YEAR_N,
        CALR_MNTH_N,
        CALR_CALR_D
    FROM 
        {{ var('vtech_db') }}.{{ var('vtech_sch') }}.GRD_RPRT_CALR_CLYR
    WHERE 
        CALR_WEEK_DAY_N NOT IN (1, 7) 
        AND CALR_NON_WORK_DAY_F = 'N'
        AND CALR_CALR_D BETWEEN ADD_MONTHS(CURRENT_DATE, -13) AND ADD_MONTHS(CURRENT_DATE, 1)
    QUALIFY 
        ROW_NUMBER() OVER (PARTITION BY CALR_YEAR_N, CALR_MNTH_N ORDER BY CALR_CALR_D) = 4
),

-- Calculate backdated adjustments
BKDT_ADJ AS (
    SELECT 
        ADJ.ACCOUNT_I,
        ADJ.SRCE_SYST_C,
        ADJ.BALN_TYPE_C,
        ADJ.CALC_FUNC_C,
        ADJ.TIME_PERD_C,
        ADJ.ADJ_FROM_D,
        -- Backdated logic calculation
        CASE 
            WHEN (ADJ.EFFT_D - ADJ.ADJ_FROM_D) / INTERVAL '1 month' = 0 
                THEN ADJ.ADJ_FROM_D
            WHEN (ADJ.EFFT_D - ADJ.ADJ_FROM_D) / INTERVAL '1 month' = 1 
                AND ADJ.EFFT_D <= BSDY_4.CALR_CALR_D 
                THEN ADJ.ADJ_FROM_D
            WHEN (ADJ.EFFT_D - ADJ.ADJ_FROM_D) / INTERVAL '1 month' = 1 
                AND ADJ.EFFT_D > BSDY_4.CALR_CALR_D 
                THEN ADJ.EFFT_D - (EXTRACT(DAY FROM ADJ.EFFT_D) - 1)
            WHEN (ADJ.EFFT_D - ADJ.ADJ_FROM_D) / INTERVAL '1 month' > 1 
                AND ADJ.EFFT_D <= BSDY_4.CALR_CALR_D 
                THEN ADJ.EFFT_D - (EXTRACT(DAY FROM ADJ.EFFT_D) - 1) - INTERVAL '1 month'
            WHEN (ADJ.EFFT_D - ADJ.ADJ_FROM_D) / INTERVAL '1 month' > 1 
                AND ADJ.EFFT_D > BSDY_4.CALR_CALR_D 
                THEN ADJ.EFFT_D - (EXTRACT(DAY FROM ADJ.EFFT_D) - 1)
        END AS BKDT_ADJ_FROM_D,
        ADJ.ADJ_TO_D,
        SUM(ADJ.ADJ_A) AS ADJ_A,
        ADJ.EFFT_D,
        ADJ.Gl_RECN_F,
        ADJ.PROS_KEY_EFFT_I
    FROM 
        ADJ
    INNER JOIN 
        BSDY_4 
        ON EXTRACT(YEAR FROM ADJ.EFFT_D) = EXTRACT(YEAR FROM BSDY_4.CALR_CALR_D)
        AND EXTRACT(MONTH FROM ADJ.EFFT_D) = EXTRACT(MONTH FROM BSDY_4.CALR_CALR_D)
    WHERE 
        -- Including the adjustments that are excluded in the previous run for open record
        ADJ.EFFT_D <= (
            SELECT 
                MAX(BTCH_RUN_D) 
            FROM 
                {{ var('gdwref_db') }}.{{ var('gdwref_sch') }}.UTIL_PROS_ISAC 
            WHERE 
                TRGT_M = 'ACCT_BALN_ADJ' 
                AND SRCE_M = 'SAP'
                AND COMT_F = 'Y' 
                AND SUCC_F = 'Y'
        )
        -- To avoid any records that are processed in the previous runs
        AND ADJ.EFFT_D > (
            SELECT 
                MAX(BTCH_RUN_D) 
            FROM 
                {{ var('gdwref_db') }}.{{ var('gdwref_sch') }}.UTIL_PROS_ISAC 
            WHERE 
                TRGT_M = 'ACCT_BALN_BKDT' 
                AND SRCE_M = 'GDW'
                AND COMT_F = 'Y' 
                AND SUCC_F = 'Y'
        )
        -- To exclude any adjustments that fall in the period where the GL is closed
        AND BKDT_ADJ_FROM_D <= ADJ.ADJ_TO_D
    GROUP BY 
        ADJ.ACCOUNT_I,
        ADJ.SRCE_SYST_C,
        ADJ.BALN_TYPE_C,
        ADJ.CALC_FUNC_C,
        ADJ.TIME_PERD_C,
        ADJ.ADJ_FROM_D,
        BKDT_ADJ_FROM_D,
        ADJ.ADJ_TO_D,
        ADJ.EFFT_D,
        ADJ.Gl_RECN_F,
        ADJ.PROS_KEY_EFFT_I
)

SELECT 
    ACCOUNT_I,
    SRCE_SYST_C,
    BALN_TYPE_C,
    CALC_FUNC_C,
    TIME_PERD_C,
    ADJ_FROM_D,
    BKDT_ADJ_FROM_D,
    ADJ_TO_D,
    ADJ_A,
    EFFT_D,
    Gl_RECN_F,
    PROS_KEY_EFFT_I
FROM 
    BKDT_ADJ
```