-- =====================================================================
-- DBT Model: BTEQ_TAX_INSS_MNLY_LOAD
-- Converted from BTEQ: BTEQ_TAX_INSS_MNLY_LOAD.sql
-- Category: data_loading
-- Original Size: 8.2KB, 320 lines
-- Complexity Score: 123
-- Generated: 2025-08-21 13:45:01
-- =====================================================================

{{ intermediate_model_config() }}



------------------------------------------------------------------------------
-- Object Name             :  BTEQ_TAX_INSS_MNLY_LOAD.sql
-- Object Type             :  BTEQ                
-- Description             :  To load the missing accounts MONTHLY frequency
------------------------------------------------------------------------------

CREATE MULTISET VOLATILE TABLE ACCT_MSTR1 
 AS
(SELECT 
ACCT
,BUSN_PTNR_NUMB
,SRCE_SYST_ISAC_CODE
,RSDT_STUS
,USER_IN_CYT_CALC
,LAST_UPDT_ON
,CYT_DOCU_QOTE
,VALD_FROM
,VALD_TO
,LOAD_S
FROM {{ bteq_var("VCBODS") }}.ACCT_MSTR_CYT_DATA WHERE LOAD_S BETWEEN (
                SELECT  FNYR_RPRT_TMPD_STRT_D FROM (
				SELECT  CASE WHEN EXTRACT(MONTH FROM FNCL_CALR_D)='7' 
    THEN CAST(CONCAT(EXTRACT(YEAR FROM FNCL_CALR_D)-1, '-06-30')AS DATE) 
    ELSE FNYR_RPRT_TMPD_STRT_D-1 END AS FNYR_RPRT_TMPD_STRT_D
	FROM {{ bteq_var("VTECH") }}.GRD_RPRT_CALR_FNYR WHERE FNCL_CALR_D=CURRENT_DATE )A)    
                AND
				(SELECT FNYR_RPRT_TMPD_END_D FROM (
	SELECT DATEADD(MONTH, 0, FNCL_CALR_D - EXTRACT(DAY FROM FNCL_CALR_D))+1 FNYR_RPRT_TMPD_END_D
   FROM {{ bteq_var("VTECH") }}.GRD_RPRT_CALR_FNYR WHERE FNCL_CALR_D=CURRENT_DATE)A)
)
WITH DATA PRIMARY INDEX(ACCT)
ON COMMIT PRESERVE ROWS;


CREATE MULTISET VOLATILE TABLE LOAD_MISSING_ACCTS1  
 AS
( 
SELECT
SRC.ACCT_I
,SRC.PATY_I
,TGT.SRCE_SYST_C
,SRC.RESI_STUS_C
,SRC.IDNN_TYPE_C
,SRC.IDNN_STUS_C
,SRC.RSDT_STUS
,SRC.USER_IN_CYT_CALC
,SRC.CYT_DOCU_QOTE
,SRC.VALD_TO_CYT
,SRC.VALD_TO
,SRC.LAST_UPDT_ON
,SRC.ACCT_STUS
,SRC.VALD_FROM
,SRC.RUN_STRM_PROS_D AS SRC_EFFT_D
,TGT.EFFT_D AS TGT_EFFT_D
,CASE WHEN TGT.ACCT_I IS NULL AND TGT.PATY_I IS NULL
--AND LIND='Y'
THEN 'I'
WHEN SRC.ACCT_I=TGT.ACCT_I AND SRC.PATY_I=TGT.PATY_I AND ( SRC.RESI_STUS_C<>TGT.RESI_STUS_C OR SRC.IDNN_TYPE_C<>TGT.IDNN_TYPE_C OR SRC.IDNN_STUS_C<>TGT.IDNN_STUS_C ) THEN 'U'
WHEN SRC.ACCT_I=TGT.ACCT_I AND SRC.PATY_I=TGT.PATY_I
AND ( SRC.VALD_TO_CYT<>'9999-12-31' OR SRC.VALD_TO<>'9999-12-31' OR SRC.ACCT_STUS='50' )
THEN 'D'
ELSE 'C'
END AS IND
FROM (
SELECT
ACCT_I
,PATY_I
,RSDT_STUS
,USER_IN_CYT_CALC
,CYT_DOCU_QOTE
,CASE WHEN RESI_STUS IS NULL THEN '9999' ELSE RESI_STUS_C END AS RESI_STUS_C
,CASE WHEN SAP_IDNN_TYPE_C IS NULL THEN '9999' ELSE IDNN_TYPE_C END AS IDNN_TYPE_C
,CASE WHEN SAP_IDNN_STUS_C IS NULL THEN '9999' ELSE IDNN_STUS_C END AS IDNN_STUS_C
,AMCD.VALD_TO AS VALD_TO_CYT
,BP.VALD_TO
,LAST_UPDT_ON
,ACCT_STUS
,AMD.VALD_FROM
,UTIL.RUN_STRM_PROS_D
--,CASE WHEN AMCD.LOAD_S>=UTIL.EXT_FROM_S THEN 'Y' ELSE 'N' END AS LIND
FROM
(SELECT * FROM ACCT_MSTR1) AMCD 
INNER JOIN
{{ bteq_var("VCBODS") }}.ACCT_MSTR_DATA_GENL AMD
ON AMD.ACCT = AMCD.ACCT
AND AMD.SRCE_SYST_ISAC_CODE = AMCD.SRCE_SYST_ISAC_CODE
INNER JOIN
(
SELECT
PATY_I
,BP.BUSN_PTNR_NUMB
,BP.SRCE_SYST_ISAC_CODE
,BP.LOAD_S
,PI.LOAD_S AS LOAD_S_PI
,COALESCE (PI.VALD_TO,DATE '9999-12-31') AS VALD_TO
FROM
(SELECT * FROM {{ bteq_var("VCBODS") }}.BUSN_PTNR
WHERE IS_CURR_IND = 1) BP
LEFT OUTER JOIN
{{ bteq_var("VCBODS") }}.PTNR_IDNN_NUMB PI
ON BP.BUSN_PTNR_NUMB = PI.BUSN_PTNR_NUMB
AND BP.SRCE_SYST_ISAC_CODE = PI.SRCE_SYST_ISAC_CODE
AND PTNR_ID_TYPE = 'ZCIF00'

QUALIFY ROW_NUMBER() OVER(PARTITION BY BP.BUSN_PTNR_NUMB,BP.SRCE_SYST_ISAC_CODE ORDER BY PI.LOAD_S DESC,PI.VALD_TO DESC)=1

)BP
ON BP.BUSN_PTNR_NUMB = AMCD.BUSN_PTNR_NUMB
AND BP.SRCE_SYST_ISAC_CODE = AMCD.SRCE_SYST_ISAC_CODE

INNER JOIN
(
SELECT RUN_STRM_PROS_D, SRCE_SYST_ISAC, EXT_FROM_S, EXT_TO_S FROM {{ bteq_var("UTILSTG") }}.CBM_UTIL_RUN_STRM_OCCR_CNTL_H WHERE RUN_STRM_C='SAP00' AND SRCE_SYST_ISAC='E001'
--AND RUN_STRM_PROS_D ='2016-05-17'
) UTIL
ON UTIL.SRCE_SYST_ISAC = AMCD.SRCE_SYST_ISAC_CODE
LEFT OUTER JOIN
{{ bteq_var("VTECH") }}.MAP_SAP_RESI_STUS AS MSRS
ON MSRS.RESI_STUS=AMCD.RSDT_STUS AND RUN_STRM_PROS_D BETWEEN MSRS.EFFT_D AND MSRS.EXPY_D
LEFT OUTER JOIN
{{ bteq_var("VTECH") }}.MAP_SAP_IDNN_TYPE AS MSIT
ON MSIT.SAP_IDNN_TYPE_C=AMCD.USER_IN_CYT_CALC AND RUN_STRM_PROS_D BETWEEN MSIT.EFFT_D AND MSIT.EXPY_D
LEFT OUTER JOIN
{{ bteq_var("VTECH") }}.MAP_SAP_IDNN_STUS AS MSIS
ON MSIS.SAP_IDNN_STUS_C=AMCD.CYT_DOCU_QOTE AND RUN_STRM_PROS_D BETWEEN MSIS.EFFT_D AND MSIS.EXPY_D

WHERE
AMD.LOAD_S <= UTIL.EXT_TO_S AND COALESCE(AMD.UPD_LOAD_S,TIMESTAMP '9999-12-31 00:00:00.000000') > UTIL.EXT_TO_S
AND
AMCD.LOAD_S <= UTIL.EXT_TO_S
AND
COALESCE(AMD.PDCT,'') NOT IN
( SELECT PDCT FROM {{ bteq_var("VTECH") }}.MAP_SAP_INVL_PDCT
WHERE PDCT_C = 'INVL' AND UTIL.RUN_STRM_PROS_D BETWEEN EFFT_D AND EXPY_D )
AND
(
( AMCD.LOAD_S >= UTIL.EXT_FROM_S )
OR
( AMD.LOAD_S >= UTIL.EXT_FROM_S )
OR
(BP.VALD_TO <> '9999-12-31' AND BP.LOAD_S_PI >= UTIL.EXT_FROM_S)
)

QUALIFY ROW_NUMBER() OVER(PARTITION BY AMCD.ACCT, AMCD.BUSN_PTNR_NUMB, AMCD.SRCE_SYST_ISAC_CODE ORDER BY AMCD.VALD_FROM DESC, AMCD.LOAD_S DESC)=1
) AS SRC

LEFT OUTER JOIN
( SELECT * FROM {{ bteq_var("VTECH") }}.ACCT_PATY_TAX_INSS
WHERE SRCE_SYST_C='SAP' AND ACCT_I LIKE 'SAP%'
QUALIFY ROW_NUMBER() OVER(PARTITION BY ACCT_I,PATY_I,SRCE_SYST_C ORDER BY EFFT_D DESC,EXPY_D DESC )=1
) TGT
ON SRC.ACCT_I=TGT.ACCT_I AND SRC.PATY_I=TGT.PATY_I AND TGT.SRCE_SYST_C='SAP'
WHERE IND='I' )
WITH DATA PRIMARY INDEX(ACCT_I,PATY_I)
ON COMMIT PRESERVE ROWS;


WITH UTIL_PROS_SAP_RUN AS (
    
SELECT TO_CHAR(CAST(COALESCE(TOP_KEY_I,'0') +1 AS DECIMAL(15))) AS PROS_KEY_EFFT_I FROM (
SELECT MAX(PROS_KEY_I) AS TOP_KEY_I FROM  {{ bteq_var("VTECH") }}.UTIL_PROS_ISAC WHERE CONV_M='C5647678' AND TRGT_M='ACCT_PATY_TAX_INSS')
A
),


CREATE MULTISET VOLATILE TABLE ACCT_PATY_INSS_FIX
AS
(
SELECT 
ACCT_I
,PATY_I
,SRCE_SYST_C
,RESI_STUS_C
,IDNN_TYPE_C
,IDNN_STUS_C
,RSDT_STUS
,USER_IN_CYT_CALC
,CYT_DOCU_QOTE
,VALD_TO_CYT
,VALD_TO
,LAST_UPDT_ON
,ACCT_STUS
,VALD_FROM
,SRC_EFFT_D AS EFFT_D
,TGT_EFFT_D AS EXPY_D
,IND
 FROM LOAD_MISSING_ACCTS1 )
WITH DATA PRIMARY INDEX(ACCT_I,PATY_I)
ON COMMIT PRESERVE ROWS;
 
 
 SELECT COUNT(*) FROM LOAD_MISSING_ACCTS1;
 
 
UPDATE ACCT_PATY_INSS_FIX  SET EXPY_D='9999-12-31' WHERE EXPY_D IS NULL;


-- Original INSERT converted to SELECT for DBT intermediate model
SELECT 
 ACCT_I
,PATY_I
,COALESCE(SRCE_SYST_C,SUBSTR(PATY_I,1,3))
,RESI_STUS_C
,IDNN_TYPE_C
,IDNN_STUS_C
,EFFT_D
,EXPY_D
,(SELECT PROS_KEY_EFFT_I FROM UTIL_PROS_SAP_RUN) as PROS_KEY_EFFT_I
,(SELECT PROS_KEY_EFFT_I FROM UTIL_PROS_SAP_RUN) as PROS_KEY_EXPY_I
,'0' AS ROW_SECU_ACCS_C
 FROM  ACCT_PATY_INSS_FIX;

 
COLLECT STATS ON {{ bteq_var("STARDATADB") }}.ACCT_PATY_TAX_INSS;



INSERT INTO {{ bteq_var("STARDATADB") }}.UTIL_PROS_ISAC
SELECT
PROS_KEY_EFFT_I AS PROS_KEY_I
,'C5647678' AS CONV_M
,'MNL' AS CONV_TYPE_M
,CURRENT_TIMESTAMP(0) AS PROS_RQST_S
,CURRENT_TIMESTAMP(0) AS PROS_LAST_RQST_S
,NULL AS PROS_RQST_Q
,CURRENT_DATE AS BTCH_RUN_D
,PROS_KEY_EFFT_I AS BTCH_KEY_I
,'SAP' AS SRCE_SYST_M
,'Data Remediation - Manual' AS SRCE_M
,'ACCT_PATY_TAX_INSS' AS TRGT_M
,'Y' AS SUCC_F
,'Y' AS COMT_F
,CURRENT_TIMESTAMP(0) AS COMT_S
,NULL AS MLTI_LOAD_EFFT_D
,NULL AS SYST_S
,NULL AS MLTI_LOAD_COMT_S
,NULL AS SYST_ET_Q
,NULL AS SYST_UV_Q
,(SELECT COUNT(*) FROM LOAD_MISSING_ACCTS1 ) AS SYST_INS_Q
,NULL AS SYST_UPD_Q
,NULL AS SYST_DEL_Q
,NULL AS SYST_ET_TABL_M
,NULL AS SYST_UV_TABL_M
,NULL AS SYST_HEAD_ET_TABL_M
,NULL AS SYST_HEAD_UV_TABL_M
,NULL AS SYST_TRLR_ET_TABL_M
,NULL AS SYST_TRLR_UV_TABL_M
,NULL AS PREV_PROS_KEY_I
,NULL AS HEAD_RECD_TYPE_C
,NULL AS HEAD_FILE_M
,NULL AS HEAD_BTCH_RUN_D
,NULL AS HEAD_FILE_CRAT_S
,NULL AS HEAD_GENR_PRGM_M
,NULL AS HEAD_BTCH_KEY_I
,NULL AS HEAD_PROS_KEY_I
,NULL AS HEAD_PROS_PREV_KEY_I
,NULL AS TRLR_RECD_TYPE_C
,NULL AS TRLR_RECD_Q
,NULL AS TRLR_HASH_TOTL_A
,NULL AS TRLR_COLM_HASH_TOTL_M
,NULL AS TRLR_EROR_RECD_Q
,NULL AS TRLR_FILE_COMT_S
,NULL AS TRLR_RECD_ISRT_Q
,NULL AS TRLR_RECD_UPDT_Q
,NULL AS TRLR_RECD_DELT_Q
FROM
 UTIL_PROS_SAP_RUN;


COLLECT STATS ON {{ bteq_var("STARDATADB") }}.UTIL_PROS_ISAC;

DROP TABLE ACCT_MSTR1;

DROP TABLE LOAD_MISSING_ACCTS1;

DROP TABLE ACCT_PATY_INSS_FIX;

DROP TABLE UTIL_PROS_SAP_RUN;



