// https://medium.com/snowflake/viewing-data-as-the-visiting-user-in-streamlit-in-snowflake-07eee0d6a5a3

//Step 1: Setup role for streamlit app owner and streamlit user and assign relavant permissions. Grant Read Session Permission on account to streamlit app owner
USE ROLE SECURITYADMIN;
SET cur_user = CURRENT_USER();

-- cicd & human user role
CREATE ROLE IF NOT EXISTS R_DEP_PRD_DMN;
CREATE ROLE IF NOT EXISTS R_BAT_PRD_DMN;
CREATE ROLE IF NOT EXISTS R_USR_DMN_PRD_CFD;
CREATE ROLE IF NOT EXISTS R_USR_DMN_PRD_CUS;
CREATE ROLE IF NOT EXISTS R_USR_DMN_PRD_HIP;

-- DAC read & read write role
CREATE ROLE IF NOT EXISTS R_DAC_DMN_PRD_RO;
CREATE ROLE IF NOT EXISTS R_DAC_DMN_PRD_RW;

--create column level security roles
CREATE ROLE IF NOT EXISTS R_CLS_DMN_PRD_CFD;
CREATE ROLE IF NOT EXISTS R_CLS_DMN_PRD_CUS;
CREATE ROLE IF NOT EXISTS R_CLS_DMN_PRD_HIP;

--create row level security roles
CREATE ROLE IF NOT EXISTS R_USR_RLS_REGION_1;
CREATE ROLE IF NOT EXISTS R_USR_RLS_REGION_2;
CREATE ROLE IF NOT EXISTS R_USR_RLS_REGION_3;
CREATE ROLE IF NOT EXISTS R_USR_RLS_REGION_9;

-- CREATE ROLE HIERARCHY FOR DAC AND CLS
GRANT ROLE R_DAC_DMN_PRD_RO TO ROLE R_DAC_DMN_PRD_RW;
GRANT ROLE R_CLS_DMN_PRD_CFD TO ROLE R_CLS_DMN_PRD_CUS;
GRANT ROLE R_CLS_DMN_PRD_CUS TO ROLE R_CLS_DMN_PRD_HIP;

GRANT ROLE R_DAC_DMN_PRD_RO TO ROLE R_USR_DMN_PRD_CFD;
GRANT ROLE R_CLS_DMN_PRD_CFD TO ROLE R_USR_DMN_PRD_CFD;

GRANT ROLE R_DAC_DMN_PRD_RO TO ROLE R_USR_DMN_PRD_CUS;
GRANT ROLE R_CLS_DMN_PRD_CUS TO ROLE R_USR_DMN_PRD_CUS;

GRANT ROLE R_DAC_DMN_PRD_RO TO ROLE R_USR_DMN_PRD_HIP;
GRANT ROLE R_CLS_DMN_PRD_HIP TO ROLE R_USR_DMN_PRD_HIP;

GRANT ROLE R_DAC_DMN_PRD_RW TO ROLE R_DEP_PRD_DMN;
GRANT ROLE R_CLS_DMN_PRD_HIP TO ROLE R_DEP_PRD_DMN;

-- GRANT ROLE TO USERS
GRANT ROLE R_DEP_PRD_DMN TO USER IDENTIFIER($cur_user);

CREATE USER IF NOT EXISTS APP_DEP_CICD PASSWORD='Abc123' DEFAULT_ROLE = R_DEP_PRD_DMN DEFAULT_SECONDARY_ROLES = ('ALL') MUST_CHANGE_PASSWORD = TRUE;
CREATE USER IF NOT EXISTS APP_USER_CFD PASSWORD='Abc123' DEFAULT_ROLE = R_USR_DMN_PRD_CFD DEFAULT_SECONDARY_ROLES = ('ALL') MUST_CHANGE_PASSWORD = TRUE;
CREATE USER IF NOT EXISTS APP_USER_CUS PASSWORD='Abc123' DEFAULT_ROLE = R_USR_DMN_PRD_CUS DEFAULT_SECONDARY_ROLES = ('ALL') MUST_CHANGE_PASSWORD = TRUE;

GRANT ROLE R_USR_DMN_PRD_CUS TO USER APP_USER_CUS;
GRANT ROLE R_USR_DMN_PRD_CFD TO USER APP_USER_CFD;
GRANT ROLE R_DEP_PRD_DMN TO USER APP_DEP_CICD;

-- GRANT ROLE FOR RLS TO USERS
GRANT ROLE R_USR_RLS_REGION_1 TO USER APP_USER_CFD;

GRANT ROLE R_USR_RLS_REGION_1 TO USER APP_USER_CUS;
GRANT ROLE R_USR_RLS_REGION_2 TO USER APP_USER_CUS;
GRANT ROLE R_USR_RLS_REGION_3 TO USER APP_USER_CUS;

GRANT ROLE R_USR_RLS_REGION_1 TO USER APP_DEP_CICD;
GRANT ROLE R_USR_RLS_REGION_2 TO USER APP_DEP_CICD;
GRANT ROLE R_USR_RLS_REGION_3 TO USER APP_DEP_CICD;
GRANT ROLE R_USR_RLS_REGION_9 TO USER APP_DEP_CICD;

USE ROLE SYSADMIN;
CREATE OR REPLACE DATABASE RBAC_DEMO;
CREATE OR REPLACE SCHEMA RBAC_DEMO.TAGS WITH MANAGED ACCESS;
CREATE OR REPLACE SCHEMA RBAC_DEMO.POLICIES WITH MANAGED ACCESS;

USE SCHEMA RBAC_DEMO.TAGS;
CREATE OR REPLACE TAG CLASSIFICATION ALLOWED_VALUES "CUS","HIP","UCL";
CREATE OR REPLACE TAG SERVICE_DOMAIN;
CREATE OR REPLACE TAG SUB_SERVICE_DOMAIN;

USE SCHEMA RBAC_DEMO.POLICIES;
CREATE OR REPLACE ROW ACCESS POLICY RAC_RLS AS (REGION_ID INTEGER) RETURNS BOOLEAN ->
    EXISTS ( /* show everything for CICD, Batch Roles */
        select value as RoleName
        from table(flatten(input => parse_json(current_available_roles())))
        where regexp_like(value, '(R_DEP_.*)|(R_BAT_.*)')
    )
    or REGION_ID = 0 
    or EXISTS (
        select value as RoleName
        from table(flatten(input => parse_json(current_available_roles())))
        where cast(regexp_substr(value, 'R_USR_RLS_REGION_([0-9]+)',1,1,'ie',1) as integer) = REGION_ID
    );

CREATE OR REPLACE MASKING POLICY MSK_CLS_VARCHAR AS (val varchar) returns varchar ->
    case 
        when exists ( /* show everything for DEP, Batch Roles */
                select value as RoleName
                from table(flatten(input => parse_json(current_available_roles())))
                where regexp_like(value,'(R_DEP_.*)|(R_BAT_.*)')
        ) then val
        when system$get_tag_on_current_column('TAGS.CLASSIFICATION') IN ('UCL')
        THEN '****MASKED****'
        WHEN exists(
            select ROLE_N
            FROM(select UPPER(TO_VARCHAR(COALESCE(('R_CLS_' || SYSTEM$GET_TAG_ON_CURRENT_TABLE('TAGS.SERVICE_DOMAIN') || '_' || SYSTEM$GET_TAG_ON_CURRENT_TABLE('TAGS.SUB_SERVICE_DOMAIN') || '_CUS'),''))) AS ROLE_N)
            where is_role_in_session(ROLE_N)
        ) and system$get_tag_on_current_column('TAGS.CLASSIFICATION') IN ('CUS') THEN val
        WHEN exists(
            select ROLE_N
            FROM(select UPPER(TO_VARCHAR(COALESCE(('R_CLS_' || SYSTEM$GET_TAG_ON_CURRENT_TABLE('TAGS.SERVICE_DOMAIN') || '_' || SYSTEM$GET_TAG_ON_CURRENT_TABLE('TAGS.SUB_SERVICE_DOMAIN') || '_HIP'),''))) AS ROLE_N)
            where is_role_in_session(ROLE_N)
        ) and system$get_tag_on_current_column('TAGS.CLASSIFICATION') IN ('CUS','HIP') THEN val
        ELSE '****MASKED****'
    end;

ALTER TAG RBAC_DEMO.TAGS.CLASSIFICATION SET MASKING POLICY MSK_CLS_VARCHAR;


CREATE OR REPLACE DATABASE SIS_RCR_DEMO_DB;
CREATE OR REPLACE SCHEMA SIS_RCR_DEMO_DB.LCL WITH MANAGED ACCESS;

GRANT USAGE ON DATABASE SIS_RCR_DEMO_DB TO ROLE R_DAC_DMN_PRD_RO;
GRANT USAGE ON SCHEMA SIS_RCR_DEMO_DB.LCL TO ROLE R_DAC_DMN_PRD_RO;
GRANT USAGE ON WAREHOUSE WH_AA_XS TO ROLE R_DAC_DMN_PRD_RO;
GRANT SELECT ON ALL TABLES IN SCHEMA SIS_RCR_DEMO_DB.LCL TO ROLE R_DAC_DMN_PRD_RO;
GRANT READ ON ALL STAGES IN SCHEMA SIS_RCR_DEMO_DB.LCL TO ROLE R_DAC_DMN_PRD_RO;

GRANT ALL ON SCHEMA SIS_RCR_DEMO_DB.LCL TO ROLE R_DAC_DMN_PRD_RW;
GRANT USAGE ON DATABASE RBAC_DEMO TO ROLE R_DAC_DMN_PRD_RW;
GRANT USAGE ON SCHEMA RBAC_DEMO.TAGS TO ROLE R_DAC_DMN_PRD_RW;
GRANT USAGE ON SCHEMA RBAC_DEMO.POLICIES TO ROLE R_DAC_DMN_PRD_RW;
GRANT APPLY ON TAG RBAC_DEMO.TAGS.CLASSIFICATION TO ROLE R_DAC_DMN_PRD_RW;
GRANT APPLY ON TAG RBAC_DEMO.TAGS.SERVICE_DOMAIN TO ROLE R_DAC_DMN_PRD_RW;
GRANT APPLY ON TAG RBAC_DEMO.TAGS.SUB_SERVICE_DOMAIN TO ROLE R_DAC_DMN_PRD_RW;
GRANT APPLY ON ROW ACCESS POLICY RBAC_DEMO.POLICIES.RAC_RLS TO ROLE R_DAC_DMN_PRD_RW;
GRANT WRITE ON ALL STAGES IN SCHEMA SIS_RCR_DEMO_DB.LCL TO ROLE R_DAC_DMN_PRD_RW;

GRANT USAGE ON STREAMLIT CALLER_RIGHTS_CTX_ANST TO ROLE R_DAC_DMN_PRD_RO;

USE ROLE ACCOUNTADMIN;
-- Give Manage Caller Grants privilege on ACCOUNT to SYSADMIN (requires ACCOUNTADMIN to do it)
GRANT MANAGE CALLER GRANTS ON ACCOUNT TO ROLE SYSADMIN;

-- If you want to run the streamlit app using Execute as Caller Rights, then give explicit grants on objects used in streamlit app to streamlit owner role i.e. R_DEP_PRD_DMN via the role having manage caller grants i.e. SYSADMIN in our case,
USE ROLE SYSADMIN;
GRANT CALLER USAGE ON WAREHOUSE WH_AA_XS TO ROLE R_DEP_PRD_DMN;
GRANT CALLER USAGE ON DATABASE SIS_RCR_DEMO_DB TO ROLE R_DEP_PRD_DMN;
GRANT CALLER USAGE ON SCHEMA SIS_RCR_DEMO_DB.LCL TO ROLE R_DEP_PRD_DMN;
GRANT CALLER SELECT ON TABLE SIS_RCR_DEMO_DB.LCL.APP_DATA TO ROLE R_DEP_PRD_DMN;
GRANT CALLER READ ON STAGE SIS_RCR_DEMO_DB.LCL.ISTG_SLIT_APP_CODE TO ROLE R_DEP_PRD_DMN;
GRANT CALLER USAGE ON DATABASE SNOWFLAKE TO ROLE R_DEP_PRD_DMN;
GRANT INHERITED CALLER USAGE ON ALL SCHEMAS IN DATABASE SNOWFLAKE TO ROLE R_DEP_PRD_DMN;
GRANT INHERITED CALLER USAGE ON ALL FUNCTIONS IN DATABASE SNOWFLAKE TO ROLE R_DEP_PRD_DMN;


SHOW CALLER GRANTS TO ROLE R_DEP_PRD_DMN;



